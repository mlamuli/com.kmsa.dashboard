{
  "_entries": [
    {
      "name": "pdf-lib",
      "path": "C:\\Users\\Asus\\OneDrive\\Developments\\kmsa\\com.kmsa.dashboard\\node_modules\\pdf-lib\\es\\index.js",
      "lastModified": 1729446681110,
      "type": "module",
      "code": "sap.ui.define(['exports', 'com/kmsa/dashboard/resources/_commonjsHelpers'], (function (exports, _commonjsHelpers) { 'use strict';\n\n    var tslib = {exports: {}};\n\n    (function (module) {\n      var __extends;\n      var __assign;\n      var __rest;\n      var __decorate;\n      var __param;\n      var __esDecorate;\n      var __runInitializers;\n      var __propKey;\n      var __setFunctionName;\n      var __metadata;\n      var __awaiter;\n      var __generator;\n      var __exportStar;\n      var __values;\n      var __read;\n      var __spread;\n      var __spreadArrays;\n      var __spreadArray;\n      var __await;\n      var __asyncGenerator;\n      var __asyncDelegator;\n      var __asyncValues;\n      var __makeTemplateObject;\n      var __importStar;\n      var __importDefault;\n      var __classPrivateFieldGet;\n      var __classPrivateFieldSet;\n      var __classPrivateFieldIn;\n      var __createBinding;\n      var __addDisposableResource;\n      var __disposeResources;\n      (function (factory) {\n        var root = typeof _commonjsHelpers.commonjsGlobal === \"object\" ? _commonjsHelpers.commonjsGlobal : typeof self === \"object\" ? self : typeof this === \"object\" ? this : {};\n        {\n          factory(createExporter(root, createExporter(module.exports)));\n        }\n        function createExporter(exports, previous) {\n          if (exports !== root) {\n            if (typeof Object.create === \"function\") {\n              Object.defineProperty(exports, \"__esModule\", {\n                value: true\n              });\n            } else {\n              exports.__esModule = true;\n            }\n          }\n          return function (id, v) {\n            return exports[id] = previous ? previous(id, v) : v;\n          };\n        }\n      })(function (exporter) {\n        var extendStatics = Object.setPrototypeOf || ({\n          __proto__: []\n        }) instanceof Array && (function (d, b) {\n          d.__proto__ = b;\n        }) || (function (d, b) {\n          for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n        });\n        __extends = function (d, b) {\n          if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n          extendStatics(d, b);\n          function __() {\n            this.constructor = d;\n          }\n          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n        };\n        __assign = Object.assign || (function (t) {\n          for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n          }\n          return t;\n        });\n        __rest = function (s, e) {\n          var t = {};\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n          if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n          }\n          return t;\n        };\n        __decorate = function (decorators, target, key, desc) {\n          var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n          if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc); else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n          return (c > 3 && r && Object.defineProperty(target, key, r), r);\n        };\n        __param = function (paramIndex, decorator) {\n          return function (target, key) {\n            decorator(target, key, paramIndex);\n          };\n        };\n        __esDecorate = function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n          function accept(f) {\n            if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\");\n            return f;\n          }\n          var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n          var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n          var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n          var _, done = false;\n          for (var i = decorators.length - 1; i >= 0; i--) {\n            var context = {};\n            for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n            for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n            context.addInitializer = function (f) {\n              if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\");\n              extraInitializers.push(accept(f || null));\n            };\n            var result = (0, decorators[i])(kind === \"accessor\" ? {\n              get: descriptor.get,\n              set: descriptor.set\n            } : descriptor[key], context);\n            if (kind === \"accessor\") {\n              if (result === void 0) continue;\n              if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n              if (_ = accept(result.get)) descriptor.get = _;\n              if (_ = accept(result.set)) descriptor.set = _;\n              if (_ = accept(result.init)) initializers.unshift(_);\n            } else if (_ = accept(result)) {\n              if (kind === \"field\") initializers.unshift(_); else descriptor[key] = _;\n            }\n          }\n          if (target) Object.defineProperty(target, contextIn.name, descriptor);\n          done = true;\n        };\n        __runInitializers = function (thisArg, initializers, value) {\n          var useValue = arguments.length > 2;\n          for (var i = 0; i < initializers.length; i++) {\n            value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n          }\n          return useValue ? value : void 0;\n        };\n        __propKey = function (x) {\n          return typeof x === \"symbol\" ? x : (\"\").concat(x);\n        };\n        __setFunctionName = function (f, name, prefix) {\n          if (typeof name === \"symbol\") name = name.description ? (\"[\").concat(name.description, \"]\") : \"\";\n          return Object.defineProperty(f, \"name\", {\n            configurable: true,\n            value: prefix ? (\"\").concat(prefix, \" \", name) : name\n          });\n        };\n        __metadata = function (metadataKey, metadataValue) {\n          if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n        };\n        __awaiter = function (thisArg, _arguments, P, generator) {\n          function adopt(value) {\n            return value instanceof P ? value : new P(function (resolve) {\n              resolve(value);\n            });\n          }\n          return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) {\n              try {\n                step(generator.next(value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n            function rejected(value) {\n              try {\n                step(generator[\"throw\"](value));\n              } catch (e) {\n                reject(e);\n              }\n            }\n            function step(result) {\n              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n            }\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n          });\n        };\n        __generator = function (thisArg, body) {\n          var _ = {\n            label: 0,\n            sent: function () {\n              if (t[0] & 1) throw t[1];\n              return t[1];\n            },\n            trys: [],\n            ops: []\n          }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n          return (g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n            return this;\n          }), g);\n          function verb(n) {\n            return function (v) {\n              return step([n, v]);\n            };\n          }\n          function step(op) {\n            if (f) throw new TypeError(\"Generator is already executing.\");\n            while ((g && (g = 0, op[0] && (_ = 0)), _)) try {\n              if ((f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)) return t;\n              if ((y = 0, t)) op = [op[0] & 2, t.value];\n              switch (op[0]) {\n                case 0:\n                case 1:\n                  t = op;\n                  break;\n                case 4:\n                  _.label++;\n                  return {\n                    value: op[1],\n                    done: false\n                  };\n                case 5:\n                  _.label++;\n                  y = op[1];\n                  op = [0];\n                  continue;\n                case 7:\n                  op = _.ops.pop();\n                  _.trys.pop();\n                  continue;\n                default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                    _ = 0;\n                    continue;\n                  }\n                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n                    _.label = op[1];\n                    break;\n                  }\n                  if (op[0] === 6 && _.label < t[1]) {\n                    _.label = t[1];\n                    t = op;\n                    break;\n                  }\n                  if (t && _.label < t[2]) {\n                    _.label = t[2];\n                    _.ops.push(op);\n                    break;\n                  }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop();\n                  continue;\n              }\n              op = body.call(thisArg, _);\n            } catch (e) {\n              op = [6, e];\n              y = 0;\n            } finally {\n              f = t = 0;\n            }\n            if (op[0] & 5) throw op[1];\n            return {\n              value: op[0] ? op[1] : void 0,\n              done: true\n            };\n          }\n        };\n        __exportStar = function (m, o) {\n          for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n        };\n        __createBinding = Object.create ? function (o, m, k, k2) {\n          if (k2 === undefined) k2 = k;\n          var desc = Object.getOwnPropertyDescriptor(m, k);\n          if (!desc || ((\"get\" in desc) ? !m.__esModule : desc.writable || desc.configurable)) {\n            desc = {\n              enumerable: true,\n              get: function () {\n                return m[k];\n              }\n            };\n          }\n          Object.defineProperty(o, k2, desc);\n        } : function (o, m, k, k2) {\n          if (k2 === undefined) k2 = k;\n          o[k2] = m[k];\n        };\n        __values = function (o) {\n          var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n          if (m) return m.call(o);\n          if (o && typeof o.length === \"number\") return {\n            next: function () {\n              if (o && i >= o.length) o = void 0;\n              return {\n                value: o && o[i++],\n                done: !o\n              };\n            }\n          };\n          throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n        };\n        __read = function (o, n) {\n          var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n          if (!m) return o;\n          var i = m.call(o), r, ar = [], e;\n          try {\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n          } catch (error) {\n            e = {\n              error: error\n            };\n          } finally {\n            try {\n              if (r && !r.done && (m = i[\"return\"])) m.call(i);\n            } finally {\n              if (e) throw e.error;\n            }\n          }\n          return ar;\n        };\n        __spread = function () {\n          for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n          return ar;\n        };\n        __spreadArrays = function () {\n          for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n          for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; (j++, k++)) r[k] = a[j];\n          return r;\n        };\n        __spreadArray = function (to, from, pack) {\n          if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n            if (ar || !((i in from))) {\n              if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n              ar[i] = from[i];\n            }\n          }\n          return to.concat(ar || Array.prototype.slice.call(from));\n        };\n        __await = function (v) {\n          return this instanceof __await ? (this.v = v, this) : new __await(v);\n        };\n        __asyncGenerator = function (thisArg, _arguments, generator) {\n          if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n          var g = generator.apply(thisArg, _arguments || []), i, q = [];\n          return (i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () {\n            return this;\n          }, i);\n          function awaitReturn(f) {\n            return function (v) {\n              return Promise.resolve(v).then(f, reject);\n            };\n          }\n          function verb(n, f) {\n            if (g[n]) {\n              i[n] = function (v) {\n                return new Promise(function (a, b) {\n                  q.push([n, v, a, b]) > 1 || resume(n, v);\n                });\n              };\n              if (f) i[n] = f(i[n]);\n            }\n          }\n          function resume(n, v) {\n            try {\n              step(g[n](v));\n            } catch (e) {\n              settle(q[0][3], e);\n            }\n          }\n          function step(r) {\n            r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n          }\n          function fulfill(value) {\n            resume(\"next\", value);\n          }\n          function reject(value) {\n            resume(\"throw\", value);\n          }\n          function settle(f, v) {\n            if ((f(v), q.shift(), q.length)) resume(q[0][0], q[0][1]);\n          }\n        };\n        __asyncDelegator = function (o) {\n          var i, p;\n          return (i = {}, verb(\"next\"), verb(\"throw\", function (e) {\n            throw e;\n          }), verb(\"return\"), i[Symbol.iterator] = function () {\n            return this;\n          }, i);\n          function verb(n, f) {\n            i[n] = o[n] ? function (v) {\n              return (p = !p) ? {\n                value: __await(o[n](v)),\n                done: false\n              } : f ? f(v) : v;\n            } : f;\n          }\n        };\n        __asyncValues = function (o) {\n          if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n          var m = o[Symbol.asyncIterator], i;\n          return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n            return this;\n          }, i);\n          function verb(n) {\n            i[n] = o[n] && (function (v) {\n              return new Promise(function (resolve, reject) {\n                (v = o[n](v), settle(resolve, reject, v.done, v.value));\n              });\n            });\n          }\n          function settle(resolve, reject, d, v) {\n            Promise.resolve(v).then(function (v) {\n              resolve({\n                value: v,\n                done: d\n              });\n            }, reject);\n          }\n        };\n        __makeTemplateObject = function (cooked, raw) {\n          if (Object.defineProperty) {\n            Object.defineProperty(cooked, \"raw\", {\n              value: raw\n            });\n          } else {\n            cooked.raw = raw;\n          }\n          return cooked;\n        };\n        var __setModuleDefault = Object.create ? function (o, v) {\n          Object.defineProperty(o, \"default\", {\n            enumerable: true,\n            value: v\n          });\n        } : function (o, v) {\n          o[\"default\"] = v;\n        };\n        __importStar = function (mod) {\n          if (mod && mod.__esModule) return mod;\n          var result = {};\n          if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n          __setModuleDefault(result, mod);\n          return result;\n        };\n        __importDefault = function (mod) {\n          return mod && mod.__esModule ? mod : {\n            \"default\": mod\n          };\n        };\n        __classPrivateFieldGet = function (receiver, state, kind, f) {\n          if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n          if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n          return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n        };\n        __classPrivateFieldSet = function (receiver, state, value, kind, f) {\n          if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n          if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n          if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n          return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value);\n        };\n        __classPrivateFieldIn = function (state, receiver) {\n          if (receiver === null || typeof receiver !== \"object\" && typeof receiver !== \"function\") throw new TypeError(\"Cannot use 'in' operator on non-object\");\n          return typeof state === \"function\" ? receiver === state : state.has(receiver);\n        };\n        __addDisposableResource = function (env, value, async) {\n          if (value !== null && value !== void 0) {\n            if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n            var dispose, inner;\n            if (async) {\n              if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n              dispose = value[Symbol.asyncDispose];\n            }\n            if (dispose === void 0) {\n              if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n              dispose = value[Symbol.dispose];\n              if (async) inner = dispose;\n            }\n            if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n            if (inner) dispose = function () {\n              try {\n                inner.call(this);\n              } catch (e) {\n                return Promise.reject(e);\n              }\n            };\n            env.stack.push({\n              value: value,\n              dispose: dispose,\n              async: async\n            });\n          } else if (async) {\n            env.stack.push({\n              async: true\n            });\n          }\n          return value;\n        };\n        var _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n          var e = new Error(message);\n          return (e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e);\n        };\n        __disposeResources = function (env) {\n          function fail(e) {\n            env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n            env.hasError = true;\n          }\n          var r, s = 0;\n          function next() {\n            while (r = env.stack.pop()) {\n              try {\n                if (!r.async && s === 1) return (s = 0, env.stack.push(r), Promise.resolve().then(next));\n                if (r.dispose) {\n                  var result = r.dispose.call(r.value);\n                  if (r.async) return (s |= 2, Promise.resolve(result).then(next, function (e) {\n                    fail(e);\n                    return next();\n                  }));\n                } else s |= 1;\n              } catch (e) {\n                fail(e);\n              }\n            }\n            if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n            if (env.hasError) throw env.error;\n          }\n          return next();\n        };\n        exporter(\"__extends\", __extends);\n        exporter(\"__assign\", __assign);\n        exporter(\"__rest\", __rest);\n        exporter(\"__decorate\", __decorate);\n        exporter(\"__param\", __param);\n        exporter(\"__esDecorate\", __esDecorate);\n        exporter(\"__runInitializers\", __runInitializers);\n        exporter(\"__propKey\", __propKey);\n        exporter(\"__setFunctionName\", __setFunctionName);\n        exporter(\"__metadata\", __metadata);\n        exporter(\"__awaiter\", __awaiter);\n        exporter(\"__generator\", __generator);\n        exporter(\"__exportStar\", __exportStar);\n        exporter(\"__createBinding\", __createBinding);\n        exporter(\"__values\", __values);\n        exporter(\"__read\", __read);\n        exporter(\"__spread\", __spread);\n        exporter(\"__spreadArrays\", __spreadArrays);\n        exporter(\"__spreadArray\", __spreadArray);\n        exporter(\"__await\", __await);\n        exporter(\"__asyncGenerator\", __asyncGenerator);\n        exporter(\"__asyncDelegator\", __asyncDelegator);\n        exporter(\"__asyncValues\", __asyncValues);\n        exporter(\"__makeTemplateObject\", __makeTemplateObject);\n        exporter(\"__importStar\", __importStar);\n        exporter(\"__importDefault\", __importDefault);\n        exporter(\"__classPrivateFieldGet\", __classPrivateFieldGet);\n        exporter(\"__classPrivateFieldSet\", __classPrivateFieldSet);\n        exporter(\"__classPrivateFieldIn\", __classPrivateFieldIn);\n        exporter(\"__addDisposableResource\", __addDisposableResource);\n        exporter(\"__disposeResources\", __disposeResources);\n      });\n    })(tslib);\n    var tslibExports = tslib.exports;\n\n    /*\n     * The `chars`, `lookup`, `encode`, and `decode` members of this file are\n     * licensed under the following:\n     *\n     *     base64-arraybuffer\n     *     https://github.com/niklasvh/base64-arraybuffer\n     *\n     *     Copyright (c) 2012 Niklas von Hertzen\n     *     Licensed under the MIT license.\n     *\n     */\n    var chars$1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    // Use a lookup table to find the index.\n    var lookup$1 = new Uint8Array(256);\n    for (var i$1 = 0; i$1 < chars$1.length; i$1++) {\n        lookup$1[chars$1.charCodeAt(i$1)] = i$1;\n    }\n    var encodeToBase64 = function (bytes) {\n        var base64 = '';\n        var len = bytes.length;\n        for (var i = 0; i < len; i += 3) {\n            base64 += chars$1[bytes[i] >> 2];\n            base64 += chars$1[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n            base64 += chars$1[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n            base64 += chars$1[bytes[i + 2] & 63];\n        }\n        if (len % 3 === 2) {\n            base64 = base64.substring(0, base64.length - 1) + '=';\n        }\n        else if (len % 3 === 1) {\n            base64 = base64.substring(0, base64.length - 2) + '==';\n        }\n        return base64;\n    };\n    var decodeFromBase64$1 = function (base64) {\n        var bufferLength = base64.length * 0.75;\n        var len = base64.length;\n        var i;\n        var p = 0;\n        var encoded1;\n        var encoded2;\n        var encoded3;\n        var encoded4;\n        if (base64[base64.length - 1] === '=') {\n            bufferLength--;\n            if (base64[base64.length - 2] === '=') {\n                bufferLength--;\n            }\n        }\n        var bytes = new Uint8Array(bufferLength);\n        for (i = 0; i < len; i += 4) {\n            encoded1 = lookup$1[base64.charCodeAt(i)];\n            encoded2 = lookup$1[base64.charCodeAt(i + 1)];\n            encoded3 = lookup$1[base64.charCodeAt(i + 2)];\n            encoded4 = lookup$1[base64.charCodeAt(i + 3)];\n            bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n            bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n            bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n        }\n        return bytes;\n    };\n    // This regex is designed to be as flexible as possible. It will parse certain\n    // invalid data URIs.\n    var DATA_URI_PREFIX_REGEX = /^(data)?:?([\\w\\/\\+]+)?;?(charset=[\\w-]+|base64)?.*,/i;\n    /**\n     * If the `dataUri` input is a data URI, then the data URI prefix must not be\n     * longer than 100 characters, or this function will fail to decode it.\n     *\n     * @param dataUri a base64 data URI or plain base64 string\n     * @returns a Uint8Array containing the decoded input\n     */\n    var decodeFromBase64DataUri = function (dataUri) {\n        var trimmedUri = dataUri.trim();\n        var prefix = trimmedUri.substring(0, 100);\n        var res = prefix.match(DATA_URI_PREFIX_REGEX);\n        // Assume it's not a data URI - just a plain base64 string\n        if (!res)\n            return decodeFromBase64$1(trimmedUri);\n        // Remove the data URI prefix and parse the remainder as a base64 string\n        var fullMatch = res[0];\n        var data = trimmedUri.substring(fullMatch.length);\n        return decodeFromBase64$1(data);\n    };\n\n    var toCharCode = function (character) { return character.charCodeAt(0); };\n    var toCodePoint = function (character) { return character.codePointAt(0); };\n    var toHexStringOfMinLength = function (num, minLength) {\n        return padStart$1(num.toString(16), minLength, '0').toUpperCase();\n    };\n    var toHexString = function (num) { return toHexStringOfMinLength(num, 2); };\n    var charFromCode = function (code) { return String.fromCharCode(code); };\n    var charFromHexCode = function (hex) { return charFromCode(parseInt(hex, 16)); };\n    var padStart$1 = function (value, length, padChar) {\n        var padding = '';\n        for (var idx = 0, len = length - value.length; idx < len; idx++) {\n            padding += padChar;\n        }\n        return padding + value;\n    };\n    var copyStringIntoBuffer = function (str, buffer, offset) {\n        var length = str.length;\n        for (var idx = 0; idx < length; idx++) {\n            buffer[offset++] = str.charCodeAt(idx);\n        }\n        return length;\n    };\n    var addRandomSuffix = function (prefix, suffixLength) {\n        if (suffixLength === void 0) { suffixLength = 4; }\n        return prefix + \"-\" + Math.floor(Math.random() * Math.pow(10, suffixLength));\n    };\n    var escapeRegExp = function (str) {\n        return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    };\n    var cleanText = function (text) {\n        return text.replace(/\\t|\\u0085|\\u2028|\\u2029/g, '    ').replace(/[\\b\\v]/g, '');\n    };\n    var escapedNewlineChars = ['\\\\n', '\\\\f', '\\\\r', '\\\\u000B'];\n    var newlineChars = ['\\n', '\\f', '\\r', '\\u000B'];\n    var isNewlineChar = function (text) { return /^[\\n\\f\\r\\u000B]$/.test(text); };\n    var lineSplit = function (text) { return text.split(/[\\n\\f\\r\\u000B]/); };\n    var mergeLines = function (text) {\n        return text.replace(/[\\n\\f\\r\\u000B]/g, ' ');\n    };\n    // JavaScript's String.charAt() method doesn work on strings containing UTF-16\n    // characters (with high and low surrogate pairs), such as 💩 (poo emoji). This\n    // `charAtIndex()` function does.\n    //\n    // Credit: https://github.com/mathiasbynens/String.prototype.at/blob/master/at.js#L14-L48\n    var charAtIndex = function (text, index) {\n        // Get the first code unit and code unit value\n        var cuFirst = text.charCodeAt(index);\n        var cuSecond;\n        var nextIndex = index + 1;\n        var length = 1;\n        if (\n        // Check if it's the start of a surrogate pair.\n        cuFirst >= 0xd800 &&\n            cuFirst <= 0xdbff && // high surrogate\n            text.length > nextIndex // there is a next code unit\n        ) {\n            cuSecond = text.charCodeAt(nextIndex);\n            if (cuSecond >= 0xdc00 && cuSecond <= 0xdfff)\n                length = 2; // low surrogate\n        }\n        return [text.slice(index, index + length), length];\n    };\n    var charSplit = function (text) {\n        var chars = [];\n        for (var idx = 0, len = text.length; idx < len;) {\n            var _a = charAtIndex(text, idx), c = _a[0], cLen = _a[1];\n            chars.push(c);\n            idx += cLen;\n        }\n        return chars;\n    };\n    var buildWordBreakRegex = function (wordBreaks) {\n        var newlineCharUnion = escapedNewlineChars.join('|');\n        var escapedRules = ['$'];\n        for (var idx = 0, len = wordBreaks.length; idx < len; idx++) {\n            var wordBreak = wordBreaks[idx];\n            if (isNewlineChar(wordBreak)) {\n                throw new TypeError(\"`wordBreak` must not include \" + newlineCharUnion);\n            }\n            escapedRules.push(wordBreak === '' ? '.' : escapeRegExp(wordBreak));\n        }\n        var breakRules = escapedRules.join('|');\n        return new RegExp(\"(\" + newlineCharUnion + \")|((.*?)(\" + breakRules + \"))\", 'gm');\n    };\n    var breakTextIntoLines = function (text, wordBreaks, maxWidth, computeWidthOfText) {\n        var regex = buildWordBreakRegex(wordBreaks);\n        var words = cleanText(text).match(regex);\n        var currLine = '';\n        var currWidth = 0;\n        var lines = [];\n        var pushCurrLine = function () {\n            if (currLine !== '')\n                lines.push(currLine);\n            currLine = '';\n            currWidth = 0;\n        };\n        for (var idx = 0, len = words.length; idx < len; idx++) {\n            var word = words[idx];\n            if (isNewlineChar(word)) {\n                pushCurrLine();\n            }\n            else {\n                var width = computeWidthOfText(word);\n                if (currWidth + width > maxWidth)\n                    pushCurrLine();\n                currLine += word;\n                currWidth += width;\n            }\n        }\n        pushCurrLine();\n        return lines;\n    };\n    // See section \"7.9.4 Dates\" of the PDF specification\n    var dateRegex = /^D:(\\d\\d\\d\\d)(\\d\\d)?(\\d\\d)?(\\d\\d)?(\\d\\d)?(\\d\\d)?([+\\-Z])?(\\d\\d)?'?(\\d\\d)?'?$/;\n    var parseDate = function (dateStr) {\n        var match = dateStr.match(dateRegex);\n        if (!match)\n            return undefined;\n        var year = match[1], _a = match[2], month = _a === void 0 ? '01' : _a, _b = match[3], day = _b === void 0 ? '01' : _b, _c = match[4], hours = _c === void 0 ? '00' : _c, _d = match[5], mins = _d === void 0 ? '00' : _d, _e = match[6], secs = _e === void 0 ? '00' : _e, _f = match[7], offsetSign = _f === void 0 ? 'Z' : _f, _g = match[8], offsetHours = _g === void 0 ? '00' : _g, _h = match[9], offsetMins = _h === void 0 ? '00' : _h;\n        // http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n        var tzOffset = offsetSign === 'Z' ? 'Z' : \"\" + offsetSign + offsetHours + \":\" + offsetMins;\n        var date = new Date(year + \"-\" + month + \"-\" + day + \"T\" + hours + \":\" + mins + \":\" + secs + tzOffset);\n        return date;\n    };\n    var findLastMatch = function (value, regex) {\n        var _a;\n        var position = 0;\n        var lastMatch;\n        while (position < value.length) {\n            var match = value.substring(position).match(regex);\n            if (!match)\n                return { match: lastMatch, pos: position };\n            lastMatch = match;\n            position += ((_a = match.index) !== null && _a !== void 0 ? _a : 0) + match[0].length;\n        }\n        return { match: lastMatch, pos: position };\n    };\n\n    var last = function (array) { return array[array.length - 1]; };\n    // export const dropLast = <T>(array: T[]): T[] =>\n    // array.slice(0, array.length - 1);\n    var typedArrayFor = function (value) {\n        if (value instanceof Uint8Array)\n            return value;\n        var length = value.length;\n        var typedArray = new Uint8Array(length);\n        for (var idx = 0; idx < length; idx++) {\n            typedArray[idx] = value.charCodeAt(idx);\n        }\n        return typedArray;\n    };\n    var mergeIntoTypedArray = function () {\n        var arrays = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            arrays[_i] = arguments[_i];\n        }\n        var arrayCount = arrays.length;\n        var typedArrays = [];\n        for (var idx = 0; idx < arrayCount; idx++) {\n            var element = arrays[idx];\n            typedArrays[idx] =\n                element instanceof Uint8Array ? element : typedArrayFor(element);\n        }\n        var totalSize = 0;\n        for (var idx = 0; idx < arrayCount; idx++) {\n            totalSize += arrays[idx].length;\n        }\n        var merged = new Uint8Array(totalSize);\n        var offset = 0;\n        for (var arrIdx = 0; arrIdx < arrayCount; arrIdx++) {\n            var arr = typedArrays[arrIdx];\n            for (var byteIdx = 0, arrLen = arr.length; byteIdx < arrLen; byteIdx++) {\n                merged[offset++] = arr[byteIdx];\n            }\n        }\n        return merged;\n    };\n    var mergeUint8Arrays = function (arrays) {\n        var totalSize = 0;\n        for (var idx = 0, len = arrays.length; idx < len; idx++) {\n            totalSize += arrays[idx].length;\n        }\n        var mergedBuffer = new Uint8Array(totalSize);\n        var offset = 0;\n        for (var idx = 0, len = arrays.length; idx < len; idx++) {\n            var array = arrays[idx];\n            mergedBuffer.set(array, offset);\n            offset += array.length;\n        }\n        return mergedBuffer;\n    };\n    var arrayAsString = function (array) {\n        var str = '';\n        for (var idx = 0, len = array.length; idx < len; idx++) {\n            str += charFromCode(array[idx]);\n        }\n        return str;\n    };\n    var byAscendingId = function (a, b) { return a.id - b.id; };\n    var sortedUniq = function (array, indexer) {\n        var uniq = [];\n        for (var idx = 0, len = array.length; idx < len; idx++) {\n            var curr = array[idx];\n            var prev = array[idx - 1];\n            if (idx === 0 || indexer(curr) !== indexer(prev)) {\n                uniq.push(curr);\n            }\n        }\n        return uniq;\n    };\n    // Arrays and TypedArrays in JS both have .reverse() methods, which would seem\n    // to negate the need for this function. However, not all runtimes support this\n    // method (e.g. React Native). This function compensates for that fact.\n    var reverseArray = function (array) {\n        var arrayLen = array.length;\n        for (var idx = 0, len = Math.floor(arrayLen / 2); idx < len; idx++) {\n            var leftIdx = idx;\n            var rightIdx = arrayLen - idx - 1;\n            var temp = array[idx];\n            array[leftIdx] = array[rightIdx];\n            array[rightIdx] = temp;\n        }\n        return array;\n    };\n    var sum = function (array) {\n        var total = 0;\n        for (var idx = 0, len = array.length; idx < len; idx++) {\n            total += array[idx];\n        }\n        return total;\n    };\n    var range = function (start, end) {\n        var arr = new Array(end - start);\n        for (var idx = 0, len = arr.length; idx < len; idx++) {\n            arr[idx] = start + idx;\n        }\n        return arr;\n    };\n    var pluckIndices = function (arr, indices) {\n        var plucked = new Array(indices.length);\n        for (var idx = 0, len = indices.length; idx < len; idx++) {\n            plucked[idx] = arr[indices[idx]];\n        }\n        return plucked;\n    };\n    var canBeConvertedToUint8Array = function (input) {\n        return input instanceof Uint8Array ||\n            input instanceof ArrayBuffer ||\n            typeof input === 'string';\n    };\n    var toUint8Array = function (input) {\n        if (typeof input === 'string') {\n            return decodeFromBase64DataUri(input);\n        }\n        else if (input instanceof ArrayBuffer) {\n            return new Uint8Array(input);\n        }\n        else if (input instanceof Uint8Array) {\n            return input;\n        }\n        else {\n            throw new TypeError('`input` must be one of `string | ArrayBuffer | Uint8Array`');\n        }\n    };\n\n    /**\n     * Returns a Promise that resolves after at least one tick of the\n     * Macro Task Queue occurs.\n     */\n    var waitForTick = function () {\n        return new Promise(function (resolve) {\n            setTimeout(function () { return resolve(); }, 0);\n        });\n    };\n\n    /**\n     * Encodes a string to UTF-8.\n     *\n     * @param input The string to be encoded.\n     * @param byteOrderMark Whether or not a byte order marker (BOM) should be added\n     *                      to the start of the encoding. (default `true`)\n     * @returns A Uint8Array containing the UTF-8 encoding of the input string.\n     *\n     * -----------------------------------------------------------------------------\n     *\n     * JavaScript strings are composed of Unicode code points. Code points are\n     * integers in the range 0 to 1,114,111 (0x10FFFF). When serializing a string,\n     * it must be encoded as a sequence of words. A word is typically 8, 16, or 32\n     * bytes in size. As such, Unicode defines three encoding forms: UTF-8, UTF-16,\n     * and UTF-32. These encoding forms are described in the Unicode standard [1].\n     * This function implements the UTF-8 encoding form.\n     *\n     * -----------------------------------------------------------------------------\n     *\n     * In UTF-8, each code point is mapped to a sequence of 1, 2, 3, or 4 bytes.\n     * Note that the logic which defines this mapping is slightly convoluted, and\n     * not as straightforward as the mapping logic for UTF-16 or UTF-32. The UTF-8\n     * mapping logic is as follows [2]:\n     *\n     * • If a code point is in the range U+0000..U+007F, then view it as a 7-bit\n     *   integer: 0bxxxxxxx. Map the code point to 1 byte with the first high order\n     *   bit set to 0:\n     *\n     *       b1=0b0xxxxxxx\n     *\n     * • If a code point is in the range U+0080..U+07FF, then view it as an 11-bit\n     *   integer: 0byyyyyxxxxxx. Map the code point to 2 bytes with the first 5 bits\n     *   of the code point stored in the first byte, and the last 6 bits stored in\n     *   the second byte:\n     *\n     *       b1=0b110yyyyy    b2=0b10xxxxxx\n     *\n     * • If a code point is in the range U+0800..U+FFFF, then view it as a 16-bit\n     *   integer, 0bzzzzyyyyyyxxxxxx. Map the code point to 3 bytes with the first\n     *   4 bits stored in the first byte, the next 6 bits stored in the second byte,\n     *   and the last 6 bits in the third byte:\n     *\n     *       b1=0b1110zzzz    b2=0b10yyyyyy    b3=0b10xxxxxx\n     *\n     * • If a code point is in the range U+10000...U+10FFFF, then view it as a\n     *   21-bit integer, 0bvvvzzzzzzyyyyyyxxxxxx. Map the code point to 4 bytes with\n     *   the first 3 bits stored in the first byte, the next 6 bits stored in the\n     *   second byte, the next 6 bits stored in the third byte, and the last 6 bits\n     *   stored in the fourth byte:\n     *\n     *       b1=0b11110xxx    b2=0b10zzzzzz    b3=0b10yyyyyy    b4=0b10xxxxxx\n     *\n     * -----------------------------------------------------------------------------\n     *\n     * It is important to note, when iterating through the code points of a string\n     * in JavaScript, that if a character is encoded as a surrogate pair it will\n     * increase the string's length by 2 instead of 1 [4]. For example:\n     *\n     * ```\n     * > 'a'.length\n     * 1\n     * > '💩'.length\n     * 2\n     * > '語'.length\n     * 1\n     * > 'a💩語'.length\n     * 4\n     * ```\n     *\n     * The results of the above example are explained by the fact that the\n     * characters 'a' and '語' are not represented by surrogate pairs, but '💩' is.\n     *\n     * Because of this idiosyncrasy in JavaScript's string implementation and APIs,\n     * we must \"jump\" an extra index after encoding a character as a surrogate\n     * pair. In practice, this means we must increment the index of our for loop by\n     * 2 if we encode a surrogate pair, and 1 in all other cases.\n     *\n     * -----------------------------------------------------------------------------\n     *\n     * References:\n     *   - [1] https://www.unicode.org/versions/Unicode12.0.0/UnicodeStandard-12.0.pdf\n     *         3.9  Unicode Encoding Forms - UTF-8\n     *   - [2] http://www.herongyang.com/Unicode/UTF-8-UTF-8-Encoding.html\n     *   - [3] http://www.herongyang.com/Unicode/UTF-8-UTF-8-Encoding-Algorithm.html\n     *   - [4] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length#Description\n     *\n     */\n    var utf8Encode = function (input, byteOrderMark) {\n        if (byteOrderMark === void 0) { byteOrderMark = true; }\n        var encoded = [];\n        if (byteOrderMark)\n            encoded.push(0xef, 0xbb, 0xbf);\n        for (var idx = 0, len = input.length; idx < len;) {\n            var codePoint = input.codePointAt(idx);\n            // One byte encoding\n            if (codePoint < 0x80) {\n                var byte1 = codePoint & 0x7f;\n                encoded.push(byte1);\n                idx += 1;\n            }\n            // Two byte encoding\n            else if (codePoint < 0x0800) {\n                var byte1 = ((codePoint >> 6) & 0x1f) | 0xc0;\n                var byte2 = (codePoint & 0x3f) | 0x80;\n                encoded.push(byte1, byte2);\n                idx += 1;\n            }\n            // Three byte encoding\n            else if (codePoint < 0x010000) {\n                var byte1 = ((codePoint >> 12) & 0x0f) | 0xe0;\n                var byte2 = ((codePoint >> 6) & 0x3f) | 0x80;\n                var byte3 = (codePoint & 0x3f) | 0x80;\n                encoded.push(byte1, byte2, byte3);\n                idx += 1;\n            }\n            // Four byte encoding (surrogate pair)\n            else if (codePoint < 0x110000) {\n                var byte1 = ((codePoint >> 18) & 0x07) | 0xf0;\n                var byte2 = ((codePoint >> 12) & 0x3f) | 0x80;\n                var byte3 = ((codePoint >> 6) & 0x3f) | 0x80;\n                var byte4 = ((codePoint >> 0) & 0x3f) | 0x80;\n                encoded.push(byte1, byte2, byte3, byte4);\n                idx += 2;\n            }\n            // Should never reach this case\n            else\n                throw new Error(\"Invalid code point: 0x\" + toHexString(codePoint));\n        }\n        return new Uint8Array(encoded);\n    };\n    /**\n     * Encodes a string to UTF-16.\n     *\n     * @param input The string to be encoded.\n     * @param byteOrderMark Whether or not a byte order marker (BOM) should be added\n     *                      to the start of the encoding. (default `true`)\n     * @returns A Uint16Array containing the UTF-16 encoding of the input string.\n     *\n     * -----------------------------------------------------------------------------\n     *\n     * JavaScript strings are composed of Unicode code points. Code points are\n     * integers in the range 0 to 1,114,111 (0x10FFFF). When serializing a string,\n     * it must be encoded as a sequence of words. A word is typically 8, 16, or 32\n     * bytes in size. As such, Unicode defines three encoding forms: UTF-8, UTF-16,\n     * and UTF-32. These encoding forms are described in the Unicode standard [1].\n     * This function implements the UTF-16 encoding form.\n     *\n     * -----------------------------------------------------------------------------\n     *\n     * In UTF-16, each code point is mapped to one or two 16-bit integers. The\n     * UTF-16 mapping logic is as follows [2]:\n     *\n     * • If a code point is in the range U+0000..U+FFFF, then map the code point to\n     *   a 16-bit integer with the most significant byte first.\n     *\n     * • If a code point is in the range U+10000..U+10000, then map the code point\n     *   to two 16-bit integers. The first integer should contain the high surrogate\n     *   and the second integer should contain the low surrogate. Both surrogates\n     *   should be written with the most significant byte first.\n     *\n     * -----------------------------------------------------------------------------\n     *\n     * It is important to note, when iterating through the code points of a string\n     * in JavaScript, that if a character is encoded as a surrogate pair it will\n     * increase the string's length by 2 instead of 1 [4]. For example:\n     *\n     * ```\n     * > 'a'.length\n     * 1\n     * > '💩'.length\n     * 2\n     * > '語'.length\n     * 1\n     * > 'a💩語'.length\n     * 4\n     * ```\n     *\n     * The results of the above example are explained by the fact that the\n     * characters 'a' and '語' are not represented by surrogate pairs, but '💩' is.\n     *\n     * Because of this idiosyncrasy in JavaScript's string implementation and APIs,\n     * we must \"jump\" an extra index after encoding a character as a surrogate\n     * pair. In practice, this means we must increment the index of our for loop by\n     * 2 if we encode a surrogate pair, and 1 in all other cases.\n     *\n     * -----------------------------------------------------------------------------\n     *\n     * References:\n     *   - [1] https://www.unicode.org/versions/Unicode12.0.0/UnicodeStandard-12.0.pdf\n     *         3.9  Unicode Encoding Forms - UTF-8\n     *   - [2] http://www.herongyang.com/Unicode/UTF-16-UTF-16-Encoding.html\n     *   - [3] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length#Description\n     *\n     */\n    var utf16Encode = function (input, byteOrderMark) {\n        if (byteOrderMark === void 0) { byteOrderMark = true; }\n        var encoded = [];\n        if (byteOrderMark)\n            encoded.push(0xfeff);\n        for (var idx = 0, len = input.length; idx < len;) {\n            var codePoint = input.codePointAt(idx);\n            // Two byte encoding\n            if (codePoint < 0x010000) {\n                encoded.push(codePoint);\n                idx += 1;\n            }\n            // Four byte encoding (surrogate pair)\n            else if (codePoint < 0x110000) {\n                encoded.push(highSurrogate(codePoint), lowSurrogate(codePoint));\n                idx += 2;\n            }\n            // Should never reach this case\n            else\n                throw new Error(\"Invalid code point: 0x\" + toHexString(codePoint));\n        }\n        return new Uint16Array(encoded);\n    };\n    /**\n     * Returns `true` if the `codePoint` is within the\n     * Basic Multilingual Plane (BMP). Code points inside the BMP are not encoded\n     * with surrogate pairs.\n     * @param codePoint The code point to be evaluated.\n     *\n     * Reference: https://en.wikipedia.org/wiki/UTF-16#Description\n     */\n    var isWithinBMP = function (codePoint) {\n        return codePoint >= 0 && codePoint <= 0xffff;\n    };\n    /**\n     * Returns `true` if the given `codePoint` is valid and must be represented\n     * with a surrogate pair when encoded.\n     * @param codePoint The code point to be evaluated.\n     *\n     * Reference: https://en.wikipedia.org/wiki/UTF-16#Description\n     */\n    var hasSurrogates = function (codePoint) {\n        return codePoint >= 0x010000 && codePoint <= 0x10ffff;\n    };\n    // From Unicode 3.0 spec, section 3.7:\n    //   http://unicode.org/versions/Unicode3.0.0/ch03.pdf\n    var highSurrogate = function (codePoint) {\n        return Math.floor((codePoint - 0x10000) / 0x400) + 0xd800;\n    };\n    // From Unicode 3.0 spec, section 3.7:\n    //   http://unicode.org/versions/Unicode3.0.0/ch03.pdf\n    var lowSurrogate = function (codePoint) {\n        return ((codePoint - 0x10000) % 0x400) + 0xdc00;\n    };\n    var ByteOrder;\n    (function (ByteOrder) {\n        ByteOrder[\"BigEndian\"] = \"BigEndian\";\n        ByteOrder[\"LittleEndian\"] = \"LittleEndian\";\n    })(ByteOrder || (ByteOrder = {}));\n    var REPLACEMENT = '�'.codePointAt(0);\n    /**\n     * Decodes a Uint8Array of data to a string using UTF-16.\n     *\n     * Note that this function attempts to recover from erronous input by\n     * inserting the replacement character (�) to mark invalid code points\n     * and surrogate pairs.\n     *\n     * @param input A Uint8Array containing UTF-16 encoded data\n     * @param byteOrderMark Whether or not a byte order marker (BOM) should be read\n     *                      at the start of the encoding. (default `true`)\n     * @returns The decoded string.\n     */\n    var utf16Decode = function (input, byteOrderMark) {\n        if (byteOrderMark === void 0) { byteOrderMark = true; }\n        // Need at least 2 bytes of data in UTF-16 encodings\n        if (input.length <= 1)\n            return String.fromCodePoint(REPLACEMENT);\n        var byteOrder = byteOrderMark ? readBOM(input) : ByteOrder.BigEndian;\n        // Skip byte order mark if needed\n        var idx = byteOrderMark ? 2 : 0;\n        var codePoints = [];\n        while (input.length - idx >= 2) {\n            var first = decodeValues(input[idx++], input[idx++], byteOrder);\n            if (isHighSurrogate(first)) {\n                if (input.length - idx < 2) {\n                    // Need at least 2 bytes left for the low surrogate that is required\n                    codePoints.push(REPLACEMENT);\n                }\n                else {\n                    var second = decodeValues(input[idx++], input[idx++], byteOrder);\n                    if (isLowSurrogate(second)) {\n                        codePoints.push(first, second);\n                    }\n                    else {\n                        // Low surrogates should always follow high surrogates\n                        codePoints.push(REPLACEMENT);\n                    }\n                }\n            }\n            else if (isLowSurrogate(first)) {\n                // High surrogates should always come first since `decodeValues()`\n                // accounts for the byte ordering\n                idx += 2;\n                codePoints.push(REPLACEMENT);\n            }\n            else {\n                codePoints.push(first);\n            }\n        }\n        // There shouldn't be extra byte(s) left over\n        if (idx < input.length)\n            codePoints.push(REPLACEMENT);\n        return String.fromCodePoint.apply(String, codePoints);\n    };\n    /**\n     * Returns `true` if the given `codePoint` is a high surrogate.\n     * @param codePoint The code point to be evaluated.\n     *\n     * Reference: https://en.wikipedia.org/wiki/UTF-16#Description\n     */\n    var isHighSurrogate = function (codePoint) {\n        return codePoint >= 0xd800 && codePoint <= 0xdbff;\n    };\n    /**\n     * Returns `true` if the given `codePoint` is a low surrogate.\n     * @param codePoint The code point to be evaluated.\n     *\n     * Reference: https://en.wikipedia.org/wiki/UTF-16#Description\n     */\n    var isLowSurrogate = function (codePoint) {\n        return codePoint >= 0xdc00 && codePoint <= 0xdfff;\n    };\n    /**\n     * Decodes the given utf-16 values first and second using the specified\n     * byte order.\n     * @param first The first byte of the encoding.\n     * @param second The second byte of the encoding.\n     * @param byteOrder The byte order of the encoding.\n     * Reference: https://en.wikipedia.org/wiki/UTF-16#Examples\n     */\n    var decodeValues = function (first, second, byteOrder) {\n        // Append the binary representation of the preceding byte by shifting the\n        // first one 8 to the left and than applying a bitwise or-operator to append\n        // the second one.\n        if (byteOrder === ByteOrder.LittleEndian)\n            return (second << 8) | first;\n        if (byteOrder === ByteOrder.BigEndian)\n            return (first << 8) | second;\n        throw new Error(\"Invalid byteOrder: \" + byteOrder);\n    };\n    /**\n     * Returns whether the given array contains a byte order mark for the\n     * UTF-16BE or UTF-16LE encoding. If it has neither, BigEndian is assumed.\n     *\n     * Reference: https://en.wikipedia.org/wiki/Byte_order_mark#UTF-16\n     *\n     * @param bytes The byte array to be evaluated.\n     */\n    // prettier-ignore\n    var readBOM = function (bytes) { return (hasUtf16BigEndianBOM(bytes) ? ByteOrder.BigEndian\n        : hasUtf16LittleEndianBOM(bytes) ? ByteOrder.LittleEndian\n            : ByteOrder.BigEndian); };\n    var hasUtf16BigEndianBOM = function (bytes) {\n        return bytes[0] === 0xfe && bytes[1] === 0xff;\n    };\n    var hasUtf16LittleEndianBOM = function (bytes) {\n        return bytes[0] === 0xff && bytes[1] === 0xfe;\n    };\n    var hasUtf16BOM = function (bytes) {\n        return hasUtf16BigEndianBOM(bytes) || hasUtf16LittleEndianBOM(bytes);\n    };\n\n    // tslint:disable radix\n    /**\n     * Converts a number to its string representation in decimal. This function\n     * differs from simply converting a number to a string with `.toString()`\n     * because this function's output string will **not** contain exponential\n     * notation.\n     *\n     * Credit: https://stackoverflow.com/a/46545519\n     */\n    var numberToString = function (num) {\n        var numStr = String(num);\n        if (Math.abs(num) < 1.0) {\n            var e = parseInt(num.toString().split('e-')[1]);\n            if (e) {\n                var negative = num < 0;\n                if (negative)\n                    num *= -1;\n                num *= Math.pow(10, e - 1);\n                numStr = '0.' + new Array(e).join('0') + num.toString().substring(2);\n                if (negative)\n                    numStr = '-' + numStr;\n            }\n        }\n        else {\n            var e = parseInt(num.toString().split('+')[1]);\n            if (e > 20) {\n                e -= 20;\n                num /= Math.pow(10, e);\n                numStr = num.toString() + new Array(e + 1).join('0');\n            }\n        }\n        return numStr;\n    };\n    var sizeInBytes = function (n) { return Math.ceil(n.toString(2).length / 8); };\n    /**\n     * Converts a number into its constituent bytes and returns them as\n     * a number[].\n     *\n     * Returns most significant byte as first element in array. It may be necessary\n     * to call .reverse() to get the bits in the desired order.\n     *\n     * Example:\n     *   bytesFor(0x02A41E) => [ 0b10, 0b10100100, 0b11110 ]\n     *\n     * Credit for algorithm: https://stackoverflow.com/a/1936865\n     */\n    var bytesFor = function (n) {\n        var bytes = new Uint8Array(sizeInBytes(n));\n        for (var i = 1; i <= bytes.length; i++) {\n            bytes[i - 1] = n >> ((bytes.length - i) * 8);\n        }\n        return bytes;\n    };\n\n    var error = function (msg) {\n        throw new Error(msg);\n    };\n\n    var common = {};\n\n    (function (exports) {\n\n\n    \tvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n    \t                (typeof Uint16Array !== 'undefined') &&\n    \t                (typeof Int32Array !== 'undefined');\n\n    \tfunction _has(obj, key) {\n    \t  return Object.prototype.hasOwnProperty.call(obj, key);\n    \t}\n\n    \texports.assign = function (obj /*from1, from2, from3, ...*/) {\n    \t  var sources = Array.prototype.slice.call(arguments, 1);\n    \t  while (sources.length) {\n    \t    var source = sources.shift();\n    \t    if (!source) { continue; }\n\n    \t    if (typeof source !== 'object') {\n    \t      throw new TypeError(source + 'must be non-object');\n    \t    }\n\n    \t    for (var p in source) {\n    \t      if (_has(source, p)) {\n    \t        obj[p] = source[p];\n    \t      }\n    \t    }\n    \t  }\n\n    \t  return obj;\n    \t};\n\n\n    \t// reduce buffer size, avoiding mem copy\n    \texports.shrinkBuf = function (buf, size) {\n    \t  if (buf.length === size) { return buf; }\n    \t  if (buf.subarray) { return buf.subarray(0, size); }\n    \t  buf.length = size;\n    \t  return buf;\n    \t};\n\n\n    \tvar fnTyped = {\n    \t  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    \t    if (src.subarray && dest.subarray) {\n    \t      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n    \t      return;\n    \t    }\n    \t    // Fallback to ordinary array\n    \t    for (var i = 0; i < len; i++) {\n    \t      dest[dest_offs + i] = src[src_offs + i];\n    \t    }\n    \t  },\n    \t  // Join array of chunks to single array.\n    \t  flattenChunks: function (chunks) {\n    \t    var i, l, len, pos, chunk, result;\n\n    \t    // calculate data length\n    \t    len = 0;\n    \t    for (i = 0, l = chunks.length; i < l; i++) {\n    \t      len += chunks[i].length;\n    \t    }\n\n    \t    // join chunks\n    \t    result = new Uint8Array(len);\n    \t    pos = 0;\n    \t    for (i = 0, l = chunks.length; i < l; i++) {\n    \t      chunk = chunks[i];\n    \t      result.set(chunk, pos);\n    \t      pos += chunk.length;\n    \t    }\n\n    \t    return result;\n    \t  }\n    \t};\n\n    \tvar fnUntyped = {\n    \t  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    \t    for (var i = 0; i < len; i++) {\n    \t      dest[dest_offs + i] = src[src_offs + i];\n    \t    }\n    \t  },\n    \t  // Join array of chunks to single array.\n    \t  flattenChunks: function (chunks) {\n    \t    return [].concat.apply([], chunks);\n    \t  }\n    \t};\n\n\n    \t// Enable/Disable typed arrays use, for testing\n    \t//\n    \texports.setTyped = function (on) {\n    \t  if (on) {\n    \t    exports.Buf8  = Uint8Array;\n    \t    exports.Buf16 = Uint16Array;\n    \t    exports.Buf32 = Int32Array;\n    \t    exports.assign(exports, fnTyped);\n    \t  } else {\n    \t    exports.Buf8  = Array;\n    \t    exports.Buf16 = Array;\n    \t    exports.Buf32 = Array;\n    \t    exports.assign(exports, fnUntyped);\n    \t  }\n    \t};\n\n    \texports.setTyped(TYPED_OK); \n    } (common));\n\n    var deflate$4 = {};\n\n    var deflate$3 = {};\n\n    var trees$1 = {};\n\n    // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n    //\n    // This software is provided 'as-is', without any express or implied\n    // warranty. In no event will the authors be held liable for any damages\n    // arising from the use of this software.\n    //\n    // Permission is granted to anyone to use this software for any purpose,\n    // including commercial applications, and to alter it and redistribute it\n    // freely, subject to the following restrictions:\n    //\n    // 1. The origin of this software must not be misrepresented; you must not\n    //   claim that you wrote the original software. If you use this software\n    //   in a product, an acknowledgment in the product documentation would be\n    //   appreciated but is not required.\n    // 2. Altered source versions must be plainly marked as such, and must not be\n    //   misrepresented as being the original software.\n    // 3. This notice may not be removed or altered from any source distribution.\n\n    /* eslint-disable space-unary-ops */\n\n    var utils$6 = common;\n\n    /* Public constants ==========================================================*/\n    /* ===========================================================================*/\n\n\n    //var Z_FILTERED          = 1;\n    //var Z_HUFFMAN_ONLY      = 2;\n    //var Z_RLE               = 3;\n    var Z_FIXED$1               = 4;\n    //var Z_DEFAULT_STRATEGY  = 0;\n\n    /* Possible values of the data_type field (though see inflate()) */\n    var Z_BINARY              = 0;\n    var Z_TEXT                = 1;\n    //var Z_ASCII             = 1; // = Z_TEXT\n    var Z_UNKNOWN$1             = 2;\n\n    /*============================================================================*/\n\n\n    function zero$1(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n    // From zutil.h\n\n    var STORED_BLOCK = 0;\n    var STATIC_TREES = 1;\n    var DYN_TREES    = 2;\n    /* The three kinds of block type */\n\n    var MIN_MATCH$1    = 3;\n    var MAX_MATCH$1    = 258;\n    /* The minimum and maximum match lengths */\n\n    // From deflate.h\n    /* ===========================================================================\n     * Internal compression state.\n     */\n\n    var LENGTH_CODES$1  = 29;\n    /* number of length codes, not counting the special END_BLOCK code */\n\n    var LITERALS$1      = 256;\n    /* number of literal bytes 0..255 */\n\n    var L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n    /* number of Literal or Length codes, including the END_BLOCK code */\n\n    var D_CODES$1       = 30;\n    /* number of distance codes */\n\n    var BL_CODES$1      = 19;\n    /* number of codes used to transfer the bit lengths */\n\n    var HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n    /* maximum heap size */\n\n    var MAX_BITS$1      = 15;\n    /* All codes must not exceed MAX_BITS bits */\n\n    var Buf_size      = 16;\n    /* size of bit buffer in bi_buf */\n\n\n    /* ===========================================================================\n     * Constants\n     */\n\n    var MAX_BL_BITS = 7;\n    /* Bit length codes must not exceed MAX_BL_BITS bits */\n\n    var END_BLOCK   = 256;\n    /* end of block literal code */\n\n    var REP_3_6     = 16;\n    /* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\n    var REPZ_3_10   = 17;\n    /* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\n    var REPZ_11_138 = 18;\n    /* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n    /* eslint-disable comma-spacing,array-bracket-spacing */\n    var extra_lbits =   /* extra bits for each length code */\n      [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\n    var extra_dbits =   /* extra bits for each distance code */\n      [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\n    var extra_blbits =  /* extra bits for each bit length code */\n      [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\n    var bl_order =\n      [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n    /* eslint-enable comma-spacing,array-bracket-spacing */\n\n    /* The lengths of the bit length codes are sent in order of decreasing\n     * probability, to avoid transmitting the lengths for unused bit length codes.\n     */\n\n    /* ===========================================================================\n     * Local data. These are initialized only once.\n     */\n\n    // We pre-fill arrays with 0 to avoid uninitialized gaps\n\n    var DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n    // !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\n    var static_ltree  = new Array((L_CODES$1 + 2) * 2);\n    zero$1(static_ltree);\n    /* The static literal tree. Since the bit lengths are imposed, there is no\n     * need for the L_CODES extra codes used during heap construction. However\n     * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n     * below).\n     */\n\n    var static_dtree  = new Array(D_CODES$1 * 2);\n    zero$1(static_dtree);\n    /* The static distance tree. (Actually a trivial tree since all codes use\n     * 5 bits.)\n     */\n\n    var _dist_code    = new Array(DIST_CODE_LEN);\n    zero$1(_dist_code);\n    /* Distance codes. The first 256 values correspond to the distances\n     * 3 .. 258, the last 256 values correspond to the top 8 bits of\n     * the 15 bit distances.\n     */\n\n    var _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\n    zero$1(_length_code);\n    /* length code for each normalized match length (0 == MIN_MATCH) */\n\n    var base_length   = new Array(LENGTH_CODES$1);\n    zero$1(base_length);\n    /* First normalized length for each code (0 = MIN_MATCH) */\n\n    var base_dist     = new Array(D_CODES$1);\n    zero$1(base_dist);\n    /* First normalized distance for each code (0 = distance of 1) */\n\n\n    function StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n      this.static_tree  = static_tree;  /* static tree or NULL */\n      this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n      this.extra_base   = extra_base;   /* base index for extra_bits */\n      this.elems        = elems;        /* max number of elements in the tree */\n      this.max_length   = max_length;   /* max bit length for the codes */\n\n      // show if `static_tree` has data or dummy - needed for monomorphic objects\n      this.has_stree    = static_tree && static_tree.length;\n    }\n\n\n    var static_l_desc;\n    var static_d_desc;\n    var static_bl_desc;\n\n\n    function TreeDesc(dyn_tree, stat_desc) {\n      this.dyn_tree = dyn_tree;     /* the dynamic tree */\n      this.max_code = 0;            /* largest code with non zero frequency */\n      this.stat_desc = stat_desc;   /* the corresponding static tree */\n    }\n\n\n\n    function d_code(dist) {\n      return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n    }\n\n\n    /* ===========================================================================\n     * Output a short LSB first on the stream.\n     * IN assertion: there is enough room in pendingBuf.\n     */\n    function put_short(s, w) {\n    //    put_byte(s, (uch)((w) & 0xff));\n    //    put_byte(s, (uch)((ush)(w) >> 8));\n      s.pending_buf[s.pending++] = (w) & 0xff;\n      s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n    }\n\n\n    /* ===========================================================================\n     * Send a value on a given number of bits.\n     * IN assertion: length <= 16 and value fits in length bits.\n     */\n    function send_bits(s, value, length) {\n      if (s.bi_valid > (Buf_size - length)) {\n        s.bi_buf |= (value << s.bi_valid) & 0xffff;\n        put_short(s, s.bi_buf);\n        s.bi_buf = value >> (Buf_size - s.bi_valid);\n        s.bi_valid += length - Buf_size;\n      } else {\n        s.bi_buf |= (value << s.bi_valid) & 0xffff;\n        s.bi_valid += length;\n      }\n    }\n\n\n    function send_code(s, c, tree) {\n      send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n    }\n\n\n    /* ===========================================================================\n     * Reverse the first len bits of a code, using straightforward code (a faster\n     * method would use a table)\n     * IN assertion: 1 <= len <= 15\n     */\n    function bi_reverse(code, len) {\n      var res = 0;\n      do {\n        res |= code & 1;\n        code >>>= 1;\n        res <<= 1;\n      } while (--len > 0);\n      return res >>> 1;\n    }\n\n\n    /* ===========================================================================\n     * Flush the bit buffer, keeping at most 7 bits in it.\n     */\n    function bi_flush(s) {\n      if (s.bi_valid === 16) {\n        put_short(s, s.bi_buf);\n        s.bi_buf = 0;\n        s.bi_valid = 0;\n\n      } else if (s.bi_valid >= 8) {\n        s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n        s.bi_buf >>= 8;\n        s.bi_valid -= 8;\n      }\n    }\n\n\n    /* ===========================================================================\n     * Compute the optimal bit lengths for a tree and update the total bit length\n     * for the current block.\n     * IN assertion: the fields freq and dad are set, heap[heap_max] and\n     *    above are the tree nodes sorted by increasing frequency.\n     * OUT assertions: the field len is set to the optimal bit length, the\n     *     array bl_count contains the frequencies for each bit length.\n     *     The length opt_len is updated; static_len is also updated if stree is\n     *     not null.\n     */\n    function gen_bitlen(s, desc)\n    //    deflate_state *s;\n    //    tree_desc *desc;    /* the tree descriptor */\n    {\n      var tree            = desc.dyn_tree;\n      var max_code        = desc.max_code;\n      var stree           = desc.stat_desc.static_tree;\n      var has_stree       = desc.stat_desc.has_stree;\n      var extra           = desc.stat_desc.extra_bits;\n      var base            = desc.stat_desc.extra_base;\n      var max_length      = desc.stat_desc.max_length;\n      var h;              /* heap index */\n      var n, m;           /* iterate over the tree elements */\n      var bits;           /* bit length */\n      var xbits;          /* extra bits */\n      var f;              /* frequency */\n      var overflow = 0;   /* number of elements with bit length too large */\n\n      for (bits = 0; bits <= MAX_BITS$1; bits++) {\n        s.bl_count[bits] = 0;\n      }\n\n      /* In a first pass, compute the optimal bit lengths (which may\n       * overflow in the case of the bit length tree).\n       */\n      tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n      for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n        n = s.heap[h];\n        bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n        if (bits > max_length) {\n          bits = max_length;\n          overflow++;\n        }\n        tree[n * 2 + 1]/*.Len*/ = bits;\n        /* We overwrite tree[n].Dad which is no longer needed */\n\n        if (n > max_code) { continue; } /* not a leaf node */\n\n        s.bl_count[bits]++;\n        xbits = 0;\n        if (n >= base) {\n          xbits = extra[n - base];\n        }\n        f = tree[n * 2]/*.Freq*/;\n        s.opt_len += f * (bits + xbits);\n        if (has_stree) {\n          s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n        }\n      }\n      if (overflow === 0) { return; }\n\n      // Trace((stderr,\"\\nbit length overflow\\n\"));\n      /* This happens for example on obj2 and pic of the Calgary corpus */\n\n      /* Find the first bit length which could increase: */\n      do {\n        bits = max_length - 1;\n        while (s.bl_count[bits] === 0) { bits--; }\n        s.bl_count[bits]--;      /* move one leaf down the tree */\n        s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n        s.bl_count[max_length]--;\n        /* The brother of the overflow item also moves one step up,\n         * but this does not affect bl_count[max_length]\n         */\n        overflow -= 2;\n      } while (overflow > 0);\n\n      /* Now recompute all bit lengths, scanning in increasing frequency.\n       * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n       * lengths instead of fixing only the wrong ones. This idea is taken\n       * from 'ar' written by Haruhiko Okumura.)\n       */\n      for (bits = max_length; bits !== 0; bits--) {\n        n = s.bl_count[bits];\n        while (n !== 0) {\n          m = s.heap[--h];\n          if (m > max_code) { continue; }\n          if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n            // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n            s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n            tree[m * 2 + 1]/*.Len*/ = bits;\n          }\n          n--;\n        }\n      }\n    }\n\n\n    /* ===========================================================================\n     * Generate the codes for a given tree and bit counts (which need not be\n     * optimal).\n     * IN assertion: the array bl_count contains the bit length statistics for\n     * the given tree and the field len is set for all tree elements.\n     * OUT assertion: the field code is set for all tree elements of non\n     *     zero code length.\n     */\n    function gen_codes(tree, max_code, bl_count)\n    //    ct_data *tree;             /* the tree to decorate */\n    //    int max_code;              /* largest code with non zero frequency */\n    //    ushf *bl_count;            /* number of codes at each bit length */\n    {\n      var next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n      var code = 0;              /* running code value */\n      var bits;                  /* bit index */\n      var n;                     /* code index */\n\n      /* The distribution counts are first used to generate the code values\n       * without bit reversal.\n       */\n      for (bits = 1; bits <= MAX_BITS$1; bits++) {\n        next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n      }\n      /* Check that the bit counts in bl_count are consistent. The last code\n       * must be all ones.\n       */\n      //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n      //        \"inconsistent bit counts\");\n      //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n      for (n = 0;  n <= max_code; n++) {\n        var len = tree[n * 2 + 1]/*.Len*/;\n        if (len === 0) { continue; }\n        /* Now reverse the bits */\n        tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n        //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n        //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n      }\n    }\n\n\n    /* ===========================================================================\n     * Initialize the various 'constant' tables.\n     */\n    function tr_static_init() {\n      var n;        /* iterates over tree elements */\n      var bits;     /* bit counter */\n      var length;   /* length value */\n      var code;     /* code value */\n      var dist;     /* distance index */\n      var bl_count = new Array(MAX_BITS$1 + 1);\n      /* number of codes at each bit length for an optimal tree */\n\n      // do check in _tr_init()\n      //if (static_init_done) return;\n\n      /* For some embedded targets, global variables are not initialized: */\n    /*#ifdef NO_INIT_GLOBAL_POINTERS\n      static_l_desc.static_tree = static_ltree;\n      static_l_desc.extra_bits = extra_lbits;\n      static_d_desc.static_tree = static_dtree;\n      static_d_desc.extra_bits = extra_dbits;\n      static_bl_desc.extra_bits = extra_blbits;\n    #endif*/\n\n      /* Initialize the mapping length (0..255) -> length code (0..28) */\n      length = 0;\n      for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n        base_length[code] = length;\n        for (n = 0; n < (1 << extra_lbits[code]); n++) {\n          _length_code[length++] = code;\n        }\n      }\n      //Assert (length == 256, \"tr_static_init: length != 256\");\n      /* Note that the length 255 (match length 258) can be represented\n       * in two different ways: code 284 + 5 bits or code 285, so we\n       * overwrite length_code[255] to use the best encoding:\n       */\n      _length_code[length - 1] = code;\n\n      /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n      dist = 0;\n      for (code = 0; code < 16; code++) {\n        base_dist[code] = dist;\n        for (n = 0; n < (1 << extra_dbits[code]); n++) {\n          _dist_code[dist++] = code;\n        }\n      }\n      //Assert (dist == 256, \"tr_static_init: dist != 256\");\n      dist >>= 7; /* from now on, all distances are divided by 128 */\n      for (; code < D_CODES$1; code++) {\n        base_dist[code] = dist << 7;\n        for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n          _dist_code[256 + dist++] = code;\n        }\n      }\n      //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n      /* Construct the codes of the static literal tree */\n      for (bits = 0; bits <= MAX_BITS$1; bits++) {\n        bl_count[bits] = 0;\n      }\n\n      n = 0;\n      while (n <= 143) {\n        static_ltree[n * 2 + 1]/*.Len*/ = 8;\n        n++;\n        bl_count[8]++;\n      }\n      while (n <= 255) {\n        static_ltree[n * 2 + 1]/*.Len*/ = 9;\n        n++;\n        bl_count[9]++;\n      }\n      while (n <= 279) {\n        static_ltree[n * 2 + 1]/*.Len*/ = 7;\n        n++;\n        bl_count[7]++;\n      }\n      while (n <= 287) {\n        static_ltree[n * 2 + 1]/*.Len*/ = 8;\n        n++;\n        bl_count[8]++;\n      }\n      /* Codes 286 and 287 do not exist, but we must include them in the\n       * tree construction to get a canonical Huffman tree (longest code\n       * all ones)\n       */\n      gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n      /* The static distance tree is trivial: */\n      for (n = 0; n < D_CODES$1; n++) {\n        static_dtree[n * 2 + 1]/*.Len*/ = 5;\n        static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n      }\n\n      // Now data ready and we can init static trees\n      static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n      static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n      static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n      //static_init_done = true;\n    }\n\n\n    /* ===========================================================================\n     * Initialize a new block.\n     */\n    function init_block(s) {\n      var n; /* iterates over tree elements */\n\n      /* Initialize the trees. */\n      for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n      for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n      for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n      s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n      s.opt_len = s.static_len = 0;\n      s.last_lit = s.matches = 0;\n    }\n\n\n    /* ===========================================================================\n     * Flush the bit buffer and align the output on a byte boundary\n     */\n    function bi_windup(s)\n    {\n      if (s.bi_valid > 8) {\n        put_short(s, s.bi_buf);\n      } else if (s.bi_valid > 0) {\n        //put_byte(s, (Byte)s->bi_buf);\n        s.pending_buf[s.pending++] = s.bi_buf;\n      }\n      s.bi_buf = 0;\n      s.bi_valid = 0;\n    }\n\n    /* ===========================================================================\n     * Copy a stored block, storing first the length and its\n     * one's complement if requested.\n     */\n    function copy_block(s, buf, len, header)\n    //DeflateState *s;\n    //charf    *buf;    /* the input data */\n    //unsigned len;     /* its length */\n    //int      header;  /* true if block header must be written */\n    {\n      bi_windup(s);        /* align on byte boundary */\n\n      {\n        put_short(s, len);\n        put_short(s, ~len);\n      }\n    //  while (len--) {\n    //    put_byte(s, *buf++);\n    //  }\n      utils$6.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n      s.pending += len;\n    }\n\n    /* ===========================================================================\n     * Compares to subtrees, using the tree depth as tie breaker when\n     * the subtrees have equal frequency. This minimizes the worst case length.\n     */\n    function smaller(tree, n, m, depth) {\n      var _n2 = n * 2;\n      var _m2 = m * 2;\n      return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n             (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n    }\n\n    /* ===========================================================================\n     * Restore the heap property by moving down the tree starting at node k,\n     * exchanging a node with the smallest of its two sons if necessary, stopping\n     * when the heap property is re-established (each father smaller than its\n     * two sons).\n     */\n    function pqdownheap(s, tree, k)\n    //    deflate_state *s;\n    //    ct_data *tree;  /* the tree to restore */\n    //    int k;               /* node to move down */\n    {\n      var v = s.heap[k];\n      var j = k << 1;  /* left son of k */\n      while (j <= s.heap_len) {\n        /* Set j to the smallest of the two sons: */\n        if (j < s.heap_len &&\n          smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n          j++;\n        }\n        /* Exit if v is smaller than both sons */\n        if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n        /* Exchange v with the smallest son */\n        s.heap[k] = s.heap[j];\n        k = j;\n\n        /* And continue down the tree, setting j to the left son of k */\n        j <<= 1;\n      }\n      s.heap[k] = v;\n    }\n\n\n    // inlined manually\n    // var SMALLEST = 1;\n\n    /* ===========================================================================\n     * Send the block data compressed using the given Huffman trees\n     */\n    function compress_block(s, ltree, dtree)\n    //    deflate_state *s;\n    //    const ct_data *ltree; /* literal tree */\n    //    const ct_data *dtree; /* distance tree */\n    {\n      var dist;           /* distance of matched string */\n      var lc;             /* match length or unmatched char (if dist == 0) */\n      var lx = 0;         /* running index in l_buf */\n      var code;           /* the code to send */\n      var extra;          /* number of extra bits to send */\n\n      if (s.last_lit !== 0) {\n        do {\n          dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n          lc = s.pending_buf[s.l_buf + lx];\n          lx++;\n\n          if (dist === 0) {\n            send_code(s, lc, ltree); /* send a literal byte */\n            //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n          } else {\n            /* Here, lc is the match length - MIN_MATCH */\n            code = _length_code[lc];\n            send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n            extra = extra_lbits[code];\n            if (extra !== 0) {\n              lc -= base_length[code];\n              send_bits(s, lc, extra);       /* send the extra length bits */\n            }\n            dist--; /* dist is now the match distance - 1 */\n            code = d_code(dist);\n            //Assert (code < D_CODES, \"bad d_code\");\n\n            send_code(s, code, dtree);       /* send the distance code */\n            extra = extra_dbits[code];\n            if (extra !== 0) {\n              dist -= base_dist[code];\n              send_bits(s, dist, extra);   /* send the extra distance bits */\n            }\n          } /* literal or match pair ? */\n\n          /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n          //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n          //       \"pendingBuf overflow\");\n\n        } while (lx < s.last_lit);\n      }\n\n      send_code(s, END_BLOCK, ltree);\n    }\n\n\n    /* ===========================================================================\n     * Construct one Huffman tree and assigns the code bit strings and lengths.\n     * Update the total bit length for the current block.\n     * IN assertion: the field freq is set for all tree elements.\n     * OUT assertions: the fields len and code are set to the optimal bit length\n     *     and corresponding code. The length opt_len is updated; static_len is\n     *     also updated if stree is not null. The field max_code is set.\n     */\n    function build_tree(s, desc)\n    //    deflate_state *s;\n    //    tree_desc *desc; /* the tree descriptor */\n    {\n      var tree     = desc.dyn_tree;\n      var stree    = desc.stat_desc.static_tree;\n      var has_stree = desc.stat_desc.has_stree;\n      var elems    = desc.stat_desc.elems;\n      var n, m;          /* iterate over heap elements */\n      var max_code = -1; /* largest code with non zero frequency */\n      var node;          /* new node being created */\n\n      /* Construct the initial heap, with least frequent element in\n       * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n       * heap[0] is not used.\n       */\n      s.heap_len = 0;\n      s.heap_max = HEAP_SIZE$1;\n\n      for (n = 0; n < elems; n++) {\n        if (tree[n * 2]/*.Freq*/ !== 0) {\n          s.heap[++s.heap_len] = max_code = n;\n          s.depth[n] = 0;\n\n        } else {\n          tree[n * 2 + 1]/*.Len*/ = 0;\n        }\n      }\n\n      /* The pkzip format requires that at least one distance code exists,\n       * and that at least one bit should be sent even if there is only one\n       * possible code. So to avoid special checks later on we force at least\n       * two codes of non zero frequency.\n       */\n      while (s.heap_len < 2) {\n        node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n        tree[node * 2]/*.Freq*/ = 1;\n        s.depth[node] = 0;\n        s.opt_len--;\n\n        if (has_stree) {\n          s.static_len -= stree[node * 2 + 1]/*.Len*/;\n        }\n        /* node is 0 or 1 so it does not have extra bits */\n      }\n      desc.max_code = max_code;\n\n      /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n       * establish sub-heaps of increasing lengths:\n       */\n      for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n      /* Construct the Huffman tree by repeatedly combining the least two\n       * frequent nodes.\n       */\n      node = elems;              /* next internal node of the tree */\n      do {\n        //pqremove(s, tree, n);  /* n = node of least frequency */\n        /*** pqremove ***/\n        n = s.heap[1/*SMALLEST*/];\n        s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n        pqdownheap(s, tree, 1/*SMALLEST*/);\n        /***/\n\n        m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n        s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n        s.heap[--s.heap_max] = m;\n\n        /* Create a new node father of n and m */\n        tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n        s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n        tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n        /* and insert the new node in the heap */\n        s.heap[1/*SMALLEST*/] = node++;\n        pqdownheap(s, tree, 1/*SMALLEST*/);\n\n      } while (s.heap_len >= 2);\n\n      s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n      /* At this point, the fields freq and dad are set. We can now\n       * generate the bit lengths.\n       */\n      gen_bitlen(s, desc);\n\n      /* The field len is now set, we can generate the bit codes */\n      gen_codes(tree, max_code, s.bl_count);\n    }\n\n\n    /* ===========================================================================\n     * Scan a literal or distance tree to determine the frequencies of the codes\n     * in the bit length tree.\n     */\n    function scan_tree(s, tree, max_code)\n    //    deflate_state *s;\n    //    ct_data *tree;   /* the tree to be scanned */\n    //    int max_code;    /* and its largest code of non zero frequency */\n    {\n      var n;                     /* iterates over all tree elements */\n      var prevlen = -1;          /* last emitted length */\n      var curlen;                /* length of current code */\n\n      var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n      var count = 0;             /* repeat count of the current code */\n      var max_count = 7;         /* max repeat count */\n      var min_count = 4;         /* min repeat count */\n\n      if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n      }\n      tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n      for (n = 0; n <= max_code; n++) {\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n        if (++count < max_count && curlen === nextlen) {\n          continue;\n\n        } else if (count < min_count) {\n          s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n        } else if (curlen !== 0) {\n\n          if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n          s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n        } else if (count <= 10) {\n          s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n        } else {\n          s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n        }\n\n        count = 0;\n        prevlen = curlen;\n\n        if (nextlen === 0) {\n          max_count = 138;\n          min_count = 3;\n\n        } else if (curlen === nextlen) {\n          max_count = 6;\n          min_count = 3;\n\n        } else {\n          max_count = 7;\n          min_count = 4;\n        }\n      }\n    }\n\n\n    /* ===========================================================================\n     * Send a literal or distance tree in compressed form, using the codes in\n     * bl_tree.\n     */\n    function send_tree(s, tree, max_code)\n    //    deflate_state *s;\n    //    ct_data *tree; /* the tree to be scanned */\n    //    int max_code;       /* and its largest code of non zero frequency */\n    {\n      var n;                     /* iterates over all tree elements */\n      var prevlen = -1;          /* last emitted length */\n      var curlen;                /* length of current code */\n\n      var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n      var count = 0;             /* repeat count of the current code */\n      var max_count = 7;         /* max repeat count */\n      var min_count = 4;         /* min repeat count */\n\n      /* tree[max_code+1].Len = -1; */  /* guard already set */\n      if (nextlen === 0) {\n        max_count = 138;\n        min_count = 3;\n      }\n\n      for (n = 0; n <= max_code; n++) {\n        curlen = nextlen;\n        nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n        if (++count < max_count && curlen === nextlen) {\n          continue;\n\n        } else if (count < min_count) {\n          do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n        } else if (curlen !== 0) {\n          if (curlen !== prevlen) {\n            send_code(s, curlen, s.bl_tree);\n            count--;\n          }\n          //Assert(count >= 3 && count <= 6, \" 3_6?\");\n          send_code(s, REP_3_6, s.bl_tree);\n          send_bits(s, count - 3, 2);\n\n        } else if (count <= 10) {\n          send_code(s, REPZ_3_10, s.bl_tree);\n          send_bits(s, count - 3, 3);\n\n        } else {\n          send_code(s, REPZ_11_138, s.bl_tree);\n          send_bits(s, count - 11, 7);\n        }\n\n        count = 0;\n        prevlen = curlen;\n        if (nextlen === 0) {\n          max_count = 138;\n          min_count = 3;\n\n        } else if (curlen === nextlen) {\n          max_count = 6;\n          min_count = 3;\n\n        } else {\n          max_count = 7;\n          min_count = 4;\n        }\n      }\n    }\n\n\n    /* ===========================================================================\n     * Construct the Huffman tree for the bit lengths and return the index in\n     * bl_order of the last bit length code to send.\n     */\n    function build_bl_tree(s) {\n      var max_blindex;  /* index of last bit length code of non zero freq */\n\n      /* Determine the bit length frequencies for literal and distance trees */\n      scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n      scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n      /* Build the bit length tree: */\n      build_tree(s, s.bl_desc);\n      /* opt_len now includes the length of the tree representations, except\n       * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n       */\n\n      /* Determine the number of bit length codes to send. The pkzip format\n       * requires that at least 4 bit length codes be sent. (appnote.txt says\n       * 3 but the actual value used is 4.)\n       */\n      for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n        if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n          break;\n        }\n      }\n      /* Update opt_len to include the bit length tree and counts */\n      s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n      //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n      //        s->opt_len, s->static_len));\n\n      return max_blindex;\n    }\n\n\n    /* ===========================================================================\n     * Send the header for a block using dynamic Huffman trees: the counts, the\n     * lengths of the bit length codes, the literal tree and the distance tree.\n     * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n     */\n    function send_all_trees(s, lcodes, dcodes, blcodes)\n    //    deflate_state *s;\n    //    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n    {\n      var rank;                    /* index in bl_order */\n\n      //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n      //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n      //        \"too many codes\");\n      //Tracev((stderr, \"\\nbl counts: \"));\n      send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n      send_bits(s, dcodes - 1,   5);\n      send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n      for (rank = 0; rank < blcodes; rank++) {\n        //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n        send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n      }\n      //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n      send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n      //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n      send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n      //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n    }\n\n\n    /* ===========================================================================\n     * Check if the data type is TEXT or BINARY, using the following algorithm:\n     * - TEXT if the two conditions below are satisfied:\n     *    a) There are no non-portable control characters belonging to the\n     *       \"black list\" (0..6, 14..25, 28..31).\n     *    b) There is at least one printable character belonging to the\n     *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n     * - BINARY otherwise.\n     * - The following partially-portable control characters form a\n     *   \"gray list\" that is ignored in this detection algorithm:\n     *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n     * IN assertion: the fields Freq of dyn_ltree are set.\n     */\n    function detect_data_type(s) {\n      /* black_mask is the bit mask of black-listed bytes\n       * set bits 0..6, 14..25, and 28..31\n       * 0xf3ffc07f = binary 11110011111111111100000001111111\n       */\n      var black_mask = 0xf3ffc07f;\n      var n;\n\n      /* Check for non-textual (\"black-listed\") bytes. */\n      for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n        if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n          return Z_BINARY;\n        }\n      }\n\n      /* Check for textual (\"white-listed\") bytes. */\n      if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n          s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n        return Z_TEXT;\n      }\n      for (n = 32; n < LITERALS$1; n++) {\n        if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n          return Z_TEXT;\n        }\n      }\n\n      /* There are no \"black-listed\" or \"white-listed\" bytes:\n       * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n       */\n      return Z_BINARY;\n    }\n\n\n    var static_init_done = false;\n\n    /* ===========================================================================\n     * Initialize the tree data structures for a new zlib stream.\n     */\n    function _tr_init(s)\n    {\n\n      if (!static_init_done) {\n        tr_static_init();\n        static_init_done = true;\n      }\n\n      s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n      s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n      s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n      s.bi_buf = 0;\n      s.bi_valid = 0;\n\n      /* Initialize the first block of the first file: */\n      init_block(s);\n    }\n\n\n    /* ===========================================================================\n     * Send a stored block\n     */\n    function _tr_stored_block(s, buf, stored_len, last)\n    //DeflateState *s;\n    //charf *buf;       /* input block */\n    //ulg stored_len;   /* length of input block */\n    //int last;         /* one if this is the last block for a file */\n    {\n      send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n      copy_block(s, buf, stored_len); /* with header */\n    }\n\n\n    /* ===========================================================================\n     * Send one empty static block to give enough lookahead for inflate.\n     * This takes 10 bits, of which 7 may remain in the bit buffer.\n     */\n    function _tr_align(s) {\n      send_bits(s, STATIC_TREES << 1, 3);\n      send_code(s, END_BLOCK, static_ltree);\n      bi_flush(s);\n    }\n\n\n    /* ===========================================================================\n     * Determine the best encoding for the current block: dynamic trees, static\n     * trees or store, and output the encoded block to the zip file.\n     */\n    function _tr_flush_block(s, buf, stored_len, last)\n    //DeflateState *s;\n    //charf *buf;       /* input block, or NULL if too old */\n    //ulg stored_len;   /* length of input block */\n    //int last;         /* one if this is the last block for a file */\n    {\n      var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n      var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n      /* Build the Huffman trees unless a stored block is forced */\n      if (s.level > 0) {\n\n        /* Check if the file is binary or text */\n        if (s.strm.data_type === Z_UNKNOWN$1) {\n          s.strm.data_type = detect_data_type(s);\n        }\n\n        /* Construct the literal and distance trees */\n        build_tree(s, s.l_desc);\n        // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n        //        s->static_len));\n\n        build_tree(s, s.d_desc);\n        // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n        //        s->static_len));\n        /* At this point, opt_len and static_len are the total bit lengths of\n         * the compressed block data, excluding the tree representations.\n         */\n\n        /* Build the bit length tree for the above two trees, and get the index\n         * in bl_order of the last bit length code to send.\n         */\n        max_blindex = build_bl_tree(s);\n\n        /* Determine the best encoding. Compute the block lengths in bytes. */\n        opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n        static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n        // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n        //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n        //        s->last_lit));\n\n        if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n      } else {\n        // Assert(buf != (char*)0, \"lost buf\");\n        opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n      }\n\n      if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n        /* 4: two words for the lengths */\n\n        /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n         * Otherwise we can't have processed more than WSIZE input bytes since\n         * the last block flush, because compression would have been\n         * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n         * transform a block into a stored block.\n         */\n        _tr_stored_block(s, buf, stored_len, last);\n\n      } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n        send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n        compress_block(s, static_ltree, static_dtree);\n\n      } else {\n        send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n        send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n        compress_block(s, s.dyn_ltree, s.dyn_dtree);\n      }\n      // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n      /* The above check is made mod 2^32, for files larger than 512 MB\n       * and uLong implemented on 32 bits.\n       */\n      init_block(s);\n\n      if (last) {\n        bi_windup(s);\n      }\n      // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n      //       s->compressed_len-7*last));\n    }\n\n    /* ===========================================================================\n     * Save the match info and tally the frequency counts. Return true if\n     * the current block must be flushed.\n     */\n    function _tr_tally(s, dist, lc)\n    //    deflate_state *s;\n    //    unsigned dist;  /* distance of matched string */\n    //    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n    {\n      //var out_length, in_length, dcode;\n\n      s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n      s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n      s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n      s.last_lit++;\n\n      if (dist === 0) {\n        /* lc is the unmatched char */\n        s.dyn_ltree[lc * 2]/*.Freq*/++;\n      } else {\n        s.matches++;\n        /* Here, lc is the match length - MIN_MATCH */\n        dist--;             /* dist = match distance - 1 */\n        //Assert((ush)dist < (ush)MAX_DIST(s) &&\n        //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n        //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n        s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n        s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n      }\n\n    // (!) This block is disabled in zlib defaults,\n    // don't enable it for binary compatibility\n\n    //#ifdef TRUNCATE_BLOCK\n    //  /* Try to guess if it is profitable to stop the current block here */\n    //  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n    //    /* Compute an upper bound for the compressed length */\n    //    out_length = s.last_lit*8;\n    //    in_length = s.strstart - s.block_start;\n    //\n    //    for (dcode = 0; dcode < D_CODES; dcode++) {\n    //      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n    //    }\n    //    out_length >>>= 3;\n    //    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n    //    //       s->last_lit, in_length, out_length,\n    //    //       100L - out_length*100L/in_length));\n    //    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n    //      return true;\n    //    }\n    //  }\n    //#endif\n\n      return (s.last_lit === s.lit_bufsize - 1);\n      /* We avoid equality with lit_bufsize because of wraparound at 64K\n       * on 16 bit machines and because stored blocks are restricted to\n       * 64K-1 bytes.\n       */\n    }\n\n    trees$1._tr_init  = _tr_init;\n    trees$1._tr_stored_block = _tr_stored_block;\n    trees$1._tr_flush_block  = _tr_flush_block;\n    trees$1._tr_tally = _tr_tally;\n    trees$1._tr_align = _tr_align;\n\n    // Note: adler32 takes 12% for level 0 and 2% for level 6.\n    // It isn't worth it to make additional optimizations as in original.\n    // Small size is preferable.\n\n    // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n    //\n    // This software is provided 'as-is', without any express or implied\n    // warranty. In no event will the authors be held liable for any damages\n    // arising from the use of this software.\n    //\n    // Permission is granted to anyone to use this software for any purpose,\n    // including commercial applications, and to alter it and redistribute it\n    // freely, subject to the following restrictions:\n    //\n    // 1. The origin of this software must not be misrepresented; you must not\n    //   claim that you wrote the original software. If you use this software\n    //   in a product, an acknowledgment in the product documentation would be\n    //   appreciated but is not required.\n    // 2. Altered source versions must be plainly marked as such, and must not be\n    //   misrepresented as being the original software.\n    // 3. This notice may not be removed or altered from any source distribution.\n\n    function adler32$2(adler, buf, len, pos) {\n      var s1 = (adler & 0xffff) |0,\n          s2 = ((adler >>> 16) & 0xffff) |0,\n          n = 0;\n\n      while (len !== 0) {\n        // Set limit ~ twice less than 5552, to keep\n        // s2 in 31-bits, because we force signed ints.\n        // in other case %= will fail.\n        n = len > 2000 ? 2000 : len;\n        len -= n;\n\n        do {\n          s1 = (s1 + buf[pos++]) |0;\n          s2 = (s2 + s1) |0;\n        } while (--n);\n\n        s1 %= 65521;\n        s2 %= 65521;\n      }\n\n      return (s1 | (s2 << 16)) |0;\n    }\n\n\n    var adler32_1 = adler32$2;\n\n    // Note: we can't get significant speed boost here.\n    // So write code to minimize size - no pregenerated tables\n    // and array tools dependencies.\n\n    // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n    //\n    // This software is provided 'as-is', without any express or implied\n    // warranty. In no event will the authors be held liable for any damages\n    // arising from the use of this software.\n    //\n    // Permission is granted to anyone to use this software for any purpose,\n    // including commercial applications, and to alter it and redistribute it\n    // freely, subject to the following restrictions:\n    //\n    // 1. The origin of this software must not be misrepresented; you must not\n    //   claim that you wrote the original software. If you use this software\n    //   in a product, an acknowledgment in the product documentation would be\n    //   appreciated but is not required.\n    // 2. Altered source versions must be plainly marked as such, and must not be\n    //   misrepresented as being the original software.\n    // 3. This notice may not be removed or altered from any source distribution.\n\n    // Use ordinary array, since untyped makes no boost here\n    function makeTable() {\n      var c, table = [];\n\n      for (var n = 0; n < 256; n++) {\n        c = n;\n        for (var k = 0; k < 8; k++) {\n          c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n        }\n        table[n] = c;\n      }\n\n      return table;\n    }\n\n    // Create table on load. Just 255 signed longs. Not a problem.\n    var crcTable = makeTable();\n\n\n    function crc32$2(crc, buf, len, pos) {\n      var t = crcTable,\n          end = pos + len;\n\n      crc ^= -1;\n\n      for (var i = pos; i < end; i++) {\n        crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n      }\n\n      return (crc ^ (-1)); // >>> 0;\n    }\n\n\n    var crc32_1 = crc32$2;\n\n    // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n    //\n    // This software is provided 'as-is', without any express or implied\n    // warranty. In no event will the authors be held liable for any damages\n    // arising from the use of this software.\n    //\n    // Permission is granted to anyone to use this software for any purpose,\n    // including commercial applications, and to alter it and redistribute it\n    // freely, subject to the following restrictions:\n    //\n    // 1. The origin of this software must not be misrepresented; you must not\n    //   claim that you wrote the original software. If you use this software\n    //   in a product, an acknowledgment in the product documentation would be\n    //   appreciated but is not required.\n    // 2. Altered source versions must be plainly marked as such, and must not be\n    //   misrepresented as being the original software.\n    // 3. This notice may not be removed or altered from any source distribution.\n\n    var messages = {\n      2:      'need dictionary',     /* Z_NEED_DICT       2  */\n      1:      'stream end',          /* Z_STREAM_END      1  */\n      0:      '',                    /* Z_OK              0  */\n      '-1':   'file error',          /* Z_ERRNO         (-1) */\n      '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n      '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n      '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n      '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n      '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n    };\n\n    // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n    //\n    // This software is provided 'as-is', without any express or implied\n    // warranty. In no event will the authors be held liable for any damages\n    // arising from the use of this software.\n    //\n    // Permission is granted to anyone to use this software for any purpose,\n    // including commercial applications, and to alter it and redistribute it\n    // freely, subject to the following restrictions:\n    //\n    // 1. The origin of this software must not be misrepresented; you must not\n    //   claim that you wrote the original software. If you use this software\n    //   in a product, an acknowledgment in the product documentation would be\n    //   appreciated but is not required.\n    // 2. Altered source versions must be plainly marked as such, and must not be\n    //   misrepresented as being the original software.\n    // 3. This notice may not be removed or altered from any source distribution.\n\n    var utils$5   = common;\n    var trees   = trees$1;\n    var adler32$1 = adler32_1;\n    var crc32$1   = crc32_1;\n    var msg$2     = messages;\n\n    /* Public constants ==========================================================*/\n    /* ===========================================================================*/\n\n\n    /* Allowed flush values; see deflate() and inflate() below for details */\n    var Z_NO_FLUSH$1      = 0;\n    var Z_PARTIAL_FLUSH = 1;\n    //var Z_SYNC_FLUSH    = 2;\n    var Z_FULL_FLUSH    = 3;\n    var Z_FINISH$2        = 4;\n    var Z_BLOCK$1         = 5;\n    //var Z_TREES         = 6;\n\n\n    /* Return codes for the compression/decompression functions. Negative values\n     * are errors, positive values are used for special but normal events.\n     */\n    var Z_OK$2            = 0;\n    var Z_STREAM_END$2    = 1;\n    //var Z_NEED_DICT     = 2;\n    //var Z_ERRNO         = -1;\n    var Z_STREAM_ERROR$1  = -2;\n    var Z_DATA_ERROR$1    = -3;\n    //var Z_MEM_ERROR     = -4;\n    var Z_BUF_ERROR$1     = -5;\n    //var Z_VERSION_ERROR = -6;\n\n\n    /* compression levels */\n    //var Z_NO_COMPRESSION      = 0;\n    //var Z_BEST_SPEED          = 1;\n    //var Z_BEST_COMPRESSION    = 9;\n    var Z_DEFAULT_COMPRESSION$1 = -1;\n\n\n    var Z_FILTERED            = 1;\n    var Z_HUFFMAN_ONLY        = 2;\n    var Z_RLE                 = 3;\n    var Z_FIXED               = 4;\n    var Z_DEFAULT_STRATEGY$1    = 0;\n\n    /* Possible values of the data_type field (though see inflate()) */\n    //var Z_BINARY              = 0;\n    //var Z_TEXT                = 1;\n    //var Z_ASCII               = 1; // = Z_TEXT\n    var Z_UNKNOWN             = 2;\n\n\n    /* The deflate compression method */\n    var Z_DEFLATED$2  = 8;\n\n    /*============================================================================*/\n\n\n    var MAX_MEM_LEVEL = 9;\n    /* Maximum value for memLevel in deflateInit2 */\n    var MAX_WBITS$1 = 15;\n    /* 32K LZ77 window */\n    var DEF_MEM_LEVEL = 8;\n\n\n    var LENGTH_CODES  = 29;\n    /* number of length codes, not counting the special END_BLOCK code */\n    var LITERALS      = 256;\n    /* number of literal bytes 0..255 */\n    var L_CODES       = LITERALS + 1 + LENGTH_CODES;\n    /* number of Literal or Length codes, including the END_BLOCK code */\n    var D_CODES       = 30;\n    /* number of distance codes */\n    var BL_CODES      = 19;\n    /* number of codes used to transfer the bit lengths */\n    var HEAP_SIZE     = 2 * L_CODES + 1;\n    /* maximum heap size */\n    var MAX_BITS  = 15;\n    /* All codes must not exceed MAX_BITS bits */\n\n    var MIN_MATCH = 3;\n    var MAX_MATCH = 258;\n    var MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\n    var PRESET_DICT = 0x20;\n\n    var INIT_STATE = 42;\n    var EXTRA_STATE = 69;\n    var NAME_STATE = 73;\n    var COMMENT_STATE = 91;\n    var HCRC_STATE = 103;\n    var BUSY_STATE = 113;\n    var FINISH_STATE = 666;\n\n    var BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\n    var BS_BLOCK_DONE     = 2; /* block flush performed */\n    var BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\n    var BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\n    var OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\n    function err(strm, errorCode) {\n      strm.msg = msg$2[errorCode];\n      return errorCode;\n    }\n\n    function rank(f) {\n      return ((f) << 1) - ((f) > 4 ? 9 : 0);\n    }\n\n    function zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n    /* =========================================================================\n     * Flush as much pending output as possible. All deflate() output goes\n     * through this function so some applications may wish to modify it\n     * to avoid allocating a large strm->output buffer and copying into it.\n     * (See also read_buf()).\n     */\n    function flush_pending(strm) {\n      var s = strm.state;\n\n      //_tr_flush_bits(s);\n      var len = s.pending;\n      if (len > strm.avail_out) {\n        len = strm.avail_out;\n      }\n      if (len === 0) { return; }\n\n      utils$5.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n      strm.next_out += len;\n      s.pending_out += len;\n      strm.total_out += len;\n      strm.avail_out -= len;\n      s.pending -= len;\n      if (s.pending === 0) {\n        s.pending_out = 0;\n      }\n    }\n\n\n    function flush_block_only(s, last) {\n      trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n      s.block_start = s.strstart;\n      flush_pending(s.strm);\n    }\n\n\n    function put_byte(s, b) {\n      s.pending_buf[s.pending++] = b;\n    }\n\n\n    /* =========================================================================\n     * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n     * IN assertion: the stream state is correct and there is enough room in\n     * pending_buf.\n     */\n    function putShortMSB(s, b) {\n    //  put_byte(s, (Byte)(b >> 8));\n    //  put_byte(s, (Byte)(b & 0xff));\n      s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n      s.pending_buf[s.pending++] = b & 0xff;\n    }\n\n\n    /* ===========================================================================\n     * Read a new buffer from the current input stream, update the adler32\n     * and total number of bytes read.  All deflate() input goes through\n     * this function so some applications may wish to modify it to avoid\n     * allocating a large strm->input buffer and copying from it.\n     * (See also flush_pending()).\n     */\n    function read_buf(strm, buf, start, size) {\n      var len = strm.avail_in;\n\n      if (len > size) { len = size; }\n      if (len === 0) { return 0; }\n\n      strm.avail_in -= len;\n\n      // zmemcpy(buf, strm->next_in, len);\n      utils$5.arraySet(buf, strm.input, strm.next_in, len, start);\n      if (strm.state.wrap === 1) {\n        strm.adler = adler32$1(strm.adler, buf, len, start);\n      }\n\n      else if (strm.state.wrap === 2) {\n        strm.adler = crc32$1(strm.adler, buf, len, start);\n      }\n\n      strm.next_in += len;\n      strm.total_in += len;\n\n      return len;\n    }\n\n\n    /* ===========================================================================\n     * Set match_start to the longest match starting at the given string and\n     * return its length. Matches shorter or equal to prev_length are discarded,\n     * in which case the result is equal to prev_length and match_start is\n     * garbage.\n     * IN assertions: cur_match is the head of the hash chain for the current\n     *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n     * OUT assertion: the match length is not greater than s->lookahead.\n     */\n    function longest_match(s, cur_match) {\n      var chain_length = s.max_chain_length;      /* max hash chain length */\n      var scan = s.strstart; /* current string */\n      var match;                       /* matched string */\n      var len;                           /* length of current match */\n      var best_len = s.prev_length;              /* best match length so far */\n      var nice_match = s.nice_match;             /* stop if match long enough */\n      var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n          s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n      var _win = s.window; // shortcut\n\n      var wmask = s.w_mask;\n      var prev  = s.prev;\n\n      /* Stop when cur_match becomes <= limit. To simplify the code,\n       * we prevent matches with the string of window index 0.\n       */\n\n      var strend = s.strstart + MAX_MATCH;\n      var scan_end1  = _win[scan + best_len - 1];\n      var scan_end   = _win[scan + best_len];\n\n      /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n       * It is easy to get rid of this optimization if necessary.\n       */\n      // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n      /* Do not waste too much time if we already have a good match: */\n      if (s.prev_length >= s.good_match) {\n        chain_length >>= 2;\n      }\n      /* Do not look for matches beyond the end of the input. This is necessary\n       * to make deflate deterministic.\n       */\n      if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n      // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n      do {\n        // Assert(cur_match < s->strstart, \"no future\");\n        match = cur_match;\n\n        /* Skip to next match if the match length cannot increase\n         * or if the match length is less than 2.  Note that the checks below\n         * for insufficient lookahead only occur occasionally for performance\n         * reasons.  Therefore uninitialized memory will be accessed, and\n         * conditional jumps will be made that depend on those values.\n         * However the length of the match is limited to the lookahead, so\n         * the output of deflate is not affected by the uninitialized values.\n         */\n\n        if (_win[match + best_len]     !== scan_end  ||\n            _win[match + best_len - 1] !== scan_end1 ||\n            _win[match]                !== _win[scan] ||\n            _win[++match]              !== _win[scan + 1]) {\n          continue;\n        }\n\n        /* The check at best_len-1 can be removed because it will be made\n         * again later. (This heuristic is not always a win.)\n         * It is not necessary to compare scan[2] and match[2] since they\n         * are always equal when the other bytes match, given that\n         * the hash keys are equal and that HASH_BITS >= 8.\n         */\n        scan += 2;\n        match++;\n        // Assert(*scan == *match, \"match[2]?\");\n\n        /* We check for insufficient lookahead only every 8th comparison;\n         * the 256th check will be made at strstart+258.\n         */\n        do {\n          /*jshint noempty:false*/\n        } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n                 _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n                 scan < strend);\n\n        // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n        len = MAX_MATCH - (strend - scan);\n        scan = strend - MAX_MATCH;\n\n        if (len > best_len) {\n          s.match_start = cur_match;\n          best_len = len;\n          if (len >= nice_match) {\n            break;\n          }\n          scan_end1  = _win[scan + best_len - 1];\n          scan_end   = _win[scan + best_len];\n        }\n      } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n      if (best_len <= s.lookahead) {\n        return best_len;\n      }\n      return s.lookahead;\n    }\n\n\n    /* ===========================================================================\n     * Fill the window when the lookahead becomes insufficient.\n     * Updates strstart and lookahead.\n     *\n     * IN assertion: lookahead < MIN_LOOKAHEAD\n     * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n     *    At least one byte has been read, or avail_in == 0; reads are\n     *    performed for at least two bytes (required for the zip translate_eol\n     *    option -- not supported here).\n     */\n    function fill_window(s) {\n      var _w_size = s.w_size;\n      var p, n, m, more, str;\n\n      //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n      do {\n        more = s.window_size - s.lookahead - s.strstart;\n\n        // JS ints have 32 bit, block below not needed\n        /* Deal with !@#$% 64K limit: */\n        //if (sizeof(int) <= 2) {\n        //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n        //        more = wsize;\n        //\n        //  } else if (more == (unsigned)(-1)) {\n        //        /* Very unlikely, but possible on 16 bit machine if\n        //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n        //         */\n        //        more--;\n        //    }\n        //}\n\n\n        /* If the window is almost full and there is insufficient lookahead,\n         * move the upper half to the lower one to make room in the upper half.\n         */\n        if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n          utils$5.arraySet(s.window, s.window, _w_size, _w_size, 0);\n          s.match_start -= _w_size;\n          s.strstart -= _w_size;\n          /* we now have strstart >= MAX_DIST */\n          s.block_start -= _w_size;\n\n          /* Slide the hash table (could be avoided with 32 bit values\n           at the expense of memory usage). We slide even when level == 0\n           to keep the hash table consistent if we switch back to level > 0\n           later. (Using level 0 permanently is not an optimal usage of\n           zlib, so we don't care about this pathological case.)\n           */\n\n          n = s.hash_size;\n          p = n;\n          do {\n            m = s.head[--p];\n            s.head[p] = (m >= _w_size ? m - _w_size : 0);\n          } while (--n);\n\n          n = _w_size;\n          p = n;\n          do {\n            m = s.prev[--p];\n            s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n            /* If n is not on any hash chain, prev[n] is garbage but\n             * its value will never be used.\n             */\n          } while (--n);\n\n          more += _w_size;\n        }\n        if (s.strm.avail_in === 0) {\n          break;\n        }\n\n        /* If there was no sliding:\n         *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n         *    more == window_size - lookahead - strstart\n         * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n         * => more >= window_size - 2*WSIZE + 2\n         * In the BIG_MEM or MMAP case (not yet supported),\n         *   window_size == input_size + MIN_LOOKAHEAD  &&\n         *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n         * Otherwise, window_size == 2*WSIZE so more >= 2.\n         * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n         */\n        //Assert(more >= 2, \"more < 2\");\n        n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n        s.lookahead += n;\n\n        /* Initialize the hash value now that we have some input: */\n        if (s.lookahead + s.insert >= MIN_MATCH) {\n          str = s.strstart - s.insert;\n          s.ins_h = s.window[str];\n\n          /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n    //#if MIN_MATCH != 3\n    //        Call update_hash() MIN_MATCH-3 more times\n    //#endif\n          while (s.insert) {\n            /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n            s.prev[str & s.w_mask] = s.head[s.ins_h];\n            s.head[s.ins_h] = str;\n            str++;\n            s.insert--;\n            if (s.lookahead + s.insert < MIN_MATCH) {\n              break;\n            }\n          }\n        }\n        /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n         * but this is not important since only literal bytes will be emitted.\n         */\n\n      } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n      /* If the WIN_INIT bytes after the end of the current data have never been\n       * written, then zero those bytes in order to avoid memory check reports of\n       * the use of uninitialized (or uninitialised as Julian writes) bytes by\n       * the longest match routines.  Update the high water mark for the next\n       * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n       * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n       */\n    //  if (s.high_water < s.window_size) {\n    //    var curr = s.strstart + s.lookahead;\n    //    var init = 0;\n    //\n    //    if (s.high_water < curr) {\n    //      /* Previous high water mark below current data -- zero WIN_INIT\n    //       * bytes or up to end of window, whichever is less.\n    //       */\n    //      init = s.window_size - curr;\n    //      if (init > WIN_INIT)\n    //        init = WIN_INIT;\n    //      zmemzero(s->window + curr, (unsigned)init);\n    //      s->high_water = curr + init;\n    //    }\n    //    else if (s->high_water < (ulg)curr + WIN_INIT) {\n    //      /* High water mark at or above current data, but below current data\n    //       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n    //       * to end of window, whichever is less.\n    //       */\n    //      init = (ulg)curr + WIN_INIT - s->high_water;\n    //      if (init > s->window_size - s->high_water)\n    //        init = s->window_size - s->high_water;\n    //      zmemzero(s->window + s->high_water, (unsigned)init);\n    //      s->high_water += init;\n    //    }\n    //  }\n    //\n    //  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n    //    \"not enough room for search\");\n    }\n\n    /* ===========================================================================\n     * Copy without compression as much as possible from the input stream, return\n     * the current block state.\n     * This function does not insert new strings in the dictionary since\n     * uncompressible data is probably not useful. This function is used\n     * only for the level=0 compression option.\n     * NOTE: this function should be optimized to avoid extra copying from\n     * window to pending_buf.\n     */\n    function deflate_stored(s, flush) {\n      /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n       * to pending_buf_size, and each stored block has a 5 byte header:\n       */\n      var max_block_size = 0xffff;\n\n      if (max_block_size > s.pending_buf_size - 5) {\n        max_block_size = s.pending_buf_size - 5;\n      }\n\n      /* Copy as much as possible from input to output: */\n      for (;;) {\n        /* Fill the window as much as possible: */\n        if (s.lookahead <= 1) {\n\n          //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n          //  s->block_start >= (long)s->w_size, \"slide too late\");\n    //      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n    //        s.block_start >= s.w_size)) {\n    //        throw  new Error(\"slide too late\");\n    //      }\n\n          fill_window(s);\n          if (s.lookahead === 0 && flush === Z_NO_FLUSH$1) {\n            return BS_NEED_MORE;\n          }\n\n          if (s.lookahead === 0) {\n            break;\n          }\n          /* flush the current block */\n        }\n        //Assert(s->block_start >= 0L, \"block gone\");\n    //    if (s.block_start < 0) throw new Error(\"block gone\");\n\n        s.strstart += s.lookahead;\n        s.lookahead = 0;\n\n        /* Emit a stored block if pending_buf will be full: */\n        var max_start = s.block_start + max_block_size;\n\n        if (s.strstart === 0 || s.strstart >= max_start) {\n          /* strstart == 0 is possible when wraparound on 16-bit machine */\n          s.lookahead = s.strstart - max_start;\n          s.strstart = max_start;\n          /*** FLUSH_BLOCK(s, 0); ***/\n          flush_block_only(s, false);\n          if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n          }\n          /***/\n\n\n        }\n        /* Flush if we may have to slide, otherwise block_start may become\n         * negative and the data will be gone:\n         */\n        if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n          /*** FLUSH_BLOCK(s, 0); ***/\n          flush_block_only(s, false);\n          if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n          }\n          /***/\n        }\n      }\n\n      s.insert = 0;\n\n      if (flush === Z_FINISH$2) {\n        /*** FLUSH_BLOCK(s, 1); ***/\n        flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n          return BS_FINISH_STARTED;\n        }\n        /***/\n        return BS_FINISH_DONE;\n      }\n\n      if (s.strstart > s.block_start) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n      return BS_NEED_MORE;\n    }\n\n    /* ===========================================================================\n     * Compress as much as possible from the input stream, return the current\n     * block state.\n     * This function does not perform lazy evaluation of matches and inserts\n     * new strings in the dictionary only for unmatched strings or for short\n     * matches. It is used only for the fast compression options.\n     */\n    function deflate_fast(s, flush) {\n      var hash_head;        /* head of the hash chain */\n      var bflush;           /* set if current block must be flushed */\n\n      for (;;) {\n        /* Make sure that we always have enough lookahead, except\n         * at the end of the input file. We need MAX_MATCH bytes\n         * for the next match, plus MIN_MATCH bytes to insert the\n         * string following the next match.\n         */\n        if (s.lookahead < MIN_LOOKAHEAD) {\n          fill_window(s);\n          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {\n            return BS_NEED_MORE;\n          }\n          if (s.lookahead === 0) {\n            break; /* flush the current block */\n          }\n        }\n\n        /* Insert the string window[strstart .. strstart+2] in the\n         * dictionary, and set hash_head to the head of the hash chain:\n         */\n        hash_head = 0/*NIL*/;\n        if (s.lookahead >= MIN_MATCH) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n\n        /* Find the longest match, discarding those <= prev_length.\n         * At this point we have always match_length < MIN_MATCH\n         */\n        if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n          /* To simplify the code, we prevent matches with the string\n           * of window index 0 (in particular we have to avoid a match\n           * of the string with itself at the start of the input file).\n           */\n          s.match_length = longest_match(s, hash_head);\n          /* longest_match() sets match_start */\n        }\n        if (s.match_length >= MIN_MATCH) {\n          // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n          /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                         s.match_length - MIN_MATCH, bflush); ***/\n          bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n          s.lookahead -= s.match_length;\n\n          /* Insert new strings in the hash table only if the match length\n           * is not too large. This saves time but degrades compression.\n           */\n          if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n            s.match_length--; /* string at strstart already in table */\n            do {\n              s.strstart++;\n              /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n              s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n              s.head[s.ins_h] = s.strstart;\n              /***/\n              /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n               * always MIN_MATCH bytes ahead.\n               */\n            } while (--s.match_length !== 0);\n            s.strstart++;\n          } else\n          {\n            s.strstart += s.match_length;\n            s.match_length = 0;\n            s.ins_h = s.window[s.strstart];\n            /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n            s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n    //#if MIN_MATCH != 3\n    //                Call UPDATE_HASH() MIN_MATCH-3 more times\n    //#endif\n            /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n             * matter since it will be recomputed at next deflate call.\n             */\n          }\n        } else {\n          /* No match, output a literal byte */\n          //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n          bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n          s.lookahead--;\n          s.strstart++;\n        }\n        if (bflush) {\n          /*** FLUSH_BLOCK(s, 0); ***/\n          flush_block_only(s, false);\n          if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n          }\n          /***/\n        }\n      }\n      s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n      if (flush === Z_FINISH$2) {\n        /*** FLUSH_BLOCK(s, 1); ***/\n        flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n          return BS_FINISH_STARTED;\n        }\n        /***/\n        return BS_FINISH_DONE;\n      }\n      if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n      return BS_BLOCK_DONE;\n    }\n\n    /* ===========================================================================\n     * Same as above, but achieves better compression. We use a lazy\n     * evaluation for matches: a match is finally adopted only if there is\n     * no better match at the next window position.\n     */\n    function deflate_slow(s, flush) {\n      var hash_head;          /* head of hash chain */\n      var bflush;              /* set if current block must be flushed */\n\n      var max_insert;\n\n      /* Process the input block. */\n      for (;;) {\n        /* Make sure that we always have enough lookahead, except\n         * at the end of the input file. We need MAX_MATCH bytes\n         * for the next match, plus MIN_MATCH bytes to insert the\n         * string following the next match.\n         */\n        if (s.lookahead < MIN_LOOKAHEAD) {\n          fill_window(s);\n          if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$1) {\n            return BS_NEED_MORE;\n          }\n          if (s.lookahead === 0) { break; } /* flush the current block */\n        }\n\n        /* Insert the string window[strstart .. strstart+2] in the\n         * dictionary, and set hash_head to the head of the hash chain:\n         */\n        hash_head = 0/*NIL*/;\n        if (s.lookahead >= MIN_MATCH) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n\n        /* Find the longest match, discarding those <= prev_length.\n         */\n        s.prev_length = s.match_length;\n        s.prev_match = s.match_start;\n        s.match_length = MIN_MATCH - 1;\n\n        if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n            s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n          /* To simplify the code, we prevent matches with the string\n           * of window index 0 (in particular we have to avoid a match\n           * of the string with itself at the start of the input file).\n           */\n          s.match_length = longest_match(s, hash_head);\n          /* longest_match() sets match_start */\n\n          if (s.match_length <= 5 &&\n             (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n            /* If prev_match is also MIN_MATCH, match_start is garbage\n             * but we will ignore the current match anyway.\n             */\n            s.match_length = MIN_MATCH - 1;\n          }\n        }\n        /* If there was a match at the previous step and the current\n         * match is not better, output the previous match:\n         */\n        if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n          max_insert = s.strstart + s.lookahead - MIN_MATCH;\n          /* Do not insert strings in hash table beyond this. */\n\n          //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n          /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                         s.prev_length - MIN_MATCH, bflush);***/\n          bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n          /* Insert in hash table all strings up to the end of the match.\n           * strstart-1 and strstart are already inserted. If there is not\n           * enough lookahead, the last two strings are not inserted in\n           * the hash table.\n           */\n          s.lookahead -= s.prev_length - 1;\n          s.prev_length -= 2;\n          do {\n            if (++s.strstart <= max_insert) {\n              /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n              s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n              hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n              s.head[s.ins_h] = s.strstart;\n              /***/\n            }\n          } while (--s.prev_length !== 0);\n          s.match_available = 0;\n          s.match_length = MIN_MATCH - 1;\n          s.strstart++;\n\n          if (bflush) {\n            /*** FLUSH_BLOCK(s, 0); ***/\n            flush_block_only(s, false);\n            if (s.strm.avail_out === 0) {\n              return BS_NEED_MORE;\n            }\n            /***/\n          }\n\n        } else if (s.match_available) {\n          /* If there was no match at the previous position, output a\n           * single literal. If there was a match but the current match\n           * is longer, truncate the previous match to a single literal.\n           */\n          //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n          /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n          bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n          if (bflush) {\n            /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n            flush_block_only(s, false);\n            /***/\n          }\n          s.strstart++;\n          s.lookahead--;\n          if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n          }\n        } else {\n          /* There is no previous match to compare with, wait for\n           * the next step to decide.\n           */\n          s.match_available = 1;\n          s.strstart++;\n          s.lookahead--;\n        }\n      }\n      //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n      if (s.match_available) {\n        //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n        /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n        bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n        s.match_available = 0;\n      }\n      s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n      if (flush === Z_FINISH$2) {\n        /*** FLUSH_BLOCK(s, 1); ***/\n        flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n          return BS_FINISH_STARTED;\n        }\n        /***/\n        return BS_FINISH_DONE;\n      }\n      if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n      return BS_BLOCK_DONE;\n    }\n\n\n    /* ===========================================================================\n     * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n     * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n     * deflate switches away from Z_RLE.)\n     */\n    function deflate_rle(s, flush) {\n      var bflush;            /* set if current block must be flushed */\n      var prev;              /* byte at distance one to match */\n      var scan, strend;      /* scan goes up to strend for length of run */\n\n      var _win = s.window;\n\n      for (;;) {\n        /* Make sure that we always have enough lookahead, except\n         * at the end of the input file. We need MAX_MATCH bytes\n         * for the longest run, plus one for the unrolled loop.\n         */\n        if (s.lookahead <= MAX_MATCH) {\n          fill_window(s);\n          if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$1) {\n            return BS_NEED_MORE;\n          }\n          if (s.lookahead === 0) { break; } /* flush the current block */\n        }\n\n        /* See how many times the previous byte repeats */\n        s.match_length = 0;\n        if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n          scan = s.strstart - 1;\n          prev = _win[scan];\n          if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n            strend = s.strstart + MAX_MATCH;\n            do {\n              /*jshint noempty:false*/\n            } while (prev === _win[++scan] && prev === _win[++scan] &&\n                     prev === _win[++scan] && prev === _win[++scan] &&\n                     prev === _win[++scan] && prev === _win[++scan] &&\n                     prev === _win[++scan] && prev === _win[++scan] &&\n                     scan < strend);\n            s.match_length = MAX_MATCH - (strend - scan);\n            if (s.match_length > s.lookahead) {\n              s.match_length = s.lookahead;\n            }\n          }\n          //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n        }\n\n        /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n        if (s.match_length >= MIN_MATCH) {\n          //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n          /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n          bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n          s.lookahead -= s.match_length;\n          s.strstart += s.match_length;\n          s.match_length = 0;\n        } else {\n          /* No match, output a literal byte */\n          //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n          /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n          bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n          s.lookahead--;\n          s.strstart++;\n        }\n        if (bflush) {\n          /*** FLUSH_BLOCK(s, 0); ***/\n          flush_block_only(s, false);\n          if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n          }\n          /***/\n        }\n      }\n      s.insert = 0;\n      if (flush === Z_FINISH$2) {\n        /*** FLUSH_BLOCK(s, 1); ***/\n        flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n          return BS_FINISH_STARTED;\n        }\n        /***/\n        return BS_FINISH_DONE;\n      }\n      if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n      return BS_BLOCK_DONE;\n    }\n\n    /* ===========================================================================\n     * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n     * (It will be regenerated if this run of deflate switches away from Huffman.)\n     */\n    function deflate_huff(s, flush) {\n      var bflush;             /* set if current block must be flushed */\n\n      for (;;) {\n        /* Make sure that we have a literal to write. */\n        if (s.lookahead === 0) {\n          fill_window(s);\n          if (s.lookahead === 0) {\n            if (flush === Z_NO_FLUSH$1) {\n              return BS_NEED_MORE;\n            }\n            break;      /* flush the current block */\n          }\n        }\n\n        /* Output a literal byte */\n        s.match_length = 0;\n        //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n        /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n        bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n        s.lookahead--;\n        s.strstart++;\n        if (bflush) {\n          /*** FLUSH_BLOCK(s, 0); ***/\n          flush_block_only(s, false);\n          if (s.strm.avail_out === 0) {\n            return BS_NEED_MORE;\n          }\n          /***/\n        }\n      }\n      s.insert = 0;\n      if (flush === Z_FINISH$2) {\n        /*** FLUSH_BLOCK(s, 1); ***/\n        flush_block_only(s, true);\n        if (s.strm.avail_out === 0) {\n          return BS_FINISH_STARTED;\n        }\n        /***/\n        return BS_FINISH_DONE;\n      }\n      if (s.last_lit) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n      return BS_BLOCK_DONE;\n    }\n\n    /* Values for max_lazy_match, good_match and max_chain_length, depending on\n     * the desired pack level (0..9). The values given below have been tuned to\n     * exclude worst case performance for pathological files. Better values may be\n     * found for specific files.\n     */\n    function Config(good_length, max_lazy, nice_length, max_chain, func) {\n      this.good_length = good_length;\n      this.max_lazy = max_lazy;\n      this.nice_length = nice_length;\n      this.max_chain = max_chain;\n      this.func = func;\n    }\n\n    var configuration_table;\n\n    configuration_table = [\n      /*      good lazy nice chain */\n      new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n      new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n      new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n      new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n      new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n      new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n      new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n      new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n      new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n      new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n    ];\n\n\n    /* ===========================================================================\n     * Initialize the \"longest match\" routines for a new zlib stream\n     */\n    function lm_init(s) {\n      s.window_size = 2 * s.w_size;\n\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n\n      /* Set the default configuration parameters:\n       */\n      s.max_lazy_match = configuration_table[s.level].max_lazy;\n      s.good_match = configuration_table[s.level].good_length;\n      s.nice_match = configuration_table[s.level].nice_length;\n      s.max_chain_length = configuration_table[s.level].max_chain;\n\n      s.strstart = 0;\n      s.block_start = 0;\n      s.lookahead = 0;\n      s.insert = 0;\n      s.match_length = s.prev_length = MIN_MATCH - 1;\n      s.match_available = 0;\n      s.ins_h = 0;\n    }\n\n\n    function DeflateState() {\n      this.strm = null;            /* pointer back to this zlib stream */\n      this.status = 0;            /* as the name implies */\n      this.pending_buf = null;      /* output still pending */\n      this.pending_buf_size = 0;  /* size of pending_buf */\n      this.pending_out = 0;       /* next pending byte to output to the stream */\n      this.pending = 0;           /* nb of bytes in the pending buffer */\n      this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n      this.gzhead = null;         /* gzip header information to write */\n      this.gzindex = 0;           /* where in extra, name, or comment */\n      this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n      this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n      this.w_size = 0;  /* LZ77 window size (32K by default) */\n      this.w_bits = 0;  /* log2(w_size)  (8..16) */\n      this.w_mask = 0;  /* w_size - 1 */\n\n      this.window = null;\n      /* Sliding window. Input bytes are read into the second half of the window,\n       * and move to the first half later to keep a dictionary of at least wSize\n       * bytes. With this organization, matches are limited to a distance of\n       * wSize-MAX_MATCH bytes, but this ensures that IO is always\n       * performed with a length multiple of the block size.\n       */\n\n      this.window_size = 0;\n      /* Actual size of window: 2*wSize, except when the user input buffer\n       * is directly used as sliding window.\n       */\n\n      this.prev = null;\n      /* Link to older string with same hash index. To limit the size of this\n       * array to 64K, this link is maintained only for the last 32K strings.\n       * An index in this array is thus a window index modulo 32K.\n       */\n\n      this.head = null;   /* Heads of the hash chains or NIL. */\n\n      this.ins_h = 0;       /* hash index of string to be inserted */\n      this.hash_size = 0;   /* number of elements in hash table */\n      this.hash_bits = 0;   /* log2(hash_size) */\n      this.hash_mask = 0;   /* hash_size-1 */\n\n      this.hash_shift = 0;\n      /* Number of bits by which ins_h must be shifted at each input\n       * step. It must be such that after MIN_MATCH steps, the oldest\n       * byte no longer takes part in the hash key, that is:\n       *   hash_shift * MIN_MATCH >= hash_bits\n       */\n\n      this.block_start = 0;\n      /* Window position at the beginning of the current output block. Gets\n       * negative when the window is moved backwards.\n       */\n\n      this.match_length = 0;      /* length of best match */\n      this.prev_match = 0;        /* previous match */\n      this.match_available = 0;   /* set if previous match exists */\n      this.strstart = 0;          /* start of string to insert */\n      this.match_start = 0;       /* start of matching string */\n      this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n      this.prev_length = 0;\n      /* Length of the best match at previous step. Matches not greater than this\n       * are discarded. This is used in the lazy match evaluation.\n       */\n\n      this.max_chain_length = 0;\n      /* To speed up deflation, hash chains are never searched beyond this\n       * length.  A higher limit improves compression ratio but degrades the\n       * speed.\n       */\n\n      this.max_lazy_match = 0;\n      /* Attempt to find a better match only when the current match is strictly\n       * smaller than this value. This mechanism is used only for compression\n       * levels >= 4.\n       */\n      // That's alias to max_lazy_match, don't use directly\n      //this.max_insert_length = 0;\n      /* Insert new strings in the hash table only if the match length is not\n       * greater than this length. This saves time but degrades compression.\n       * max_insert_length is used only for compression levels <= 3.\n       */\n\n      this.level = 0;     /* compression level (1..9) */\n      this.strategy = 0;  /* favor or force Huffman coding*/\n\n      this.good_match = 0;\n      /* Use a faster search when the previous match is longer than this */\n\n      this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n                  /* used by trees.c: */\n\n      /* Didn't use ct_data typedef below to suppress compiler warning */\n\n      // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n      // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n      // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n      // Use flat array of DOUBLE size, with interleaved fata,\n      // because JS does not support effective\n      this.dyn_ltree  = new utils$5.Buf16(HEAP_SIZE * 2);\n      this.dyn_dtree  = new utils$5.Buf16((2 * D_CODES + 1) * 2);\n      this.bl_tree    = new utils$5.Buf16((2 * BL_CODES + 1) * 2);\n      zero(this.dyn_ltree);\n      zero(this.dyn_dtree);\n      zero(this.bl_tree);\n\n      this.l_desc   = null;         /* desc. for literal tree */\n      this.d_desc   = null;         /* desc. for distance tree */\n      this.bl_desc  = null;         /* desc. for bit length tree */\n\n      //ush bl_count[MAX_BITS+1];\n      this.bl_count = new utils$5.Buf16(MAX_BITS + 1);\n      /* number of codes at each bit length for an optimal tree */\n\n      //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n      this.heap = new utils$5.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n      zero(this.heap);\n\n      this.heap_len = 0;               /* number of elements in the heap */\n      this.heap_max = 0;               /* element of largest frequency */\n      /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n       * The same heap array is used to build all trees.\n       */\n\n      this.depth = new utils$5.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n      zero(this.depth);\n      /* Depth of each subtree used as tie breaker for trees of equal frequency\n       */\n\n      this.l_buf = 0;          /* buffer index for literals or lengths */\n\n      this.lit_bufsize = 0;\n      /* Size of match buffer for literals/lengths.  There are 4 reasons for\n       * limiting lit_bufsize to 64K:\n       *   - frequencies can be kept in 16 bit counters\n       *   - if compression is not successful for the first block, all input\n       *     data is still in the window so we can still emit a stored block even\n       *     when input comes from standard input.  (This can also be done for\n       *     all blocks if lit_bufsize is not greater than 32K.)\n       *   - if compression is not successful for a file smaller than 64K, we can\n       *     even emit a stored file instead of a stored block (saving 5 bytes).\n       *     This is applicable only for zip (not gzip or zlib).\n       *   - creating new Huffman trees less frequently may not provide fast\n       *     adaptation to changes in the input data statistics. (Take for\n       *     example a binary file with poorly compressible code followed by\n       *     a highly compressible string table.) Smaller buffer sizes give\n       *     fast adaptation but have of course the overhead of transmitting\n       *     trees more frequently.\n       *   - I can't count above 4\n       */\n\n      this.last_lit = 0;      /* running index in l_buf */\n\n      this.d_buf = 0;\n      /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n       * the same number of elements. To use different lengths, an extra flag\n       * array would be necessary.\n       */\n\n      this.opt_len = 0;       /* bit length of current block with optimal trees */\n      this.static_len = 0;    /* bit length of current block with static trees */\n      this.matches = 0;       /* number of string matches in current block */\n      this.insert = 0;        /* bytes at end of window left to insert */\n\n\n      this.bi_buf = 0;\n      /* Output buffer. bits are inserted starting at the bottom (least\n       * significant bits).\n       */\n      this.bi_valid = 0;\n      /* Number of valid bits in bi_buf.  All bits above the last valid bit\n       * are always zero.\n       */\n\n      // Used for window memory init. We safely ignore it for JS. That makes\n      // sense only for pointers and memory check tools.\n      //this.high_water = 0;\n      /* High water mark offset in window for initialized bytes -- bytes above\n       * this are set to zero in order to avoid memory check warnings when\n       * longest match routines access bytes past the input.  This is then\n       * updated to the new high water mark.\n       */\n    }\n\n\n    function deflateResetKeep(strm) {\n      var s;\n\n      if (!strm || !strm.state) {\n        return err(strm, Z_STREAM_ERROR$1);\n      }\n\n      strm.total_in = strm.total_out = 0;\n      strm.data_type = Z_UNKNOWN;\n\n      s = strm.state;\n      s.pending = 0;\n      s.pending_out = 0;\n\n      if (s.wrap < 0) {\n        s.wrap = -s.wrap;\n        /* was made negative by deflate(..., Z_FINISH); */\n      }\n      s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n      strm.adler = (s.wrap === 2) ?\n        0  // crc32(0, Z_NULL, 0)\n      :\n        1; // adler32(0, Z_NULL, 0)\n      s.last_flush = Z_NO_FLUSH$1;\n      trees._tr_init(s);\n      return Z_OK$2;\n    }\n\n\n    function deflateReset(strm) {\n      var ret = deflateResetKeep(strm);\n      if (ret === Z_OK$2) {\n        lm_init(strm.state);\n      }\n      return ret;\n    }\n\n\n    function deflateSetHeader(strm, head) {\n      if (!strm || !strm.state) { return Z_STREAM_ERROR$1; }\n      if (strm.state.wrap !== 2) { return Z_STREAM_ERROR$1; }\n      strm.state.gzhead = head;\n      return Z_OK$2;\n    }\n\n\n    function deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n      if (!strm) { // === Z_NULL\n        return Z_STREAM_ERROR$1;\n      }\n      var wrap = 1;\n\n      if (level === Z_DEFAULT_COMPRESSION$1) {\n        level = 6;\n      }\n\n      if (windowBits < 0) { /* suppress zlib wrapper */\n        wrap = 0;\n        windowBits = -windowBits;\n      }\n\n      else if (windowBits > 15) {\n        wrap = 2;           /* write gzip wrapper instead */\n        windowBits -= 16;\n      }\n\n\n      if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n        windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n        strategy < 0 || strategy > Z_FIXED) {\n        return err(strm, Z_STREAM_ERROR$1);\n      }\n\n\n      if (windowBits === 8) {\n        windowBits = 9;\n      }\n      /* until 256-byte window bug fixed */\n\n      var s = new DeflateState();\n\n      strm.state = s;\n      s.strm = strm;\n\n      s.wrap = wrap;\n      s.gzhead = null;\n      s.w_bits = windowBits;\n      s.w_size = 1 << s.w_bits;\n      s.w_mask = s.w_size - 1;\n\n      s.hash_bits = memLevel + 7;\n      s.hash_size = 1 << s.hash_bits;\n      s.hash_mask = s.hash_size - 1;\n      s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n      s.window = new utils$5.Buf8(s.w_size * 2);\n      s.head = new utils$5.Buf16(s.hash_size);\n      s.prev = new utils$5.Buf16(s.w_size);\n\n      // Don't need mem init magic for JS.\n      //s.high_water = 0;  /* nothing written to s->window yet */\n\n      s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n      s.pending_buf_size = s.lit_bufsize * 4;\n\n      //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n      //s->pending_buf = (uchf *) overlay;\n      s.pending_buf = new utils$5.Buf8(s.pending_buf_size);\n\n      // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n      //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n      s.d_buf = 1 * s.lit_bufsize;\n\n      //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n      s.l_buf = (1 + 2) * s.lit_bufsize;\n\n      s.level = level;\n      s.strategy = strategy;\n      s.method = method;\n\n      return deflateReset(strm);\n    }\n\n    function deflateInit(strm, level) {\n      return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n    }\n\n\n    function deflate$2(strm, flush) {\n      var old_flush, s;\n      var beg, val; // for gzip header write only\n\n      if (!strm || !strm.state ||\n        flush > Z_BLOCK$1 || flush < 0) {\n        return strm ? err(strm, Z_STREAM_ERROR$1) : Z_STREAM_ERROR$1;\n      }\n\n      s = strm.state;\n\n      if (!strm.output ||\n          (!strm.input && strm.avail_in !== 0) ||\n          (s.status === FINISH_STATE && flush !== Z_FINISH$2)) {\n        return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$1);\n      }\n\n      s.strm = strm; /* just in case */\n      old_flush = s.last_flush;\n      s.last_flush = flush;\n\n      /* Write the header */\n      if (s.status === INIT_STATE) {\n\n        if (s.wrap === 2) { // GZIP header\n          strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n          put_byte(s, 31);\n          put_byte(s, 139);\n          put_byte(s, 8);\n          if (!s.gzhead) { // s->gzhead == Z_NULL\n            put_byte(s, 0);\n            put_byte(s, 0);\n            put_byte(s, 0);\n            put_byte(s, 0);\n            put_byte(s, 0);\n            put_byte(s, s.level === 9 ? 2 :\n                        (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                         4 : 0));\n            put_byte(s, OS_CODE);\n            s.status = BUSY_STATE;\n          }\n          else {\n            put_byte(s, (s.gzhead.text ? 1 : 0) +\n                        (s.gzhead.hcrc ? 2 : 0) +\n                        (!s.gzhead.extra ? 0 : 4) +\n                        (!s.gzhead.name ? 0 : 8) +\n                        (!s.gzhead.comment ? 0 : 16)\n            );\n            put_byte(s, s.gzhead.time & 0xff);\n            put_byte(s, (s.gzhead.time >> 8) & 0xff);\n            put_byte(s, (s.gzhead.time >> 16) & 0xff);\n            put_byte(s, (s.gzhead.time >> 24) & 0xff);\n            put_byte(s, s.level === 9 ? 2 :\n                        (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                         4 : 0));\n            put_byte(s, s.gzhead.os & 0xff);\n            if (s.gzhead.extra && s.gzhead.extra.length) {\n              put_byte(s, s.gzhead.extra.length & 0xff);\n              put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n            }\n            if (s.gzhead.hcrc) {\n              strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending, 0);\n            }\n            s.gzindex = 0;\n            s.status = EXTRA_STATE;\n          }\n        }\n        else // DEFLATE header\n        {\n          var header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n          var level_flags = -1;\n\n          if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n            level_flags = 0;\n          } else if (s.level < 6) {\n            level_flags = 1;\n          } else if (s.level === 6) {\n            level_flags = 2;\n          } else {\n            level_flags = 3;\n          }\n          header |= (level_flags << 6);\n          if (s.strstart !== 0) { header |= PRESET_DICT; }\n          header += 31 - (header % 31);\n\n          s.status = BUSY_STATE;\n          putShortMSB(s, header);\n\n          /* Save the adler32 of the preset dictionary: */\n          if (s.strstart !== 0) {\n            putShortMSB(s, strm.adler >>> 16);\n            putShortMSB(s, strm.adler & 0xffff);\n          }\n          strm.adler = 1; // adler32(0L, Z_NULL, 0);\n        }\n      }\n\n    //#ifdef GZIP\n      if (s.status === EXTRA_STATE) {\n        if (s.gzhead.extra/* != Z_NULL*/) {\n          beg = s.pending;  /* start of bytes to update crc */\n\n          while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n            if (s.pending === s.pending_buf_size) {\n              if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);\n              }\n              flush_pending(strm);\n              beg = s.pending;\n              if (s.pending === s.pending_buf_size) {\n                break;\n              }\n            }\n            put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n            s.gzindex++;\n          }\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          if (s.gzindex === s.gzhead.extra.length) {\n            s.gzindex = 0;\n            s.status = NAME_STATE;\n          }\n        }\n        else {\n          s.status = NAME_STATE;\n        }\n      }\n      if (s.status === NAME_STATE) {\n        if (s.gzhead.name/* != Z_NULL*/) {\n          beg = s.pending;  /* start of bytes to update crc */\n          //int val;\n\n          do {\n            if (s.pending === s.pending_buf_size) {\n              if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);\n              }\n              flush_pending(strm);\n              beg = s.pending;\n              if (s.pending === s.pending_buf_size) {\n                val = 1;\n                break;\n              }\n            }\n            // JS specific: little magic to add zero terminator to end of string\n            if (s.gzindex < s.gzhead.name.length) {\n              val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n            } else {\n              val = 0;\n            }\n            put_byte(s, val);\n          } while (val !== 0);\n\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          if (val === 0) {\n            s.gzindex = 0;\n            s.status = COMMENT_STATE;\n          }\n        }\n        else {\n          s.status = COMMENT_STATE;\n        }\n      }\n      if (s.status === COMMENT_STATE) {\n        if (s.gzhead.comment/* != Z_NULL*/) {\n          beg = s.pending;  /* start of bytes to update crc */\n          //int val;\n\n          do {\n            if (s.pending === s.pending_buf_size) {\n              if (s.gzhead.hcrc && s.pending > beg) {\n                strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);\n              }\n              flush_pending(strm);\n              beg = s.pending;\n              if (s.pending === s.pending_buf_size) {\n                val = 1;\n                break;\n              }\n            }\n            // JS specific: little magic to add zero terminator to end of string\n            if (s.gzindex < s.gzhead.comment.length) {\n              val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n            } else {\n              val = 0;\n            }\n            put_byte(s, val);\n          } while (val !== 0);\n\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32$1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          if (val === 0) {\n            s.status = HCRC_STATE;\n          }\n        }\n        else {\n          s.status = HCRC_STATE;\n        }\n      }\n      if (s.status === HCRC_STATE) {\n        if (s.gzhead.hcrc) {\n          if (s.pending + 2 > s.pending_buf_size) {\n            flush_pending(strm);\n          }\n          if (s.pending + 2 <= s.pending_buf_size) {\n            put_byte(s, strm.adler & 0xff);\n            put_byte(s, (strm.adler >> 8) & 0xff);\n            strm.adler = 0; //crc32(0L, Z_NULL, 0);\n            s.status = BUSY_STATE;\n          }\n        }\n        else {\n          s.status = BUSY_STATE;\n        }\n      }\n    //#endif\n\n      /* Flush as much pending output as possible */\n      if (s.pending !== 0) {\n        flush_pending(strm);\n        if (strm.avail_out === 0) {\n          /* Since avail_out is 0, deflate will be called again with\n           * more output space, but possibly with both pending and\n           * avail_in equal to zero. There won't be anything to do,\n           * but this is not an error situation so make sure we\n           * return OK instead of BUF_ERROR at next call of deflate:\n           */\n          s.last_flush = -1;\n          return Z_OK$2;\n        }\n\n        /* Make sure there is something to do and avoid duplicate consecutive\n         * flushes. For repeated and useless calls with Z_FINISH, we keep\n         * returning Z_STREAM_END instead of Z_BUF_ERROR.\n         */\n      } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n        flush !== Z_FINISH$2) {\n        return err(strm, Z_BUF_ERROR$1);\n      }\n\n      /* User must not provide more input after the first FINISH: */\n      if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n        return err(strm, Z_BUF_ERROR$1);\n      }\n\n      /* Start a new block or continue the current one.\n       */\n      if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n        (flush !== Z_NO_FLUSH$1 && s.status !== FINISH_STATE)) {\n        var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n          (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n            configuration_table[s.level].func(s, flush));\n\n        if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n          s.status = FINISH_STATE;\n        }\n        if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n          if (strm.avail_out === 0) {\n            s.last_flush = -1;\n            /* avoid BUF_ERROR next call, see above */\n          }\n          return Z_OK$2;\n          /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n           * of deflate should use the same flush parameter to make sure\n           * that the flush is complete. So we don't have to output an\n           * empty block here, this will be done at next call. This also\n           * ensures that for a very small output buffer, we emit at most\n           * one empty block.\n           */\n        }\n        if (bstate === BS_BLOCK_DONE) {\n          if (flush === Z_PARTIAL_FLUSH) {\n            trees._tr_align(s);\n          }\n          else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n            trees._tr_stored_block(s, 0, 0, false);\n            /* For a full flush, this empty block will be recognized\n             * as a special marker by inflate_sync().\n             */\n            if (flush === Z_FULL_FLUSH) {\n              /*** CLEAR_HASH(s); ***/             /* forget history */\n              zero(s.head); // Fill with NIL (= 0);\n\n              if (s.lookahead === 0) {\n                s.strstart = 0;\n                s.block_start = 0;\n                s.insert = 0;\n              }\n            }\n          }\n          flush_pending(strm);\n          if (strm.avail_out === 0) {\n            s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n            return Z_OK$2;\n          }\n        }\n      }\n      //Assert(strm->avail_out > 0, \"bug2\");\n      //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n      if (flush !== Z_FINISH$2) { return Z_OK$2; }\n      if (s.wrap <= 0) { return Z_STREAM_END$2; }\n\n      /* Write the trailer */\n      if (s.wrap === 2) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        put_byte(s, (strm.adler >> 16) & 0xff);\n        put_byte(s, (strm.adler >> 24) & 0xff);\n        put_byte(s, strm.total_in & 0xff);\n        put_byte(s, (strm.total_in >> 8) & 0xff);\n        put_byte(s, (strm.total_in >> 16) & 0xff);\n        put_byte(s, (strm.total_in >> 24) & 0xff);\n      }\n      else\n      {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n\n      flush_pending(strm);\n      /* If avail_out is zero, the application will call deflate again\n       * to flush the rest.\n       */\n      if (s.wrap > 0) { s.wrap = -s.wrap; }\n      /* write the trailer only once! */\n      return s.pending !== 0 ? Z_OK$2 : Z_STREAM_END$2;\n    }\n\n    function deflateEnd(strm) {\n      var status;\n\n      if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n        return Z_STREAM_ERROR$1;\n      }\n\n      status = strm.state.status;\n      if (status !== INIT_STATE &&\n        status !== EXTRA_STATE &&\n        status !== NAME_STATE &&\n        status !== COMMENT_STATE &&\n        status !== HCRC_STATE &&\n        status !== BUSY_STATE &&\n        status !== FINISH_STATE\n      ) {\n        return err(strm, Z_STREAM_ERROR$1);\n      }\n\n      strm.state = null;\n\n      return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$1) : Z_OK$2;\n    }\n\n\n    /* =========================================================================\n     * Initializes the compression dictionary from the given byte\n     * sequence without producing any compressed output.\n     */\n    function deflateSetDictionary(strm, dictionary) {\n      var dictLength = dictionary.length;\n\n      var s;\n      var str, n;\n      var wrap;\n      var avail;\n      var next;\n      var input;\n      var tmpDict;\n\n      if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n        return Z_STREAM_ERROR$1;\n      }\n\n      s = strm.state;\n      wrap = s.wrap;\n\n      if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n        return Z_STREAM_ERROR$1;\n      }\n\n      /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n      if (wrap === 1) {\n        /* adler32(strm->adler, dictionary, dictLength); */\n        strm.adler = adler32$1(strm.adler, dictionary, dictLength, 0);\n      }\n\n      s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n      /* if dictionary would fill window, just replace the history */\n      if (dictLength >= s.w_size) {\n        if (wrap === 0) {            /* already empty otherwise */\n          /*** CLEAR_HASH(s); ***/\n          zero(s.head); // Fill with NIL (= 0);\n          s.strstart = 0;\n          s.block_start = 0;\n          s.insert = 0;\n        }\n        /* use the tail */\n        // dictionary = dictionary.slice(dictLength - s.w_size);\n        tmpDict = new utils$5.Buf8(s.w_size);\n        utils$5.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n        dictionary = tmpDict;\n        dictLength = s.w_size;\n      }\n      /* insert dictionary into window and hash */\n      avail = strm.avail_in;\n      next = strm.next_in;\n      input = strm.input;\n      strm.avail_in = dictLength;\n      strm.next_in = 0;\n      strm.input = dictionary;\n      fill_window(s);\n      while (s.lookahead >= MIN_MATCH) {\n        str = s.strstart;\n        n = s.lookahead - (MIN_MATCH - 1);\n        do {\n          /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n          s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n          s.head[s.ins_h] = str;\n          str++;\n        } while (--n);\n        s.strstart = str;\n        s.lookahead = MIN_MATCH - 1;\n        fill_window(s);\n      }\n      s.strstart += s.lookahead;\n      s.block_start = s.strstart;\n      s.insert = s.lookahead;\n      s.lookahead = 0;\n      s.match_length = s.prev_length = MIN_MATCH - 1;\n      s.match_available = 0;\n      strm.next_in = next;\n      strm.input = input;\n      strm.avail_in = avail;\n      s.wrap = wrap;\n      return Z_OK$2;\n    }\n\n\n    deflate$3.deflateInit = deflateInit;\n    deflate$3.deflateInit2 = deflateInit2;\n    deflate$3.deflateReset = deflateReset;\n    deflate$3.deflateResetKeep = deflateResetKeep;\n    deflate$3.deflateSetHeader = deflateSetHeader;\n    deflate$3.deflate = deflate$2;\n    deflate$3.deflateEnd = deflateEnd;\n    deflate$3.deflateSetDictionary = deflateSetDictionary;\n    deflate$3.deflateInfo = 'pako deflate (from Nodeca project)';\n\n    var strings$2 = {};\n\n    var utils$4 = common;\n\n\n    // Quick check if we can use fast array to bin string conversion\n    //\n    // - apply(Array) can fail on Android 2.2\n    // - apply(Uint8Array) can fail on iOS 5.1 Safari\n    //\n    var STR_APPLY_OK = true;\n    var STR_APPLY_UIA_OK = true;\n\n    try { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\n    try { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n    // Table with utf8 lengths (calculated by first byte of sequence)\n    // Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n    // because max possible codepoint is 0x10ffff\n    var _utf8len = new utils$4.Buf8(256);\n    for (var q = 0; q < 256; q++) {\n      _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n    }\n    _utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n    // convert string to array (typed, when possible)\n    strings$2.string2buf = function (str) {\n      var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n      // count binary size\n      for (m_pos = 0; m_pos < str_len; m_pos++) {\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n          c2 = str.charCodeAt(m_pos + 1);\n          if ((c2 & 0xfc00) === 0xdc00) {\n            c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n            m_pos++;\n          }\n        }\n        buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n      }\n\n      // allocate buffer\n      buf = new utils$4.Buf8(buf_len);\n\n      // convert\n      for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n        c = str.charCodeAt(m_pos);\n        if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n          c2 = str.charCodeAt(m_pos + 1);\n          if ((c2 & 0xfc00) === 0xdc00) {\n            c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n            m_pos++;\n          }\n        }\n        if (c < 0x80) {\n          /* one byte */\n          buf[i++] = c;\n        } else if (c < 0x800) {\n          /* two bytes */\n          buf[i++] = 0xC0 | (c >>> 6);\n          buf[i++] = 0x80 | (c & 0x3f);\n        } else if (c < 0x10000) {\n          /* three bytes */\n          buf[i++] = 0xE0 | (c >>> 12);\n          buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n          buf[i++] = 0x80 | (c & 0x3f);\n        } else {\n          /* four bytes */\n          buf[i++] = 0xf0 | (c >>> 18);\n          buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n          buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n          buf[i++] = 0x80 | (c & 0x3f);\n        }\n      }\n\n      return buf;\n    };\n\n    // Helper (used in 2 places)\n    function buf2binstring(buf, len) {\n      // On Chrome, the arguments in a function call that are allowed is `65534`.\n      // If the length of the buffer is smaller than that, we can use this optimization,\n      // otherwise we will take a slower path.\n      if (len < 65534) {\n        if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n          return String.fromCharCode.apply(null, utils$4.shrinkBuf(buf, len));\n        }\n      }\n\n      var result = '';\n      for (var i = 0; i < len; i++) {\n        result += String.fromCharCode(buf[i]);\n      }\n      return result;\n    }\n\n\n    // Convert byte array to binary string\n    strings$2.buf2binstring = function (buf) {\n      return buf2binstring(buf, buf.length);\n    };\n\n\n    // Convert binary string (typed, when possible)\n    strings$2.binstring2buf = function (str) {\n      var buf = new utils$4.Buf8(str.length);\n      for (var i = 0, len = buf.length; i < len; i++) {\n        buf[i] = str.charCodeAt(i);\n      }\n      return buf;\n    };\n\n\n    // convert array to string\n    strings$2.buf2string = function (buf, max) {\n      var i, out, c, c_len;\n      var len = max || buf.length;\n\n      // Reserve max possible length (2 words per char)\n      // NB: by unknown reasons, Array is significantly faster for\n      //     String.fromCharCode.apply than Uint16Array.\n      var utf16buf = new Array(len * 2);\n\n      for (out = 0, i = 0; i < len;) {\n        c = buf[i++];\n        // quick process ascii\n        if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n        c_len = _utf8len[c];\n        // skip 5 & 6 byte codes\n        if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n        // apply mask on first byte\n        c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n        // join the rest\n        while (c_len > 1 && i < len) {\n          c = (c << 6) | (buf[i++] & 0x3f);\n          c_len--;\n        }\n\n        // terminated by end of string?\n        if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n        if (c < 0x10000) {\n          utf16buf[out++] = c;\n        } else {\n          c -= 0x10000;\n          utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n          utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n        }\n      }\n\n      return buf2binstring(utf16buf, out);\n    };\n\n\n    // Calculate max possible position in utf8 buffer,\n    // that will not break sequence. If that's not possible\n    // - (very small limits) return max size as is.\n    //\n    // buf[] - utf8 bytes array\n    // max   - length limit (mandatory);\n    strings$2.utf8border = function (buf, max) {\n      var pos;\n\n      max = max || buf.length;\n      if (max > buf.length) { max = buf.length; }\n\n      // go back from last position, until start of sequence found\n      pos = max - 1;\n      while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n      // Very small and broken sequence,\n      // return max, because we should return something anyway.\n      if (pos < 0) { return max; }\n\n      // If we came to start of buffer - that means buffer is too small,\n      // return max too.\n      if (pos === 0) { return max; }\n\n      return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n    };\n\n    // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n    //\n    // This software is provided 'as-is', without any express or implied\n    // warranty. In no event will the authors be held liable for any damages\n    // arising from the use of this software.\n    //\n    // Permission is granted to anyone to use this software for any purpose,\n    // including commercial applications, and to alter it and redistribute it\n    // freely, subject to the following restrictions:\n    //\n    // 1. The origin of this software must not be misrepresented; you must not\n    //   claim that you wrote the original software. If you use this software\n    //   in a product, an acknowledgment in the product documentation would be\n    //   appreciated but is not required.\n    // 2. Altered source versions must be plainly marked as such, and must not be\n    //   misrepresented as being the original software.\n    // 3. This notice may not be removed or altered from any source distribution.\n\n    function ZStream$2() {\n      /* next input byte */\n      this.input = null; // JS specific, because we have no pointers\n      this.next_in = 0;\n      /* number of bytes available at input */\n      this.avail_in = 0;\n      /* total number of input bytes read so far */\n      this.total_in = 0;\n      /* next output byte should be put there */\n      this.output = null; // JS specific, because we have no pointers\n      this.next_out = 0;\n      /* remaining free space at output */\n      this.avail_out = 0;\n      /* total number of bytes output so far */\n      this.total_out = 0;\n      /* last error message, NULL if no error */\n      this.msg = ''/*Z_NULL*/;\n      /* not visible by applications */\n      this.state = null;\n      /* best guess about the data type: binary or text */\n      this.data_type = 2/*Z_UNKNOWN*/;\n      /* adler32 value of the uncompressed data */\n      this.adler = 0;\n    }\n\n    var zstream = ZStream$2;\n\n    var zlib_deflate = deflate$3;\n    var utils$3        = common;\n    var strings$1      = strings$2;\n    var msg$1          = messages;\n    var ZStream$1      = zstream;\n\n    var toString$1 = Object.prototype.toString;\n\n    /* Public constants ==========================================================*/\n    /* ===========================================================================*/\n\n    var Z_NO_FLUSH      = 0;\n    var Z_FINISH$1        = 4;\n\n    var Z_OK$1            = 0;\n    var Z_STREAM_END$1    = 1;\n    var Z_SYNC_FLUSH    = 2;\n\n    var Z_DEFAULT_COMPRESSION = -1;\n\n    var Z_DEFAULT_STRATEGY    = 0;\n\n    var Z_DEFLATED$1  = 8;\n\n    /* ===========================================================================*/\n\n\n    /**\n     * class Deflate\n     *\n     * Generic JS-style wrapper for zlib calls. If you don't need\n     * streaming behaviour - use more simple functions: [[deflate]],\n     * [[deflateRaw]] and [[gzip]].\n     **/\n\n    /* internal\n     * Deflate.chunks -> Array\n     *\n     * Chunks of output data, if [[Deflate#onData]] not overridden.\n     **/\n\n    /**\n     * Deflate.result -> Uint8Array|Array\n     *\n     * Compressed result, generated by default [[Deflate#onData]]\n     * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n     * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n     * push a chunk with explicit flush (call [[Deflate#push]] with\n     * `Z_SYNC_FLUSH` param).\n     **/\n\n    /**\n     * Deflate.err -> Number\n     *\n     * Error code after deflate finished. 0 (Z_OK) on success.\n     * You will not need it in real life, because deflate errors\n     * are possible only on wrong options or bad `onData` / `onEnd`\n     * custom handlers.\n     **/\n\n    /**\n     * Deflate.msg -> String\n     *\n     * Error message, if [[Deflate.err]] != 0\n     **/\n\n\n    /**\n     * new Deflate(options)\n     * - options (Object): zlib deflate options.\n     *\n     * Creates new deflator instance with specified params. Throws exception\n     * on bad params. Supported options:\n     *\n     * - `level`\n     * - `windowBits`\n     * - `memLevel`\n     * - `strategy`\n     * - `dictionary`\n     *\n     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n     * for more information on these.\n     *\n     * Additional options, for internal needs:\n     *\n     * - `chunkSize` - size of generated data chunks (16K by default)\n     * - `raw` (Boolean) - do raw deflate\n     * - `gzip` (Boolean) - create gzip wrapper\n     * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n     *    (each char code [0..255])\n     * - `header` (Object) - custom header for gzip\n     *   - `text` (Boolean) - true if compressed data believed to be text\n     *   - `time` (Number) - modification time, unix timestamp\n     *   - `os` (Number) - operation system code\n     *   - `extra` (Array) - array of bytes with extra data (max 65536)\n     *   - `name` (String) - file name (binary string)\n     *   - `comment` (String) - comment (binary string)\n     *   - `hcrc` (Boolean) - true if header crc should be added\n     *\n     * ##### Example:\n     *\n     * ```javascript\n     * var pako = require('pako')\n     *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n     *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n     *\n     * var deflate = new pako.Deflate({ level: 3});\n     *\n     * deflate.push(chunk1, false);\n     * deflate.push(chunk2, true);  // true -> last chunk\n     *\n     * if (deflate.err) { throw new Error(deflate.err); }\n     *\n     * console.log(deflate.result);\n     * ```\n     **/\n    function Deflate(options) {\n      if (!(this instanceof Deflate)) return new Deflate(options);\n\n      this.options = utils$3.assign({\n        level: Z_DEFAULT_COMPRESSION,\n        method: Z_DEFLATED$1,\n        chunkSize: 16384,\n        windowBits: 15,\n        memLevel: 8,\n        strategy: Z_DEFAULT_STRATEGY,\n        to: ''\n      }, options || {});\n\n      var opt = this.options;\n\n      if (opt.raw && (opt.windowBits > 0)) {\n        opt.windowBits = -opt.windowBits;\n      }\n\n      else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n        opt.windowBits += 16;\n      }\n\n      this.err    = 0;      // error code, if happens (0 = Z_OK)\n      this.msg    = '';     // error message\n      this.ended  = false;  // used to avoid multiple onEnd() calls\n      this.chunks = [];     // chunks of compressed data\n\n      this.strm = new ZStream$1();\n      this.strm.avail_out = 0;\n\n      var status = zlib_deflate.deflateInit2(\n        this.strm,\n        opt.level,\n        opt.method,\n        opt.windowBits,\n        opt.memLevel,\n        opt.strategy\n      );\n\n      if (status !== Z_OK$1) {\n        throw new Error(msg$1[status]);\n      }\n\n      if (opt.header) {\n        zlib_deflate.deflateSetHeader(this.strm, opt.header);\n      }\n\n      if (opt.dictionary) {\n        var dict;\n        // Convert data if needed\n        if (typeof opt.dictionary === 'string') {\n          // If we need to compress text, change encoding to utf8.\n          dict = strings$1.string2buf(opt.dictionary);\n        } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n          dict = new Uint8Array(opt.dictionary);\n        } else {\n          dict = opt.dictionary;\n        }\n\n        status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n        if (status !== Z_OK$1) {\n          throw new Error(msg$1[status]);\n        }\n\n        this._dict_set = true;\n      }\n    }\n\n    /**\n     * Deflate#push(data[, mode]) -> Boolean\n     * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n     *   converted to utf8 byte sequence.\n     * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n     *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n     *\n     * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n     * new compressed chunks. Returns `true` on success. The last data block must have\n     * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n     * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n     * can use mode Z_SYNC_FLUSH, keeping the compression context.\n     *\n     * On fail call [[Deflate#onEnd]] with error code and return false.\n     *\n     * We strongly recommend to use `Uint8Array` on input for best speed (output\n     * array format is detected automatically). Also, don't skip last param and always\n     * use the same type in your code (boolean or number). That will improve JS speed.\n     *\n     * For regular `Array`-s make sure all elements are [0..255].\n     *\n     * ##### Example\n     *\n     * ```javascript\n     * push(chunk, false); // push one of data chunks\n     * ...\n     * push(chunk, true);  // push last chunk\n     * ```\n     **/\n    Deflate.prototype.push = function (data, mode) {\n      var strm = this.strm;\n      var chunkSize = this.options.chunkSize;\n      var status, _mode;\n\n      if (this.ended) { return false; }\n\n      _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH$1 : Z_NO_FLUSH);\n\n      // Convert data if needed\n      if (typeof data === 'string') {\n        // If we need to compress text, change encoding to utf8.\n        strm.input = strings$1.string2buf(data);\n      } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n        strm.input = new Uint8Array(data);\n      } else {\n        strm.input = data;\n      }\n\n      strm.next_in = 0;\n      strm.avail_in = strm.input.length;\n\n      do {\n        if (strm.avail_out === 0) {\n          strm.output = new utils$3.Buf8(chunkSize);\n          strm.next_out = 0;\n          strm.avail_out = chunkSize;\n        }\n        status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n        if (status !== Z_STREAM_END$1 && status !== Z_OK$1) {\n          this.onEnd(status);\n          this.ended = true;\n          return false;\n        }\n        if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH$1 || _mode === Z_SYNC_FLUSH))) {\n          if (this.options.to === 'string') {\n            this.onData(strings$1.buf2binstring(utils$3.shrinkBuf(strm.output, strm.next_out)));\n          } else {\n            this.onData(utils$3.shrinkBuf(strm.output, strm.next_out));\n          }\n        }\n      } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END$1);\n\n      // Finalize on the last chunk.\n      if (_mode === Z_FINISH$1) {\n        status = zlib_deflate.deflateEnd(this.strm);\n        this.onEnd(status);\n        this.ended = true;\n        return status === Z_OK$1;\n      }\n\n      // callback interim results if Z_SYNC_FLUSH.\n      if (_mode === Z_SYNC_FLUSH) {\n        this.onEnd(Z_OK$1);\n        strm.avail_out = 0;\n        return true;\n      }\n\n      return true;\n    };\n\n\n    /**\n     * Deflate#onData(chunk) -> Void\n     * - chunk (Uint8Array|Array|String): output data. Type of array depends\n     *   on js engine support. When string output requested, each chunk\n     *   will be string.\n     *\n     * By default, stores data blocks in `chunks[]` property and glue\n     * those in `onEnd`. Override this handler, if you need another behaviour.\n     **/\n    Deflate.prototype.onData = function (chunk) {\n      this.chunks.push(chunk);\n    };\n\n\n    /**\n     * Deflate#onEnd(status) -> Void\n     * - status (Number): deflate status. 0 (Z_OK) on success,\n     *   other if not.\n     *\n     * Called once after you tell deflate that the input stream is\n     * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n     * or if an error happened. By default - join collected chunks,\n     * free memory and fill `results` / `err` properties.\n     **/\n    Deflate.prototype.onEnd = function (status) {\n      // On success - join\n      if (status === Z_OK$1) {\n        if (this.options.to === 'string') {\n          this.result = this.chunks.join('');\n        } else {\n          this.result = utils$3.flattenChunks(this.chunks);\n        }\n      }\n      this.chunks = [];\n      this.err = status;\n      this.msg = this.strm.msg;\n    };\n\n\n    /**\n     * deflate(data[, options]) -> Uint8Array|Array|String\n     * - data (Uint8Array|Array|String): input data to compress.\n     * - options (Object): zlib deflate options.\n     *\n     * Compress `data` with deflate algorithm and `options`.\n     *\n     * Supported options are:\n     *\n     * - level\n     * - windowBits\n     * - memLevel\n     * - strategy\n     * - dictionary\n     *\n     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n     * for more information on these.\n     *\n     * Sugar (options):\n     *\n     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n     *   negative windowBits implicitly.\n     * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n     *    (each char code [0..255])\n     *\n     * ##### Example:\n     *\n     * ```javascript\n     * var pako = require('pako')\n     *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n     *\n     * console.log(pako.deflate(data));\n     * ```\n     **/\n    function deflate$1(input, options) {\n      var deflator = new Deflate(options);\n\n      deflator.push(input, true);\n\n      // That will never happens, if you don't cheat with options :)\n      if (deflator.err) { throw deflator.msg || msg$1[deflator.err]; }\n\n      return deflator.result;\n    }\n\n\n    /**\n     * deflateRaw(data[, options]) -> Uint8Array|Array|String\n     * - data (Uint8Array|Array|String): input data to compress.\n     * - options (Object): zlib deflate options.\n     *\n     * The same as [[deflate]], but creates raw data, without wrapper\n     * (header and adler32 crc).\n     **/\n    function deflateRaw(input, options) {\n      options = options || {};\n      options.raw = true;\n      return deflate$1(input, options);\n    }\n\n\n    /**\n     * gzip(data[, options]) -> Uint8Array|Array|String\n     * - data (Uint8Array|Array|String): input data to compress.\n     * - options (Object): zlib deflate options.\n     *\n     * The same as [[deflate]], but create gzip wrapper instead of\n     * deflate one.\n     **/\n    function gzip(input, options) {\n      options = options || {};\n      options.gzip = true;\n      return deflate$1(input, options);\n    }\n\n\n    deflate$4.Deflate = Deflate;\n    deflate$4.deflate = deflate$1;\n    deflate$4.deflateRaw = deflateRaw;\n    deflate$4.gzip = gzip;\n\n    var inflate$4 = {};\n\n    var inflate$3 = {};\n\n    // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n    //\n    // This software is provided 'as-is', without any express or implied\n    // warranty. In no event will the authors be held liable for any damages\n    // arising from the use of this software.\n    //\n    // Permission is granted to anyone to use this software for any purpose,\n    // including commercial applications, and to alter it and redistribute it\n    // freely, subject to the following restrictions:\n    //\n    // 1. The origin of this software must not be misrepresented; you must not\n    //   claim that you wrote the original software. If you use this software\n    //   in a product, an acknowledgment in the product documentation would be\n    //   appreciated but is not required.\n    // 2. Altered source versions must be plainly marked as such, and must not be\n    //   misrepresented as being the original software.\n    // 3. This notice may not be removed or altered from any source distribution.\n\n    // See state defs from inflate.js\n    var BAD$1 = 30;       /* got a data error -- remain here until reset */\n    var TYPE$1 = 12;      /* i: waiting for type bits, including last-flag bit */\n\n    /*\n       Decode literal, length, and distance codes and write out the resulting\n       literal and match bytes until either not enough input or output is\n       available, an end-of-block is encountered, or a data error is encountered.\n       When large enough input and output buffers are supplied to inflate(), for\n       example, a 16K input buffer and a 64K output buffer, more than 95% of the\n       inflate execution time is spent in this routine.\n\n       Entry assumptions:\n\n            state.mode === LEN\n            strm.avail_in >= 6\n            strm.avail_out >= 258\n            start >= strm.avail_out\n            state.bits < 8\n\n       On return, state.mode is one of:\n\n            LEN -- ran out of enough output space or enough available input\n            TYPE -- reached end of block code, inflate() to interpret next block\n            BAD -- error in block data\n\n       Notes:\n\n        - The maximum input bits used by a length/distance pair is 15 bits for the\n          length code, 5 bits for the length extra, 15 bits for the distance code,\n          and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n          Therefore if strm.avail_in >= 6, then there is enough input to avoid\n          checking for available input while decoding.\n\n        - The maximum bytes that a single length/distance pair can output is 258\n          bytes, which is the maximum length that can be coded.  inflate_fast()\n          requires strm.avail_out >= 258 for each loop to avoid checking for\n          output space.\n     */\n    var inffast = function inflate_fast(strm, start) {\n      var state;\n      var _in;                    /* local strm.input */\n      var last;                   /* have enough input while in < last */\n      var _out;                   /* local strm.output */\n      var beg;                    /* inflate()'s initial strm.output */\n      var end;                    /* while out < end, enough space available */\n    //#ifdef INFLATE_STRICT\n      var dmax;                   /* maximum distance from zlib header */\n    //#endif\n      var wsize;                  /* window size or zero if not using window */\n      var whave;                  /* valid bytes in the window */\n      var wnext;                  /* window write index */\n      // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n      var s_window;               /* allocated sliding window, if wsize != 0 */\n      var hold;                   /* local strm.hold */\n      var bits;                   /* local strm.bits */\n      var lcode;                  /* local strm.lencode */\n      var dcode;                  /* local strm.distcode */\n      var lmask;                  /* mask for first level of length codes */\n      var dmask;                  /* mask for first level of distance codes */\n      var here;                   /* retrieved table entry */\n      var op;                     /* code bits, operation, extra bits, or */\n                                  /*  window position, window bytes to copy */\n      var len;                    /* match length, unused bytes */\n      var dist;                   /* match distance */\n      var from;                   /* where to copy match from */\n      var from_source;\n\n\n      var input, output; // JS specific, because we have no pointers\n\n      /* copy state to local variables */\n      state = strm.state;\n      //here = state.here;\n      _in = strm.next_in;\n      input = strm.input;\n      last = _in + (strm.avail_in - 5);\n      _out = strm.next_out;\n      output = strm.output;\n      beg = _out - (start - strm.avail_out);\n      end = _out + (strm.avail_out - 257);\n    //#ifdef INFLATE_STRICT\n      dmax = state.dmax;\n    //#endif\n      wsize = state.wsize;\n      whave = state.whave;\n      wnext = state.wnext;\n      s_window = state.window;\n      hold = state.hold;\n      bits = state.bits;\n      lcode = state.lencode;\n      dcode = state.distcode;\n      lmask = (1 << state.lenbits) - 1;\n      dmask = (1 << state.distbits) - 1;\n\n\n      /* decode literals and length/distances until end-of-block or not enough\n         input data or output space */\n\n      top:\n      do {\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n\n        here = lcode[hold & lmask];\n\n        dolen:\n        for (;;) { // Goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n          if (op === 0) {                          /* literal */\n            //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n            //        \"inflate:         literal '%c'\\n\" :\n            //        \"inflate:         literal 0x%02x\\n\", here.val));\n            output[_out++] = here & 0xffff/*here.val*/;\n          }\n          else if (op & 16) {                     /* length base */\n            len = here & 0xffff/*here.val*/;\n            op &= 15;                           /* number of extra bits */\n            if (op) {\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n              len += hold & ((1 << op) - 1);\n              hold >>>= op;\n              bits -= op;\n            }\n            //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n            if (bits < 15) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              hold += input[_in++] << bits;\n              bits += 8;\n            }\n            here = dcode[hold & dmask];\n\n            dodist:\n            for (;;) { // goto emulation\n              op = here >>> 24/*here.bits*/;\n              hold >>>= op;\n              bits -= op;\n              op = (here >>> 16) & 0xff/*here.op*/;\n\n              if (op & 16) {                      /* distance base */\n                dist = here & 0xffff/*here.val*/;\n                op &= 15;                       /* number of extra bits */\n                if (bits < op) {\n                  hold += input[_in++] << bits;\n                  bits += 8;\n                  if (bits < op) {\n                    hold += input[_in++] << bits;\n                    bits += 8;\n                  }\n                }\n                dist += hold & ((1 << op) - 1);\n    //#ifdef INFLATE_STRICT\n                if (dist > dmax) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n    //#endif\n                hold >>>= op;\n                bits -= op;\n                //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n                op = _out - beg;                /* max distance in output */\n                if (dist > op) {                /* see if copy from window */\n                  op = dist - op;               /* distance back in window */\n                  if (op > whave) {\n                    if (state.sane) {\n                      strm.msg = 'invalid distance too far back';\n                      state.mode = BAD$1;\n                      break top;\n                    }\n\n    // (!) This block is disabled in zlib defaults,\n    // don't enable it for binary compatibility\n    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n    //                if (len <= op - whave) {\n    //                  do {\n    //                    output[_out++] = 0;\n    //                  } while (--len);\n    //                  continue top;\n    //                }\n    //                len -= op - whave;\n    //                do {\n    //                  output[_out++] = 0;\n    //                } while (--op > whave);\n    //                if (op === 0) {\n    //                  from = _out - dist;\n    //                  do {\n    //                    output[_out++] = output[from++];\n    //                  } while (--len);\n    //                  continue top;\n    //                }\n    //#endif\n                  }\n                  from = 0; // window index\n                  from_source = s_window;\n                  if (wnext === 0) {           /* very common case */\n                    from += wsize - op;\n                    if (op < len) {         /* some from window */\n                      len -= op;\n                      do {\n                        output[_out++] = s_window[from++];\n                      } while (--op);\n                      from = _out - dist;  /* rest from output */\n                      from_source = output;\n                    }\n                  }\n                  else if (wnext < op) {      /* wrap around window */\n                    from += wsize + wnext - op;\n                    op -= wnext;\n                    if (op < len) {         /* some from end of window */\n                      len -= op;\n                      do {\n                        output[_out++] = s_window[from++];\n                      } while (--op);\n                      from = 0;\n                      if (wnext < len) {  /* some from start of window */\n                        op = wnext;\n                        len -= op;\n                        do {\n                          output[_out++] = s_window[from++];\n                        } while (--op);\n                        from = _out - dist;      /* rest from output */\n                        from_source = output;\n                      }\n                    }\n                  }\n                  else {                      /* contiguous in window */\n                    from += wnext - op;\n                    if (op < len) {         /* some from window */\n                      len -= op;\n                      do {\n                        output[_out++] = s_window[from++];\n                      } while (--op);\n                      from = _out - dist;  /* rest from output */\n                      from_source = output;\n                    }\n                  }\n                  while (len > 2) {\n                    output[_out++] = from_source[from++];\n                    output[_out++] = from_source[from++];\n                    output[_out++] = from_source[from++];\n                    len -= 3;\n                  }\n                  if (len) {\n                    output[_out++] = from_source[from++];\n                    if (len > 1) {\n                      output[_out++] = from_source[from++];\n                    }\n                  }\n                }\n                else {\n                  from = _out - dist;          /* copy direct from output */\n                  do {                        /* minimum length is three */\n                    output[_out++] = output[from++];\n                    output[_out++] = output[from++];\n                    output[_out++] = output[from++];\n                    len -= 3;\n                  } while (len > 2);\n                  if (len) {\n                    output[_out++] = output[from++];\n                    if (len > 1) {\n                      output[_out++] = output[from++];\n                    }\n                  }\n                }\n              }\n              else if ((op & 64) === 0) {          /* 2nd level distance code */\n                here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n                continue dodist;\n              }\n              else {\n                strm.msg = 'invalid distance code';\n                state.mode = BAD$1;\n                break top;\n              }\n\n              break; // need to emulate goto via \"continue\"\n            }\n          }\n          else if ((op & 64) === 0) {              /* 2nd level length code */\n            here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dolen;\n          }\n          else if (op & 32) {                     /* end-of-block */\n            //Tracevv((stderr, \"inflate:         end of block\\n\"));\n            state.mode = TYPE$1;\n            break top;\n          }\n          else {\n            strm.msg = 'invalid literal/length code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      } while (_in < last && _out < end);\n\n      /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n      len = bits >> 3;\n      _in -= len;\n      bits -= len << 3;\n      hold &= (1 << bits) - 1;\n\n      /* update state and return */\n      strm.next_in = _in;\n      strm.next_out = _out;\n      strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n      strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n      state.hold = hold;\n      state.bits = bits;\n      return;\n    };\n\n    // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n    //\n    // This software is provided 'as-is', without any express or implied\n    // warranty. In no event will the authors be held liable for any damages\n    // arising from the use of this software.\n    //\n    // Permission is granted to anyone to use this software for any purpose,\n    // including commercial applications, and to alter it and redistribute it\n    // freely, subject to the following restrictions:\n    //\n    // 1. The origin of this software must not be misrepresented; you must not\n    //   claim that you wrote the original software. If you use this software\n    //   in a product, an acknowledgment in the product documentation would be\n    //   appreciated but is not required.\n    // 2. Altered source versions must be plainly marked as such, and must not be\n    //   misrepresented as being the original software.\n    // 3. This notice may not be removed or altered from any source distribution.\n\n    var utils$2 = common;\n\n    var MAXBITS = 15;\n    var ENOUGH_LENS$1 = 852;\n    var ENOUGH_DISTS$1 = 592;\n    //var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\n    var CODES$1 = 0;\n    var LENS$1 = 1;\n    var DISTS$1 = 2;\n\n    var lbase = [ /* Length codes 257..285 base */\n      3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n      35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n    ];\n\n    var lext = [ /* Length codes 257..285 extra */\n      16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n      19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n    ];\n\n    var dbase = [ /* Distance codes 0..29 base */\n      1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n      257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n      8193, 12289, 16385, 24577, 0, 0\n    ];\n\n    var dext = [ /* Distance codes 0..29 extra */\n      16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n      23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n      28, 28, 29, 29, 64, 64\n    ];\n\n    var inftrees = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n    {\n      var bits = opts.bits;\n          //here = opts.here; /* table entry for duplication */\n\n      var len = 0;               /* a code's length in bits */\n      var sym = 0;               /* index of code symbols */\n      var min = 0, max = 0;          /* minimum and maximum code lengths */\n      var root = 0;              /* number of index bits for root table */\n      var curr = 0;              /* number of index bits for current table */\n      var drop = 0;              /* code bits to drop for sub-table */\n      var left = 0;                   /* number of prefix codes available */\n      var used = 0;              /* code entries in table used */\n      var huff = 0;              /* Huffman code */\n      var incr;              /* for incrementing code, index */\n      var fill;              /* index for replicating entries */\n      var low;               /* low bits for current root entry */\n      var mask;              /* mask for low root bits */\n      var next;             /* next available space in table */\n      var base = null;     /* base value table to use */\n      var base_index = 0;\n    //  var shoextra;    /* extra bits table to use */\n      var end;                    /* use base and extra for symbol > end */\n      var count = new utils$2.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n      var offs = new utils$2.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n      var extra = null;\n      var extra_index = 0;\n\n      var here_bits, here_op, here_val;\n\n      /*\n       Process a set of code lengths to create a canonical Huffman code.  The\n       code lengths are lens[0..codes-1].  Each length corresponds to the\n       symbols 0..codes-1.  The Huffman code is generated by first sorting the\n       symbols by length from short to long, and retaining the symbol order\n       for codes with equal lengths.  Then the code starts with all zero bits\n       for the first code of the shortest length, and the codes are integer\n       increments for the same length, and zeros are appended as the length\n       increases.  For the deflate format, these bits are stored backwards\n       from their more natural integer increment ordering, and so when the\n       decoding tables are built in the large loop below, the integer codes\n       are incremented backwards.\n\n       This routine assumes, but does not check, that all of the entries in\n       lens[] are in the range 0..MAXBITS.  The caller must assure this.\n       1..MAXBITS is interpreted as that code length.  zero means that that\n       symbol does not occur in this code.\n\n       The codes are sorted by computing a count of codes for each length,\n       creating from that a table of starting indices for each length in the\n       sorted table, and then entering the symbols in order in the sorted\n       table.  The sorted table is work[], with that space being provided by\n       the caller.\n\n       The length counts are used for other purposes as well, i.e. finding\n       the minimum and maximum length codes, determining if there are any\n       codes at all, checking for a valid set of lengths, and looking ahead\n       at length counts to determine sub-table sizes when building the\n       decoding tables.\n       */\n\n      /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n      for (len = 0; len <= MAXBITS; len++) {\n        count[len] = 0;\n      }\n      for (sym = 0; sym < codes; sym++) {\n        count[lens[lens_index + sym]]++;\n      }\n\n      /* bound code lengths, force root to be within code lengths */\n      root = bits;\n      for (max = MAXBITS; max >= 1; max--) {\n        if (count[max] !== 0) { break; }\n      }\n      if (root > max) {\n        root = max;\n      }\n      if (max === 0) {                     /* no symbols to code at all */\n        //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n        //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n        //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n        table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n        //table.op[opts.table_index] = 64;\n        //table.bits[opts.table_index] = 1;\n        //table.val[opts.table_index++] = 0;\n        table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n        opts.bits = 1;\n        return 0;     /* no symbols, but wait for decoding to report error */\n      }\n      for (min = 1; min < max; min++) {\n        if (count[min] !== 0) { break; }\n      }\n      if (root < min) {\n        root = min;\n      }\n\n      /* check for an over-subscribed or incomplete set of lengths */\n      left = 1;\n      for (len = 1; len <= MAXBITS; len++) {\n        left <<= 1;\n        left -= count[len];\n        if (left < 0) {\n          return -1;\n        }        /* over-subscribed */\n      }\n      if (left > 0 && (type === CODES$1 || max !== 1)) {\n        return -1;                      /* incomplete set */\n      }\n\n      /* generate offsets into symbol table for each length for sorting */\n      offs[1] = 0;\n      for (len = 1; len < MAXBITS; len++) {\n        offs[len + 1] = offs[len] + count[len];\n      }\n\n      /* sort symbols by length, by symbol order within each length */\n      for (sym = 0; sym < codes; sym++) {\n        if (lens[lens_index + sym] !== 0) {\n          work[offs[lens[lens_index + sym]]++] = sym;\n        }\n      }\n\n      /*\n       Create and fill in decoding tables.  In this loop, the table being\n       filled is at next and has curr index bits.  The code being used is huff\n       with length len.  That code is converted to an index by dropping drop\n       bits off of the bottom.  For codes where len is less than drop + curr,\n       those top drop + curr - len bits are incremented through all values to\n       fill the table with replicated entries.\n\n       root is the number of index bits for the root table.  When len exceeds\n       root, sub-tables are created pointed to by the root entry with an index\n       of the low root bits of huff.  This is saved in low to check for when a\n       new sub-table should be started.  drop is zero when the root table is\n       being filled, and drop is root when sub-tables are being filled.\n\n       When a new sub-table is needed, it is necessary to look ahead in the\n       code lengths to determine what size sub-table is needed.  The length\n       counts are used for this, and so count[] is decremented as codes are\n       entered in the tables.\n\n       used keeps track of how many table entries have been allocated from the\n       provided *table space.  It is checked for LENS and DIST tables against\n       the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n       the initial root table size constants.  See the comments in inftrees.h\n       for more information.\n\n       sym increments through all symbols, and the loop terminates when\n       all codes of length max, i.e. all codes, have been processed.  This\n       routine permits incomplete codes, so another loop after this one fills\n       in the rest of the decoding tables with invalid code markers.\n       */\n\n      /* set up for code type */\n      // poor man optimization - use if-else instead of switch,\n      // to avoid deopts in old v8\n      if (type === CODES$1) {\n        base = extra = work;    /* dummy value--not used */\n        end = 19;\n\n      } else if (type === LENS$1) {\n        base = lbase;\n        base_index -= 257;\n        extra = lext;\n        extra_index -= 257;\n        end = 256;\n\n      } else {                    /* DISTS */\n        base = dbase;\n        extra = dext;\n        end = -1;\n      }\n\n      /* initialize opts for loop */\n      huff = 0;                   /* starting code */\n      sym = 0;                    /* starting code symbol */\n      len = min;                  /* starting code length */\n      next = table_index;              /* current table to fill in */\n      curr = root;                /* current table index bits */\n      drop = 0;                   /* current bits to drop from code for index */\n      low = -1;                   /* trigger new sub-table when len > root */\n      used = 1 << root;          /* use root table entries */\n      mask = used - 1;            /* mask for comparing low */\n\n      /* check available table space */\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* process all codes and make table entries */\n      for (;;) {\n        /* create table entry */\n        here_bits = len - drop;\n        if (work[sym] < end) {\n          here_op = 0;\n          here_val = work[sym];\n        }\n        else if (work[sym] > end) {\n          here_op = extra[extra_index + work[sym]];\n          here_val = base[base_index + work[sym]];\n        }\n        else {\n          here_op = 32 + 64;         /* end of block */\n          here_val = 0;\n        }\n\n        /* replicate for those indices with low len bits equal to huff */\n        incr = 1 << (len - drop);\n        fill = 1 << curr;\n        min = fill;                 /* save offset to next table */\n        do {\n          fill -= incr;\n          table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n        } while (fill !== 0);\n\n        /* backwards increment the len-bit code huff */\n        incr = 1 << (len - 1);\n        while (huff & incr) {\n          incr >>= 1;\n        }\n        if (incr !== 0) {\n          huff &= incr - 1;\n          huff += incr;\n        } else {\n          huff = 0;\n        }\n\n        /* go to next symbol, update count, len */\n        sym++;\n        if (--count[len] === 0) {\n          if (len === max) { break; }\n          len = lens[lens_index + work[sym]];\n        }\n\n        /* create new sub-table if needed */\n        if (len > root && (huff & mask) !== low) {\n          /* if first time, transition to sub-tables */\n          if (drop === 0) {\n            drop = root;\n          }\n\n          /* increment past last table */\n          next += min;            /* here min is 1 << curr */\n\n          /* determine length of next table */\n          curr = len - drop;\n          left = 1 << curr;\n          while (curr + drop < max) {\n            left -= count[curr + drop];\n            if (left <= 0) { break; }\n            curr++;\n            left <<= 1;\n          }\n\n          /* check for enough space */\n          used += 1 << curr;\n          if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n            (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n            return 1;\n          }\n\n          /* point entry in root table to sub-table */\n          low = huff & mask;\n          /*table.op[low] = curr;\n          table.bits[low] = root;\n          table.val[low] = next - opts.table_index;*/\n          table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n        }\n      }\n\n      /* fill in remaining table entry if code is incomplete (guaranteed to have\n       at most one remaining entry, since if the code is incomplete, the\n       maximum code length that was allowed to get this far is one bit) */\n      if (huff !== 0) {\n        //table.op[next + huff] = 64;            /* invalid code marker */\n        //table.bits[next + huff] = len - drop;\n        //table.val[next + huff] = 0;\n        table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n      }\n\n      /* set return parameters */\n      //opts.table_index += used;\n      opts.bits = root;\n      return 0;\n    };\n\n    // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n    //\n    // This software is provided 'as-is', without any express or implied\n    // warranty. In no event will the authors be held liable for any damages\n    // arising from the use of this software.\n    //\n    // Permission is granted to anyone to use this software for any purpose,\n    // including commercial applications, and to alter it and redistribute it\n    // freely, subject to the following restrictions:\n    //\n    // 1. The origin of this software must not be misrepresented; you must not\n    //   claim that you wrote the original software. If you use this software\n    //   in a product, an acknowledgment in the product documentation would be\n    //   appreciated but is not required.\n    // 2. Altered source versions must be plainly marked as such, and must not be\n    //   misrepresented as being the original software.\n    // 3. This notice may not be removed or altered from any source distribution.\n\n    var utils$1         = common;\n    var adler32       = adler32_1;\n    var crc32         = crc32_1;\n    var inflate_fast  = inffast;\n    var inflate_table = inftrees;\n\n    var CODES = 0;\n    var LENS = 1;\n    var DISTS = 2;\n\n    /* Public constants ==========================================================*/\n    /* ===========================================================================*/\n\n\n    /* Allowed flush values; see deflate() and inflate() below for details */\n    //var Z_NO_FLUSH      = 0;\n    //var Z_PARTIAL_FLUSH = 1;\n    //var Z_SYNC_FLUSH    = 2;\n    //var Z_FULL_FLUSH    = 3;\n    var Z_FINISH        = 4;\n    var Z_BLOCK         = 5;\n    var Z_TREES         = 6;\n\n\n    /* Return codes for the compression/decompression functions. Negative values\n     * are errors, positive values are used for special but normal events.\n     */\n    var Z_OK            = 0;\n    var Z_STREAM_END    = 1;\n    var Z_NEED_DICT     = 2;\n    //var Z_ERRNO         = -1;\n    var Z_STREAM_ERROR  = -2;\n    var Z_DATA_ERROR    = -3;\n    var Z_MEM_ERROR     = -4;\n    var Z_BUF_ERROR     = -5;\n    //var Z_VERSION_ERROR = -6;\n\n    /* The deflate compression method */\n    var Z_DEFLATED  = 8;\n\n\n    /* STATES ====================================================================*/\n    /* ===========================================================================*/\n\n\n    var    HEAD = 1;       /* i: waiting for magic header */\n    var    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\n    var    TIME = 3;       /* i: waiting for modification time (gzip) */\n    var    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\n    var    EXLEN = 5;      /* i: waiting for extra length (gzip) */\n    var    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\n    var    NAME = 7;       /* i: waiting for end of file name (gzip) */\n    var    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\n    var    HCRC = 9;       /* i: waiting for header crc (gzip) */\n    var    DICTID = 10;    /* i: waiting for dictionary check value */\n    var    DICT = 11;      /* waiting for inflateSetDictionary() call */\n    var        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n    var        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\n    var        STORED = 14;    /* i: waiting for stored size (length and complement) */\n    var        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\n    var        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\n    var        TABLE = 17;     /* i: waiting for dynamic block table lengths */\n    var        LENLENS = 18;   /* i: waiting for code length code lengths */\n    var        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\n    var            LEN_ = 20;      /* i: same as LEN below, but only first time in */\n    var            LEN = 21;       /* i: waiting for length/lit/eob code */\n    var            LENEXT = 22;    /* i: waiting for length extra bits */\n    var            DIST = 23;      /* i: waiting for distance code */\n    var            DISTEXT = 24;   /* i: waiting for distance extra bits */\n    var            MATCH = 25;     /* o: waiting for output space to copy string */\n    var            LIT = 26;       /* o: waiting for output space to write literal */\n    var    CHECK = 27;     /* i: waiting for 32-bit check value */\n    var    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\n    var    DONE = 29;      /* finished check, done -- remain here until reset */\n    var    BAD = 30;       /* got a data error -- remain here until reset */\n    var    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\n    var    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n    /* ===========================================================================*/\n\n\n\n    var ENOUGH_LENS = 852;\n    var ENOUGH_DISTS = 592;\n    //var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\n    var MAX_WBITS = 15;\n    /* 32K LZ77 window */\n    var DEF_WBITS = MAX_WBITS;\n\n\n    function zswap32(q) {\n      return  (((q >>> 24) & 0xff) +\n              ((q >>> 8) & 0xff00) +\n              ((q & 0xff00) << 8) +\n              ((q & 0xff) << 24));\n    }\n\n\n    function InflateState() {\n      this.mode = 0;             /* current inflate mode */\n      this.last = false;          /* true if processing last block */\n      this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n      this.havedict = false;      /* true if dictionary provided */\n      this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n      this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n      this.check = 0;             /* protected copy of check value */\n      this.total = 0;             /* protected copy of output count */\n      // TODO: may be {}\n      this.head = null;           /* where to save gzip header information */\n\n      /* sliding window */\n      this.wbits = 0;             /* log base 2 of requested window size */\n      this.wsize = 0;             /* window size or zero if not using window */\n      this.whave = 0;             /* valid bytes in the window */\n      this.wnext = 0;             /* window write index */\n      this.window = null;         /* allocated sliding window, if needed */\n\n      /* bit accumulator */\n      this.hold = 0;              /* input bit accumulator */\n      this.bits = 0;              /* number of bits in \"in\" */\n\n      /* for string and stored block copying */\n      this.length = 0;            /* literal or length of data to copy */\n      this.offset = 0;            /* distance back to copy string from */\n\n      /* for table and code decoding */\n      this.extra = 0;             /* extra bits needed */\n\n      /* fixed and dynamic code tables */\n      this.lencode = null;          /* starting table for length/literal codes */\n      this.distcode = null;         /* starting table for distance codes */\n      this.lenbits = 0;           /* index bits for lencode */\n      this.distbits = 0;          /* index bits for distcode */\n\n      /* dynamic table building */\n      this.ncode = 0;             /* number of code length code lengths */\n      this.nlen = 0;              /* number of length code lengths */\n      this.ndist = 0;             /* number of distance code lengths */\n      this.have = 0;              /* number of code lengths in lens[] */\n      this.next = null;              /* next available space in codes[] */\n\n      this.lens = new utils$1.Buf16(320); /* temporary storage for code lengths */\n      this.work = new utils$1.Buf16(288); /* work area for code table building */\n\n      /*\n       because we don't have pointers in js, we use lencode and distcode directly\n       as buffers so we don't need codes\n      */\n      //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n      this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n      this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n      this.sane = 0;                   /* if false, allow invalid distance too far */\n      this.back = 0;                   /* bits back of last unprocessed length/lit */\n      this.was = 0;                    /* initial length of match */\n    }\n\n    function inflateResetKeep(strm) {\n      var state;\n\n      if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n      state = strm.state;\n      strm.total_in = strm.total_out = state.total = 0;\n      strm.msg = ''; /*Z_NULL*/\n      if (state.wrap) {       /* to support ill-conceived Java test suite */\n        strm.adler = state.wrap & 1;\n      }\n      state.mode = HEAD;\n      state.last = 0;\n      state.havedict = 0;\n      state.dmax = 32768;\n      state.head = null/*Z_NULL*/;\n      state.hold = 0;\n      state.bits = 0;\n      //state.lencode = state.distcode = state.next = state.codes;\n      state.lencode = state.lendyn = new utils$1.Buf32(ENOUGH_LENS);\n      state.distcode = state.distdyn = new utils$1.Buf32(ENOUGH_DISTS);\n\n      state.sane = 1;\n      state.back = -1;\n      //Tracev((stderr, \"inflate: reset\\n\"));\n      return Z_OK;\n    }\n\n    function inflateReset(strm) {\n      var state;\n\n      if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n      state = strm.state;\n      state.wsize = 0;\n      state.whave = 0;\n      state.wnext = 0;\n      return inflateResetKeep(strm);\n\n    }\n\n    function inflateReset2(strm, windowBits) {\n      var wrap;\n      var state;\n\n      /* get the state */\n      if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n      state = strm.state;\n\n      /* extract wrap request from windowBits parameter */\n      if (windowBits < 0) {\n        wrap = 0;\n        windowBits = -windowBits;\n      }\n      else {\n        wrap = (windowBits >> 4) + 1;\n        if (windowBits < 48) {\n          windowBits &= 15;\n        }\n      }\n\n      /* set number of window bits, free window if different */\n      if (windowBits && (windowBits < 8 || windowBits > 15)) {\n        return Z_STREAM_ERROR;\n      }\n      if (state.window !== null && state.wbits !== windowBits) {\n        state.window = null;\n      }\n\n      /* update state and reset the rest of it */\n      state.wrap = wrap;\n      state.wbits = windowBits;\n      return inflateReset(strm);\n    }\n\n    function inflateInit2(strm, windowBits) {\n      var ret;\n      var state;\n\n      if (!strm) { return Z_STREAM_ERROR; }\n      //strm.msg = Z_NULL;                 /* in case we return an error */\n\n      state = new InflateState();\n\n      //if (state === Z_NULL) return Z_MEM_ERROR;\n      //Tracev((stderr, \"inflate: allocated\\n\"));\n      strm.state = state;\n      state.window = null/*Z_NULL*/;\n      ret = inflateReset2(strm, windowBits);\n      if (ret !== Z_OK) {\n        strm.state = null/*Z_NULL*/;\n      }\n      return ret;\n    }\n\n    function inflateInit(strm) {\n      return inflateInit2(strm, DEF_WBITS);\n    }\n\n\n    /*\n     Return state with length and distance decoding tables and index sizes set to\n     fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n     If BUILDFIXED is defined, then instead this routine builds the tables the\n     first time it's called, and returns those tables the first time and\n     thereafter.  This reduces the size of the code by about 2K bytes, in\n     exchange for a little execution time.  However, BUILDFIXED should not be\n     used for threaded applications, since the rewriting of the tables and virgin\n     may not be thread-safe.\n     */\n    var virgin = true;\n\n    var lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n    function fixedtables(state) {\n      /* build fixed huffman tables if first call (may not be thread safe) */\n      if (virgin) {\n        var sym;\n\n        lenfix = new utils$1.Buf32(512);\n        distfix = new utils$1.Buf32(32);\n\n        /* literal/length table */\n        sym = 0;\n        while (sym < 144) { state.lens[sym++] = 8; }\n        while (sym < 256) { state.lens[sym++] = 9; }\n        while (sym < 280) { state.lens[sym++] = 7; }\n        while (sym < 288) { state.lens[sym++] = 8; }\n\n        inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n        /* distance table */\n        sym = 0;\n        while (sym < 32) { state.lens[sym++] = 5; }\n\n        inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n        /* do this just once */\n        virgin = false;\n      }\n\n      state.lencode = lenfix;\n      state.lenbits = 9;\n      state.distcode = distfix;\n      state.distbits = 5;\n    }\n\n\n    /*\n     Update the window with the last wsize (normally 32K) bytes written before\n     returning.  If window does not exist yet, create it.  This is only called\n     when a window is already in use, or when output has been written during this\n     inflate call, but the end of the deflate stream has not been reached yet.\n     It is also called to create a window for dictionary data when a dictionary\n     is loaded.\n\n     Providing output buffers larger than 32K to inflate() should provide a speed\n     advantage, since only the last 32K of output is copied to the sliding window\n     upon return from inflate(), and since all distances after the first 32K of\n     output will fall in the output data, making match copies simpler and faster.\n     The advantage may be dependent on the size of the processor's data caches.\n     */\n    function updatewindow(strm, src, end, copy) {\n      var dist;\n      var state = strm.state;\n\n      /* if it hasn't been done already, allocate space for the window */\n      if (state.window === null) {\n        state.wsize = 1 << state.wbits;\n        state.wnext = 0;\n        state.whave = 0;\n\n        state.window = new utils$1.Buf8(state.wsize);\n      }\n\n      /* copy state->wsize or less output bytes into the circular window */\n      if (copy >= state.wsize) {\n        utils$1.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n        state.wnext = 0;\n        state.whave = state.wsize;\n      }\n      else {\n        dist = state.wsize - state.wnext;\n        if (dist > copy) {\n          dist = copy;\n        }\n        //zmemcpy(state->window + state->wnext, end - copy, dist);\n        utils$1.arraySet(state.window, src, end - copy, dist, state.wnext);\n        copy -= dist;\n        if (copy) {\n          //zmemcpy(state->window, end - copy, copy);\n          utils$1.arraySet(state.window, src, end - copy, copy, 0);\n          state.wnext = copy;\n          state.whave = state.wsize;\n        }\n        else {\n          state.wnext += dist;\n          if (state.wnext === state.wsize) { state.wnext = 0; }\n          if (state.whave < state.wsize) { state.whave += dist; }\n        }\n      }\n      return 0;\n    }\n\n    function inflate$2(strm, flush) {\n      var state;\n      var input, output;          // input/output buffers\n      var next;                   /* next input INDEX */\n      var put;                    /* next output INDEX */\n      var have, left;             /* available input and output */\n      var hold;                   /* bit buffer */\n      var bits;                   /* bits in bit buffer */\n      var _in, _out;              /* save starting available input and output */\n      var copy;                   /* number of stored or match bytes to copy */\n      var from;                   /* where to copy match bytes from */\n      var from_source;\n      var here = 0;               /* current decoding table entry */\n      var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n      //var last;                   /* parent table entry */\n      var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n      var len;                    /* length to copy for repeats, bits to drop */\n      var ret;                    /* return code */\n      var hbuf = new utils$1.Buf8(4);    /* buffer for gzip header crc calculation */\n      var opts;\n\n      var n; // temporary var for NEED_BITS\n\n      var order = /* permutation of code lengths */\n        [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n      if (!strm || !strm.state || !strm.output ||\n          (!strm.input && strm.avail_in !== 0)) {\n        return Z_STREAM_ERROR;\n      }\n\n      state = strm.state;\n      if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n      //--- LOAD() ---\n      put = strm.next_out;\n      output = strm.output;\n      left = strm.avail_out;\n      next = strm.next_in;\n      input = strm.input;\n      have = strm.avail_in;\n      hold = state.hold;\n      bits = state.bits;\n      //---\n\n      _in = have;\n      _out = left;\n      ret = Z_OK;\n\n      inf_leave: // goto emulation\n      for (;;) {\n        switch (state.mode) {\n          case HEAD:\n            if (state.wrap === 0) {\n              state.mode = TYPEDO;\n              break;\n            }\n            //=== NEEDBITS(16);\n            while (bits < 16) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n              state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n              //=== CRC2(state.check, hold);\n              hbuf[0] = hold & 0xff;\n              hbuf[1] = (hold >>> 8) & 0xff;\n              state.check = crc32(state.check, hbuf, 2, 0);\n              //===//\n\n              //=== INITBITS();\n              hold = 0;\n              bits = 0;\n              //===//\n              state.mode = FLAGS;\n              break;\n            }\n            state.flags = 0;           /* expect zlib header */\n            if (state.head) {\n              state.head.done = false;\n            }\n            if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n              (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n              strm.msg = 'incorrect header check';\n              state.mode = BAD;\n              break;\n            }\n            if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n              strm.msg = 'unknown compression method';\n              state.mode = BAD;\n              break;\n            }\n            //--- DROPBITS(4) ---//\n            hold >>>= 4;\n            bits -= 4;\n            //---//\n            len = (hold & 0x0f)/*BITS(4)*/ + 8;\n            if (state.wbits === 0) {\n              state.wbits = len;\n            }\n            else if (len > state.wbits) {\n              strm.msg = 'invalid window size';\n              state.mode = BAD;\n              break;\n            }\n            state.dmax = 1 << len;\n            //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n            strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n            state.mode = hold & 0x200 ? DICTID : TYPE;\n            //=== INITBITS();\n            hold = 0;\n            bits = 0;\n            //===//\n            break;\n          case FLAGS:\n            //=== NEEDBITS(16); */\n            while (bits < 16) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            state.flags = hold;\n            if ((state.flags & 0xff) !== Z_DEFLATED) {\n              strm.msg = 'unknown compression method';\n              state.mode = BAD;\n              break;\n            }\n            if (state.flags & 0xe000) {\n              strm.msg = 'unknown header flags set';\n              state.mode = BAD;\n              break;\n            }\n            if (state.head) {\n              state.head.text = ((hold >> 8) & 1);\n            }\n            if (state.flags & 0x0200) {\n              //=== CRC2(state.check, hold);\n              hbuf[0] = hold & 0xff;\n              hbuf[1] = (hold >>> 8) & 0xff;\n              state.check = crc32(state.check, hbuf, 2, 0);\n              //===//\n            }\n            //=== INITBITS();\n            hold = 0;\n            bits = 0;\n            //===//\n            state.mode = TIME;\n            /* falls through */\n          case TIME:\n            //=== NEEDBITS(32); */\n            while (bits < 32) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            if (state.head) {\n              state.head.time = hold;\n            }\n            if (state.flags & 0x0200) {\n              //=== CRC4(state.check, hold)\n              hbuf[0] = hold & 0xff;\n              hbuf[1] = (hold >>> 8) & 0xff;\n              hbuf[2] = (hold >>> 16) & 0xff;\n              hbuf[3] = (hold >>> 24) & 0xff;\n              state.check = crc32(state.check, hbuf, 4, 0);\n              //===\n            }\n            //=== INITBITS();\n            hold = 0;\n            bits = 0;\n            //===//\n            state.mode = OS;\n            /* falls through */\n          case OS:\n            //=== NEEDBITS(16); */\n            while (bits < 16) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            if (state.head) {\n              state.head.xflags = (hold & 0xff);\n              state.head.os = (hold >> 8);\n            }\n            if (state.flags & 0x0200) {\n              //=== CRC2(state.check, hold);\n              hbuf[0] = hold & 0xff;\n              hbuf[1] = (hold >>> 8) & 0xff;\n              state.check = crc32(state.check, hbuf, 2, 0);\n              //===//\n            }\n            //=== INITBITS();\n            hold = 0;\n            bits = 0;\n            //===//\n            state.mode = EXLEN;\n            /* falls through */\n          case EXLEN:\n            if (state.flags & 0x0400) {\n              //=== NEEDBITS(16); */\n              while (bits < 16) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              state.length = hold;\n              if (state.head) {\n                state.head.extra_len = hold;\n              }\n              if (state.flags & 0x0200) {\n                //=== CRC2(state.check, hold);\n                hbuf[0] = hold & 0xff;\n                hbuf[1] = (hold >>> 8) & 0xff;\n                state.check = crc32(state.check, hbuf, 2, 0);\n                //===//\n              }\n              //=== INITBITS();\n              hold = 0;\n              bits = 0;\n              //===//\n            }\n            else if (state.head) {\n              state.head.extra = null/*Z_NULL*/;\n            }\n            state.mode = EXTRA;\n            /* falls through */\n          case EXTRA:\n            if (state.flags & 0x0400) {\n              copy = state.length;\n              if (copy > have) { copy = have; }\n              if (copy) {\n                if (state.head) {\n                  len = state.head.extra_len - state.length;\n                  if (!state.head.extra) {\n                    // Use untyped array for more convenient processing later\n                    state.head.extra = new Array(state.head.extra_len);\n                  }\n                  utils$1.arraySet(\n                    state.head.extra,\n                    input,\n                    next,\n                    // extra field is limited to 65536 bytes\n                    // - no need for additional size check\n                    copy,\n                    /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                    len\n                  );\n                  //zmemcpy(state.head.extra + len, next,\n                  //        len + copy > state.head.extra_max ?\n                  //        state.head.extra_max - len : copy);\n                }\n                if (state.flags & 0x0200) {\n                  state.check = crc32(state.check, input, copy, next);\n                }\n                have -= copy;\n                next += copy;\n                state.length -= copy;\n              }\n              if (state.length) { break inf_leave; }\n            }\n            state.length = 0;\n            state.mode = NAME;\n            /* falls through */\n          case NAME:\n            if (state.flags & 0x0800) {\n              if (have === 0) { break inf_leave; }\n              copy = 0;\n              do {\n                // TODO: 2 or 1 bytes?\n                len = input[next + copy++];\n                /* use constant limit because in js we should not preallocate memory */\n                if (state.head && len &&\n                    (state.length < 65536 /*state.head.name_max*/)) {\n                  state.head.name += String.fromCharCode(len);\n                }\n              } while (len && copy < have);\n\n              if (state.flags & 0x0200) {\n                state.check = crc32(state.check, input, copy, next);\n              }\n              have -= copy;\n              next += copy;\n              if (len) { break inf_leave; }\n            }\n            else if (state.head) {\n              state.head.name = null;\n            }\n            state.length = 0;\n            state.mode = COMMENT;\n            /* falls through */\n          case COMMENT:\n            if (state.flags & 0x1000) {\n              if (have === 0) { break inf_leave; }\n              copy = 0;\n              do {\n                len = input[next + copy++];\n                /* use constant limit because in js we should not preallocate memory */\n                if (state.head && len &&\n                    (state.length < 65536 /*state.head.comm_max*/)) {\n                  state.head.comment += String.fromCharCode(len);\n                }\n              } while (len && copy < have);\n              if (state.flags & 0x0200) {\n                state.check = crc32(state.check, input, copy, next);\n              }\n              have -= copy;\n              next += copy;\n              if (len) { break inf_leave; }\n            }\n            else if (state.head) {\n              state.head.comment = null;\n            }\n            state.mode = HCRC;\n            /* falls through */\n          case HCRC:\n            if (state.flags & 0x0200) {\n              //=== NEEDBITS(16); */\n              while (bits < 16) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              if (hold !== (state.check & 0xffff)) {\n                strm.msg = 'header crc mismatch';\n                state.mode = BAD;\n                break;\n              }\n              //=== INITBITS();\n              hold = 0;\n              bits = 0;\n              //===//\n            }\n            if (state.head) {\n              state.head.hcrc = ((state.flags >> 9) & 1);\n              state.head.done = true;\n            }\n            strm.adler = state.check = 0;\n            state.mode = TYPE;\n            break;\n          case DICTID:\n            //=== NEEDBITS(32); */\n            while (bits < 32) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            strm.adler = state.check = zswap32(hold);\n            //=== INITBITS();\n            hold = 0;\n            bits = 0;\n            //===//\n            state.mode = DICT;\n            /* falls through */\n          case DICT:\n            if (state.havedict === 0) {\n              //--- RESTORE() ---\n              strm.next_out = put;\n              strm.avail_out = left;\n              strm.next_in = next;\n              strm.avail_in = have;\n              state.hold = hold;\n              state.bits = bits;\n              //---\n              return Z_NEED_DICT;\n            }\n            strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n            state.mode = TYPE;\n            /* falls through */\n          case TYPE:\n            if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n            /* falls through */\n          case TYPEDO:\n            if (state.last) {\n              //--- BYTEBITS() ---//\n              hold >>>= bits & 7;\n              bits -= bits & 7;\n              //---//\n              state.mode = CHECK;\n              break;\n            }\n            //=== NEEDBITS(3); */\n            while (bits < 3) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            state.last = (hold & 0x01)/*BITS(1)*/;\n            //--- DROPBITS(1) ---//\n            hold >>>= 1;\n            bits -= 1;\n            //---//\n\n            switch ((hold & 0x03)/*BITS(2)*/) {\n              case 0:                             /* stored block */\n                //Tracev((stderr, \"inflate:     stored block%s\\n\",\n                //        state.last ? \" (last)\" : \"\"));\n                state.mode = STORED;\n                break;\n              case 1:                             /* fixed block */\n                fixedtables(state);\n                //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n                //        state.last ? \" (last)\" : \"\"));\n                state.mode = LEN_;             /* decode codes */\n                if (flush === Z_TREES) {\n                  //--- DROPBITS(2) ---//\n                  hold >>>= 2;\n                  bits -= 2;\n                  //---//\n                  break inf_leave;\n                }\n                break;\n              case 2:                             /* dynamic block */\n                //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n                //        state.last ? \" (last)\" : \"\"));\n                state.mode = TABLE;\n                break;\n              case 3:\n                strm.msg = 'invalid block type';\n                state.mode = BAD;\n            }\n            //--- DROPBITS(2) ---//\n            hold >>>= 2;\n            bits -= 2;\n            //---//\n            break;\n          case STORED:\n            //--- BYTEBITS() ---// /* go to byte boundary */\n            hold >>>= bits & 7;\n            bits -= bits & 7;\n            //---//\n            //=== NEEDBITS(32); */\n            while (bits < 32) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n              strm.msg = 'invalid stored block lengths';\n              state.mode = BAD;\n              break;\n            }\n            state.length = hold & 0xffff;\n            //Tracev((stderr, \"inflate:       stored length %u\\n\",\n            //        state.length));\n            //=== INITBITS();\n            hold = 0;\n            bits = 0;\n            //===//\n            state.mode = COPY_;\n            if (flush === Z_TREES) { break inf_leave; }\n            /* falls through */\n          case COPY_:\n            state.mode = COPY;\n            /* falls through */\n          case COPY:\n            copy = state.length;\n            if (copy) {\n              if (copy > have) { copy = have; }\n              if (copy > left) { copy = left; }\n              if (copy === 0) { break inf_leave; }\n              //--- zmemcpy(put, next, copy); ---\n              utils$1.arraySet(output, input, next, copy, put);\n              //---//\n              have -= copy;\n              next += copy;\n              left -= copy;\n              put += copy;\n              state.length -= copy;\n              break;\n            }\n            //Tracev((stderr, \"inflate:       stored end\\n\"));\n            state.mode = TYPE;\n            break;\n          case TABLE:\n            //=== NEEDBITS(14); */\n            while (bits < 14) {\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n            }\n            //===//\n            state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n            //--- DROPBITS(5) ---//\n            hold >>>= 5;\n            bits -= 5;\n            //---//\n            state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n            //--- DROPBITS(5) ---//\n            hold >>>= 5;\n            bits -= 5;\n            //---//\n            state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n            //--- DROPBITS(4) ---//\n            hold >>>= 4;\n            bits -= 4;\n            //---//\n    //#ifndef PKZIP_BUG_WORKAROUND\n            if (state.nlen > 286 || state.ndist > 30) {\n              strm.msg = 'too many length or distance symbols';\n              state.mode = BAD;\n              break;\n            }\n    //#endif\n            //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n            state.have = 0;\n            state.mode = LENLENS;\n            /* falls through */\n          case LENLENS:\n            while (state.have < state.ncode) {\n              //=== NEEDBITS(3);\n              while (bits < 3) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            while (state.have < 19) {\n              state.lens[order[state.have++]] = 0;\n            }\n            // We have separate tables & no pointers. 2 commented lines below not needed.\n            //state.next = state.codes;\n            //state.lencode = state.next;\n            // Switch to use dynamic table\n            state.lencode = state.lendyn;\n            state.lenbits = 7;\n\n            opts = { bits: state.lenbits };\n            ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n            state.lenbits = opts.bits;\n\n            if (ret) {\n              strm.msg = 'invalid code lengths set';\n              state.mode = BAD;\n              break;\n            }\n            //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n            state.have = 0;\n            state.mode = CODELENS;\n            /* falls through */\n          case CODELENS:\n            while (state.have < state.nlen + state.ndist) {\n              for (;;) {\n                here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n                here_bits = here >>> 24;\n                here_op = (here >>> 16) & 0xff;\n                here_val = here & 0xffff;\n\n                if ((here_bits) <= bits) { break; }\n                //--- PULLBYTE() ---//\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n                //---//\n              }\n              if (here_val < 16) {\n                //--- DROPBITS(here.bits) ---//\n                hold >>>= here_bits;\n                bits -= here_bits;\n                //---//\n                state.lens[state.have++] = here_val;\n              }\n              else {\n                if (here_val === 16) {\n                  //=== NEEDBITS(here.bits + 2);\n                  n = here_bits + 2;\n                  while (bits < n) {\n                    if (have === 0) { break inf_leave; }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                  }\n                  //===//\n                  //--- DROPBITS(here.bits) ---//\n                  hold >>>= here_bits;\n                  bits -= here_bits;\n                  //---//\n                  if (state.have === 0) {\n                    strm.msg = 'invalid bit length repeat';\n                    state.mode = BAD;\n                    break;\n                  }\n                  len = state.lens[state.have - 1];\n                  copy = 3 + (hold & 0x03);//BITS(2);\n                  //--- DROPBITS(2) ---//\n                  hold >>>= 2;\n                  bits -= 2;\n                  //---//\n                }\n                else if (here_val === 17) {\n                  //=== NEEDBITS(here.bits + 3);\n                  n = here_bits + 3;\n                  while (bits < n) {\n                    if (have === 0) { break inf_leave; }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                  }\n                  //===//\n                  //--- DROPBITS(here.bits) ---//\n                  hold >>>= here_bits;\n                  bits -= here_bits;\n                  //---//\n                  len = 0;\n                  copy = 3 + (hold & 0x07);//BITS(3);\n                  //--- DROPBITS(3) ---//\n                  hold >>>= 3;\n                  bits -= 3;\n                  //---//\n                }\n                else {\n                  //=== NEEDBITS(here.bits + 7);\n                  n = here_bits + 7;\n                  while (bits < n) {\n                    if (have === 0) { break inf_leave; }\n                    have--;\n                    hold += input[next++] << bits;\n                    bits += 8;\n                  }\n                  //===//\n                  //--- DROPBITS(here.bits) ---//\n                  hold >>>= here_bits;\n                  bits -= here_bits;\n                  //---//\n                  len = 0;\n                  copy = 11 + (hold & 0x7f);//BITS(7);\n                  //--- DROPBITS(7) ---//\n                  hold >>>= 7;\n                  bits -= 7;\n                  //---//\n                }\n                if (state.have + copy > state.nlen + state.ndist) {\n                  strm.msg = 'invalid bit length repeat';\n                  state.mode = BAD;\n                  break;\n                }\n                while (copy--) {\n                  state.lens[state.have++] = len;\n                }\n              }\n            }\n\n            /* handle error breaks in while */\n            if (state.mode === BAD) { break; }\n\n            /* check for end-of-block code (better have one) */\n            if (state.lens[256] === 0) {\n              strm.msg = 'invalid code -- missing end-of-block';\n              state.mode = BAD;\n              break;\n            }\n\n            /* build code tables -- note: do not change the lenbits or distbits\n               values here (9 and 6) without reading the comments in inftrees.h\n               concerning the ENOUGH constants, which depend on those values */\n            state.lenbits = 9;\n\n            opts = { bits: state.lenbits };\n            ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n            // We have separate tables & no pointers. 2 commented lines below not needed.\n            // state.next_index = opts.table_index;\n            state.lenbits = opts.bits;\n            // state.lencode = state.next;\n\n            if (ret) {\n              strm.msg = 'invalid literal/lengths set';\n              state.mode = BAD;\n              break;\n            }\n\n            state.distbits = 6;\n            //state.distcode.copy(state.codes);\n            // Switch to use dynamic table\n            state.distcode = state.distdyn;\n            opts = { bits: state.distbits };\n            ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n            // We have separate tables & no pointers. 2 commented lines below not needed.\n            // state.next_index = opts.table_index;\n            state.distbits = opts.bits;\n            // state.distcode = state.next;\n\n            if (ret) {\n              strm.msg = 'invalid distances set';\n              state.mode = BAD;\n              break;\n            }\n            //Tracev((stderr, 'inflate:       codes ok\\n'));\n            state.mode = LEN_;\n            if (flush === Z_TREES) { break inf_leave; }\n            /* falls through */\n          case LEN_:\n            state.mode = LEN;\n            /* falls through */\n          case LEN:\n            if (have >= 6 && left >= 258) {\n              //--- RESTORE() ---\n              strm.next_out = put;\n              strm.avail_out = left;\n              strm.next_in = next;\n              strm.avail_in = have;\n              state.hold = hold;\n              state.bits = bits;\n              //---\n              inflate_fast(strm, _out);\n              //--- LOAD() ---\n              put = strm.next_out;\n              output = strm.output;\n              left = strm.avail_out;\n              next = strm.next_in;\n              input = strm.input;\n              have = strm.avail_in;\n              hold = state.hold;\n              bits = state.bits;\n              //---\n\n              if (state.mode === TYPE) {\n                state.back = -1;\n              }\n              break;\n            }\n            state.back = 0;\n            for (;;) {\n              here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n              here_bits = here >>> 24;\n              here_op = (here >>> 16) & 0xff;\n              here_val = here & 0xffff;\n\n              if (here_bits <= bits) { break; }\n              //--- PULLBYTE() ---//\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n              //---//\n            }\n            if (here_op && (here_op & 0xf0) === 0) {\n              last_bits = here_bits;\n              last_op = here_op;\n              last_val = here_val;\n              for (;;) {\n                here = state.lencode[last_val +\n                        ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n                here_bits = here >>> 24;\n                here_op = (here >>> 16) & 0xff;\n                here_val = here & 0xffff;\n\n                if ((last_bits + here_bits) <= bits) { break; }\n                //--- PULLBYTE() ---//\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n                //---//\n              }\n              //--- DROPBITS(last.bits) ---//\n              hold >>>= last_bits;\n              bits -= last_bits;\n              //---//\n              state.back += last_bits;\n            }\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.back += here_bits;\n            state.length = here_val;\n            if (here_op === 0) {\n              //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n              //        \"inflate:         literal '%c'\\n\" :\n              //        \"inflate:         literal 0x%02x\\n\", here.val));\n              state.mode = LIT;\n              break;\n            }\n            if (here_op & 32) {\n              //Tracevv((stderr, \"inflate:         end of block\\n\"));\n              state.back = -1;\n              state.mode = TYPE;\n              break;\n            }\n            if (here_op & 64) {\n              strm.msg = 'invalid literal/length code';\n              state.mode = BAD;\n              break;\n            }\n            state.extra = here_op & 15;\n            state.mode = LENEXT;\n            /* falls through */\n          case LENEXT:\n            if (state.extra) {\n              //=== NEEDBITS(state.extra);\n              n = state.extra;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n              //--- DROPBITS(state.extra) ---//\n              hold >>>= state.extra;\n              bits -= state.extra;\n              //---//\n              state.back += state.extra;\n            }\n            //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n            state.was = state.length;\n            state.mode = DIST;\n            /* falls through */\n          case DIST:\n            for (;;) {\n              here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n              here_bits = here >>> 24;\n              here_op = (here >>> 16) & 0xff;\n              here_val = here & 0xffff;\n\n              if ((here_bits) <= bits) { break; }\n              //--- PULLBYTE() ---//\n              if (have === 0) { break inf_leave; }\n              have--;\n              hold += input[next++] << bits;\n              bits += 8;\n              //---//\n            }\n            if ((here_op & 0xf0) === 0) {\n              last_bits = here_bits;\n              last_op = here_op;\n              last_val = here_val;\n              for (;;) {\n                here = state.distcode[last_val +\n                        ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n                here_bits = here >>> 24;\n                here_op = (here >>> 16) & 0xff;\n                here_val = here & 0xffff;\n\n                if ((last_bits + here_bits) <= bits) { break; }\n                //--- PULLBYTE() ---//\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n                //---//\n              }\n              //--- DROPBITS(last.bits) ---//\n              hold >>>= last_bits;\n              bits -= last_bits;\n              //---//\n              state.back += last_bits;\n            }\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.back += here_bits;\n            if (here_op & 64) {\n              strm.msg = 'invalid distance code';\n              state.mode = BAD;\n              break;\n            }\n            state.offset = here_val;\n            state.extra = (here_op) & 15;\n            state.mode = DISTEXT;\n            /* falls through */\n          case DISTEXT:\n            if (state.extra) {\n              //=== NEEDBITS(state.extra);\n              n = state.extra;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n              //--- DROPBITS(state.extra) ---//\n              hold >>>= state.extra;\n              bits -= state.extra;\n              //---//\n              state.back += state.extra;\n            }\n    //#ifdef INFLATE_STRICT\n            if (state.offset > state.dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n    //#endif\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n            state.mode = MATCH;\n            /* falls through */\n          case MATCH:\n            if (left === 0) { break inf_leave; }\n            copy = _out - left;\n            if (state.offset > copy) {         /* copy from window */\n              copy = state.offset - copy;\n              if (copy > state.whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break;\n                }\n    // (!) This block is disabled in zlib defaults,\n    // don't enable it for binary compatibility\n    //#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n    //          Trace((stderr, \"inflate.c too far\\n\"));\n    //          copy -= state.whave;\n    //          if (copy > state.length) { copy = state.length; }\n    //          if (copy > left) { copy = left; }\n    //          left -= copy;\n    //          state.length -= copy;\n    //          do {\n    //            output[put++] = 0;\n    //          } while (--copy);\n    //          if (state.length === 0) { state.mode = LEN; }\n    //          break;\n    //#endif\n              }\n              if (copy > state.wnext) {\n                copy -= state.wnext;\n                from = state.wsize - copy;\n              }\n              else {\n                from = state.wnext - copy;\n              }\n              if (copy > state.length) { copy = state.length; }\n              from_source = state.window;\n            }\n            else {                              /* copy from output */\n              from_source = output;\n              from = put - state.offset;\n              copy = state.length;\n            }\n            if (copy > left) { copy = left; }\n            left -= copy;\n            state.length -= copy;\n            do {\n              output[put++] = from_source[from++];\n            } while (--copy);\n            if (state.length === 0) { state.mode = LEN; }\n            break;\n          case LIT:\n            if (left === 0) { break inf_leave; }\n            output[put++] = state.length;\n            left--;\n            state.mode = LEN;\n            break;\n          case CHECK:\n            if (state.wrap) {\n              //=== NEEDBITS(32);\n              while (bits < 32) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                // Use '|' instead of '+' to make sure that result is signed\n                hold |= input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              _out -= left;\n              strm.total_out += _out;\n              state.total += _out;\n              if (_out) {\n                strm.adler = state.check =\n                    /*UPDATE(state.check, put - _out, _out);*/\n                    (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n              }\n              _out = left;\n              // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n              if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n                strm.msg = 'incorrect data check';\n                state.mode = BAD;\n                break;\n              }\n              //=== INITBITS();\n              hold = 0;\n              bits = 0;\n              //===//\n              //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n            }\n            state.mode = LENGTH;\n            /* falls through */\n          case LENGTH:\n            if (state.wrap && state.flags) {\n              //=== NEEDBITS(32);\n              while (bits < 32) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              if (hold !== (state.total & 0xffffffff)) {\n                strm.msg = 'incorrect length check';\n                state.mode = BAD;\n                break;\n              }\n              //=== INITBITS();\n              hold = 0;\n              bits = 0;\n              //===//\n              //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n            }\n            state.mode = DONE;\n            /* falls through */\n          case DONE:\n            ret = Z_STREAM_END;\n            break inf_leave;\n          case BAD:\n            ret = Z_DATA_ERROR;\n            break inf_leave;\n          case MEM:\n            return Z_MEM_ERROR;\n          case SYNC:\n            /* falls through */\n          default:\n            return Z_STREAM_ERROR;\n        }\n      }\n\n      // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n      /*\n         Return from inflate(), updating the total counts and the check value.\n         If there was no progress during the inflate() call, return a buffer\n         error.  Call updatewindow() to create and/or update the window state.\n         Note: a memory error from inflate() is non-recoverable.\n       */\n\n      //--- RESTORE() ---\n      strm.next_out = put;\n      strm.avail_out = left;\n      strm.next_in = next;\n      strm.avail_in = have;\n      state.hold = hold;\n      state.bits = bits;\n      //---\n\n      if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                          (state.mode < CHECK || flush !== Z_FINISH))) {\n        if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n      }\n      _in -= strm.avail_in;\n      _out -= strm.avail_out;\n      strm.total_in += _in;\n      strm.total_out += _out;\n      state.total += _out;\n      if (state.wrap && _out) {\n        strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n          (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n      }\n      strm.data_type = state.bits + (state.last ? 64 : 0) +\n                        (state.mode === TYPE ? 128 : 0) +\n                        (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n      if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n        ret = Z_BUF_ERROR;\n      }\n      return ret;\n    }\n\n    function inflateEnd(strm) {\n\n      if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n        return Z_STREAM_ERROR;\n      }\n\n      var state = strm.state;\n      if (state.window) {\n        state.window = null;\n      }\n      strm.state = null;\n      return Z_OK;\n    }\n\n    function inflateGetHeader(strm, head) {\n      var state;\n\n      /* check state */\n      if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n      state = strm.state;\n      if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n      /* save header structure */\n      state.head = head;\n      head.done = false;\n      return Z_OK;\n    }\n\n    function inflateSetDictionary(strm, dictionary) {\n      var dictLength = dictionary.length;\n\n      var state;\n      var dictid;\n      var ret;\n\n      /* check state */\n      if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n      state = strm.state;\n\n      if (state.wrap !== 0 && state.mode !== DICT) {\n        return Z_STREAM_ERROR;\n      }\n\n      /* check for correct dictionary identifier */\n      if (state.mode === DICT) {\n        dictid = 1; /* adler32(0, null, 0)*/\n        /* dictid = adler32(dictid, dictionary, dictLength); */\n        dictid = adler32(dictid, dictionary, dictLength, 0);\n        if (dictid !== state.check) {\n          return Z_DATA_ERROR;\n        }\n      }\n      /* copy dictionary to window using updatewindow(), which will amend the\n       existing dictionary if appropriate */\n      ret = updatewindow(strm, dictionary, dictLength, dictLength);\n      if (ret) {\n        state.mode = MEM;\n        return Z_MEM_ERROR;\n      }\n      state.havedict = 1;\n      // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n      return Z_OK;\n    }\n\n    inflate$3.inflateReset = inflateReset;\n    inflate$3.inflateReset2 = inflateReset2;\n    inflate$3.inflateResetKeep = inflateResetKeep;\n    inflate$3.inflateInit = inflateInit;\n    inflate$3.inflateInit2 = inflateInit2;\n    inflate$3.inflate = inflate$2;\n    inflate$3.inflateEnd = inflateEnd;\n    inflate$3.inflateGetHeader = inflateGetHeader;\n    inflate$3.inflateSetDictionary = inflateSetDictionary;\n    inflate$3.inflateInfo = 'pako inflate (from Nodeca project)';\n\n    // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n    //\n    // This software is provided 'as-is', without any express or implied\n    // warranty. In no event will the authors be held liable for any damages\n    // arising from the use of this software.\n    //\n    // Permission is granted to anyone to use this software for any purpose,\n    // including commercial applications, and to alter it and redistribute it\n    // freely, subject to the following restrictions:\n    //\n    // 1. The origin of this software must not be misrepresented; you must not\n    //   claim that you wrote the original software. If you use this software\n    //   in a product, an acknowledgment in the product documentation would be\n    //   appreciated but is not required.\n    // 2. Altered source versions must be plainly marked as such, and must not be\n    //   misrepresented as being the original software.\n    // 3. This notice may not be removed or altered from any source distribution.\n\n    var constants$1 = {\n\n      /* Allowed flush values; see deflate() and inflate() below for details */\n      Z_NO_FLUSH:         0,\n      Z_PARTIAL_FLUSH:    1,\n      Z_SYNC_FLUSH:       2,\n      Z_FULL_FLUSH:       3,\n      Z_FINISH:           4,\n      Z_BLOCK:            5,\n      Z_TREES:            6,\n\n      /* Return codes for the compression/decompression functions. Negative values\n      * are errors, positive values are used for special but normal events.\n      */\n      Z_OK:               0,\n      Z_STREAM_END:       1,\n      Z_NEED_DICT:        2,\n      Z_ERRNO:           -1,\n      Z_STREAM_ERROR:    -2,\n      Z_DATA_ERROR:      -3,\n      //Z_MEM_ERROR:     -4,\n      Z_BUF_ERROR:       -5,\n      //Z_VERSION_ERROR: -6,\n\n      /* compression levels */\n      Z_NO_COMPRESSION:         0,\n      Z_BEST_SPEED:             1,\n      Z_BEST_COMPRESSION:       9,\n      Z_DEFAULT_COMPRESSION:   -1,\n\n\n      Z_FILTERED:               1,\n      Z_HUFFMAN_ONLY:           2,\n      Z_RLE:                    3,\n      Z_FIXED:                  4,\n      Z_DEFAULT_STRATEGY:       0,\n\n      /* Possible values of the data_type field (though see inflate()) */\n      Z_BINARY:                 0,\n      Z_TEXT:                   1,\n      //Z_ASCII:                1, // = Z_TEXT (deprecated)\n      Z_UNKNOWN:                2,\n\n      /* The deflate compression method */\n      Z_DEFLATED:               8\n      //Z_NULL:                 null // Use -1 or null inline, depending on var type\n    };\n\n    // (C) 1995-2013 Jean-loup Gailly and Mark Adler\n    // (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n    //\n    // This software is provided 'as-is', without any express or implied\n    // warranty. In no event will the authors be held liable for any damages\n    // arising from the use of this software.\n    //\n    // Permission is granted to anyone to use this software for any purpose,\n    // including commercial applications, and to alter it and redistribute it\n    // freely, subject to the following restrictions:\n    //\n    // 1. The origin of this software must not be misrepresented; you must not\n    //   claim that you wrote the original software. If you use this software\n    //   in a product, an acknowledgment in the product documentation would be\n    //   appreciated but is not required.\n    // 2. Altered source versions must be plainly marked as such, and must not be\n    //   misrepresented as being the original software.\n    // 3. This notice may not be removed or altered from any source distribution.\n\n    function GZheader$1() {\n      /* true if compressed data believed to be text */\n      this.text       = 0;\n      /* modification time */\n      this.time       = 0;\n      /* extra flags (not used when writing a gzip file) */\n      this.xflags     = 0;\n      /* operating system */\n      this.os         = 0;\n      /* pointer to extra field or Z_NULL if none */\n      this.extra      = null;\n      /* extra field length (valid if extra != Z_NULL) */\n      this.extra_len  = 0; // Actually, we don't need it in JS,\n                           // but leave for few code modifications\n\n      //\n      // Setup limits is not necessary because in js we should not preallocate memory\n      // for inflate use constant limit in 65536 bytes\n      //\n\n      /* space at extra (only when reading header) */\n      // this.extra_max  = 0;\n      /* pointer to zero-terminated file name or Z_NULL */\n      this.name       = '';\n      /* space at name (only when reading header) */\n      // this.name_max   = 0;\n      /* pointer to zero-terminated comment or Z_NULL */\n      this.comment    = '';\n      /* space at comment (only when reading header) */\n      // this.comm_max   = 0;\n      /* true if there was or will be a header crc */\n      this.hcrc       = 0;\n      /* true when done reading gzip header (not used when writing a gzip file) */\n      this.done       = false;\n    }\n\n    var gzheader = GZheader$1;\n\n    var zlib_inflate = inflate$3;\n    var utils        = common;\n    var strings      = strings$2;\n    var c            = constants$1;\n    var msg          = messages;\n    var ZStream      = zstream;\n    var GZheader     = gzheader;\n\n    var toString = Object.prototype.toString;\n\n    /**\n     * class Inflate\n     *\n     * Generic JS-style wrapper for zlib calls. If you don't need\n     * streaming behaviour - use more simple functions: [[inflate]]\n     * and [[inflateRaw]].\n     **/\n\n    /* internal\n     * inflate.chunks -> Array\n     *\n     * Chunks of output data, if [[Inflate#onData]] not overridden.\n     **/\n\n    /**\n     * Inflate.result -> Uint8Array|Array|String\n     *\n     * Uncompressed result, generated by default [[Inflate#onData]]\n     * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n     * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n     * push a chunk with explicit flush (call [[Inflate#push]] with\n     * `Z_SYNC_FLUSH` param).\n     **/\n\n    /**\n     * Inflate.err -> Number\n     *\n     * Error code after inflate finished. 0 (Z_OK) on success.\n     * Should be checked if broken data possible.\n     **/\n\n    /**\n     * Inflate.msg -> String\n     *\n     * Error message, if [[Inflate.err]] != 0\n     **/\n\n\n    /**\n     * new Inflate(options)\n     * - options (Object): zlib inflate options.\n     *\n     * Creates new inflator instance with specified params. Throws exception\n     * on bad params. Supported options:\n     *\n     * - `windowBits`\n     * - `dictionary`\n     *\n     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n     * for more information on these.\n     *\n     * Additional options, for internal needs:\n     *\n     * - `chunkSize` - size of generated data chunks (16K by default)\n     * - `raw` (Boolean) - do raw inflate\n     * - `to` (String) - if equal to 'string', then result will be converted\n     *   from utf8 to utf16 (javascript) string. When string output requested,\n     *   chunk length can differ from `chunkSize`, depending on content.\n     *\n     * By default, when no options set, autodetect deflate/gzip data format via\n     * wrapper header.\n     *\n     * ##### Example:\n     *\n     * ```javascript\n     * var pako = require('pako')\n     *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n     *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n     *\n     * var inflate = new pako.Inflate({ level: 3});\n     *\n     * inflate.push(chunk1, false);\n     * inflate.push(chunk2, true);  // true -> last chunk\n     *\n     * if (inflate.err) { throw new Error(inflate.err); }\n     *\n     * console.log(inflate.result);\n     * ```\n     **/\n    function Inflate(options) {\n      if (!(this instanceof Inflate)) return new Inflate(options);\n\n      this.options = utils.assign({\n        chunkSize: 16384,\n        windowBits: 0,\n        to: ''\n      }, options || {});\n\n      var opt = this.options;\n\n      // Force window size for `raw` data, if not set directly,\n      // because we have no header for autodetect.\n      if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n        opt.windowBits = -opt.windowBits;\n        if (opt.windowBits === 0) { opt.windowBits = -15; }\n      }\n\n      // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n      if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n          !(options && options.windowBits)) {\n        opt.windowBits += 32;\n      }\n\n      // Gzip header has no info about windows size, we can do autodetect only\n      // for deflate. So, if window size not set, force it to max when gzip possible\n      if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n        // bit 3 (16) -> gzipped data\n        // bit 4 (32) -> autodetect gzip/deflate\n        if ((opt.windowBits & 15) === 0) {\n          opt.windowBits |= 15;\n        }\n      }\n\n      this.err    = 0;      // error code, if happens (0 = Z_OK)\n      this.msg    = '';     // error message\n      this.ended  = false;  // used to avoid multiple onEnd() calls\n      this.chunks = [];     // chunks of compressed data\n\n      this.strm   = new ZStream();\n      this.strm.avail_out = 0;\n\n      var status  = zlib_inflate.inflateInit2(\n        this.strm,\n        opt.windowBits\n      );\n\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n\n      this.header = new GZheader();\n\n      zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n      // Setup dictionary\n      if (opt.dictionary) {\n        // Convert data if needed\n        if (typeof opt.dictionary === 'string') {\n          opt.dictionary = strings.string2buf(opt.dictionary);\n        } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n          opt.dictionary = new Uint8Array(opt.dictionary);\n        }\n        if (opt.raw) { //In raw mode we need to set the dictionary early\n          status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n          if (status !== c.Z_OK) {\n            throw new Error(msg[status]);\n          }\n        }\n      }\n    }\n\n    /**\n     * Inflate#push(data[, mode]) -> Boolean\n     * - data (Uint8Array|Array|ArrayBuffer|String): input data\n     * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n     *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n     *\n     * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n     * new output chunks. Returns `true` on success. The last data block must have\n     * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n     * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n     * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n     *\n     * On fail call [[Inflate#onEnd]] with error code and return false.\n     *\n     * We strongly recommend to use `Uint8Array` on input for best speed (output\n     * format is detected automatically). Also, don't skip last param and always\n     * use the same type in your code (boolean or number). That will improve JS speed.\n     *\n     * For regular `Array`-s make sure all elements are [0..255].\n     *\n     * ##### Example\n     *\n     * ```javascript\n     * push(chunk, false); // push one of data chunks\n     * ...\n     * push(chunk, true);  // push last chunk\n     * ```\n     **/\n    Inflate.prototype.push = function (data, mode) {\n      var strm = this.strm;\n      var chunkSize = this.options.chunkSize;\n      var dictionary = this.options.dictionary;\n      var status, _mode;\n      var next_out_utf8, tail, utf8str;\n\n      // Flag to properly process Z_BUF_ERROR on testing inflate call\n      // when we check that all output data was flushed.\n      var allowBufError = false;\n\n      if (this.ended) { return false; }\n      _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n      // Convert data if needed\n      if (typeof data === 'string') {\n        // Only binary strings can be decompressed on practice\n        strm.input = strings.binstring2buf(data);\n      } else if (toString.call(data) === '[object ArrayBuffer]') {\n        strm.input = new Uint8Array(data);\n      } else {\n        strm.input = data;\n      }\n\n      strm.next_in = 0;\n      strm.avail_in = strm.input.length;\n\n      do {\n        if (strm.avail_out === 0) {\n          strm.output = new utils.Buf8(chunkSize);\n          strm.next_out = 0;\n          strm.avail_out = chunkSize;\n        }\n\n        status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n        if (status === c.Z_NEED_DICT && dictionary) {\n          status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n        }\n\n        if (status === c.Z_BUF_ERROR && allowBufError === true) {\n          status = c.Z_OK;\n          allowBufError = false;\n        }\n\n        if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n          this.onEnd(status);\n          this.ended = true;\n          return false;\n        }\n\n        if (strm.next_out) {\n          if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n            if (this.options.to === 'string') {\n\n              next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n              tail = strm.next_out - next_out_utf8;\n              utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n              // move tail\n              strm.next_out = tail;\n              strm.avail_out = chunkSize - tail;\n              if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n              this.onData(utf8str);\n\n            } else {\n              this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n            }\n          }\n        }\n\n        // When no more input data, we should check that internal inflate buffers\n        // are flushed. The only way to do it when avail_out = 0 - run one more\n        // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n        // Here we set flag to process this error properly.\n        //\n        // NOTE. Deflate does not return error in this case and does not needs such\n        // logic.\n        if (strm.avail_in === 0 && strm.avail_out === 0) {\n          allowBufError = true;\n        }\n\n      } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n      if (status === c.Z_STREAM_END) {\n        _mode = c.Z_FINISH;\n      }\n\n      // Finalize on the last chunk.\n      if (_mode === c.Z_FINISH) {\n        status = zlib_inflate.inflateEnd(this.strm);\n        this.onEnd(status);\n        this.ended = true;\n        return status === c.Z_OK;\n      }\n\n      // callback interim results if Z_SYNC_FLUSH.\n      if (_mode === c.Z_SYNC_FLUSH) {\n        this.onEnd(c.Z_OK);\n        strm.avail_out = 0;\n        return true;\n      }\n\n      return true;\n    };\n\n\n    /**\n     * Inflate#onData(chunk) -> Void\n     * - chunk (Uint8Array|Array|String): output data. Type of array depends\n     *   on js engine support. When string output requested, each chunk\n     *   will be string.\n     *\n     * By default, stores data blocks in `chunks[]` property and glue\n     * those in `onEnd`. Override this handler, if you need another behaviour.\n     **/\n    Inflate.prototype.onData = function (chunk) {\n      this.chunks.push(chunk);\n    };\n\n\n    /**\n     * Inflate#onEnd(status) -> Void\n     * - status (Number): inflate status. 0 (Z_OK) on success,\n     *   other if not.\n     *\n     * Called either after you tell inflate that the input stream is\n     * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n     * or if an error happened. By default - join collected chunks,\n     * free memory and fill `results` / `err` properties.\n     **/\n    Inflate.prototype.onEnd = function (status) {\n      // On success - join\n      if (status === c.Z_OK) {\n        if (this.options.to === 'string') {\n          // Glue & convert here, until we teach pako to send\n          // utf8 aligned strings to onData\n          this.result = this.chunks.join('');\n        } else {\n          this.result = utils.flattenChunks(this.chunks);\n        }\n      }\n      this.chunks = [];\n      this.err = status;\n      this.msg = this.strm.msg;\n    };\n\n\n    /**\n     * inflate(data[, options]) -> Uint8Array|Array|String\n     * - data (Uint8Array|Array|String): input data to decompress.\n     * - options (Object): zlib inflate options.\n     *\n     * Decompress `data` with inflate/ungzip and `options`. Autodetect\n     * format via wrapper header by default. That's why we don't provide\n     * separate `ungzip` method.\n     *\n     * Supported options are:\n     *\n     * - windowBits\n     *\n     * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n     * for more information.\n     *\n     * Sugar (options):\n     *\n     * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n     *   negative windowBits implicitly.\n     * - `to` (String) - if equal to 'string', then result will be converted\n     *   from utf8 to utf16 (javascript) string. When string output requested,\n     *   chunk length can differ from `chunkSize`, depending on content.\n     *\n     *\n     * ##### Example:\n     *\n     * ```javascript\n     * var pako = require('pako')\n     *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n     *   , output;\n     *\n     * try {\n     *   output = pako.inflate(input);\n     * } catch (err)\n     *   console.log(err);\n     * }\n     * ```\n     **/\n    function inflate$1(input, options) {\n      var inflator = new Inflate(options);\n\n      inflator.push(input, true);\n\n      // That will never happens, if you don't cheat with options :)\n      if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n      return inflator.result;\n    }\n\n\n    /**\n     * inflateRaw(data[, options]) -> Uint8Array|Array|String\n     * - data (Uint8Array|Array|String): input data to decompress.\n     * - options (Object): zlib inflate options.\n     *\n     * The same as [[inflate]], but creates raw data, without wrapper\n     * (header and adler32 crc).\n     **/\n    function inflateRaw(input, options) {\n      options = options || {};\n      options.raw = true;\n      return inflate$1(input, options);\n    }\n\n\n    /**\n     * ungzip(data[, options]) -> Uint8Array|Array|String\n     * - data (Uint8Array|Array|String): input data to decompress.\n     * - options (Object): zlib inflate options.\n     *\n     * Just shortcut to [[inflate]], because it autodetects format\n     * by header.content. Done for convenience.\n     **/\n\n\n    inflate$4.Inflate = Inflate;\n    inflate$4.inflate = inflate$1;\n    inflate$4.inflateRaw = inflateRaw;\n    inflate$4.ungzip  = inflate$1;\n\n    var assign    = common.assign;\n\n    var deflate   = deflate$4;\n    var inflate   = inflate$4;\n    var constants = constants$1;\n\n    var pako = {};\n\n    assign(pako, deflate, inflate, constants);\n\n    var pako_1 = pako;\n\n    /*\n     * The `chars`, `lookup`, and `decodeFromBase64` members of this file are\n     * licensed under the following:\n     *\n     *     base64-arraybuffer\n     *     https://github.com/niklasvh/base64-arraybuffer\n     *\n     *     Copyright (c) 2012 Niklas von Hertzen\n     *     Licensed under the MIT license.\n     *\n     */\n    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    // Use a lookup table to find the index.\n    var lookup = new Uint8Array(256);\n    for (var i = 0; i < chars.length; i++) {\n        lookup[chars.charCodeAt(i)] = i;\n    }\n    var decodeFromBase64 = function (base64) {\n        var bufferLength = base64.length * 0.75;\n        var len = base64.length;\n        var i;\n        var p = 0;\n        var encoded1;\n        var encoded2;\n        var encoded3;\n        var encoded4;\n        if (base64[base64.length - 1] === '=') {\n            bufferLength--;\n            if (base64[base64.length - 2] === '=') {\n                bufferLength--;\n            }\n        }\n        var bytes = new Uint8Array(bufferLength);\n        for (i = 0; i < len; i += 4) {\n            encoded1 = lookup[base64.charCodeAt(i)];\n            encoded2 = lookup[base64.charCodeAt(i + 1)];\n            encoded3 = lookup[base64.charCodeAt(i + 2)];\n            encoded4 = lookup[base64.charCodeAt(i + 3)];\n            bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n            bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n            bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n        }\n        return bytes;\n    };\n    var arrayToString = function (array) {\n        var str = '';\n        for (var i = 0; i < array.length; i++) {\n            str += String.fromCharCode(array[i]);\n        }\n        return str;\n    };\n    var decompressJson = function (compressedJson) {\n        return arrayToString(pako_1.inflate(decodeFromBase64(compressedJson)));\n    };\n    var padStart = function (value, length, padChar) {\n        var padding = '';\n        for (var idx = 0, len = length - value.length; idx < len; idx++) {\n            padding += padChar;\n        }\n        return padding + value;\n    };\n\n    var CourierBoldCompressed = \"eJyFWdtyGjkQ/RVqnnar8Bb4lpg3jEnCxgEvGDtxKg9iphm01oyILrZxKv++mrGd3az6KC8UnNa0+nrUGr5lI11VVLtskF198FaU1Dns9w9OOkf7/ePDrJu90bWbiorCgpH2RpLZO9WqaCReqZ8lnReJqKTa/SwL8DXJctPs9Lxs4oSS+bAuVVjXC7/tG/lAxYV0+SYbOOOpm402wojckVlQ8+T4wVFdUDHXlaifrTs91Q/Z4PNeMLu7t3/U6746POm+7vW/dLNlWGuUrOlCW+mkrrPBXr/X+4/gciPz25qszQbhyeyKjG2XZb3ewR+9Xi/sMdVO5k+ebHemcaHzW/57p3/y+qQbPk967We//TxoP191hoVeUWexs44q25nUuTZbbYSj4o9OZ6hUZ97osZ05WTJ3AQ37jMOqQtblIt9QG7lWycKJuhCmeJGGhSOxffccyqPj/W728eXX4cFJNxvavAmRyQbH++HnGf34vdc/etXNFq54d50NXh+2X6/C137v+CnQH8gZmYdQfP6WXX8MCppQTYMlditCBL53/wfTQ65EFeNfvQ6erlQsqX21akJc1rGs0EoJE+NbMnlToZFAVEFkQ3iABW2uGH3CUK1ojUTgMWEbjfaWeUp5G6N5aCwRw5vddkOM98EVqRlPrBJ2E8OPZHSM6prJkrtnVrqNIWbtOjQrg8o7Zq2VDwxId5x3xMe0lpzBuVaa0WGpkkCkmgaON/3qBVODpaHQiIybXz3ZliTi3DO2D2PoNIZGMXQWQ+MYehNDb2PoXQxNYujPGHofQ+cx9CGGpjE0i6GLGPorhuYxtIihyxhaxtBVDF3H0McY+hRDNzG0CqfQLTmeNlZBBvr0+TnIKbmUuTS5Z1jUN6xtw8nBtEjLb7wxDOesmB5j+JfpIIYLmIZiWC6GZAz9HUMMvTItzESL6VqG9rZMKGOI4QaGXpjY+xi6i6H7GGKYdMeQPl9foBBW3GHark9Vo5OqgEd9oe+ZOPOnc3NcqmZgiUuomehYnt1xZ8daaSPZ8wBoyb0Jx3jOBLBtGyvbiRNOLXw0Sy+DpNKAAhpxq/gXYhD6NdMda6bwwyTH0kwhypI70p5wdhR7Gjia3JEhpvfDLCRKI7YcqYXJnxgv/g3vSthEhNNSEKIfCQByUkpurWQaNXjqNtqjSfHp0OdLOwSAG31E7h03uLRMvlbEtDPoq0rkhqvhlSFu40I7kfP9VoRLFrH+G7YLcypCQLkJ1delML5SwjPb6DIMmQxL54L1gyq+YIfMyKNNsQ4zHj8UnoMDdoZwfoMqkJxX7A6Cj3czWzLdqcC+GuGM9tCa4RobSp5J2gTnk0D5CVA0Pp1RAqn7hC0o5J3kqvkTsGyY6gwBHlqmHtqBh2x77UI9QimVS75PljgMAjXDEljn0QNjvMlZIAju/pF0NH95VcFshSgnB3Ug+LhMkwYoVKOAUS+T2kZIG2DVcYInLXDTQkKUYHelH6kuGcEcbPE26aRPNklKOEQpNcCQHPp6k4jc5UYbRtkM7T4HcVsAvADWLtEGnq/M9t2G9e2Aw8xEM1CCQ4QDWq28cnKrmDHTAwcvgYNh1HJSqEKumdvVDlPDFOwjU8UyTpZZ4tTBohzYUSMaRAmdggBNgKLmzVsYGLjXbyujb6lm70CGSmnB1PsWJHuSYhQfupq/ioxBTRngkEaRuQEP3ICIPb/kAq/Axo6ZUEaQFFSStxwa/eDpiARDND4kqhIE+BG1Btp7hjKCjh6UKYt2xk7MkmMJ8PCMlGNy5XiSdvc6wYjYtIp5pSGBRTo9Z45R6Asw4bQ8HgrYhEJmTFsk6pWvyPfJOj4HiXNGFFQJw1hOCVaYgChNUOGcA6tD0DZCMSdDczMBDa5TFVWDqWn5i/yB+BByqARcGhx6ziqXVD4Ii2TqZmnLi8AS3L8dGqRoBIzwkM0LmXNpOAOKTNKbKciPBvg8XdZJ6RDoHEKO5meuGdDzmOiQMTrt0d63SVfAIDBJtgIwwaUvN7ps8l1r7v0I5lKPRUEV+rcqfaHlDvJH4FSdVBVCjk8IiXp87Jv/Ib90s/dk6gshTfPv8Zfv/wDUfBK2\";\n\n    var CourierBoldObliqueCompressed = \"eJyFWdtyGjkQ/RVqnnarcAo7vuE3jEnCxgEvGDtxKg9iRgxaa0ZEF9s4lX/fnrGdTVZ9lBcKTmvU96PW8C0bmqqStc9OsqsPwYlSdnaPDvb6naP+3v5+1s3emNpPRCVpwdAEq6TdOTW6mC61+hpksyBo/euCTrOg89MKUSm9/XUNwddSletGcbOcfo+90Cof1KWmdTu7e4S4N+pBFhfK5+vsxNsgu9lwLazIvbRz2Tw7evCyLmQxM5Won809PTUP2cnnnYOj7s7eQa97fNjvHvd2v3SzBS21WtXywjjllakbRb3eT4LLtcpva+lcdkJPZlfSunZZ1uu9ftXr9UjFxHiVP7my2drGh84f+Z+d3f5xv0uf/V77udt+vm4/jzqDwixlZ751XlauM65zYzfGCi+LV53OQOvOrNnHdWbSSXtHKOkZ0apC1eU8X8s2dO0mcy/qQtjiRUoLh2Lz7jmWB4cUto8vv/Zf97vZwOVNhGx2crhHP8/kj987uxShbO6Ld9fZyfF++/WKvu72Dp/i/EF6q3IKxedv2fVH2qAJ1YQscRtBEfje/R8sH3Itqhj/Ggx5utSxpA7VsglxWceywmgtbIxvpM2bio0EoiKRo/AAC9pcMfsJK2stV0gEHhOu2dHdMk/p4GI0p0YTMbzebtaS8Z5cUYbxxGnh1jH8KK2JUVMzWfL3zEq/tpJZu6JuZVB1x6x16oEB5R3nneRjWivO4Nxow+zhZKWASDcNHCv9GgRTg6WV1IiMm8ReriWJOPeM7YMYOo2hYQydxdAoht7E0NsYehdD4xj6K4bex9B5DH2IoUkMTWPoIob+jqFZDM1j6DKGFjF0FUPXMfQxhj7F0E0MLekQupWep40lyUCfPj8HOSVXKlc2DwyLhoa1HZ0cTIu0/MYbw3DOkukxhn+ZDmK4gGkohuViSMXQPzHE0CvTwky0mK5laG/DhDKGGG5g6IWJfYihuxi6jyGGSbcM6fP1BQphyR2m7fpUNXqlC3jUF+aeiTN/OjfHpW4GlriEmoGO5dktd3astLGKPQ/ALnmwdIznTADbtnGqHTnh1MJHswyKJJUBFNCI241/IwahXzHdsWIKnyY5lmYKUZbckfaEs6PY08DR5E5ayfQ+zUKitGLDkRpdASTjxX/hXQqXiHBaCkL0IwFALrVWG6eYRiVP/doENCk+Hfp8aVMAuNFH5MFzg0vL5CstmXYGfVWJ3HI1vLSSU1wYL3K+3wq6ZUnWf8t2YS4LCig3oYa6FDZUWgRGjSlpyGRYOhesH7LiC3bAjDzGFiua8fih8BwcsFOE8woqIrmgWQ2Cj3czWzLdqYFeg3Bmd2pNusVSyTNJG+N8SlB+AhRNSGdUgtR9whYU6k5x1fwJWDZIdYYADy1SD23BQ669dqEekaktF3yfLHAYBGqGBbAuoAdGWMkZEQR3/0g6mr+8qmBUIcrJQR0IPi6TpAEa1Shg1MvkbkO0G2DVUYInHXDTQUJUQLs2j7IuGcEMqHibdDIkmyQlHKCUWmBIDn29SUTucm0ss9kUaZ+BuM0BXgBrF0hB4CuzfbfhQjvgMDPRFJTgAOGAVqugvdpoZswMwMFL4CCNWl4JXagVc7vaYmqYAD0qVSyjZJklTh0syoEdNaJBlNAJCNAYbNS8eaOBgXv9trTmVtbsHcjKUjkw9b4FyR6nGCVQV/NXkRGoKQscMigyN+CBGxCx55dc4BXYyDMTyhCSgk7ylkejHzwdkWCAxodEVYIAP6LWQLqnKCPo6EGZckgzdmKaHEuAh2dSeyZXnidpf28SjIhNq5hXGgpYZNJz5giFvgATTsvjVMCWCpkxbZ6oV74i3yfr+BwkzltRyEpYxnKZYIUxiNIYFc45sJqCthaaORmamwlocJOqqBpMTYvf5A/ERyKHSsCl5NBzVrmk8kGYJ1M3TVteEEtw/3YYkKIhMCJANi9UzqXhDGxkk95MQH4MwGfpsk5KB2DPAeRofuaagn0eEx0yQqc90n2bdAUMAuNkKwATfPpyY8om37Xh3o9gLg1YRFuhf6vSF1ruIH8ETtXJrSjk+IRQqMdHofkf8ks3ey9tfSGUbf49/vL9XxrnGMA=\";\n\n    var CourierObliqueCompressed = \"eJyFWVtT2zgU/isZP+3OhE5Iy/UtDaHNFhI2IdDS4UGxFUeLbKW6AKHT/77Hhnbb1fnUFw98x9K5fzpyvmZDU1Wy9tlxdnUenChlZ3e//+awc7B32D/Kutmpqf1EVJJeGJpglbQ706VWX4JshEHrX4Wdn4SiUnr7q5jga6nKdaPvXBYqVISMvdAqH9Slpjd3dvuEuFP1KIsL5fN1duxtkN1suBZW5F7auWxWjx69rAtZzEwl6hc73741j9nx553+QXenv9frHr456h729m672YJetVrV8sI45ZWpG0W93k+Cy7XK72rpXHZMK7MraV37WtbrvX7V6/VIxcR4lT87s9naxovOH/mfnd2jw6MuPY967XO3ffbb5+v2edAZFGYpO/Ot87JynXGdG7sxVnhZvOp0Blp3Zs1urjOTTtp7QknbiN4qVF3O87VsQ9huMveiLoQtvkvpxaHYvH+J6d4+Be/j9//e9Pe72cDlTZxsdrzfP+pmJ/LH/zu7ewfdbO6L99e0crf98+rlzybY59JblVM8Pn/Nrj/S+iZeEzLEbQSF4Vv3f7B8zLWoYvxLMOToUseSOlTLJs5lHcsKo7WwMb6RNm/qNRKIikSOogMsaBPG7CesrLVcIRFYJlyzo7tjVungYjSnNhMxvN5u1pLxnlxRhvHEaeHWMfwkrYlRUzNZ8g/Mm35tJfPuipqWQdU9865Tjwwo7znvJB/TWnEG50YbZg8nKwVEuuniWOmXIJgaLK2kPmTcJBJzLVPEuWdsH8TQ2xgaxtBJDI1i6DSG3sXQ+xgax9BfMfQhhs5i6DyGJjE0jaGLGPo7hmYxNI+hyxhaxNBVDF3H0McY+hRDNzG0pJPoTnqeNpYkA336sg5ySq5UrmweGBYNDWk7OjiYFmn5jTeG4Zwl02MM/zIdxHAB01AMy8WQiqF/YoihV6aFmWgxXcvQ3oYJZQwx3MDQCxP7EEP3MfQQQwyTbhnS5+sLFMKSO0zb91PV6JUu4FFfmAcmzvzp3ByXuplX4hJqpjqWZ7fc2bHSxir2PAC75MHSMZ4zAWzbxql27oRTCx/NMiiSVAZQQCNuN/6NGIR+xXTHiil8GuRYmilEWXJH2jPOjmLPA0eTO2kl0/s0C4nSig1HanQJkIwX/4V3KVwiwmkpCNGPBAC51FptnGIalTz1axPQpPh86POlTQHgRh+RB88NLi2Tr7Rk2hn0VSVyy9Xw0kpOcWG8yPl+K+iyJVn/LduFOV3GaOBmuDvUpbCh0iIwakxJQybD0rlg/ZAVX7ADZuQxtljRjMcPhWfggJ0inFdQEckFzWoQfLyb2ZLpTg30GoQzu1Nr0lWWSp5J2hjnU4LyE6BoQjqjEqTuE7agUPeKq+ZPwLJBqjMEWLRILdqCRa69dqEekaktF3yfLHAYBGqGBbAuoAUjrOSECIK7fyQdzb9/r2BUIcrJQR0IPi6TpAEa1Shg1MvkbkO0G2DVUYInHXDTQUJUQLs2T7IuGcEMqHiXdDIkmyQlHKCUWmBIDn29SUTucm0ss9kUaZ+BuM0BXgBrF0hB4Cuz/bbhQjvgMDPRFJTgAOGAVqugvdpoZswMwMFL4CCNWl4JXagVc7vaYmqYAD0qVSyjZJklTh0syoEdNaJBlNAJCNAYbNR8eaOBgfv8trTmTtbsHcjKUjkw9b4DyR6nGCVQV/NXkRGoKQscMigyN2DBDYjYy0cu8Als5JkJZQhJQSd5y6PRD56OSDBA40OiKkGAn1BrIN1TlBF09KBMOaQZOzFNjiXAwxOpPZMrz5O0fzAJRsSmVcwnDQUsMuk5c4RCX4AJp+VxKmBLhcyYNk/UK1+RH5J1fAYS560oZCUsY7lMsMIYRGmMCucMWE1BWwvNnAzNzQQ0uElVVA2mpsVv8gfiI5FDJeBScuglq1xS+SDMk6mbpi0viCW4XzsMSNEQGBEgmxcq59JwAjaySW8mID8G4LN0WSelA7DnAHI0P3NNwT5PiQ4ZodMe6b5LugIGgXGyFYAJPn25MWWT79pw30cwlwYsoq3Qr1XpCy13kD8Bp+rkVhRyfEIo1OOj0PwOedvNPkhbXwhlm1+Pb7/9C/NFF2U=\";\n\n    var CourierCompressed = \"eJyFWdtSGzkQ/RXXPO1WmZSBEAJvjnESb8AmGENCKg+ypj3Wohk5ugAmlX9fzUCyW6s+ysuUfVqXvh61Zr4XI1PX1PjiuLg6C05U1Ns/Ojx42TsYHB4eFf3irWn8VNQUB4xMsIpsCwatU1DUSm8T+JpUtW7XP6NShToiEy+0ksOm0nHkIP53b9UDlefKy3Vx7G2gfjFaCyukJzundu74wVNTUnlhatE8a/XmjXkojr/s7O33d/YOBv3D3YP+68HB136xiEOtVg2dG6e8Mk1xvLM7GPxHcLlW8rYh54rjOLO4Iuu6YcVgsP9iMBjELabGK/lkymZrWxt6f8g/e7tHr4/68Xk06J673XOve+53z8PesDRL6s23zlPtepNGGrsxVngqX/R6Q617F+1qrndBjuxdRONu4ziqVE01l2vqHNgtMveiKYUtf0rjwJHYvH/26MGrvX7x6ee/l3uv+sXQydZPtjh+tXfUL07o1/+d3YPDfjH35fvrOHO3+3n1/LN19hl5q2T0x5fvxfWnOL/11zQq4jYiuuFH/38wPUgt6hT/Fkw0dKlTSRPqZevnqkllpdFa2BTfkJVtdiYCUUeRi94BGnQBY9YTlhpNKyQC04RrV3S3zCwdXIrKWFQihdfbzZoY66MpyjCWOC3cOoUfyZoUNQ0TJX/PjPRrS8zYVSxZBlV3zFinHhiQ7jjriPdpoziFpdGGWcNRrYBIt1WcbvotCCYHK0uxDhkzvwVyHVOksWd0H6bQmxQapdBJCo1T6G0KvUuh9yk0SaG/UuhDCp2m0FkKTVNolkLnKfQxhS5SaJ5Clym0SKGrFLpOoU8p9DmFblJoGU+iW/I8bSyjDNTp8zzIKVIpqawMDIuGlrRdPDiYEun4jVeG4ZwlU2MM/zIVxHABU1AMy6WQSqG/U4ihV6aEGW8xVcvQ3oZxZQox3MDQC+P7kEJ3KXSfQgyTbhnS5/MLJMKSO0y78bls9EqX8KgvzT3jZ/50bo9L3fYraQq1XR3Ls1vu7FhpYxV7HoBVZLDxGJeMA7uycarrOmHXwnuzCipKagMooBV3C/9GDFy/YqpjxSR+bORYmilFVXFH2hPOtmJPDUcbO7LE1H7shURlxYYjtdj6E2PFv+5dCpfxcF4KXPQrAEBOWquNU0yhRkv92gTUKT4d+nxqRwdwrY+QwXONS8fkK01MOYO6qoW0XA4vLXEbl8YLyddbGa9axNpv2SqU8SoWG26Gu0NTCRtqLQKzjalik8mwtBSsHVTzCTtkWh5jy1Xs8fim8BQcsDOE8xvUkeSCZncQvL/b3pKpTg32NQhnVo+lGa+yMeWZoE1wPAmknwBJE/IRJRC6z1iDUt0pLps/A82GucoQYNIiN2kLJrnu2oVqhHJLLvg6WWA3CFQMC6BdQBPGeJOTSBDc/SNrqPz5voLZClGOBHkgeL9MswpolKOAUS+zq43QaoBVxxmedMBMBwlRgd21eaSmYgQXYIt3WSNDtkhywiEKqQWKSGjrTcZzl2tjmcVmaPcL4Lc5wEug7QJtEPjM7N5tuNA1OExPNAMpOEQ4oNU6aK82mmkzAzDwEhgYWy2vhC7VirldbTE1TME+Kpcs42yaZU4dLJJAjwbRIAroFDhoAhZq37zFhoF7/ba05pYa9g5kqVIOdL3vQLAnOUYJsar5q8gY5JQFBhnkmRsw4QZ47PklF3gFNvZMhzKCpKCzvOVR6wdPRyQYovYhk5XAwY+oNNDeMxQRdPSgSDm0MzZilm1LgIUnpD0TK8+TtL83GUbEqtXMKw0FNDL5PnOMXF+CDqfj8ZjANiYyo9o8k698Rn7I5vEpCJy3oqRaWEZzyrDCBHhpghLnFGgdnbYWmjkZ2psJKHCTy6gGdE2L38QP+IeQQRXg0mjQc1S5oPJOmGdDN8trXkaW4L52GBCiEVAiQDYvleTCcAIWsllrpiA+BuAX+bTOSodgzSHkaL7nmoF1HjMVMkanPdr7NmsKaAQm2VIAKvj85cZUbbwbw70fwVwasCguhb5W5S+03EH+CIxqsktFl+MTQqEaH4f2O+TXfvGBbHMulG2/Hn/98Q/b2xEO\";\n\n    var HelveticaBoldCompressed = \"\";\n\n    var HelveticaBoldObliqueCompressed = \"\";\n\n    var HelveticaObliqueCompressed = \"\";\n\n    var HelveticaCompressed = \"\";\n\n    var TimesBoldCompressed = \"\";\n\n    var TimesBoldItalicCompressed = \"\";\n\n    var TimesItalicCompressed = \"\";\n\n    var TimesRomanCompressed = \"\";\n\n    var SymbolCompressed = \"eJx9WFlv2zgQ/iuGnnYBt5DkS85bmk13g27SoEkPbNEHWqIlIhSpklSuov99R7JIkSLtFyGZjxzN8c0h/4oueF1jpqKz6Mt1K1GJZ4s4S+PZYrvdbqJ59J4zdYNqDAfuXuodp52spdSToZrQl6n0KyZl1Sm/xgVpa5BcKURJfs5KCgdj+F++J8+4uCUqr6IzJVo8jy4qJFCusLjD3d27BucE0cGYd+/4c3T2/U2SxfM36XYxT+JtDI8k/jGPPrMCC0oYvuWSKMJZdPYmiWMLuK9I/sCwlNHZCuRfsJD9sSiOk7dxnMFbbrgieefGBW9eROfA7I/8z1myzVbz7rnpn9vuCW/unpvZecF3eHb3IhWu5eyK5Vw0XCCFi7ezc0pnvRo5E1hi8QhCeM0lHCoIK+/yCvdR67zrfd2THPA7VfzzNTrbpv2fX+BPeH8fm2usBMnBg++/oq/forO08+QGNMgGgeG/5wfxYrE4iPFzTlFt5JtkkLeMPIL/EFoNreJBE2vrXReako3YcqvVEXCTKWJdzPS7Gizyjk/mZZvsAKC66d7FCgMtF4NC2eaVqpDyLW+QwIzi/TGoD6tvPQL7BJEPNVKVb39DW2mkJnY5FALyD9eEhU6DL4SPrqTaS0mRrHyDXrHgvpQz7AvVU+CkqgQOnN3zVgSkkFVfKslzQIgfMfPFOBxWRiyDjcs5p5wFIoFr4kImprQrP59WP1ubiVpcCgxlNLq5XC4PwM8Wy77EvSs5ZyU0EpuFaXqAzmlTjVlerzcH8TuskH/4oiLj0WQQ/oWpdXadJAfxZSOJ7exmPfD01lYSD8K/kU0288JLS7Mh+hW337dINCPA5MRX8QE1jXU8Wx/E/6J6V4zyLBtCdd36Km4Cso+QTOG4N6T5dvRusxxsu6/scK5Wgw2fKovZ20HxHSnrQDjv0WjEejvw7/MkxmMD6ZQkvnEfa1xayperg/ibZfN2kN1K4lvxHw4lZAfD6QErpy1lOt2QF4H3XATa8HDP7VnrVWY6SoNZQfKWokBRt90Ak7mt2GACwTVE8bNPE+Tw3VTIzkmQqRuLqsvtUGaFw3cTcjzJxSod3tjYSnQgS4fvpgyc8KaDZuLwXR8FtYlv8YPD9rHBuGxfbQYG1q1vL2v9+3zC9nF0EF+BqoLBFBbbjRfSYbsJprLYboxtpx1Fj23esXoMhqlx7rB9uR2OPxP/aCMDmX61/Vhm8cha7HA91bzbWUR1z0/m8tLUKSyJ1qWNHqeXrTUf16lb76Or6XIzTmWFA4mHyeLOkUS3+H23UpJQPAnbE0bUS2CSUi6IdWM13Mhpu/OlBUE1t/YbA1QYCeWLYVsrRh+SeDm0RCQEf9pxa3Xpds4RcpJhqNVDbXPkzqTpOJcK/mT1VO17gUtn57C3J3cpMlUucW77Px3hRwZ83VJFGvriJ6YRHJboLmnWPUNXWAC7FbQg+/0IrjUL4RMFBxhYkEdSBLxiXB0xD8TkEZorywPXoP0I/jxhXGzWKEoJUFgeiTvs3srq2eO9Hq2Aeq92S9eDIgeYwIeawKoVY+KyVOumuBmpY0r+CgrgQVn7ohl9n6aIoc4TJjB0lEDWvmaGa05ETrGfPRd3lm1jI64b9SKtBJlbhAFTgEhuqWoUvlhCFdwRBW613cNWqnGYyDAdj+OQfdnugpBWHUa14jAKbbN2tlDrfR6mXUT9p7F3peyGvHNBb0UCl933GHgmyN6Hc/0R6+KZxiG7Ba6ReJjg6RiAos0DpTRsHWNz1s284Mr58DI+UF52N8B7vyIGzP4+nGJcWLXiNMtiR0/0S0BPtExAj3ZNwE42zh11e6duTZS/YlZaK6DebfrkOsb4aURMnsqiA+viHpPowDrwsoX1y6moRTZ20cMXtmpOgFYf8sGd8kFrRw4ptuCQagu2lJvwmpXEUu2DNSlOoEf12vY4aXOZkG6WY8OC4hzrwHRcjVhWepjd4KdYKK7jrx5H89WjRxPWoycydlS3jZ/I2VS/G9yp9gB6PG1T1aY4YAp3LfPHPPqABbtFRHS/jf34/T82FAfb\";\n\n    var ZapfDingbatsCompressed = \"eJxtmNtu20YQhl+F4FULyMGeD7pz3AY1ChtG7NpFA18w1NomIlECSRcxgrx7SVk7+wOdG8H5OJydf2Z2d5gf9cV+t0v9VK/r+6vXsXlOlbHe28paq229qj/t++m62aXZ4J/m8PRb1z9/baZxefK63Z6eXN5dVMvTCh83u277xr/6kLrnl2XNq7TpXnczuZyabdee98/b2VzM/x4/dd/T5qab2pd6PQ2vaVVfvDRD005puE3Lu7eH1HbN9hTjx4/77/X6y5lcnUmjVzHIVVDicVX/1W/SsO36dLMfu6nb9/X6TAoBD+5euvZbn8axXtuZ36dhPJrVQqgPQoh5hev91LWLkIv94W1Ygq9+aX+tZAx2tfz64284/sblN/rqfLP/mqrbt3FKu7G67Nv9cNgPzZQ2H6rz7bb6vLgZq89pTMO/M/xfEqturJpqSM/d7GJIm2oamk3aNcO3av80O5xh3yyKmm1193ZIT02bqovTKjP+MAf++7zsZvZ3276kYyWWXB0z99S18/PbafPHQ71W4fjn/fxnFO+ZvkrT0LVzTr78qB/+nk38bHM9exgP8zr1z9U7jt6840YW5uSJKcZOCaBBnKgm5mU8MVNYyMwWFvO7Ukagkmgg6sDWQ5yFFqjzUrLEaQ3BEmiwNsMSaZS0vgWfOkPHWQowNeTUc0kumnxZvsgPxlGai6VTGUqAVCTQ6QkWnc77DKEiLktSUBJKqHIQZ86d8gCpHYoiEzMsb1ubYy8vW50DChB5ZhGqrijD0EqUIeiaEHIfCg5Kpuu0ApiToaGPSY0uaQsyr65L2oKi1yFt1PLaQ3lzfXTgXodGoJYzglndSLDMPg1sTPJpQJHJigw0QrGERqD9YhyTOgONQDUyuF1zaxuokc/BW2ztXCMrGZ9WMW1oQZHIXWNBkSCfRZEL5BMUiZw6CzVSFCfUSGZFNjIldoKDkonTKQiJIGzWmFd3BizJJ9SINoLDriOfUCOZS+zg+KGD1qGiLNMLxtJD1/ns00ON6EzyUCM6vbxhoBKaqbG3DFQCNiL1iHccBPV0DHhQH/JW8EW90dkyFKGywCJU0WkVSvSGeiSUODWFFD0HYdPQVoiRgfPMA+/nnRgiAyNYSjpWNQcNSMrtFCUH4ZIRpSCWocFCSuhCEY6hoUClc0WC52BJlCYYLQdhN+hygRRRlo5BKRRLS6oihSqh+ZzzRGG1Mo4Iz1LoP0qsxDGFzk0JE42ji0jCPejomJKCuwil4m5CiRMEUMVSzVLDUstSx1Juc0oVWMpqY295qVltmtWmWW2a1aZZbZrVplltmtWmWW2G1WZYbYbVZlhthtVmWG2G1WZYbYbVZlhtltVmWW2W1WZZbZbVZlltltVmWW2W1QYjQCh7E2aAQHeGhCFgPoNoy8KNb2wxBhmGKBxoUZXlLGsLI6AsftEDHV0wIURVbANLcTKlGGBIKPOAxCmhePCKUwFzAmpDFRQvjA9R06Hq8TONvshgKDCuRAZTXigUxjxNFfKRo3CLhnIJBMFRvMZpqpNBMlQJzGT5WFQMVQI/AikPMIhEU1aDjqJvQwmjSHB05cC9jbYwc5UtAHNLhDw41ha+lEqF4JaH3gmB61SYcqInxTDmQK8v08vjqv4zDf1N0w3Lf4A8/vwPpfK11w==\";\n\n    // prettier-ignore\n    var compressedJsonForFontName = {\n        'Courier': CourierCompressed,\n        'Courier-Bold': CourierBoldCompressed,\n        'Courier-Oblique': CourierObliqueCompressed,\n        'Courier-BoldOblique': CourierBoldObliqueCompressed,\n        'Helvetica': HelveticaCompressed,\n        'Helvetica-Bold': HelveticaBoldCompressed,\n        'Helvetica-Oblique': HelveticaObliqueCompressed,\n        'Helvetica-BoldOblique': HelveticaBoldObliqueCompressed,\n        'Times-Roman': TimesRomanCompressed,\n        'Times-Bold': TimesBoldCompressed,\n        'Times-Italic': TimesItalicCompressed,\n        'Times-BoldItalic': TimesBoldItalicCompressed,\n        'Symbol': SymbolCompressed,\n        'ZapfDingbats': ZapfDingbatsCompressed,\n    };\n    var FontNames;\n    (function (FontNames) {\n        FontNames[\"Courier\"] = \"Courier\";\n        FontNames[\"CourierBold\"] = \"Courier-Bold\";\n        FontNames[\"CourierOblique\"] = \"Courier-Oblique\";\n        FontNames[\"CourierBoldOblique\"] = \"Courier-BoldOblique\";\n        FontNames[\"Helvetica\"] = \"Helvetica\";\n        FontNames[\"HelveticaBold\"] = \"Helvetica-Bold\";\n        FontNames[\"HelveticaOblique\"] = \"Helvetica-Oblique\";\n        FontNames[\"HelveticaBoldOblique\"] = \"Helvetica-BoldOblique\";\n        FontNames[\"TimesRoman\"] = \"Times-Roman\";\n        FontNames[\"TimesRomanBold\"] = \"Times-Bold\";\n        FontNames[\"TimesRomanItalic\"] = \"Times-Italic\";\n        FontNames[\"TimesRomanBoldItalic\"] = \"Times-BoldItalic\";\n        FontNames[\"Symbol\"] = \"Symbol\";\n        FontNames[\"ZapfDingbats\"] = \"ZapfDingbats\";\n    })(FontNames || (FontNames = {}));\n    var fontCache = {};\n    var Font = /** @class */ (function () {\n        function Font() {\n            var _this = this;\n            this.getWidthOfGlyph = function (glyphName) {\n                return _this.CharWidths[glyphName];\n            };\n            this.getXAxisKerningForPair = function (leftGlyphName, rightGlyphName) {\n                return (_this.KernPairXAmounts[leftGlyphName] || {})[rightGlyphName];\n            };\n        }\n        Font.load = function (fontName) {\n            var cachedFont = fontCache[fontName];\n            if (cachedFont)\n                return cachedFont;\n            var json = decompressJson(compressedJsonForFontName[fontName]);\n            var font = Object.assign(new Font(), JSON.parse(json));\n            font.CharWidths = font.CharMetrics.reduce(function (acc, metric) {\n                acc[metric.N] = metric.WX;\n                return acc;\n            }, {});\n            font.KernPairXAmounts = font.KernPairs.reduce(function (acc, _a) {\n                var name1 = _a[0], name2 = _a[1], width = _a[2];\n                if (!acc[name1])\n                    acc[name1] = {};\n                acc[name1][name2] = width;\n                return acc;\n            }, {});\n            fontCache[fontName] = font;\n            return font;\n        };\n        return Font;\n    }());\n\n    var AllEncodingsCompressed = \"eJztWsuy48iN/Ret74KZfHtX47meqfGjPHaXx4/wgpJ4JbooUU1JVXXb0f9u4JwESF13R7TD29koIpFi8gCJBHDA/Pvm+nraTuPmZ3/f5HHzs7/k8WlzvXS7fvPXp02eqyR/2vRfd2N3gqhUUfm0Od9P236+DoczxLWK66fNpZ93/fkGWaOy5mnTnUR67c57lRaZSItM/tnN/XnsX/DfIqg0JOk8HI4UK4BCAFzG+xWCQgXF02Y3nU4dJJVKKrx5mPgKBVMImOvYXY+QKJRCoHzXzxMErQrap810hqaloioF1e0L5kvFUwqe23Hu+Q+1TinWeZnuMwSKrRRsL8Nn/kOxlYLtOnzFWE1Viqmu/eceVioVaylYe1OwVKilQD0PCYgiLRtVcJz4kEItW13mNLi0UsCVAB77KyxTKeJKEPff3rsREkVcCeLD3He3HqArBV0J6G/v/fU2cK1WH23l0e3c7T71N9uUVv/c5i73bWlVs1Y0u5/3srO7aQb2EPUB+eUTva0TYgG5mGbbzZSUkJTpn75ygF4PThhq1SMGMds4HYZdN54n/rdWc8rv02bfH9I2hbqGsKbPnIYzHSc0qmTIxI6nuwpiAIQmU8F4Gy7jK8RwntAI1v3wedj39FmFECp508s4zUOyGmwpKrwbL8eOIlVU//Yf/S1J9C212Pa/uuSwbVDYlWzxf/aj/UtfWgm258t1GG1X1BVawfdnX0xdoRbjPCdBVGs1svo3R/tPVD1r2YL3k0kUfC04f9ldLkmk0NVwv+pO232SKXa126/vHAO5wPxNGivsRsZ/HDhWzLVg/iBuOSfMUTGrTX+b/qSIG0H8u+NEl1J4jcD7/XBI9kDcUYN/0/FNCDuNAP64skYOeLrykUsjElWC9+cmAEAB9NtrEijCplaE/YHvKuC5Iup8zxBAWtFrayakC2QC8uCbhggSskx9zXYNQSRkeuZWQBFKQowabNIfS/qeqOgSOFTINcC4DKcnE70H2zqElJAJ3k++dwgrIRPA47J5iCwr724RWELINFBTAAWiCL7SOogrIQj6abWBOH8hCPoL/4a4EoJgn9MWIq40lcY52cJAGbCHMgkpA3g9t7e0sRWgB1HnvjJYRez6yrSTlYJvRZmdCQhe80Pa24roNYL75uLo10WyKYHVeFLjYnImilM0qPDOJOKWNGlFCJsIrw/qsNv7OPY3SnNYSQ9DP46DLHylvGCcEFU08Nz6JIVx9Chd+93ENNhEWroSuC8SAi0WNznNpqH9+c5k1RQ0nIbi9/LnTzdmoKZAaAwaib/0g0Ti29wxG8gUgLey/O8eHmmqt4eiKTNYo416LPrLkcIWa2u06eZ5+mLBXCaoTp4m7pckBm41P8Qe0mUG6DUCYWY/fTmnCQbwkCa2043vrhA2gqakncwM3aGfe9GAj1Vw9qiuzPW2o4Or4PcxhmUu4atwAGKMy8wCscJhiDFfJh1lhY2K6mo250DrTJXOC82EUgVIkTMmOd0moqC5Dd24H15e0hRKJS0Cvg7Xm9RKgz9ErdWrTpfb6zV5Wx2ytwlDZLplUQ/8Ye72Qyq5RI5kqY4t6fe0iHOItdCYbo8zKOi0vLjvjrdjZ2IYRAPUZZ72910SI7vEiL9LaHSvrZFkipKOf02y8gc9vEbmKHQjRP95uH6ShZI9c9pao41otTPLICMETXSC5jLNupbP8bxo2Dy/DOfh9prk8BKNk935MPIo1jiKUSNQqiVSVSozBWYan5nmNMGz1+r6AleO8KJJwXdk2H8XwgVVP31AticBhdvqIZPwNPcvqWhqah74iIB6GsYuvbdGeYFS93yY775hPNh6giUlzNNXr/eaJmNYKrnLKznOt4ZsEQ6f5ZCfWVvJFK2Xs5BcP8ND23r5uJqDyaPmM90Oscl9a87aIC3HLCxz+uOzNFgOhA+P4XRq8hPTjP3Xhzn4oiYIm1svybSpOX03zDuJX4kqyAx3rrKZdZ3XNMggGh9lsUt/Fm+7m+1bGCxqOttPN/fOFiExKh+xnb1d0gz8qiiXmS0r5YxLaaULN/TaOsu4WEgTS3Fd1TCvlsvj9F1/PvQpPzHAZqiN9yZEntcyaDfet0mGOKLl5LGX6EMhU5ZGkf3QnVIWqvJA5FoG7KbLK1BcBcyLTfNYZGr7g8ar+WEWm63VgmSefX/q5k+r6Rplrdo/Heb+q00gKzcWUiVy3pY5RkGL7kept7/zSRS8Uc+Kw+nOV5ukqeu1KqtZ2Ds2a6yrWZghX/NS7q3OwQZ5WM0tgGCBPK7muPM6B2fP8wditayKMKG5YzW7rIvzkJcPs8vKOBGaRJxo+boMocrFfe407G0SJlJS7pO+KOrwqKkAcw4lp28Xi28vU7AM2Lfz9gUITKM8fJlcnoRtlJIvkwsSRtD2kXkuC8M2ytbX08vSME4ZHqd9cTQgojL5hXr60uhDxDJfTy7WQ3kXy2I9q+t+L7V+d3nZD+fDtrtdf7iZ8gPUNhVNSLOdFKmrqgg5UGR5ktUWkERW4ETnYSnQpK5PsqU2k3I5yZbCTGhJki0lmbJ2ypxOd8rYKXM23Slnp6yxclZkVZK1li1EVlMWmY0yyJokC5bIRdYm6sDCW/9X54knZEYnurpKJCEzNtHVdYqTmdGJrm6SiJRMsdWJmTS1MYWuSZwAHg3D5dSJO6tnpqPiNXIHapSQHkL9WNCyDwEZymTtQzyGcfx/rQVukWUP4RgGS29oG5RieEMSVKm67GISoHZUs0g6TKImlZMdbde2cDMFUCZBSBWevKlNIlRrBNQkEVpt0CXUSYTWGvzG1q5TldeFIklgFfiMvQ6tNXgMtk5IM+qSAjbJSpOh4wdUtYnQYgOqxkRosgFVayK02SJsYCJ02tRw9HkVodUG00UTodcG4+UmQrdN0dPhVYR2m8KPBhX1t/bkumgaofzWplwXDT2Oo9K2Lhp6dogUvT+HBpGC98fQxlDs/lSVCr/OVGZ7CGY3lXEIKyD3fylyrQS63P4VjTl0uRkGJxB+l5th2CBS5LkZhg0iRZ6bYdgPUqC5aYMEh8CSmzrsCinU3PRBKkNYyQ0qTgSiSmFQcSAQVAqDimSFmFIYVPaKFGphUNktUqiFQUVaUvLVFbaHSEZK47vC0LNfpOgLQ8+OkaIvDD2SjZbOXWHokWBQgJeGHkmlwaEz9EglKHFKQ48og8qmNPQgJEp0u9LQg4mAjJeGnm0rRV8aeratFH1p6EE8tBnQlYYebSutwLrS0KNrhRZYZegRbpV3dpWhR8tKSU9XGXr2rJTsdJXBTz0ruLjhT00rVaAyBVLTSjWoTIPUs1IVKlOBbSulAV1lOrBzpZS2q0wJNq8yhH7TovIOb1cb5tSXUny14Ut9KUYQUyS1phRgbaDZmEIiFrKThCnpIMMYGrZh0JBo7M01e+H65sZeUpPp6ZsbX4+dcH1xa1YgxYsIAWYF9rXBI1p/L9tiiL6ZmYGtrYpZybaz8caUCA1iA4iIPcEN0ZAQIuq70g2ZPCOQ7R+yE5riIjTojfMRESbsge1zHMhgsSlk5PR4u0WnQDraMOdEE7JTj7dbhAqpw4K3W4wKGZv3eHtempBkA+nHQldgrwXHM1jwCgj0pB7BwlcIbI7BnhbAAmsvHNJgISyw+MIxDRbEAqsvHNRgYSyw/GqZSE0j1l84rMFCWWABhuMaLJgFVmA4sMHCWUi8CRpZQAvkSzizwUJaIE/CoQ0W1ALpEU5tsLDGDzqg6yI0jaKzfxGaRuRBOLjBglsgAcpYHZhG5D04usECXCDdQd0WLMQFshwc6GBBLqQOETSyMBdIa3DMgwW6QD6Dcx4s1AXyDpSRYmoTsrpmzWKQyDJw0GWjTci2GCBZIAtkFDj+wSJZIJPA+Q8WygIJRCQkw8meFCJAsGAWCu8BiNAsjzTAXkKwEBfYg2IQqM3y7EFFauT/ZAcUGlk0DAU7nyzETPeSHBIa1aZmSe4IjWpTsyRphEa1qVmSTFMjU7Mki4ZGreEsSZ+hUWO6s7+bc4/8cdJlaNSYQdjTRbEbM3+c5BgaWTgOSA7stkSLiqFiCwbgLUiHinQX4C1Kh4pEl+BN94oEl+DNdBWJLcH74yS0AG8RPeCjRmRZ3JiR0ZWKrItbW7MmZWVlbG+vSVWxHY2tyW+lJTUy0yEVgdTKmmYlNplKagSDCMFlTIaH8GmVMWkpIj6sMsQv+Ae3UmUIX3AP6q0yRC94x/IOBC84B4+VyhC7yHTIELQRhGgM32hchmAM14hMRCpEMIZrNC6DJvAMWkxl0ASOQYOpDJqACrX+EmgCX9EQ8f3T5stwlggXf/otCfss8O19uvX7LfqmP3Z1AiRPP2JPY2pA/vTbFIhHqhFedB2s0/2v3bIAG1z14yH8CVcvwJFFoePr5cgbDv9/G+Pfvo2BUIP6ix0r8EO9ZYARuKFeMMAIvFA/gWMESqifiTACG9QrBTpCBFGK9wuMQKz0UgJGoH+C7L8xAvPTL40Y4au7gPkfjEAB9SYBRmB/eokAIxA/vT6AETifXh7ACHRPrwroqAFX0i/5GIEmCZb/xQj8Tu8LYARqp5cFMAKr03sCGIHQ6SUBjMDlBMsfMLIP//+HERicXlzACORNsPxJR2iW4I4FRj92EQa8TTuGInY3/vHrMSBwuoPX3TDot4c7osKPXJtBm0XLvsPc0XfRZkHNhxE4nLZsMQJ902/jDOQIkriXkAL7JhEyNh1ZemtZ98IxCZvebeCYZE3AHjkmUdMPGRyTpAm6v3FMgqY3EjgmOdPPZhyTmOlFBIwZxHEPgWNeJ9BbBxyz+af9c45J2PRMcEyyph8EOSZP03PMMTmaXjLgmN0+vWLAMfBpFfeZY7838AVjNilxLYJj4NOy7ZVjUju9zcHxv3/FiVcKULCpf9yGcb9qEOPL/6pp7GyO2cU+S7N2AaOzDMHKBXxO4/goyYBiZ3S7+yxxf0fNKud0r31a0gnddp4+9WfTpHJOt/r4yfIlfVDq5z7dgWABg8amf4SBnLxZQ9A0718keFqMZSGDNurhPoxjf5r84LGeQY/77d0vb3QvyYc1DTrd9nWo56movd196uyqy792faz2prfkJHyAHPiBONTe+kZ2ephrlhb4Ll0HSRfRNOLxqk5onB1LWu4kCPAGRmicIDOZ6j67Ro0T5V2/F6t1lDpTlkz6iMTpspj/JI53H83+jZNmt/+ybY2TZ1lRctmcUldonEDLxLEbGV5aZ9AwRnqAJmydSFu6c2dunU6/8yDIL5Og0+8W67VOp98xsL6kr1H8FglO/W45Uq1z6ncPXto6rX432zlpnVW/e6bAGfXPV0aOmXPqZwcbM+fUzw42Zs6pnx/BxsyJ9fMaV8ycW79fre3c+v1qbefW79+u7QT7/ePazrGf+UE7Zk6wf+Mmi8EJ9ocFQnCC/WGBEJxgf3gDgddNNIp/WC3Mb12i24cHXIEfkcs3FzGDM/UPnnJjcKb+cQXOmfrHFThn6h/fgItO1z8+4IjO2P+0LBOdsX9znHgBKUYn7Id+Pkklvh3TCgtpX9DFhbSvll1I+1t0C3NfTBcX5v4IeSHv5sYxX7g7H86dt+/Wbpw7c+8XsLkz934Bmztz79+AzZ2+9w+4cmfww2ptZ/DDam1n8MPbtZ3GDw9rs9ui3KZPblw4tz8vJiuc208LhMK5/bRAKJzbT28gFE7wp9XCTvCnR1zO8ZeLw7Fwjj8tTlw4x78v0Ern+PcFWukc//4GWulE//6AonSu/7paxrn+zZ2YnRclRK/rBXJsCAjxh2cKEAWVJ02ku/wOoFv2+12XkmnODwHgW4uQGVbZ0uM7mAJ1b/68/JlpUMnWdy5MF6/Vd5eL19YYSPd6FqPwBkNQo/h2NQxdQQ3bn/dpCxrGrqCW7U8rKZl/mfi0Xytk3Am66ZhYbg4y+KAVslDwbXdNL2d5qU5hnYBlTZaa6hs2t1qWdaeeTptcLco+hl5R7w4H5uOGcQbtEkpT18GusOI2xT9dYcVJf7zCSjmbD+Iud2s1NPRb9E+0UICmizb8ZK/+5JOLOulSqwaw5VJr2vB8dSFn89fvv/8H0oq1dA==\";\n\n    /* tslint:disable max-classes-per-file */\n    var decompressedEncodings = decompressJson(AllEncodingsCompressed);\n    var allUnicodeMappings = JSON.parse(decompressedEncodings);\n    var Encoding = /** @class */ (function () {\n        function Encoding(name, unicodeMappings) {\n            var _this = this;\n            this.canEncodeUnicodeCodePoint = function (codePoint) {\n                return codePoint in _this.unicodeMappings;\n            };\n            this.encodeUnicodeCodePoint = function (codePoint) {\n                var mapped = _this.unicodeMappings[codePoint];\n                if (!mapped) {\n                    var str = String.fromCharCode(codePoint);\n                    var hexCode = \"0x\" + padStart(codePoint.toString(16), 4, '0');\n                    var msg = _this.name + \" cannot encode \\\"\" + str + \"\\\" (\" + hexCode + \")\";\n                    throw new Error(msg);\n                }\n                return { code: mapped[0], name: mapped[1] };\n            };\n            this.name = name;\n            this.supportedCodePoints = Object.keys(unicodeMappings)\n                .map(Number)\n                .sort(function (a, b) { return a - b; });\n            this.unicodeMappings = unicodeMappings;\n        }\n        return Encoding;\n    }());\n    var Encodings = {\n        Symbol: new Encoding('Symbol', allUnicodeMappings.symbol),\n        ZapfDingbats: new Encoding('ZapfDingbats', allUnicodeMappings.zapfdingbats),\n        WinAnsi: new Encoding('WinAnsi', allUnicodeMappings.win1252),\n    };\n\n    var values = function (obj) { return Object.keys(obj).map(function (k) { return obj[k]; }); };\n    var StandardFontValues = values(FontNames);\n    var isStandardFont = function (input) {\n        return StandardFontValues.includes(input);\n    };\n    var rectanglesAreEqual = function (a, b) { return a.x === b.x && a.y === b.y && a.width === b.width && a.height === b.height; };\n\n    /* tslint:disable:ban-types */\n    var backtick = function (val) { return \"`\" + val + \"`\"; };\n    var singleQuote = function (val) { return \"'\" + val + \"'\"; };\n    // prettier-ignore\n    var formatValue = function (value) {\n        var type = typeof value;\n        if (type === 'string')\n            return singleQuote(value);\n        else if (type === 'undefined')\n            return backtick(value);\n        else\n            return value;\n    };\n    var createValueErrorMsg = function (value, valueName, values) {\n        var allowedValues = new Array(values.length);\n        for (var idx = 0, len = values.length; idx < len; idx++) {\n            var v = values[idx];\n            allowedValues[idx] = formatValue(v);\n        }\n        var joinedValues = allowedValues.join(' or ');\n        // prettier-ignore\n        return backtick(valueName) + \" must be one of \" + joinedValues + \", but was actually \" + formatValue(value);\n    };\n    var assertIsOneOf = function (value, valueName, allowedValues) {\n        if (!Array.isArray(allowedValues)) {\n            allowedValues = values(allowedValues);\n        }\n        for (var idx = 0, len = allowedValues.length; idx < len; idx++) {\n            if (value === allowedValues[idx])\n                return;\n        }\n        throw new TypeError(createValueErrorMsg(value, valueName, allowedValues));\n    };\n    var assertIsOneOfOrUndefined = function (value, valueName, allowedValues) {\n        if (!Array.isArray(allowedValues)) {\n            allowedValues = values(allowedValues);\n        }\n        assertIsOneOf(value, valueName, allowedValues.concat(undefined));\n    };\n    var assertIsSubset = function (values$1, valueName, allowedValues) {\n        if (!Array.isArray(allowedValues)) {\n            allowedValues = values(allowedValues);\n        }\n        for (var idx = 0, len = values$1.length; idx < len; idx++) {\n            assertIsOneOf(values$1[idx], valueName, allowedValues);\n        }\n    };\n    var getType = function (val) {\n        if (val === null)\n            return 'null';\n        if (val === undefined)\n            return 'undefined';\n        if (typeof val === 'string')\n            return 'string';\n        if (isNaN(val))\n            return 'NaN';\n        if (typeof val === 'number')\n            return 'number';\n        if (typeof val === 'boolean')\n            return 'boolean';\n        if (typeof val === 'symbol')\n            return 'symbol';\n        if (typeof val === 'bigint')\n            return 'bigint';\n        if (val.constructor && val.constructor.name)\n            return val.constructor.name;\n        if (val.name)\n            return val.name;\n        if (val.constructor)\n            return String(val.constructor);\n        return String(val);\n    };\n    var isType = function (value, type) {\n        if (type === 'null')\n            return value === null;\n        if (type === 'undefined')\n            return value === undefined;\n        if (type === 'string')\n            return typeof value === 'string';\n        if (type === 'number')\n            return typeof value === 'number' && !isNaN(value);\n        if (type === 'boolean')\n            return typeof value === 'boolean';\n        if (type === 'symbol')\n            return typeof value === 'symbol';\n        if (type === 'bigint')\n            return typeof value === 'bigint';\n        if (type === Date)\n            return value instanceof Date;\n        if (type === Array)\n            return value instanceof Array;\n        if (type === Uint8Array)\n            return value instanceof Uint8Array;\n        if (type === ArrayBuffer)\n            return value instanceof ArrayBuffer;\n        if (type === Function)\n            return value instanceof Function;\n        return value instanceof type[0];\n    };\n    var createTypeErrorMsg = function (value, valueName, types) {\n        var allowedTypes = new Array(types.length);\n        for (var idx = 0, len = types.length; idx < len; idx++) {\n            var type = types[idx];\n            if (type === 'null')\n                allowedTypes[idx] = backtick('null');\n            if (type === 'undefined')\n                allowedTypes[idx] = backtick('undefined');\n            if (type === 'string')\n                allowedTypes[idx] = backtick('string');\n            else if (type === 'number')\n                allowedTypes[idx] = backtick('number');\n            else if (type === 'boolean')\n                allowedTypes[idx] = backtick('boolean');\n            else if (type === 'symbol')\n                allowedTypes[idx] = backtick('symbol');\n            else if (type === 'bigint')\n                allowedTypes[idx] = backtick('bigint');\n            else if (type === Array)\n                allowedTypes[idx] = backtick('Array');\n            else if (type === Uint8Array)\n                allowedTypes[idx] = backtick('Uint8Array');\n            else if (type === ArrayBuffer)\n                allowedTypes[idx] = backtick('ArrayBuffer');\n            else\n                allowedTypes[idx] = backtick(type[1]);\n        }\n        var joinedTypes = allowedTypes.join(' or ');\n        // prettier-ignore\n        return backtick(valueName) + \" must be of type \" + joinedTypes + \", but was actually of type \" + backtick(getType(value));\n    };\n    var assertIs = function (value, valueName, types) {\n        for (var idx = 0, len = types.length; idx < len; idx++) {\n            if (isType(value, types[idx]))\n                return;\n        }\n        throw new TypeError(createTypeErrorMsg(value, valueName, types));\n    };\n    var assertOrUndefined = function (value, valueName, types) {\n        assertIs(value, valueName, types.concat('undefined'));\n    };\n    var assertEachIs = function (values, valueName, types) {\n        for (var idx = 0, len = values.length; idx < len; idx++) {\n            assertIs(values[idx], valueName, types);\n        }\n    };\n    var assertRange = function (value, valueName, min, max) {\n        assertIs(value, valueName, ['number']);\n        assertIs(min, 'min', ['number']);\n        assertIs(max, 'max', ['number']);\n        max = Math.max(min, max);\n        if (value < min || value > max) {\n            // prettier-ignore\n            throw new Error(backtick(valueName) + \" must be at least \" + min + \" and at most \" + max + \", but was actually \" + value);\n        }\n    };\n    var assertRangeOrUndefined = function (value, valueName, min, max) {\n        assertIs(value, valueName, ['number', 'undefined']);\n        if (typeof value === 'number')\n            assertRange(value, valueName, min, max);\n    };\n    var assertMultiple = function (value, valueName, multiplier) {\n        assertIs(value, valueName, ['number']);\n        if (value % multiplier !== 0) {\n            // prettier-ignore\n            throw new Error(backtick(valueName) + \" must be a multiple of \" + multiplier + \", but was actually \" + value);\n        }\n    };\n    var assertInteger = function (value, valueName) {\n        if (!Number.isInteger(value)) {\n            throw new Error(backtick(valueName) + \" must be an integer, but was actually \" + value);\n        }\n    };\n    var assertPositive = function (value, valueName) {\n        if (![1, 0].includes(Math.sign(value))) {\n            // prettier-ignore\n            throw new Error(backtick(valueName) + \" must be a positive number or 0, but was actually \" + value);\n        }\n    };\n\n    // Mapping from PDFDocEncoding to Unicode code point\n    var pdfDocEncodingToUnicode = new Uint16Array(256);\n    // Initialize the code points which are the same\n    for (var idx$2 = 0; idx$2 < 256; idx$2++) {\n        pdfDocEncodingToUnicode[idx$2] = idx$2;\n    }\n    // Set differences (see \"Table D.2 – PDFDocEncoding Character Set\" of the PDF spec)\n    pdfDocEncodingToUnicode[0x16] = toCharCode('\\u0017'); // SYNCRONOUS IDLE\n    pdfDocEncodingToUnicode[0x18] = toCharCode('\\u02D8'); // BREVE\n    pdfDocEncodingToUnicode[0x19] = toCharCode('\\u02C7'); // CARON\n    pdfDocEncodingToUnicode[0x1a] = toCharCode('\\u02C6'); // MODIFIER LETTER CIRCUMFLEX ACCENT\n    pdfDocEncodingToUnicode[0x1b] = toCharCode('\\u02D9'); // DOT ABOVE\n    pdfDocEncodingToUnicode[0x1c] = toCharCode('\\u02DD'); // DOUBLE ACUTE ACCENT\n    pdfDocEncodingToUnicode[0x1d] = toCharCode('\\u02DB'); // OGONEK\n    pdfDocEncodingToUnicode[0x1e] = toCharCode('\\u02DA'); // RING ABOVE\n    pdfDocEncodingToUnicode[0x1f] = toCharCode('\\u02DC'); // SMALL TILDE\n    pdfDocEncodingToUnicode[0x7f] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\n    pdfDocEncodingToUnicode[0x80] = toCharCode('\\u2022'); // BULLET\n    pdfDocEncodingToUnicode[0x81] = toCharCode('\\u2020'); // DAGGER\n    pdfDocEncodingToUnicode[0x82] = toCharCode('\\u2021'); // DOUBLE DAGGER\n    pdfDocEncodingToUnicode[0x83] = toCharCode('\\u2026'); // HORIZONTAL ELLIPSIS\n    pdfDocEncodingToUnicode[0x84] = toCharCode('\\u2014'); // EM DASH\n    pdfDocEncodingToUnicode[0x85] = toCharCode('\\u2013'); // EN DASH\n    pdfDocEncodingToUnicode[0x86] = toCharCode('\\u0192'); // LATIN SMALL LETTER SCRIPT F\n    pdfDocEncodingToUnicode[0x87] = toCharCode('\\u2044'); // FRACTION SLASH (solidus)\n    pdfDocEncodingToUnicode[0x88] = toCharCode('\\u2039'); // SINGLE LEFT-POINTING ANGLE QUOTATION MARK\n    pdfDocEncodingToUnicode[0x89] = toCharCode('\\u203A'); // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK\n    pdfDocEncodingToUnicode[0x8a] = toCharCode('\\u2212'); // MINUS SIGN\n    pdfDocEncodingToUnicode[0x8b] = toCharCode('\\u2030'); // PER MILLE SIGN\n    pdfDocEncodingToUnicode[0x8c] = toCharCode('\\u201E'); // DOUBLE LOW-9 QUOTATION MARK (quotedblbase)\n    pdfDocEncodingToUnicode[0x8d] = toCharCode('\\u201C'); // LEFT DOUBLE QUOTATION MARK (quotedblleft)\n    pdfDocEncodingToUnicode[0x8e] = toCharCode('\\u201D'); // RIGHT DOUBLE QUOTATION MARK (quotedblright)\n    pdfDocEncodingToUnicode[0x8f] = toCharCode('\\u2018'); // LEFT SINGLE QUOTATION MARK (quoteleft)\n    pdfDocEncodingToUnicode[0x90] = toCharCode('\\u2019'); // RIGHT SINGLE QUOTATION MARK (quoteright)\n    pdfDocEncodingToUnicode[0x91] = toCharCode('\\u201A'); // SINGLE LOW-9 QUOTATION MARK (quotesinglbase)\n    pdfDocEncodingToUnicode[0x92] = toCharCode('\\u2122'); // TRADE MARK SIGN\n    pdfDocEncodingToUnicode[0x93] = toCharCode('\\uFB01'); // LATIN SMALL LIGATURE FI\n    pdfDocEncodingToUnicode[0x94] = toCharCode('\\uFB02'); // LATIN SMALL LIGATURE FL\n    pdfDocEncodingToUnicode[0x95] = toCharCode('\\u0141'); // LATIN CAPITAL LETTER L WITH STROKE\n    pdfDocEncodingToUnicode[0x96] = toCharCode('\\u0152'); // LATIN CAPITAL LIGATURE OE\n    pdfDocEncodingToUnicode[0x97] = toCharCode('\\u0160'); // LATIN CAPITAL LETTER S WITH CARON\n    pdfDocEncodingToUnicode[0x98] = toCharCode('\\u0178'); // LATIN CAPITAL LETTER Y WITH DIAERESIS\n    pdfDocEncodingToUnicode[0x99] = toCharCode('\\u017D'); // LATIN CAPITAL LETTER Z WITH CARON\n    pdfDocEncodingToUnicode[0x9a] = toCharCode('\\u0131'); // LATIN SMALL LETTER DOTLESS I\n    pdfDocEncodingToUnicode[0x9b] = toCharCode('\\u0142'); // LATIN SMALL LETTER L WITH STROKE\n    pdfDocEncodingToUnicode[0x9c] = toCharCode('\\u0153'); // LATIN SMALL LIGATURE OE\n    pdfDocEncodingToUnicode[0x9d] = toCharCode('\\u0161'); // LATIN SMALL LETTER S WITH CARON\n    pdfDocEncodingToUnicode[0x9e] = toCharCode('\\u017E'); // LATIN SMALL LETTER Z WITH CARON\n    pdfDocEncodingToUnicode[0x9f] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\n    pdfDocEncodingToUnicode[0xa0] = toCharCode('\\u20AC'); // EURO SIGN\n    pdfDocEncodingToUnicode[0xad] = toCharCode('\\uFFFD'); // REPLACEMENT CHARACTER (box with questionmark)\n    /**\n     * Decode a byte array into a string using PDFDocEncoding.\n     *\n     * @param bytes a byte array (decimal representation) containing a string\n     *              encoded with PDFDocEncoding.\n     */\n    var pdfDocEncodingDecode = function (bytes) {\n        var codePoints = new Array(bytes.length);\n        for (var idx = 0, len = bytes.length; idx < len; idx++) {\n            codePoints[idx] = pdfDocEncodingToUnicode[bytes[idx]];\n        }\n        return String.fromCodePoint.apply(String, codePoints);\n    };\n\n    var Cache = /** @class */ (function () {\n        function Cache(populate) {\n            this.populate = populate;\n            this.value = undefined;\n        }\n        Cache.prototype.getValue = function () {\n            return this.value;\n        };\n        Cache.prototype.access = function () {\n            if (!this.value)\n                this.value = this.populate();\n            return this.value;\n        };\n        Cache.prototype.invalidate = function () {\n            this.value = undefined;\n        };\n        Cache.populatedBy = function (populate) { return new Cache(populate); };\n        return Cache;\n    }());\n\n    var MethodNotImplementedError = /** @class */ (function (_super) {\n        tslibExports.__extends(MethodNotImplementedError, _super);\n        function MethodNotImplementedError(className, methodName) {\n            var _this = this;\n            var msg = \"Method \" + className + \".\" + methodName + \"() not implemented\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return MethodNotImplementedError;\n    }(Error));\n    var PrivateConstructorError = /** @class */ (function (_super) {\n        tslibExports.__extends(PrivateConstructorError, _super);\n        function PrivateConstructorError(className) {\n            var _this = this;\n            var msg = \"Cannot construct \" + className + \" - it has a private constructor\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return PrivateConstructorError;\n    }(Error));\n    var UnexpectedObjectTypeError = /** @class */ (function (_super) {\n        tslibExports.__extends(UnexpectedObjectTypeError, _super);\n        function UnexpectedObjectTypeError(expected, actual) {\n            var _this = this;\n            var name = function (t) { var _a, _b; return (_a = t === null || t === void 0 ? void 0 : t.name) !== null && _a !== void 0 ? _a : (_b = t === null || t === void 0 ? void 0 : t.constructor) === null || _b === void 0 ? void 0 : _b.name; };\n            var expectedTypes = Array.isArray(expected)\n                ? expected.map(name)\n                : [name(expected)];\n            var msg = \"Expected instance of \" + expectedTypes.join(' or ') + \", \" +\n                (\"but got instance of \" + (actual ? name(actual) : actual));\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return UnexpectedObjectTypeError;\n    }(Error));\n    var UnsupportedEncodingError = /** @class */ (function (_super) {\n        tslibExports.__extends(UnsupportedEncodingError, _super);\n        function UnsupportedEncodingError(encoding) {\n            var _this = this;\n            var msg = encoding + \" stream encoding not supported\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return UnsupportedEncodingError;\n    }(Error));\n    var ReparseError = /** @class */ (function (_super) {\n        tslibExports.__extends(ReparseError, _super);\n        function ReparseError(className, methodName) {\n            var _this = this;\n            var msg = \"Cannot call \" + className + \".\" + methodName + \"() more than once\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return ReparseError;\n    }(Error));\n    var MissingCatalogError = /** @class */ (function (_super) {\n        tslibExports.__extends(MissingCatalogError, _super);\n        function MissingCatalogError(ref) {\n            var _this = this;\n            var msg = \"Missing catalog (ref=\" + ref + \")\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return MissingCatalogError;\n    }(Error));\n    var MissingPageContentsEmbeddingError = /** @class */ (function (_super) {\n        tslibExports.__extends(MissingPageContentsEmbeddingError, _super);\n        function MissingPageContentsEmbeddingError() {\n            var _this = this;\n            var msg = \"Can't embed page with missing Contents\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return MissingPageContentsEmbeddingError;\n    }(Error));\n    var UnrecognizedStreamTypeError = /** @class */ (function (_super) {\n        tslibExports.__extends(UnrecognizedStreamTypeError, _super);\n        function UnrecognizedStreamTypeError(stream) {\n            var _a, _b, _c;\n            var _this = this;\n            var streamType = (_c = (_b = (_a = stream === null || stream === void 0 ? void 0 : stream.contructor) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : stream === null || stream === void 0 ? void 0 : stream.name) !== null && _c !== void 0 ? _c : stream;\n            var msg = \"Unrecognized stream type: \" + streamType;\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return UnrecognizedStreamTypeError;\n    }(Error));\n    var PageEmbeddingMismatchedContextError = /** @class */ (function (_super) {\n        tslibExports.__extends(PageEmbeddingMismatchedContextError, _super);\n        function PageEmbeddingMismatchedContextError() {\n            var _this = this;\n            var msg = \"Found mismatched contexts while embedding pages. All pages in the array passed to `PDFDocument.embedPages()` must be from the same document.\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return PageEmbeddingMismatchedContextError;\n    }(Error));\n    var PDFArrayIsNotRectangleError = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFArrayIsNotRectangleError, _super);\n        function PDFArrayIsNotRectangleError(size) {\n            var _this = this;\n            var msg = \"Attempted to convert PDFArray with \" + size + \" elements to rectangle, but must have exactly 4 elements.\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return PDFArrayIsNotRectangleError;\n    }(Error));\n    var InvalidPDFDateStringError = /** @class */ (function (_super) {\n        tslibExports.__extends(InvalidPDFDateStringError, _super);\n        function InvalidPDFDateStringError(value) {\n            var _this = this;\n            var msg = \"Attempted to convert \\\"\" + value + \"\\\" to a date, but it does not match the PDF date string format.\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return InvalidPDFDateStringError;\n    }(Error));\n    var InvalidTargetIndexError = /** @class */ (function (_super) {\n        tslibExports.__extends(InvalidTargetIndexError, _super);\n        function InvalidTargetIndexError(targetIndex, Count) {\n            var _this = this;\n            var msg = \"Invalid targetIndex specified: targetIndex=\" + targetIndex + \" must be less than Count=\" + Count;\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return InvalidTargetIndexError;\n    }(Error));\n    var CorruptPageTreeError = /** @class */ (function (_super) {\n        tslibExports.__extends(CorruptPageTreeError, _super);\n        function CorruptPageTreeError(targetIndex, operation) {\n            var _this = this;\n            var msg = \"Failed to \" + operation + \" at targetIndex=\" + targetIndex + \" due to corrupt page tree: It is likely that one or more 'Count' entries are invalid\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return CorruptPageTreeError;\n    }(Error));\n    var IndexOutOfBoundsError = /** @class */ (function (_super) {\n        tslibExports.__extends(IndexOutOfBoundsError, _super);\n        function IndexOutOfBoundsError(index, min, max) {\n            var _this = this;\n            var msg = \"index should be at least \" + min + \" and at most \" + max + \", but was actually \" + index;\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return IndexOutOfBoundsError;\n    }(Error));\n    var InvalidAcroFieldValueError = /** @class */ (function (_super) {\n        tslibExports.__extends(InvalidAcroFieldValueError, _super);\n        function InvalidAcroFieldValueError() {\n            var _this = this;\n            var msg = \"Attempted to set invalid field value\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return InvalidAcroFieldValueError;\n    }(Error));\n    var MultiSelectValueError = /** @class */ (function (_super) {\n        tslibExports.__extends(MultiSelectValueError, _super);\n        function MultiSelectValueError() {\n            var _this = this;\n            var msg = \"Attempted to select multiple values for single-select field\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return MultiSelectValueError;\n    }(Error));\n    var MissingDAEntryError = /** @class */ (function (_super) {\n        tslibExports.__extends(MissingDAEntryError, _super);\n        function MissingDAEntryError(fieldName) {\n            var _this = this;\n            var msg = \"No /DA (default appearance) entry found for field: \" + fieldName;\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return MissingDAEntryError;\n    }(Error));\n    var MissingTfOperatorError = /** @class */ (function (_super) {\n        tslibExports.__extends(MissingTfOperatorError, _super);\n        function MissingTfOperatorError(fieldName) {\n            var _this = this;\n            var msg = \"No Tf operator found for DA of field: \" + fieldName;\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return MissingTfOperatorError;\n    }(Error));\n    var NumberParsingError = /** @class */ (function (_super) {\n        tslibExports.__extends(NumberParsingError, _super);\n        function NumberParsingError(pos, value) {\n            var _this = this;\n            var msg = \"Failed to parse number \" +\n                (\"(line:\" + pos.line + \" col:\" + pos.column + \" offset=\" + pos.offset + \"): \\\"\" + value + \"\\\"\");\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return NumberParsingError;\n    }(Error));\n    var PDFParsingError = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFParsingError, _super);\n        function PDFParsingError(pos, details) {\n            var _this = this;\n            var msg = \"Failed to parse PDF document \" +\n                (\"(line:\" + pos.line + \" col:\" + pos.column + \" offset=\" + pos.offset + \"): \" + details);\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return PDFParsingError;\n    }(Error));\n    var NextByteAssertionError = /** @class */ (function (_super) {\n        tslibExports.__extends(NextByteAssertionError, _super);\n        function NextByteAssertionError(pos, expectedByte, actualByte) {\n            var _this = this;\n            var msg = \"Expected next byte to be \" + expectedByte + \" but it was actually \" + actualByte;\n            _this = _super.call(this, pos, msg) || this;\n            return _this;\n        }\n        return NextByteAssertionError;\n    }(PDFParsingError));\n    var PDFObjectParsingError = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFObjectParsingError, _super);\n        function PDFObjectParsingError(pos, byte) {\n            var _this = this;\n            var msg = \"Failed to parse PDF object starting with the following byte: \" + byte;\n            _this = _super.call(this, pos, msg) || this;\n            return _this;\n        }\n        return PDFObjectParsingError;\n    }(PDFParsingError));\n    var PDFInvalidObjectParsingError = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFInvalidObjectParsingError, _super);\n        function PDFInvalidObjectParsingError(pos) {\n            var _this = this;\n            var msg = \"Failed to parse invalid PDF object\";\n            _this = _super.call(this, pos, msg) || this;\n            return _this;\n        }\n        return PDFInvalidObjectParsingError;\n    }(PDFParsingError));\n    var PDFStreamParsingError = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFStreamParsingError, _super);\n        function PDFStreamParsingError(pos) {\n            var _this = this;\n            var msg = \"Failed to parse PDF stream\";\n            _this = _super.call(this, pos, msg) || this;\n            return _this;\n        }\n        return PDFStreamParsingError;\n    }(PDFParsingError));\n    var UnbalancedParenthesisError = /** @class */ (function (_super) {\n        tslibExports.__extends(UnbalancedParenthesisError, _super);\n        function UnbalancedParenthesisError(pos) {\n            var _this = this;\n            var msg = \"Failed to parse PDF literal string due to unbalanced parenthesis\";\n            _this = _super.call(this, pos, msg) || this;\n            return _this;\n        }\n        return UnbalancedParenthesisError;\n    }(PDFParsingError));\n    var StalledParserError = /** @class */ (function (_super) {\n        tslibExports.__extends(StalledParserError, _super);\n        function StalledParserError(pos) {\n            var _this = this;\n            var msg = \"Parser stalled\";\n            _this = _super.call(this, pos, msg) || this;\n            return _this;\n        }\n        return StalledParserError;\n    }(PDFParsingError));\n    var MissingPDFHeaderError = /** @class */ (function (_super) {\n        tslibExports.__extends(MissingPDFHeaderError, _super);\n        function MissingPDFHeaderError(pos) {\n            var _this = this;\n            var msg = \"No PDF header found\";\n            _this = _super.call(this, pos, msg) || this;\n            return _this;\n        }\n        return MissingPDFHeaderError;\n    }(PDFParsingError));\n    var MissingKeywordError = /** @class */ (function (_super) {\n        tslibExports.__extends(MissingKeywordError, _super);\n        function MissingKeywordError(pos, keyword) {\n            var _this = this;\n            var msg = \"Did not find expected keyword '\" + arrayAsString(keyword) + \"'\";\n            _this = _super.call(this, pos, msg) || this;\n            return _this;\n        }\n        return MissingKeywordError;\n    }(PDFParsingError));\n\n    var CharCodes;\n    (function (CharCodes) {\n        CharCodes[CharCodes[\"Null\"] = 0] = \"Null\";\n        CharCodes[CharCodes[\"Backspace\"] = 8] = \"Backspace\";\n        CharCodes[CharCodes[\"Tab\"] = 9] = \"Tab\";\n        CharCodes[CharCodes[\"Newline\"] = 10] = \"Newline\";\n        CharCodes[CharCodes[\"FormFeed\"] = 12] = \"FormFeed\";\n        CharCodes[CharCodes[\"CarriageReturn\"] = 13] = \"CarriageReturn\";\n        CharCodes[CharCodes[\"Space\"] = 32] = \"Space\";\n        CharCodes[CharCodes[\"ExclamationPoint\"] = 33] = \"ExclamationPoint\";\n        CharCodes[CharCodes[\"Hash\"] = 35] = \"Hash\";\n        CharCodes[CharCodes[\"Percent\"] = 37] = \"Percent\";\n        CharCodes[CharCodes[\"LeftParen\"] = 40] = \"LeftParen\";\n        CharCodes[CharCodes[\"RightParen\"] = 41] = \"RightParen\";\n        CharCodes[CharCodes[\"Plus\"] = 43] = \"Plus\";\n        CharCodes[CharCodes[\"Minus\"] = 45] = \"Minus\";\n        CharCodes[CharCodes[\"Dash\"] = 45] = \"Dash\";\n        CharCodes[CharCodes[\"Period\"] = 46] = \"Period\";\n        CharCodes[CharCodes[\"ForwardSlash\"] = 47] = \"ForwardSlash\";\n        CharCodes[CharCodes[\"Zero\"] = 48] = \"Zero\";\n        CharCodes[CharCodes[\"One\"] = 49] = \"One\";\n        CharCodes[CharCodes[\"Two\"] = 50] = \"Two\";\n        CharCodes[CharCodes[\"Three\"] = 51] = \"Three\";\n        CharCodes[CharCodes[\"Four\"] = 52] = \"Four\";\n        CharCodes[CharCodes[\"Five\"] = 53] = \"Five\";\n        CharCodes[CharCodes[\"Six\"] = 54] = \"Six\";\n        CharCodes[CharCodes[\"Seven\"] = 55] = \"Seven\";\n        CharCodes[CharCodes[\"Eight\"] = 56] = \"Eight\";\n        CharCodes[CharCodes[\"Nine\"] = 57] = \"Nine\";\n        CharCodes[CharCodes[\"LessThan\"] = 60] = \"LessThan\";\n        CharCodes[CharCodes[\"GreaterThan\"] = 62] = \"GreaterThan\";\n        CharCodes[CharCodes[\"A\"] = 65] = \"A\";\n        CharCodes[CharCodes[\"D\"] = 68] = \"D\";\n        CharCodes[CharCodes[\"E\"] = 69] = \"E\";\n        CharCodes[CharCodes[\"F\"] = 70] = \"F\";\n        CharCodes[CharCodes[\"O\"] = 79] = \"O\";\n        CharCodes[CharCodes[\"P\"] = 80] = \"P\";\n        CharCodes[CharCodes[\"R\"] = 82] = \"R\";\n        CharCodes[CharCodes[\"LeftSquareBracket\"] = 91] = \"LeftSquareBracket\";\n        CharCodes[CharCodes[\"BackSlash\"] = 92] = \"BackSlash\";\n        CharCodes[CharCodes[\"RightSquareBracket\"] = 93] = \"RightSquareBracket\";\n        CharCodes[CharCodes[\"a\"] = 97] = \"a\";\n        CharCodes[CharCodes[\"b\"] = 98] = \"b\";\n        CharCodes[CharCodes[\"d\"] = 100] = \"d\";\n        CharCodes[CharCodes[\"e\"] = 101] = \"e\";\n        CharCodes[CharCodes[\"f\"] = 102] = \"f\";\n        CharCodes[CharCodes[\"i\"] = 105] = \"i\";\n        CharCodes[CharCodes[\"j\"] = 106] = \"j\";\n        CharCodes[CharCodes[\"l\"] = 108] = \"l\";\n        CharCodes[CharCodes[\"m\"] = 109] = \"m\";\n        CharCodes[CharCodes[\"n\"] = 110] = \"n\";\n        CharCodes[CharCodes[\"o\"] = 111] = \"o\";\n        CharCodes[CharCodes[\"r\"] = 114] = \"r\";\n        CharCodes[CharCodes[\"s\"] = 115] = \"s\";\n        CharCodes[CharCodes[\"t\"] = 116] = \"t\";\n        CharCodes[CharCodes[\"u\"] = 117] = \"u\";\n        CharCodes[CharCodes[\"x\"] = 120] = \"x\";\n        CharCodes[CharCodes[\"LeftCurly\"] = 123] = \"LeftCurly\";\n        CharCodes[CharCodes[\"RightCurly\"] = 125] = \"RightCurly\";\n        CharCodes[CharCodes[\"Tilde\"] = 126] = \"Tilde\";\n    })(CharCodes || (CharCodes = {}));\n    var CharCodes$1 = CharCodes;\n\n    var PDFHeader = /** @class */ (function () {\n        function PDFHeader(major, minor) {\n            this.major = String(major);\n            this.minor = String(minor);\n        }\n        PDFHeader.prototype.toString = function () {\n            var bc = charFromCode(129);\n            return \"%PDF-\" + this.major + \".\" + this.minor + \"\\n%\" + bc + bc + bc + bc;\n        };\n        PDFHeader.prototype.sizeInBytes = function () {\n            return 12 + this.major.length + this.minor.length;\n        };\n        PDFHeader.prototype.copyBytesInto = function (buffer, offset) {\n            var initialOffset = offset;\n            buffer[offset++] = CharCodes$1.Percent;\n            buffer[offset++] = CharCodes$1.P;\n            buffer[offset++] = CharCodes$1.D;\n            buffer[offset++] = CharCodes$1.F;\n            buffer[offset++] = CharCodes$1.Dash;\n            offset += copyStringIntoBuffer(this.major, buffer, offset);\n            buffer[offset++] = CharCodes$1.Period;\n            offset += copyStringIntoBuffer(this.minor, buffer, offset);\n            buffer[offset++] = CharCodes$1.Newline;\n            buffer[offset++] = CharCodes$1.Percent;\n            buffer[offset++] = 129;\n            buffer[offset++] = 129;\n            buffer[offset++] = 129;\n            buffer[offset++] = 129;\n            return offset - initialOffset;\n        };\n        PDFHeader.forVersion = function (major, minor) {\n            return new PDFHeader(major, minor);\n        };\n        return PDFHeader;\n    }());\n\n    var PDFObject = /** @class */ (function () {\n        function PDFObject() {\n        }\n        PDFObject.prototype.clone = function (_context) {\n            throw new MethodNotImplementedError(this.constructor.name, 'clone');\n        };\n        PDFObject.prototype.toString = function () {\n            throw new MethodNotImplementedError(this.constructor.name, 'toString');\n        };\n        PDFObject.prototype.sizeInBytes = function () {\n            throw new MethodNotImplementedError(this.constructor.name, 'sizeInBytes');\n        };\n        PDFObject.prototype.copyBytesInto = function (_buffer, _offset) {\n            throw new MethodNotImplementedError(this.constructor.name, 'copyBytesInto');\n        };\n        return PDFObject;\n    }());\n\n    var PDFNumber = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFNumber, _super);\n        function PDFNumber(value) {\n            var _this = _super.call(this) || this;\n            _this.numberValue = value;\n            _this.stringValue = numberToString(value);\n            return _this;\n        }\n        PDFNumber.prototype.asNumber = function () {\n            return this.numberValue;\n        };\n        /** @deprecated in favor of [[PDFNumber.asNumber]] */\n        PDFNumber.prototype.value = function () {\n            return this.numberValue;\n        };\n        PDFNumber.prototype.clone = function () {\n            return PDFNumber.of(this.numberValue);\n        };\n        PDFNumber.prototype.toString = function () {\n            return this.stringValue;\n        };\n        PDFNumber.prototype.sizeInBytes = function () {\n            return this.stringValue.length;\n        };\n        PDFNumber.prototype.copyBytesInto = function (buffer, offset) {\n            offset += copyStringIntoBuffer(this.stringValue, buffer, offset);\n            return this.stringValue.length;\n        };\n        PDFNumber.of = function (value) { return new PDFNumber(value); };\n        return PDFNumber;\n    }(PDFObject));\n\n    var PDFArray = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFArray, _super);\n        function PDFArray(context) {\n            var _this = _super.call(this) || this;\n            _this.array = [];\n            _this.context = context;\n            return _this;\n        }\n        PDFArray.prototype.size = function () {\n            return this.array.length;\n        };\n        PDFArray.prototype.push = function (object) {\n            this.array.push(object);\n        };\n        PDFArray.prototype.insert = function (index, object) {\n            this.array.splice(index, 0, object);\n        };\n        PDFArray.prototype.indexOf = function (object) {\n            var index = this.array.indexOf(object);\n            return index === -1 ? undefined : index;\n        };\n        PDFArray.prototype.remove = function (index) {\n            this.array.splice(index, 1);\n        };\n        PDFArray.prototype.set = function (idx, object) {\n            this.array[idx] = object;\n        };\n        PDFArray.prototype.get = function (index) {\n            return this.array[index];\n        };\n        PDFArray.prototype.lookupMaybe = function (index) {\n            var _a;\n            var types = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                types[_i - 1] = arguments[_i];\n            }\n            return (_a = this.context).lookupMaybe.apply(_a, tslibExports.__spreadArrays([this.get(index)], types));\n        };\n        PDFArray.prototype.lookup = function (index) {\n            var _a;\n            var types = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                types[_i - 1] = arguments[_i];\n            }\n            return (_a = this.context).lookup.apply(_a, tslibExports.__spreadArrays([this.get(index)], types));\n        };\n        PDFArray.prototype.asRectangle = function () {\n            if (this.size() !== 4)\n                throw new PDFArrayIsNotRectangleError(this.size());\n            var lowerLeftX = this.lookup(0, PDFNumber).asNumber();\n            var lowerLeftY = this.lookup(1, PDFNumber).asNumber();\n            var upperRightX = this.lookup(2, PDFNumber).asNumber();\n            var upperRightY = this.lookup(3, PDFNumber).asNumber();\n            var x = lowerLeftX;\n            var y = lowerLeftY;\n            var width = upperRightX - lowerLeftX;\n            var height = upperRightY - lowerLeftY;\n            return { x: x, y: y, width: width, height: height };\n        };\n        PDFArray.prototype.asArray = function () {\n            return this.array.slice();\n        };\n        PDFArray.prototype.clone = function (context) {\n            var clone = PDFArray.withContext(context || this.context);\n            for (var idx = 0, len = this.size(); idx < len; idx++) {\n                clone.push(this.array[idx]);\n            }\n            return clone;\n        };\n        PDFArray.prototype.toString = function () {\n            var arrayString = '[ ';\n            for (var idx = 0, len = this.size(); idx < len; idx++) {\n                arrayString += this.get(idx).toString();\n                arrayString += ' ';\n            }\n            arrayString += ']';\n            return arrayString;\n        };\n        PDFArray.prototype.sizeInBytes = function () {\n            var size = 3;\n            for (var idx = 0, len = this.size(); idx < len; idx++) {\n                size += this.get(idx).sizeInBytes() + 1;\n            }\n            return size;\n        };\n        PDFArray.prototype.copyBytesInto = function (buffer, offset) {\n            var initialOffset = offset;\n            buffer[offset++] = CharCodes$1.LeftSquareBracket;\n            buffer[offset++] = CharCodes$1.Space;\n            for (var idx = 0, len = this.size(); idx < len; idx++) {\n                offset += this.get(idx).copyBytesInto(buffer, offset);\n                buffer[offset++] = CharCodes$1.Space;\n            }\n            buffer[offset++] = CharCodes$1.RightSquareBracket;\n            return offset - initialOffset;\n        };\n        PDFArray.prototype.scalePDFNumbers = function (x, y) {\n            for (var idx = 0, len = this.size(); idx < len; idx++) {\n                var el = this.lookup(idx);\n                if (el instanceof PDFNumber) {\n                    var factor = idx % 2 === 0 ? x : y;\n                    this.set(idx, PDFNumber.of(el.asNumber() * factor));\n                }\n            }\n        };\n        PDFArray.withContext = function (context) { return new PDFArray(context); };\n        return PDFArray;\n    }(PDFObject));\n\n    var ENFORCER$2 = {};\n    var PDFBool = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFBool, _super);\n        function PDFBool(enforcer, value) {\n            var _this = this;\n            if (enforcer !== ENFORCER$2)\n                throw new PrivateConstructorError('PDFBool');\n            _this = _super.call(this) || this;\n            _this.value = value;\n            return _this;\n        }\n        PDFBool.prototype.asBoolean = function () {\n            return this.value;\n        };\n        PDFBool.prototype.clone = function () {\n            return this;\n        };\n        PDFBool.prototype.toString = function () {\n            return String(this.value);\n        };\n        PDFBool.prototype.sizeInBytes = function () {\n            return this.value ? 4 : 5;\n        };\n        PDFBool.prototype.copyBytesInto = function (buffer, offset) {\n            if (this.value) {\n                buffer[offset++] = CharCodes$1.t;\n                buffer[offset++] = CharCodes$1.r;\n                buffer[offset++] = CharCodes$1.u;\n                buffer[offset++] = CharCodes$1.e;\n                return 4;\n            }\n            else {\n                buffer[offset++] = CharCodes$1.f;\n                buffer[offset++] = CharCodes$1.a;\n                buffer[offset++] = CharCodes$1.l;\n                buffer[offset++] = CharCodes$1.s;\n                buffer[offset++] = CharCodes$1.e;\n                return 5;\n            }\n        };\n        PDFBool.True = new PDFBool(ENFORCER$2, true);\n        PDFBool.False = new PDFBool(ENFORCER$2, false);\n        return PDFBool;\n    }(PDFObject));\n\n    var IsDelimiter = new Uint8Array(256);\n    IsDelimiter[CharCodes$1.LeftParen] = 1;\n    IsDelimiter[CharCodes$1.RightParen] = 1;\n    IsDelimiter[CharCodes$1.LessThan] = 1;\n    IsDelimiter[CharCodes$1.GreaterThan] = 1;\n    IsDelimiter[CharCodes$1.LeftSquareBracket] = 1;\n    IsDelimiter[CharCodes$1.RightSquareBracket] = 1;\n    IsDelimiter[CharCodes$1.LeftCurly] = 1;\n    IsDelimiter[CharCodes$1.RightCurly] = 1;\n    IsDelimiter[CharCodes$1.ForwardSlash] = 1;\n    IsDelimiter[CharCodes$1.Percent] = 1;\n\n    var IsWhitespace = new Uint8Array(256);\n    IsWhitespace[CharCodes$1.Null] = 1;\n    IsWhitespace[CharCodes$1.Tab] = 1;\n    IsWhitespace[CharCodes$1.Newline] = 1;\n    IsWhitespace[CharCodes$1.FormFeed] = 1;\n    IsWhitespace[CharCodes$1.CarriageReturn] = 1;\n    IsWhitespace[CharCodes$1.Space] = 1;\n\n    var IsIrregular = new Uint8Array(256);\n    for (var idx$1 = 0, len$1 = 256; idx$1 < len$1; idx$1++) {\n        IsIrregular[idx$1] = IsWhitespace[idx$1] || IsDelimiter[idx$1] ? 1 : 0;\n    }\n    IsIrregular[CharCodes$1.Hash] = 1;\n\n    var decodeName = function (name) {\n        return name.replace(/#([\\dABCDEF]{2})/g, function (_, hex) { return charFromHexCode(hex); });\n    };\n    var isRegularChar = function (charCode) {\n        return charCode >= CharCodes$1.ExclamationPoint &&\n            charCode <= CharCodes$1.Tilde &&\n            !IsIrregular[charCode];\n    };\n    var ENFORCER$1 = {};\n    var pool$1 = new Map();\n    var PDFName = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFName, _super);\n        function PDFName(enforcer, name) {\n            var _this = this;\n            if (enforcer !== ENFORCER$1)\n                throw new PrivateConstructorError('PDFName');\n            _this = _super.call(this) || this;\n            var encodedName = '/';\n            for (var idx = 0, len = name.length; idx < len; idx++) {\n                var character = name[idx];\n                var code = toCharCode(character);\n                encodedName += isRegularChar(code) ? character : \"#\" + toHexString(code);\n            }\n            _this.encodedName = encodedName;\n            return _this;\n        }\n        PDFName.prototype.asBytes = function () {\n            var bytes = [];\n            var hex = '';\n            var escaped = false;\n            var pushByte = function (byte) {\n                if (byte !== undefined)\n                    bytes.push(byte);\n                escaped = false;\n            };\n            for (var idx = 1, len = this.encodedName.length; idx < len; idx++) {\n                var char = this.encodedName[idx];\n                var byte = toCharCode(char);\n                var nextChar = this.encodedName[idx + 1];\n                if (!escaped) {\n                    if (byte === CharCodes$1.Hash)\n                        escaped = true;\n                    else\n                        pushByte(byte);\n                }\n                else {\n                    if ((byte >= CharCodes$1.Zero && byte <= CharCodes$1.Nine) ||\n                        (byte >= CharCodes$1.a && byte <= CharCodes$1.f) ||\n                        (byte >= CharCodes$1.A && byte <= CharCodes$1.F)) {\n                        hex += char;\n                        if (hex.length === 2 ||\n                            !((nextChar >= '0' && nextChar <= '9') ||\n                                (nextChar >= 'a' && nextChar <= 'f') ||\n                                (nextChar >= 'A' && nextChar <= 'F'))) {\n                            pushByte(parseInt(hex, 16));\n                            hex = '';\n                        }\n                    }\n                    else {\n                        pushByte(byte);\n                    }\n                }\n            }\n            return new Uint8Array(bytes);\n        };\n        // TODO: This should probably use `utf8Decode()`\n        // TODO: Polyfill Array.from?\n        PDFName.prototype.decodeText = function () {\n            var bytes = this.asBytes();\n            return String.fromCharCode.apply(String, Array.from(bytes));\n        };\n        PDFName.prototype.asString = function () {\n            return this.encodedName;\n        };\n        /** @deprecated in favor of [[PDFName.asString]] */\n        PDFName.prototype.value = function () {\n            return this.encodedName;\n        };\n        PDFName.prototype.clone = function () {\n            return this;\n        };\n        PDFName.prototype.toString = function () {\n            return this.encodedName;\n        };\n        PDFName.prototype.sizeInBytes = function () {\n            return this.encodedName.length;\n        };\n        PDFName.prototype.copyBytesInto = function (buffer, offset) {\n            offset += copyStringIntoBuffer(this.encodedName, buffer, offset);\n            return this.encodedName.length;\n        };\n        PDFName.of = function (name) {\n            var decodedValue = decodeName(name);\n            var instance = pool$1.get(decodedValue);\n            if (!instance) {\n                instance = new PDFName(ENFORCER$1, decodedValue);\n                pool$1.set(decodedValue, instance);\n            }\n            return instance;\n        };\n        /* tslint:disable member-ordering */\n        PDFName.Length = PDFName.of('Length');\n        PDFName.FlateDecode = PDFName.of('FlateDecode');\n        PDFName.Resources = PDFName.of('Resources');\n        PDFName.Font = PDFName.of('Font');\n        PDFName.XObject = PDFName.of('XObject');\n        PDFName.ExtGState = PDFName.of('ExtGState');\n        PDFName.Contents = PDFName.of('Contents');\n        PDFName.Type = PDFName.of('Type');\n        PDFName.Parent = PDFName.of('Parent');\n        PDFName.MediaBox = PDFName.of('MediaBox');\n        PDFName.Page = PDFName.of('Page');\n        PDFName.Annots = PDFName.of('Annots');\n        PDFName.TrimBox = PDFName.of('TrimBox');\n        PDFName.ArtBox = PDFName.of('ArtBox');\n        PDFName.BleedBox = PDFName.of('BleedBox');\n        PDFName.CropBox = PDFName.of('CropBox');\n        PDFName.Rotate = PDFName.of('Rotate');\n        PDFName.Title = PDFName.of('Title');\n        PDFName.Author = PDFName.of('Author');\n        PDFName.Subject = PDFName.of('Subject');\n        PDFName.Creator = PDFName.of('Creator');\n        PDFName.Keywords = PDFName.of('Keywords');\n        PDFName.Producer = PDFName.of('Producer');\n        PDFName.CreationDate = PDFName.of('CreationDate');\n        PDFName.ModDate = PDFName.of('ModDate');\n        return PDFName;\n    }(PDFObject));\n\n    var PDFNull = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFNull, _super);\n        function PDFNull() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFNull.prototype.asNull = function () {\n            return null;\n        };\n        PDFNull.prototype.clone = function () {\n            return this;\n        };\n        PDFNull.prototype.toString = function () {\n            return 'null';\n        };\n        PDFNull.prototype.sizeInBytes = function () {\n            return 4;\n        };\n        PDFNull.prototype.copyBytesInto = function (buffer, offset) {\n            buffer[offset++] = CharCodes$1.n;\n            buffer[offset++] = CharCodes$1.u;\n            buffer[offset++] = CharCodes$1.l;\n            buffer[offset++] = CharCodes$1.l;\n            return 4;\n        };\n        return PDFNull;\n    }(PDFObject));\n    var PDFNull$1 = new PDFNull();\n\n    var PDFDict = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFDict, _super);\n        function PDFDict(map, context) {\n            var _this = _super.call(this) || this;\n            _this.dict = map;\n            _this.context = context;\n            return _this;\n        }\n        PDFDict.prototype.keys = function () {\n            return Array.from(this.dict.keys());\n        };\n        PDFDict.prototype.values = function () {\n            return Array.from(this.dict.values());\n        };\n        PDFDict.prototype.entries = function () {\n            return Array.from(this.dict.entries());\n        };\n        PDFDict.prototype.set = function (key, value) {\n            this.dict.set(key, value);\n        };\n        PDFDict.prototype.get = function (key, \n        // TODO: `preservePDFNull` is for backwards compatibility. Should be\n        // removed in next breaking API change.\n        preservePDFNull) {\n            if (preservePDFNull === void 0) { preservePDFNull = false; }\n            var value = this.dict.get(key);\n            if (value === PDFNull$1 && !preservePDFNull)\n                return undefined;\n            return value;\n        };\n        PDFDict.prototype.has = function (key) {\n            var value = this.dict.get(key);\n            return value !== undefined && value !== PDFNull$1;\n        };\n        PDFDict.prototype.lookupMaybe = function (key) {\n            var _a;\n            var types = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                types[_i - 1] = arguments[_i];\n            }\n            // TODO: `preservePDFNull` is for backwards compatibility. Should be\n            // removed in next breaking API change.\n            var preservePDFNull = types.includes(PDFNull$1);\n            var value = (_a = this.context).lookupMaybe.apply(_a, tslibExports.__spreadArrays([this.get(key, preservePDFNull)], types));\n            if (value === PDFNull$1 && !preservePDFNull)\n                return undefined;\n            return value;\n        };\n        PDFDict.prototype.lookup = function (key) {\n            var _a;\n            var types = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                types[_i - 1] = arguments[_i];\n            }\n            // TODO: `preservePDFNull` is for backwards compatibility. Should be\n            // removed in next breaking API change.\n            var preservePDFNull = types.includes(PDFNull$1);\n            var value = (_a = this.context).lookup.apply(_a, tslibExports.__spreadArrays([this.get(key, preservePDFNull)], types));\n            if (value === PDFNull$1 && !preservePDFNull)\n                return undefined;\n            return value;\n        };\n        PDFDict.prototype.delete = function (key) {\n            return this.dict.delete(key);\n        };\n        PDFDict.prototype.asMap = function () {\n            return new Map(this.dict);\n        };\n        /** Generate a random key that doesn't exist in current key set */\n        PDFDict.prototype.uniqueKey = function (tag) {\n            if (tag === void 0) { tag = ''; }\n            var existingKeys = this.keys();\n            var key = PDFName.of(this.context.addRandomSuffix(tag, 10));\n            while (existingKeys.includes(key)) {\n                key = PDFName.of(this.context.addRandomSuffix(tag, 10));\n            }\n            return key;\n        };\n        PDFDict.prototype.clone = function (context) {\n            var clone = PDFDict.withContext(context || this.context);\n            var entries = this.entries();\n            for (var idx = 0, len = entries.length; idx < len; idx++) {\n                var _a = entries[idx], key = _a[0], value = _a[1];\n                clone.set(key, value);\n            }\n            return clone;\n        };\n        PDFDict.prototype.toString = function () {\n            var dictString = '<<\\n';\n            var entries = this.entries();\n            for (var idx = 0, len = entries.length; idx < len; idx++) {\n                var _a = entries[idx], key = _a[0], value = _a[1];\n                dictString += key.toString() + ' ' + value.toString() + '\\n';\n            }\n            dictString += '>>';\n            return dictString;\n        };\n        PDFDict.prototype.sizeInBytes = function () {\n            var size = 5;\n            var entries = this.entries();\n            for (var idx = 0, len = entries.length; idx < len; idx++) {\n                var _a = entries[idx], key = _a[0], value = _a[1];\n                size += key.sizeInBytes() + value.sizeInBytes() + 2;\n            }\n            return size;\n        };\n        PDFDict.prototype.copyBytesInto = function (buffer, offset) {\n            var initialOffset = offset;\n            buffer[offset++] = CharCodes$1.LessThan;\n            buffer[offset++] = CharCodes$1.LessThan;\n            buffer[offset++] = CharCodes$1.Newline;\n            var entries = this.entries();\n            for (var idx = 0, len = entries.length; idx < len; idx++) {\n                var _a = entries[idx], key = _a[0], value = _a[1];\n                offset += key.copyBytesInto(buffer, offset);\n                buffer[offset++] = CharCodes$1.Space;\n                offset += value.copyBytesInto(buffer, offset);\n                buffer[offset++] = CharCodes$1.Newline;\n            }\n            buffer[offset++] = CharCodes$1.GreaterThan;\n            buffer[offset++] = CharCodes$1.GreaterThan;\n            return offset - initialOffset;\n        };\n        PDFDict.withContext = function (context) { return new PDFDict(new Map(), context); };\n        PDFDict.fromMapWithContext = function (map, context) {\n            return new PDFDict(map, context);\n        };\n        return PDFDict;\n    }(PDFObject));\n\n    var PDFStream = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFStream, _super);\n        function PDFStream(dict) {\n            var _this = _super.call(this) || this;\n            _this.dict = dict;\n            return _this;\n        }\n        PDFStream.prototype.clone = function (_context) {\n            throw new MethodNotImplementedError(this.constructor.name, 'clone');\n        };\n        PDFStream.prototype.getContentsString = function () {\n            throw new MethodNotImplementedError(this.constructor.name, 'getContentsString');\n        };\n        PDFStream.prototype.getContents = function () {\n            throw new MethodNotImplementedError(this.constructor.name, 'getContents');\n        };\n        PDFStream.prototype.getContentsSize = function () {\n            throw new MethodNotImplementedError(this.constructor.name, 'getContentsSize');\n        };\n        PDFStream.prototype.updateDict = function () {\n            var contentsSize = this.getContentsSize();\n            this.dict.set(PDFName.Length, PDFNumber.of(contentsSize));\n        };\n        PDFStream.prototype.sizeInBytes = function () {\n            this.updateDict();\n            return this.dict.sizeInBytes() + this.getContentsSize() + 18;\n        };\n        PDFStream.prototype.toString = function () {\n            this.updateDict();\n            var streamString = this.dict.toString();\n            streamString += '\\nstream\\n';\n            streamString += this.getContentsString();\n            streamString += '\\nendstream';\n            return streamString;\n        };\n        PDFStream.prototype.copyBytesInto = function (buffer, offset) {\n            this.updateDict();\n            var initialOffset = offset;\n            offset += this.dict.copyBytesInto(buffer, offset);\n            buffer[offset++] = CharCodes$1.Newline;\n            buffer[offset++] = CharCodes$1.s;\n            buffer[offset++] = CharCodes$1.t;\n            buffer[offset++] = CharCodes$1.r;\n            buffer[offset++] = CharCodes$1.e;\n            buffer[offset++] = CharCodes$1.a;\n            buffer[offset++] = CharCodes$1.m;\n            buffer[offset++] = CharCodes$1.Newline;\n            var contents = this.getContents();\n            for (var idx = 0, len = contents.length; idx < len; idx++) {\n                buffer[offset++] = contents[idx];\n            }\n            buffer[offset++] = CharCodes$1.Newline;\n            buffer[offset++] = CharCodes$1.e;\n            buffer[offset++] = CharCodes$1.n;\n            buffer[offset++] = CharCodes$1.d;\n            buffer[offset++] = CharCodes$1.s;\n            buffer[offset++] = CharCodes$1.t;\n            buffer[offset++] = CharCodes$1.r;\n            buffer[offset++] = CharCodes$1.e;\n            buffer[offset++] = CharCodes$1.a;\n            buffer[offset++] = CharCodes$1.m;\n            return offset - initialOffset;\n        };\n        return PDFStream;\n    }(PDFObject));\n\n    var PDFRawStream = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFRawStream, _super);\n        function PDFRawStream(dict, contents) {\n            var _this = _super.call(this, dict) || this;\n            _this.contents = contents;\n            return _this;\n        }\n        PDFRawStream.prototype.asUint8Array = function () {\n            return this.contents.slice();\n        };\n        PDFRawStream.prototype.clone = function (context) {\n            return PDFRawStream.of(this.dict.clone(context), this.contents.slice());\n        };\n        PDFRawStream.prototype.getContentsString = function () {\n            return arrayAsString(this.contents);\n        };\n        PDFRawStream.prototype.getContents = function () {\n            return this.contents;\n        };\n        PDFRawStream.prototype.getContentsSize = function () {\n            return this.contents.length;\n        };\n        PDFRawStream.of = function (dict, contents) {\n            return new PDFRawStream(dict, contents);\n        };\n        return PDFRawStream;\n    }(PDFStream));\n\n    var ENFORCER = {};\n    var pool = new Map();\n    var PDFRef = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFRef, _super);\n        function PDFRef(enforcer, objectNumber, generationNumber) {\n            var _this = this;\n            if (enforcer !== ENFORCER)\n                throw new PrivateConstructorError('PDFRef');\n            _this = _super.call(this) || this;\n            _this.objectNumber = objectNumber;\n            _this.generationNumber = generationNumber;\n            _this.tag = objectNumber + \" \" + generationNumber + \" R\";\n            return _this;\n        }\n        PDFRef.prototype.clone = function () {\n            return this;\n        };\n        PDFRef.prototype.toString = function () {\n            return this.tag;\n        };\n        PDFRef.prototype.sizeInBytes = function () {\n            return this.tag.length;\n        };\n        PDFRef.prototype.copyBytesInto = function (buffer, offset) {\n            offset += copyStringIntoBuffer(this.tag, buffer, offset);\n            return this.tag.length;\n        };\n        PDFRef.of = function (objectNumber, generationNumber) {\n            if (generationNumber === void 0) { generationNumber = 0; }\n            var tag = objectNumber + \" \" + generationNumber + \" R\";\n            var instance = pool.get(tag);\n            if (!instance) {\n                instance = new PDFRef(ENFORCER, objectNumber, generationNumber);\n                pool.set(tag, instance);\n            }\n            return instance;\n        };\n        return PDFRef;\n    }(PDFObject));\n\n    var PDFOperator = /** @class */ (function () {\n        function PDFOperator(name, args) {\n            this.name = name;\n            this.args = args || [];\n        }\n        PDFOperator.prototype.clone = function (context) {\n            var args = new Array(this.args.length);\n            for (var idx = 0, len = args.length; idx < len; idx++) {\n                var arg = this.args[idx];\n                args[idx] = arg instanceof PDFObject ? arg.clone(context) : arg;\n            }\n            return PDFOperator.of(this.name, args);\n        };\n        PDFOperator.prototype.toString = function () {\n            var value = '';\n            for (var idx = 0, len = this.args.length; idx < len; idx++) {\n                value += String(this.args[idx]) + ' ';\n            }\n            value += this.name;\n            return value;\n        };\n        PDFOperator.prototype.sizeInBytes = function () {\n            var size = 0;\n            for (var idx = 0, len = this.args.length; idx < len; idx++) {\n                var arg = this.args[idx];\n                size += (arg instanceof PDFObject ? arg.sizeInBytes() : arg.length) + 1;\n            }\n            size += this.name.length;\n            return size;\n        };\n        PDFOperator.prototype.copyBytesInto = function (buffer, offset) {\n            var initialOffset = offset;\n            for (var idx = 0, len = this.args.length; idx < len; idx++) {\n                var arg = this.args[idx];\n                if (arg instanceof PDFObject) {\n                    offset += arg.copyBytesInto(buffer, offset);\n                }\n                else {\n                    offset += copyStringIntoBuffer(arg, buffer, offset);\n                }\n                buffer[offset++] = CharCodes$1.Space;\n            }\n            offset += copyStringIntoBuffer(this.name, buffer, offset);\n            return offset - initialOffset;\n        };\n        PDFOperator.of = function (name, args) {\n            return new PDFOperator(name, args);\n        };\n        return PDFOperator;\n    }());\n\n    var PDFOperatorNames;\n    (function (PDFOperatorNames) {\n        // Non Stroking Color Operators\n        PDFOperatorNames[\"NonStrokingColor\"] = \"sc\";\n        PDFOperatorNames[\"NonStrokingColorN\"] = \"scn\";\n        PDFOperatorNames[\"NonStrokingColorRgb\"] = \"rg\";\n        PDFOperatorNames[\"NonStrokingColorGray\"] = \"g\";\n        PDFOperatorNames[\"NonStrokingColorCmyk\"] = \"k\";\n        PDFOperatorNames[\"NonStrokingColorspace\"] = \"cs\";\n        // Stroking Color Operators\n        PDFOperatorNames[\"StrokingColor\"] = \"SC\";\n        PDFOperatorNames[\"StrokingColorN\"] = \"SCN\";\n        PDFOperatorNames[\"StrokingColorRgb\"] = \"RG\";\n        PDFOperatorNames[\"StrokingColorGray\"] = \"G\";\n        PDFOperatorNames[\"StrokingColorCmyk\"] = \"K\";\n        PDFOperatorNames[\"StrokingColorspace\"] = \"CS\";\n        // Marked Content Operators\n        PDFOperatorNames[\"BeginMarkedContentSequence\"] = \"BDC\";\n        PDFOperatorNames[\"BeginMarkedContent\"] = \"BMC\";\n        PDFOperatorNames[\"EndMarkedContent\"] = \"EMC\";\n        PDFOperatorNames[\"MarkedContentPointWithProps\"] = \"DP\";\n        PDFOperatorNames[\"MarkedContentPoint\"] = \"MP\";\n        PDFOperatorNames[\"DrawObject\"] = \"Do\";\n        // Graphics State Operators\n        PDFOperatorNames[\"ConcatTransformationMatrix\"] = \"cm\";\n        PDFOperatorNames[\"PopGraphicsState\"] = \"Q\";\n        PDFOperatorNames[\"PushGraphicsState\"] = \"q\";\n        PDFOperatorNames[\"SetFlatness\"] = \"i\";\n        PDFOperatorNames[\"SetGraphicsStateParams\"] = \"gs\";\n        PDFOperatorNames[\"SetLineCapStyle\"] = \"J\";\n        PDFOperatorNames[\"SetLineDashPattern\"] = \"d\";\n        PDFOperatorNames[\"SetLineJoinStyle\"] = \"j\";\n        PDFOperatorNames[\"SetLineMiterLimit\"] = \"M\";\n        PDFOperatorNames[\"SetLineWidth\"] = \"w\";\n        PDFOperatorNames[\"SetTextMatrix\"] = \"Tm\";\n        PDFOperatorNames[\"SetRenderingIntent\"] = \"ri\";\n        // Graphics Operators\n        PDFOperatorNames[\"AppendRectangle\"] = \"re\";\n        PDFOperatorNames[\"BeginInlineImage\"] = \"BI\";\n        PDFOperatorNames[\"BeginInlineImageData\"] = \"ID\";\n        PDFOperatorNames[\"EndInlineImage\"] = \"EI\";\n        PDFOperatorNames[\"ClipEvenOdd\"] = \"W*\";\n        PDFOperatorNames[\"ClipNonZero\"] = \"W\";\n        PDFOperatorNames[\"CloseAndStroke\"] = \"s\";\n        PDFOperatorNames[\"CloseFillEvenOddAndStroke\"] = \"b*\";\n        PDFOperatorNames[\"CloseFillNonZeroAndStroke\"] = \"b\";\n        PDFOperatorNames[\"ClosePath\"] = \"h\";\n        PDFOperatorNames[\"AppendBezierCurve\"] = \"c\";\n        PDFOperatorNames[\"CurveToReplicateFinalPoint\"] = \"y\";\n        PDFOperatorNames[\"CurveToReplicateInitialPoint\"] = \"v\";\n        PDFOperatorNames[\"EndPath\"] = \"n\";\n        PDFOperatorNames[\"FillEvenOddAndStroke\"] = \"B*\";\n        PDFOperatorNames[\"FillEvenOdd\"] = \"f*\";\n        PDFOperatorNames[\"FillNonZeroAndStroke\"] = \"B\";\n        PDFOperatorNames[\"FillNonZero\"] = \"f\";\n        PDFOperatorNames[\"LegacyFillNonZero\"] = \"F\";\n        PDFOperatorNames[\"LineTo\"] = \"l\";\n        PDFOperatorNames[\"MoveTo\"] = \"m\";\n        PDFOperatorNames[\"ShadingFill\"] = \"sh\";\n        PDFOperatorNames[\"StrokePath\"] = \"S\";\n        // Text Operators\n        PDFOperatorNames[\"BeginText\"] = \"BT\";\n        PDFOperatorNames[\"EndText\"] = \"ET\";\n        PDFOperatorNames[\"MoveText\"] = \"Td\";\n        PDFOperatorNames[\"MoveTextSetLeading\"] = \"TD\";\n        PDFOperatorNames[\"NextLine\"] = \"T*\";\n        PDFOperatorNames[\"SetCharacterSpacing\"] = \"Tc\";\n        PDFOperatorNames[\"SetFontAndSize\"] = \"Tf\";\n        PDFOperatorNames[\"SetTextHorizontalScaling\"] = \"Tz\";\n        PDFOperatorNames[\"SetTextLineHeight\"] = \"TL\";\n        PDFOperatorNames[\"SetTextRenderingMode\"] = \"Tr\";\n        PDFOperatorNames[\"SetTextRise\"] = \"Ts\";\n        PDFOperatorNames[\"SetWordSpacing\"] = \"Tw\";\n        PDFOperatorNames[\"ShowText\"] = \"Tj\";\n        PDFOperatorNames[\"ShowTextAdjusted\"] = \"TJ\";\n        PDFOperatorNames[\"ShowTextLine\"] = \"'\";\n        PDFOperatorNames[\"ShowTextLineAndSpace\"] = \"\\\"\";\n        // Type3 Font Operators\n        PDFOperatorNames[\"Type3D0\"] = \"d0\";\n        PDFOperatorNames[\"Type3D1\"] = \"d1\";\n        // Compatibility Section Operators\n        PDFOperatorNames[\"BeginCompatibilitySection\"] = \"BX\";\n        PDFOperatorNames[\"EndCompatibilitySection\"] = \"EX\";\n    })(PDFOperatorNames || (PDFOperatorNames = {}));\n    var Ops = PDFOperatorNames;\n\n    var PDFFlateStream = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFFlateStream, _super);\n        function PDFFlateStream(dict, encode) {\n            var _this = _super.call(this, dict) || this;\n            _this.computeContents = function () {\n                var unencodedContents = _this.getUnencodedContents();\n                return _this.encode ? pako_1.deflate(unencodedContents) : unencodedContents;\n            };\n            _this.encode = encode;\n            if (encode)\n                dict.set(PDFName.of('Filter'), PDFName.of('FlateDecode'));\n            _this.contentsCache = Cache.populatedBy(_this.computeContents);\n            return _this;\n        }\n        PDFFlateStream.prototype.getContents = function () {\n            return this.contentsCache.access();\n        };\n        PDFFlateStream.prototype.getContentsSize = function () {\n            return this.contentsCache.access().length;\n        };\n        PDFFlateStream.prototype.getUnencodedContents = function () {\n            throw new MethodNotImplementedError(this.constructor.name, 'getUnencodedContents');\n        };\n        return PDFFlateStream;\n    }(PDFStream));\n\n    var PDFContentStream = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFContentStream, _super);\n        function PDFContentStream(dict, operators, encode) {\n            if (encode === void 0) { encode = true; }\n            var _this = _super.call(this, dict, encode) || this;\n            _this.operators = operators;\n            return _this;\n        }\n        PDFContentStream.prototype.push = function () {\n            var _a;\n            var operators = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                operators[_i] = arguments[_i];\n            }\n            (_a = this.operators).push.apply(_a, operators);\n        };\n        PDFContentStream.prototype.clone = function (context) {\n            var operators = new Array(this.operators.length);\n            for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n                operators[idx] = this.operators[idx].clone(context);\n            }\n            var _a = this, dict = _a.dict, encode = _a.encode;\n            return PDFContentStream.of(dict.clone(context), operators, encode);\n        };\n        PDFContentStream.prototype.getContentsString = function () {\n            var value = '';\n            for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n                value += this.operators[idx] + \"\\n\";\n            }\n            return value;\n        };\n        PDFContentStream.prototype.getUnencodedContents = function () {\n            var buffer = new Uint8Array(this.getUnencodedContentsSize());\n            var offset = 0;\n            for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n                offset += this.operators[idx].copyBytesInto(buffer, offset);\n                buffer[offset++] = CharCodes$1.Newline;\n            }\n            return buffer;\n        };\n        PDFContentStream.prototype.getUnencodedContentsSize = function () {\n            var size = 0;\n            for (var idx = 0, len = this.operators.length; idx < len; idx++) {\n                size += this.operators[idx].sizeInBytes() + 1;\n            }\n            return size;\n        };\n        PDFContentStream.of = function (dict, operators, encode) {\n            if (encode === void 0) { encode = true; }\n            return new PDFContentStream(dict, operators, encode);\n        };\n        return PDFContentStream;\n    }(PDFFlateStream));\n\n    /**\n     * Generates a pseudo random number. Although it is not cryptographically secure\n     * and uniformly distributed, it is not a concern for the intended use-case,\n     * which is to generate distinct numbers.\n     *\n     * Credit: https://stackoverflow.com/a/19303725/10254049\n     */\n    var SimpleRNG = /** @class */ (function () {\n        function SimpleRNG(seed) {\n            this.seed = seed;\n        }\n        SimpleRNG.prototype.nextInt = function () {\n            var x = Math.sin(this.seed++) * 10000;\n            return x - Math.floor(x);\n        };\n        SimpleRNG.withSeed = function (seed) { return new SimpleRNG(seed); };\n        return SimpleRNG;\n    }());\n\n    var byAscendingObjectNumber = function (_a, _b) {\n        var a = _a[0];\n        var b = _b[0];\n        return a.objectNumber - b.objectNumber;\n    };\n    var PDFContext = /** @class */ (function () {\n        function PDFContext() {\n            this.largestObjectNumber = 0;\n            this.header = PDFHeader.forVersion(1, 7);\n            this.trailerInfo = {};\n            this.indirectObjects = new Map();\n            this.rng = SimpleRNG.withSeed(1);\n        }\n        PDFContext.prototype.assign = function (ref, object) {\n            this.indirectObjects.set(ref, object);\n            if (ref.objectNumber > this.largestObjectNumber) {\n                this.largestObjectNumber = ref.objectNumber;\n            }\n        };\n        PDFContext.prototype.nextRef = function () {\n            this.largestObjectNumber += 1;\n            return PDFRef.of(this.largestObjectNumber);\n        };\n        PDFContext.prototype.register = function (object) {\n            var ref = this.nextRef();\n            this.assign(ref, object);\n            return ref;\n        };\n        PDFContext.prototype.delete = function (ref) {\n            return this.indirectObjects.delete(ref);\n        };\n        PDFContext.prototype.lookupMaybe = function (ref) {\n            var types = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                types[_i - 1] = arguments[_i];\n            }\n            // TODO: `preservePDFNull` is for backwards compatibility. Should be\n            // removed in next breaking API change.\n            var preservePDFNull = types.includes(PDFNull$1);\n            var result = ref instanceof PDFRef ? this.indirectObjects.get(ref) : ref;\n            if (!result || (result === PDFNull$1 && !preservePDFNull))\n                return undefined;\n            for (var idx = 0, len = types.length; idx < len; idx++) {\n                var type = types[idx];\n                if (type === PDFNull$1) {\n                    if (result === PDFNull$1)\n                        return result;\n                }\n                else {\n                    if (result instanceof type)\n                        return result;\n                }\n            }\n            throw new UnexpectedObjectTypeError(types, result);\n        };\n        PDFContext.prototype.lookup = function (ref) {\n            var types = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                types[_i - 1] = arguments[_i];\n            }\n            var result = ref instanceof PDFRef ? this.indirectObjects.get(ref) : ref;\n            if (types.length === 0)\n                return result;\n            for (var idx = 0, len = types.length; idx < len; idx++) {\n                var type = types[idx];\n                if (type === PDFNull$1) {\n                    if (result === PDFNull$1)\n                        return result;\n                }\n                else {\n                    if (result instanceof type)\n                        return result;\n                }\n            }\n            throw new UnexpectedObjectTypeError(types, result);\n        };\n        PDFContext.prototype.getObjectRef = function (pdfObject) {\n            var entries = Array.from(this.indirectObjects.entries());\n            for (var idx = 0, len = entries.length; idx < len; idx++) {\n                var _a = entries[idx], ref = _a[0], object = _a[1];\n                if (object === pdfObject) {\n                    return ref;\n                }\n            }\n            return undefined;\n        };\n        PDFContext.prototype.enumerateIndirectObjects = function () {\n            return Array.from(this.indirectObjects.entries()).sort(byAscendingObjectNumber);\n        };\n        PDFContext.prototype.obj = function (literal) {\n            if (literal instanceof PDFObject) {\n                return literal;\n            }\n            else if (literal === null || literal === undefined) {\n                return PDFNull$1;\n            }\n            else if (typeof literal === 'string') {\n                return PDFName.of(literal);\n            }\n            else if (typeof literal === 'number') {\n                return PDFNumber.of(literal);\n            }\n            else if (typeof literal === 'boolean') {\n                return literal ? PDFBool.True : PDFBool.False;\n            }\n            else if (Array.isArray(literal)) {\n                var array = PDFArray.withContext(this);\n                for (var idx = 0, len = literal.length; idx < len; idx++) {\n                    array.push(this.obj(literal[idx]));\n                }\n                return array;\n            }\n            else {\n                var dict = PDFDict.withContext(this);\n                var keys = Object.keys(literal);\n                for (var idx = 0, len = keys.length; idx < len; idx++) {\n                    var key = keys[idx];\n                    var value = literal[key];\n                    if (value !== undefined)\n                        dict.set(PDFName.of(key), this.obj(value));\n                }\n                return dict;\n            }\n        };\n        PDFContext.prototype.stream = function (contents, dict) {\n            if (dict === void 0) { dict = {}; }\n            return PDFRawStream.of(this.obj(dict), typedArrayFor(contents));\n        };\n        PDFContext.prototype.flateStream = function (contents, dict) {\n            if (dict === void 0) { dict = {}; }\n            return this.stream(pako_1.deflate(typedArrayFor(contents)), tslibExports.__assign(tslibExports.__assign({}, dict), { Filter: 'FlateDecode' }));\n        };\n        PDFContext.prototype.contentStream = function (operators, dict) {\n            if (dict === void 0) { dict = {}; }\n            return PDFContentStream.of(this.obj(dict), operators);\n        };\n        PDFContext.prototype.formXObject = function (operators, dict) {\n            if (dict === void 0) { dict = {}; }\n            return this.contentStream(operators, tslibExports.__assign(tslibExports.__assign({ BBox: this.obj([0, 0, 0, 0]), Matrix: this.obj([1, 0, 0, 1, 0, 0]) }, dict), { Type: 'XObject', Subtype: 'Form' }));\n        };\n        /*\n         * Reference to PDFContentStream that contains a single PDFOperator: `q`.\n         * Used by [[PDFPageLeaf]] instances to ensure that when content streams are\n         * added to a modified PDF, they start in the default, unchanged graphics\n         * state.\n         */\n        PDFContext.prototype.getPushGraphicsStateContentStream = function () {\n            if (this.pushGraphicsStateContentStreamRef) {\n                return this.pushGraphicsStateContentStreamRef;\n            }\n            var dict = this.obj({});\n            var op = PDFOperator.of(Ops.PushGraphicsState);\n            var stream = PDFContentStream.of(dict, [op]);\n            this.pushGraphicsStateContentStreamRef = this.register(stream);\n            return this.pushGraphicsStateContentStreamRef;\n        };\n        /*\n         * Reference to PDFContentStream that contains a single PDFOperator: `Q`.\n         * Used by [[PDFPageLeaf]] instances to ensure that when content streams are\n         * added to a modified PDF, they start in the default, unchanged graphics\n         * state.\n         */\n        PDFContext.prototype.getPopGraphicsStateContentStream = function () {\n            if (this.popGraphicsStateContentStreamRef) {\n                return this.popGraphicsStateContentStreamRef;\n            }\n            var dict = this.obj({});\n            var op = PDFOperator.of(Ops.PopGraphicsState);\n            var stream = PDFContentStream.of(dict, [op]);\n            this.popGraphicsStateContentStreamRef = this.register(stream);\n            return this.popGraphicsStateContentStreamRef;\n        };\n        PDFContext.prototype.addRandomSuffix = function (prefix, suffixLength) {\n            if (suffixLength === void 0) { suffixLength = 4; }\n            return prefix + \"-\" + Math.floor(this.rng.nextInt() * Math.pow(10, suffixLength));\n        };\n        PDFContext.create = function () { return new PDFContext(); };\n        return PDFContext;\n    }());\n\n    var PDFPageLeaf = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFPageLeaf, _super);\n        function PDFPageLeaf(map, context, autoNormalizeCTM) {\n            if (autoNormalizeCTM === void 0) { autoNormalizeCTM = true; }\n            var _this = _super.call(this, map, context) || this;\n            _this.normalized = false;\n            _this.autoNormalizeCTM = autoNormalizeCTM;\n            return _this;\n        }\n        PDFPageLeaf.prototype.clone = function (context) {\n            var clone = PDFPageLeaf.fromMapWithContext(new Map(), context || this.context, this.autoNormalizeCTM);\n            var entries = this.entries();\n            for (var idx = 0, len = entries.length; idx < len; idx++) {\n                var _a = entries[idx], key = _a[0], value = _a[1];\n                clone.set(key, value);\n            }\n            return clone;\n        };\n        PDFPageLeaf.prototype.Parent = function () {\n            return this.lookupMaybe(PDFName.Parent, PDFDict);\n        };\n        PDFPageLeaf.prototype.Contents = function () {\n            return this.lookup(PDFName.of('Contents'));\n        };\n        PDFPageLeaf.prototype.Annots = function () {\n            return this.lookupMaybe(PDFName.Annots, PDFArray);\n        };\n        PDFPageLeaf.prototype.BleedBox = function () {\n            return this.lookupMaybe(PDFName.BleedBox, PDFArray);\n        };\n        PDFPageLeaf.prototype.TrimBox = function () {\n            return this.lookupMaybe(PDFName.TrimBox, PDFArray);\n        };\n        PDFPageLeaf.prototype.ArtBox = function () {\n            return this.lookupMaybe(PDFName.ArtBox, PDFArray);\n        };\n        PDFPageLeaf.prototype.Resources = function () {\n            var dictOrRef = this.getInheritableAttribute(PDFName.Resources);\n            return this.context.lookupMaybe(dictOrRef, PDFDict);\n        };\n        PDFPageLeaf.prototype.MediaBox = function () {\n            var arrayOrRef = this.getInheritableAttribute(PDFName.MediaBox);\n            return this.context.lookup(arrayOrRef, PDFArray);\n        };\n        PDFPageLeaf.prototype.CropBox = function () {\n            var arrayOrRef = this.getInheritableAttribute(PDFName.CropBox);\n            return this.context.lookupMaybe(arrayOrRef, PDFArray);\n        };\n        PDFPageLeaf.prototype.Rotate = function () {\n            var numberOrRef = this.getInheritableAttribute(PDFName.Rotate);\n            return this.context.lookupMaybe(numberOrRef, PDFNumber);\n        };\n        PDFPageLeaf.prototype.getInheritableAttribute = function (name) {\n            var attribute;\n            this.ascend(function (node) {\n                if (!attribute)\n                    attribute = node.get(name);\n            });\n            return attribute;\n        };\n        PDFPageLeaf.prototype.setParent = function (parentRef) {\n            this.set(PDFName.Parent, parentRef);\n        };\n        PDFPageLeaf.prototype.addContentStream = function (contentStreamRef) {\n            var Contents = this.normalizedEntries().Contents || this.context.obj([]);\n            this.set(PDFName.Contents, Contents);\n            Contents.push(contentStreamRef);\n        };\n        PDFPageLeaf.prototype.wrapContentStreams = function (startStream, endStream) {\n            var Contents = this.Contents();\n            if (Contents instanceof PDFArray) {\n                Contents.insert(0, startStream);\n                Contents.push(endStream);\n                return true;\n            }\n            return false;\n        };\n        PDFPageLeaf.prototype.addAnnot = function (annotRef) {\n            var Annots = this.normalizedEntries().Annots;\n            Annots.push(annotRef);\n        };\n        PDFPageLeaf.prototype.removeAnnot = function (annotRef) {\n            var Annots = this.normalizedEntries().Annots;\n            var index = Annots.indexOf(annotRef);\n            if (index !== undefined) {\n                Annots.remove(index);\n            }\n        };\n        PDFPageLeaf.prototype.setFontDictionary = function (name, fontDictRef) {\n            var Font = this.normalizedEntries().Font;\n            Font.set(name, fontDictRef);\n        };\n        PDFPageLeaf.prototype.newFontDictionaryKey = function (tag) {\n            var Font = this.normalizedEntries().Font;\n            return Font.uniqueKey(tag);\n        };\n        PDFPageLeaf.prototype.newFontDictionary = function (tag, fontDictRef) {\n            var key = this.newFontDictionaryKey(tag);\n            this.setFontDictionary(key, fontDictRef);\n            return key;\n        };\n        PDFPageLeaf.prototype.setXObject = function (name, xObjectRef) {\n            var XObject = this.normalizedEntries().XObject;\n            XObject.set(name, xObjectRef);\n        };\n        PDFPageLeaf.prototype.newXObjectKey = function (tag) {\n            var XObject = this.normalizedEntries().XObject;\n            return XObject.uniqueKey(tag);\n        };\n        PDFPageLeaf.prototype.newXObject = function (tag, xObjectRef) {\n            var key = this.newXObjectKey(tag);\n            this.setXObject(key, xObjectRef);\n            return key;\n        };\n        PDFPageLeaf.prototype.setExtGState = function (name, extGStateRef) {\n            var ExtGState = this.normalizedEntries().ExtGState;\n            ExtGState.set(name, extGStateRef);\n        };\n        PDFPageLeaf.prototype.newExtGStateKey = function (tag) {\n            var ExtGState = this.normalizedEntries().ExtGState;\n            return ExtGState.uniqueKey(tag);\n        };\n        PDFPageLeaf.prototype.newExtGState = function (tag, extGStateRef) {\n            var key = this.newExtGStateKey(tag);\n            this.setExtGState(key, extGStateRef);\n            return key;\n        };\n        PDFPageLeaf.prototype.ascend = function (visitor) {\n            visitor(this);\n            var Parent = this.Parent();\n            if (Parent)\n                Parent.ascend(visitor);\n        };\n        PDFPageLeaf.prototype.normalize = function () {\n            if (this.normalized)\n                return;\n            var context = this.context;\n            var contentsRef = this.get(PDFName.Contents);\n            var contents = this.context.lookup(contentsRef);\n            if (contents instanceof PDFStream) {\n                this.set(PDFName.Contents, context.obj([contentsRef]));\n            }\n            if (this.autoNormalizeCTM) {\n                this.wrapContentStreams(this.context.getPushGraphicsStateContentStream(), this.context.getPopGraphicsStateContentStream());\n            }\n            // TODO: Clone `Resources` if it is inherited\n            var dictOrRef = this.getInheritableAttribute(PDFName.Resources);\n            var Resources = context.lookupMaybe(dictOrRef, PDFDict) || context.obj({});\n            this.set(PDFName.Resources, Resources);\n            // TODO: Clone `Font` if it is inherited\n            var Font = Resources.lookupMaybe(PDFName.Font, PDFDict) || context.obj({});\n            Resources.set(PDFName.Font, Font);\n            // TODO: Clone `XObject` if it is inherited\n            var XObject = Resources.lookupMaybe(PDFName.XObject, PDFDict) || context.obj({});\n            Resources.set(PDFName.XObject, XObject);\n            // TODO: Clone `ExtGState` if it is inherited\n            var ExtGState = Resources.lookupMaybe(PDFName.ExtGState, PDFDict) || context.obj({});\n            Resources.set(PDFName.ExtGState, ExtGState);\n            var Annots = this.Annots() || context.obj([]);\n            this.set(PDFName.Annots, Annots);\n            this.normalized = true;\n        };\n        PDFPageLeaf.prototype.normalizedEntries = function () {\n            this.normalize();\n            var Annots = this.Annots();\n            var Resources = this.Resources();\n            var Contents = this.Contents();\n            return {\n                Annots: Annots,\n                Resources: Resources,\n                Contents: Contents,\n                Font: Resources.lookup(PDFName.Font, PDFDict),\n                XObject: Resources.lookup(PDFName.XObject, PDFDict),\n                ExtGState: Resources.lookup(PDFName.ExtGState, PDFDict),\n            };\n        };\n        PDFPageLeaf.InheritableEntries = [\n            'Resources',\n            'MediaBox',\n            'CropBox',\n            'Rotate',\n        ];\n        PDFPageLeaf.withContextAndParent = function (context, parent) {\n            var dict = new Map();\n            dict.set(PDFName.Type, PDFName.Page);\n            dict.set(PDFName.Parent, parent);\n            dict.set(PDFName.Resources, context.obj({}));\n            dict.set(PDFName.MediaBox, context.obj([0, 0, 612, 792]));\n            return new PDFPageLeaf(dict, context, false);\n        };\n        PDFPageLeaf.fromMapWithContext = function (map, context, autoNormalizeCTM) {\n            if (autoNormalizeCTM === void 0) { autoNormalizeCTM = true; }\n            return new PDFPageLeaf(map, context, autoNormalizeCTM);\n        };\n        return PDFPageLeaf;\n    }(PDFDict));\n\n    /**\n     * PDFObjectCopier copies PDFObjects from a src context to a dest context.\n     * The primary use case for this is to copy pages between PDFs.\n     *\n     * _Copying_ an object with a PDFObjectCopier is different from _cloning_ an\n     * object with its [[PDFObject.clone]] method:\n     *\n     * ```\n     *   const src: PDFContext = ...\n     *   const dest: PDFContext = ...\n     *   const originalObject: PDFObject = ...\n     *   const copiedObject = PDFObjectCopier.for(src, dest).copy(originalObject);\n     *   const clonedObject = originalObject.clone();\n     * ```\n     *\n     * Copying an object is equivalent to cloning it and then copying over any other\n     * objects that it references. Note that only dictionaries, arrays, and streams\n     * (or structures build from them) can contain indirect references to other\n     * objects. Copying a PDFObject that is not a dictionary, array, or stream is\n     * supported, but is equivalent to cloning it.\n     */\n    var PDFObjectCopier = /** @class */ (function () {\n        function PDFObjectCopier(src, dest) {\n            var _this = this;\n            this.traversedObjects = new Map();\n            // prettier-ignore\n            this.copy = function (object) { return (object instanceof PDFPageLeaf ? _this.copyPDFPage(object)\n                : object instanceof PDFDict ? _this.copyPDFDict(object)\n                    : object instanceof PDFArray ? _this.copyPDFArray(object)\n                        : object instanceof PDFStream ? _this.copyPDFStream(object)\n                            : object instanceof PDFRef ? _this.copyPDFIndirectObject(object)\n                                : object.clone()); };\n            this.copyPDFPage = function (originalPage) {\n                var clonedPage = originalPage.clone();\n                // Move any entries that the originalPage is inheriting from its parent\n                // tree nodes directly into originalPage so they are preserved during\n                // the copy.\n                var InheritableEntries = PDFPageLeaf.InheritableEntries;\n                for (var idx = 0, len = InheritableEntries.length; idx < len; idx++) {\n                    var key = PDFName.of(InheritableEntries[idx]);\n                    var value = clonedPage.getInheritableAttribute(key);\n                    if (!clonedPage.get(key) && value)\n                        clonedPage.set(key, value);\n                }\n                // Remove the parent reference to prevent the whole donor document's page\n                // tree from being copied when we only need a single page.\n                clonedPage.delete(PDFName.of('Parent'));\n                return _this.copyPDFDict(clonedPage);\n            };\n            this.copyPDFDict = function (originalDict) {\n                if (_this.traversedObjects.has(originalDict)) {\n                    return _this.traversedObjects.get(originalDict);\n                }\n                var clonedDict = originalDict.clone(_this.dest);\n                _this.traversedObjects.set(originalDict, clonedDict);\n                var entries = originalDict.entries();\n                for (var idx = 0, len = entries.length; idx < len; idx++) {\n                    var _a = entries[idx], key = _a[0], value = _a[1];\n                    clonedDict.set(key, _this.copy(value));\n                }\n                return clonedDict;\n            };\n            this.copyPDFArray = function (originalArray) {\n                if (_this.traversedObjects.has(originalArray)) {\n                    return _this.traversedObjects.get(originalArray);\n                }\n                var clonedArray = originalArray.clone(_this.dest);\n                _this.traversedObjects.set(originalArray, clonedArray);\n                for (var idx = 0, len = originalArray.size(); idx < len; idx++) {\n                    var value = originalArray.get(idx);\n                    clonedArray.set(idx, _this.copy(value));\n                }\n                return clonedArray;\n            };\n            this.copyPDFStream = function (originalStream) {\n                if (_this.traversedObjects.has(originalStream)) {\n                    return _this.traversedObjects.get(originalStream);\n                }\n                var clonedStream = originalStream.clone(_this.dest);\n                _this.traversedObjects.set(originalStream, clonedStream);\n                var entries = originalStream.dict.entries();\n                for (var idx = 0, len = entries.length; idx < len; idx++) {\n                    var _a = entries[idx], key = _a[0], value = _a[1];\n                    clonedStream.dict.set(key, _this.copy(value));\n                }\n                return clonedStream;\n            };\n            this.copyPDFIndirectObject = function (ref) {\n                var alreadyMapped = _this.traversedObjects.has(ref);\n                if (!alreadyMapped) {\n                    var newRef = _this.dest.nextRef();\n                    _this.traversedObjects.set(ref, newRef);\n                    var dereferencedValue = _this.src.lookup(ref);\n                    if (dereferencedValue) {\n                        var cloned = _this.copy(dereferencedValue);\n                        _this.dest.assign(newRef, cloned);\n                    }\n                }\n                return _this.traversedObjects.get(ref);\n            };\n            this.src = src;\n            this.dest = dest;\n        }\n        PDFObjectCopier.for = function (src, dest) {\n            return new PDFObjectCopier(src, dest);\n        };\n        return PDFObjectCopier;\n    }());\n\n    /**\n     * Entries should be added using the [[addEntry]] and [[addDeletedEntry]]\n     * methods **in order of ascending object number**.\n     */\n    var PDFCrossRefSection = /** @class */ (function () {\n        function PDFCrossRefSection(firstEntry) {\n            this.subsections = firstEntry ? [[firstEntry]] : [];\n            this.chunkIdx = 0;\n            this.chunkLength = firstEntry ? 1 : 0;\n        }\n        PDFCrossRefSection.prototype.addEntry = function (ref, offset) {\n            this.append({ ref: ref, offset: offset, deleted: false });\n        };\n        PDFCrossRefSection.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n            this.append({ ref: ref, offset: nextFreeObjectNumber, deleted: true });\n        };\n        PDFCrossRefSection.prototype.toString = function () {\n            var section = \"xref\\n\";\n            for (var rangeIdx = 0, rangeLen = this.subsections.length; rangeIdx < rangeLen; rangeIdx++) {\n                var range = this.subsections[rangeIdx];\n                section += range[0].ref.objectNumber + \" \" + range.length + \"\\n\";\n                for (var entryIdx = 0, entryLen = range.length; entryIdx < entryLen; entryIdx++) {\n                    var entry = range[entryIdx];\n                    section += padStart$1(String(entry.offset), 10, '0');\n                    section += ' ';\n                    section += padStart$1(String(entry.ref.generationNumber), 5, '0');\n                    section += ' ';\n                    section += entry.deleted ? 'f' : 'n';\n                    section += ' \\n';\n                }\n            }\n            return section;\n        };\n        PDFCrossRefSection.prototype.sizeInBytes = function () {\n            var size = 5;\n            for (var idx = 0, len = this.subsections.length; idx < len; idx++) {\n                var subsection = this.subsections[idx];\n                var subsectionLength = subsection.length;\n                var firstEntry = subsection[0];\n                size += 2;\n                size += String(firstEntry.ref.objectNumber).length;\n                size += String(subsectionLength).length;\n                size += 20 * subsectionLength;\n            }\n            return size;\n        };\n        PDFCrossRefSection.prototype.copyBytesInto = function (buffer, offset) {\n            var initialOffset = offset;\n            buffer[offset++] = CharCodes$1.x;\n            buffer[offset++] = CharCodes$1.r;\n            buffer[offset++] = CharCodes$1.e;\n            buffer[offset++] = CharCodes$1.f;\n            buffer[offset++] = CharCodes$1.Newline;\n            offset += this.copySubsectionsIntoBuffer(this.subsections, buffer, offset);\n            return offset - initialOffset;\n        };\n        PDFCrossRefSection.prototype.copySubsectionsIntoBuffer = function (subsections, buffer, offset) {\n            var initialOffset = offset;\n            var length = subsections.length;\n            for (var idx = 0; idx < length; idx++) {\n                var subsection = this.subsections[idx];\n                var firstObjectNumber = String(subsection[0].ref.objectNumber);\n                offset += copyStringIntoBuffer(firstObjectNumber, buffer, offset);\n                buffer[offset++] = CharCodes$1.Space;\n                var rangeLength = String(subsection.length);\n                offset += copyStringIntoBuffer(rangeLength, buffer, offset);\n                buffer[offset++] = CharCodes$1.Newline;\n                offset += this.copyEntriesIntoBuffer(subsection, buffer, offset);\n            }\n            return offset - initialOffset;\n        };\n        PDFCrossRefSection.prototype.copyEntriesIntoBuffer = function (entries, buffer, offset) {\n            var length = entries.length;\n            for (var idx = 0; idx < length; idx++) {\n                var entry = entries[idx];\n                var entryOffset = padStart$1(String(entry.offset), 10, '0');\n                offset += copyStringIntoBuffer(entryOffset, buffer, offset);\n                buffer[offset++] = CharCodes$1.Space;\n                var entryGen = padStart$1(String(entry.ref.generationNumber), 5, '0');\n                offset += copyStringIntoBuffer(entryGen, buffer, offset);\n                buffer[offset++] = CharCodes$1.Space;\n                buffer[offset++] = entry.deleted ? CharCodes$1.f : CharCodes$1.n;\n                buffer[offset++] = CharCodes$1.Space;\n                buffer[offset++] = CharCodes$1.Newline;\n            }\n            return 20 * length;\n        };\n        PDFCrossRefSection.prototype.append = function (currEntry) {\n            if (this.chunkLength === 0) {\n                this.subsections.push([currEntry]);\n                this.chunkIdx = 0;\n                this.chunkLength = 1;\n                return;\n            }\n            var chunk = this.subsections[this.chunkIdx];\n            var prevEntry = chunk[this.chunkLength - 1];\n            if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n                this.subsections.push([currEntry]);\n                this.chunkIdx += 1;\n                this.chunkLength = 1;\n            }\n            else {\n                chunk.push(currEntry);\n                this.chunkLength += 1;\n            }\n        };\n        PDFCrossRefSection.create = function () {\n            return new PDFCrossRefSection({\n                ref: PDFRef.of(0, 65535),\n                offset: 0,\n                deleted: true,\n            });\n        };\n        PDFCrossRefSection.createEmpty = function () { return new PDFCrossRefSection(); };\n        return PDFCrossRefSection;\n    }());\n\n    var PDFTrailer = /** @class */ (function () {\n        function PDFTrailer(lastXRefOffset) {\n            this.lastXRefOffset = String(lastXRefOffset);\n        }\n        PDFTrailer.prototype.toString = function () {\n            return \"startxref\\n\" + this.lastXRefOffset + \"\\n%%EOF\";\n        };\n        PDFTrailer.prototype.sizeInBytes = function () {\n            return 16 + this.lastXRefOffset.length;\n        };\n        PDFTrailer.prototype.copyBytesInto = function (buffer, offset) {\n            var initialOffset = offset;\n            buffer[offset++] = CharCodes$1.s;\n            buffer[offset++] = CharCodes$1.t;\n            buffer[offset++] = CharCodes$1.a;\n            buffer[offset++] = CharCodes$1.r;\n            buffer[offset++] = CharCodes$1.t;\n            buffer[offset++] = CharCodes$1.x;\n            buffer[offset++] = CharCodes$1.r;\n            buffer[offset++] = CharCodes$1.e;\n            buffer[offset++] = CharCodes$1.f;\n            buffer[offset++] = CharCodes$1.Newline;\n            offset += copyStringIntoBuffer(this.lastXRefOffset, buffer, offset);\n            buffer[offset++] = CharCodes$1.Newline;\n            buffer[offset++] = CharCodes$1.Percent;\n            buffer[offset++] = CharCodes$1.Percent;\n            buffer[offset++] = CharCodes$1.E;\n            buffer[offset++] = CharCodes$1.O;\n            buffer[offset++] = CharCodes$1.F;\n            return offset - initialOffset;\n        };\n        PDFTrailer.forLastCrossRefSectionOffset = function (offset) {\n            return new PDFTrailer(offset);\n        };\n        return PDFTrailer;\n    }());\n\n    var PDFTrailerDict = /** @class */ (function () {\n        function PDFTrailerDict(dict) {\n            this.dict = dict;\n        }\n        PDFTrailerDict.prototype.toString = function () {\n            return \"trailer\\n\" + this.dict.toString();\n        };\n        PDFTrailerDict.prototype.sizeInBytes = function () {\n            return 8 + this.dict.sizeInBytes();\n        };\n        PDFTrailerDict.prototype.copyBytesInto = function (buffer, offset) {\n            var initialOffset = offset;\n            buffer[offset++] = CharCodes$1.t;\n            buffer[offset++] = CharCodes$1.r;\n            buffer[offset++] = CharCodes$1.a;\n            buffer[offset++] = CharCodes$1.i;\n            buffer[offset++] = CharCodes$1.l;\n            buffer[offset++] = CharCodes$1.e;\n            buffer[offset++] = CharCodes$1.r;\n            buffer[offset++] = CharCodes$1.Newline;\n            offset += this.dict.copyBytesInto(buffer, offset);\n            return offset - initialOffset;\n        };\n        PDFTrailerDict.of = function (dict) { return new PDFTrailerDict(dict); };\n        return PDFTrailerDict;\n    }());\n\n    var PDFObjectStream = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFObjectStream, _super);\n        function PDFObjectStream(context, objects, encode) {\n            if (encode === void 0) { encode = true; }\n            var _this = _super.call(this, context.obj({}), encode) || this;\n            _this.objects = objects;\n            _this.offsets = _this.computeObjectOffsets();\n            _this.offsetsString = _this.computeOffsetsString();\n            _this.dict.set(PDFName.of('Type'), PDFName.of('ObjStm'));\n            _this.dict.set(PDFName.of('N'), PDFNumber.of(_this.objects.length));\n            _this.dict.set(PDFName.of('First'), PDFNumber.of(_this.offsetsString.length));\n            return _this;\n        }\n        PDFObjectStream.prototype.getObjectsCount = function () {\n            return this.objects.length;\n        };\n        PDFObjectStream.prototype.clone = function (context) {\n            return PDFObjectStream.withContextAndObjects(context || this.dict.context, this.objects.slice(), this.encode);\n        };\n        PDFObjectStream.prototype.getContentsString = function () {\n            var value = this.offsetsString;\n            for (var idx = 0, len = this.objects.length; idx < len; idx++) {\n                var _a = this.objects[idx], object = _a[1];\n                value += object + \"\\n\";\n            }\n            return value;\n        };\n        PDFObjectStream.prototype.getUnencodedContents = function () {\n            var buffer = new Uint8Array(this.getUnencodedContentsSize());\n            var offset = copyStringIntoBuffer(this.offsetsString, buffer, 0);\n            for (var idx = 0, len = this.objects.length; idx < len; idx++) {\n                var _a = this.objects[idx], object = _a[1];\n                offset += object.copyBytesInto(buffer, offset);\n                buffer[offset++] = CharCodes$1.Newline;\n            }\n            return buffer;\n        };\n        PDFObjectStream.prototype.getUnencodedContentsSize = function () {\n            return (this.offsetsString.length +\n                last(this.offsets)[1] +\n                last(this.objects)[1].sizeInBytes() +\n                1);\n        };\n        PDFObjectStream.prototype.computeOffsetsString = function () {\n            var offsetsString = '';\n            for (var idx = 0, len = this.offsets.length; idx < len; idx++) {\n                var _a = this.offsets[idx], objectNumber = _a[0], offset = _a[1];\n                offsetsString += objectNumber + \" \" + offset + \" \";\n            }\n            return offsetsString;\n        };\n        PDFObjectStream.prototype.computeObjectOffsets = function () {\n            var offset = 0;\n            var offsets = new Array(this.objects.length);\n            for (var idx = 0, len = this.objects.length; idx < len; idx++) {\n                var _a = this.objects[idx], ref = _a[0], object = _a[1];\n                offsets[idx] = [ref.objectNumber, offset];\n                offset += object.sizeInBytes() + 1; // '\\n'\n            }\n            return offsets;\n        };\n        PDFObjectStream.withContextAndObjects = function (context, objects, encode) {\n            if (encode === void 0) { encode = true; }\n            return new PDFObjectStream(context, objects, encode);\n        };\n        return PDFObjectStream;\n    }(PDFFlateStream));\n\n    var PDFWriter = /** @class */ (function () {\n        function PDFWriter(context, objectsPerTick) {\n            var _this = this;\n            this.parsedObjects = 0;\n            this.shouldWaitForTick = function (n) {\n                _this.parsedObjects += n;\n                return _this.parsedObjects % _this.objectsPerTick === 0;\n            };\n            this.context = context;\n            this.objectsPerTick = objectsPerTick;\n        }\n        PDFWriter.prototype.serializeToBuffer = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var _a, size, header, indirectObjects, xref, trailerDict, trailer, offset, buffer, idx, len, _b, ref, object, objectNumber, generationNumber, n;\n                return tslibExports.__generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0: return [4 /*yield*/, this.computeBufferSize()];\n                        case 1:\n                            _a = _c.sent(), size = _a.size, header = _a.header, indirectObjects = _a.indirectObjects, xref = _a.xref, trailerDict = _a.trailerDict, trailer = _a.trailer;\n                            offset = 0;\n                            buffer = new Uint8Array(size);\n                            offset += header.copyBytesInto(buffer, offset);\n                            buffer[offset++] = CharCodes$1.Newline;\n                            buffer[offset++] = CharCodes$1.Newline;\n                            idx = 0, len = indirectObjects.length;\n                            _c.label = 2;\n                        case 2:\n                            if (!(idx < len)) return [3 /*break*/, 5];\n                            _b = indirectObjects[idx], ref = _b[0], object = _b[1];\n                            objectNumber = String(ref.objectNumber);\n                            offset += copyStringIntoBuffer(objectNumber, buffer, offset);\n                            buffer[offset++] = CharCodes$1.Space;\n                            generationNumber = String(ref.generationNumber);\n                            offset += copyStringIntoBuffer(generationNumber, buffer, offset);\n                            buffer[offset++] = CharCodes$1.Space;\n                            buffer[offset++] = CharCodes$1.o;\n                            buffer[offset++] = CharCodes$1.b;\n                            buffer[offset++] = CharCodes$1.j;\n                            buffer[offset++] = CharCodes$1.Newline;\n                            offset += object.copyBytesInto(buffer, offset);\n                            buffer[offset++] = CharCodes$1.Newline;\n                            buffer[offset++] = CharCodes$1.e;\n                            buffer[offset++] = CharCodes$1.n;\n                            buffer[offset++] = CharCodes$1.d;\n                            buffer[offset++] = CharCodes$1.o;\n                            buffer[offset++] = CharCodes$1.b;\n                            buffer[offset++] = CharCodes$1.j;\n                            buffer[offset++] = CharCodes$1.Newline;\n                            buffer[offset++] = CharCodes$1.Newline;\n                            n = object instanceof PDFObjectStream ? object.getObjectsCount() : 1;\n                            if (!this.shouldWaitForTick(n)) return [3 /*break*/, 4];\n                            return [4 /*yield*/, waitForTick()];\n                        case 3:\n                            _c.sent();\n                            _c.label = 4;\n                        case 4:\n                            idx++;\n                            return [3 /*break*/, 2];\n                        case 5:\n                            if (xref) {\n                                offset += xref.copyBytesInto(buffer, offset);\n                                buffer[offset++] = CharCodes$1.Newline;\n                            }\n                            if (trailerDict) {\n                                offset += trailerDict.copyBytesInto(buffer, offset);\n                                buffer[offset++] = CharCodes$1.Newline;\n                                buffer[offset++] = CharCodes$1.Newline;\n                            }\n                            offset += trailer.copyBytesInto(buffer, offset);\n                            return [2 /*return*/, buffer];\n                    }\n                });\n            });\n        };\n        PDFWriter.prototype.computeIndirectObjectSize = function (_a) {\n            var ref = _a[0], object = _a[1];\n            var refSize = ref.sizeInBytes() + 3; // 'R' -> 'obj\\n'\n            var objectSize = object.sizeInBytes() + 9; // '\\nendobj\\n\\n'\n            return refSize + objectSize;\n        };\n        PDFWriter.prototype.createTrailerDict = function () {\n            return this.context.obj({\n                Size: this.context.largestObjectNumber + 1,\n                Root: this.context.trailerInfo.Root,\n                Encrypt: this.context.trailerInfo.Encrypt,\n                Info: this.context.trailerInfo.Info,\n                ID: this.context.trailerInfo.ID,\n            });\n        };\n        PDFWriter.prototype.computeBufferSize = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var header, size, xref, indirectObjects, idx, len, indirectObject, ref, xrefOffset, trailerDict, trailer;\n                return tslibExports.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            header = PDFHeader.forVersion(1, 7);\n                            size = header.sizeInBytes() + 2;\n                            xref = PDFCrossRefSection.create();\n                            indirectObjects = this.context.enumerateIndirectObjects();\n                            idx = 0, len = indirectObjects.length;\n                            _a.label = 1;\n                        case 1:\n                            if (!(idx < len)) return [3 /*break*/, 4];\n                            indirectObject = indirectObjects[idx];\n                            ref = indirectObject[0];\n                            xref.addEntry(ref, size);\n                            size += this.computeIndirectObjectSize(indirectObject);\n                            if (!this.shouldWaitForTick(1)) return [3 /*break*/, 3];\n                            return [4 /*yield*/, waitForTick()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3:\n                            idx++;\n                            return [3 /*break*/, 1];\n                        case 4:\n                            xrefOffset = size;\n                            size += xref.sizeInBytes() + 1; // '\\n'\n                            trailerDict = PDFTrailerDict.of(this.createTrailerDict());\n                            size += trailerDict.sizeInBytes() + 2; // '\\n\\n'\n                            trailer = PDFTrailer.forLastCrossRefSectionOffset(xrefOffset);\n                            size += trailer.sizeInBytes();\n                            return [2 /*return*/, { size: size, header: header, indirectObjects: indirectObjects, xref: xref, trailerDict: trailerDict, trailer: trailer }];\n                    }\n                });\n            });\n        };\n        PDFWriter.forContext = function (context, objectsPerTick) {\n            return new PDFWriter(context, objectsPerTick);\n        };\n        return PDFWriter;\n    }());\n\n    var PDFInvalidObject = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFInvalidObject, _super);\n        function PDFInvalidObject(data) {\n            var _this = _super.call(this) || this;\n            _this.data = data;\n            return _this;\n        }\n        PDFInvalidObject.prototype.clone = function () {\n            return PDFInvalidObject.of(this.data.slice());\n        };\n        PDFInvalidObject.prototype.toString = function () {\n            return \"PDFInvalidObject(\" + this.data.length + \" bytes)\";\n        };\n        PDFInvalidObject.prototype.sizeInBytes = function () {\n            return this.data.length;\n        };\n        PDFInvalidObject.prototype.copyBytesInto = function (buffer, offset) {\n            var length = this.data.length;\n            for (var idx = 0; idx < length; idx++) {\n                buffer[offset++] = this.data[idx];\n            }\n            return length;\n        };\n        PDFInvalidObject.of = function (data) { return new PDFInvalidObject(data); };\n        return PDFInvalidObject;\n    }(PDFObject));\n\n    var EntryType;\n    (function (EntryType) {\n        EntryType[EntryType[\"Deleted\"] = 0] = \"Deleted\";\n        EntryType[EntryType[\"Uncompressed\"] = 1] = \"Uncompressed\";\n        EntryType[EntryType[\"Compressed\"] = 2] = \"Compressed\";\n    })(EntryType || (EntryType = {}));\n    /**\n     * Entries should be added using the [[addDeletedEntry]],\n     * [[addUncompressedEntry]], and [[addCompressedEntry]] methods\n     * **in order of ascending object number**.\n     */\n    var PDFCrossRefStream = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFCrossRefStream, _super);\n        function PDFCrossRefStream(dict, entries, encode) {\n            if (encode === void 0) { encode = true; }\n            var _this = _super.call(this, dict, encode) || this;\n            // Returns an array of integer pairs for each subsection of the cross ref\n            // section, where each integer pair represents:\n            //   firstObjectNumber(OfSection), length(OfSection)\n            _this.computeIndex = function () {\n                var subsections = [];\n                var subsectionLength = 0;\n                for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n                    var currEntry = _this.entries[idx];\n                    var prevEntry = _this.entries[idx - 1];\n                    if (idx === 0) {\n                        subsections.push(currEntry.ref.objectNumber);\n                    }\n                    else if (currEntry.ref.objectNumber - prevEntry.ref.objectNumber > 1) {\n                        subsections.push(subsectionLength);\n                        subsections.push(currEntry.ref.objectNumber);\n                        subsectionLength = 0;\n                    }\n                    subsectionLength += 1;\n                }\n                subsections.push(subsectionLength);\n                return subsections;\n            };\n            _this.computeEntryTuples = function () {\n                var entryTuples = new Array(_this.entries.length);\n                for (var idx = 0, len = _this.entries.length; idx < len; idx++) {\n                    var entry = _this.entries[idx];\n                    if (entry.type === EntryType.Deleted) {\n                        var type = entry.type, nextFreeObjectNumber = entry.nextFreeObjectNumber, ref = entry.ref;\n                        entryTuples[idx] = [type, nextFreeObjectNumber, ref.generationNumber];\n                    }\n                    if (entry.type === EntryType.Uncompressed) {\n                        var type = entry.type, offset = entry.offset, ref = entry.ref;\n                        entryTuples[idx] = [type, offset, ref.generationNumber];\n                    }\n                    if (entry.type === EntryType.Compressed) {\n                        var type = entry.type, objectStreamRef = entry.objectStreamRef, index = entry.index;\n                        entryTuples[idx] = [type, objectStreamRef.objectNumber, index];\n                    }\n                }\n                return entryTuples;\n            };\n            _this.computeMaxEntryByteWidths = function () {\n                var entryTuples = _this.entryTuplesCache.access();\n                var widths = [0, 0, 0];\n                for (var idx = 0, len = entryTuples.length; idx < len; idx++) {\n                    var _a = entryTuples[idx], first = _a[0], second = _a[1], third = _a[2];\n                    var firstSize = sizeInBytes(first);\n                    var secondSize = sizeInBytes(second);\n                    var thirdSize = sizeInBytes(third);\n                    if (firstSize > widths[0])\n                        widths[0] = firstSize;\n                    if (secondSize > widths[1])\n                        widths[1] = secondSize;\n                    if (thirdSize > widths[2])\n                        widths[2] = thirdSize;\n                }\n                return widths;\n            };\n            _this.entries = entries || [];\n            _this.entryTuplesCache = Cache.populatedBy(_this.computeEntryTuples);\n            _this.maxByteWidthsCache = Cache.populatedBy(_this.computeMaxEntryByteWidths);\n            _this.indexCache = Cache.populatedBy(_this.computeIndex);\n            dict.set(PDFName.of('Type'), PDFName.of('XRef'));\n            return _this;\n        }\n        PDFCrossRefStream.prototype.addDeletedEntry = function (ref, nextFreeObjectNumber) {\n            var type = EntryType.Deleted;\n            this.entries.push({ type: type, ref: ref, nextFreeObjectNumber: nextFreeObjectNumber });\n            this.entryTuplesCache.invalidate();\n            this.maxByteWidthsCache.invalidate();\n            this.indexCache.invalidate();\n            this.contentsCache.invalidate();\n        };\n        PDFCrossRefStream.prototype.addUncompressedEntry = function (ref, offset) {\n            var type = EntryType.Uncompressed;\n            this.entries.push({ type: type, ref: ref, offset: offset });\n            this.entryTuplesCache.invalidate();\n            this.maxByteWidthsCache.invalidate();\n            this.indexCache.invalidate();\n            this.contentsCache.invalidate();\n        };\n        PDFCrossRefStream.prototype.addCompressedEntry = function (ref, objectStreamRef, index) {\n            var type = EntryType.Compressed;\n            this.entries.push({ type: type, ref: ref, objectStreamRef: objectStreamRef, index: index });\n            this.entryTuplesCache.invalidate();\n            this.maxByteWidthsCache.invalidate();\n            this.indexCache.invalidate();\n            this.contentsCache.invalidate();\n        };\n        PDFCrossRefStream.prototype.clone = function (context) {\n            var _a = this, dict = _a.dict, entries = _a.entries, encode = _a.encode;\n            return PDFCrossRefStream.of(dict.clone(context), entries.slice(), encode);\n        };\n        PDFCrossRefStream.prototype.getContentsString = function () {\n            var entryTuples = this.entryTuplesCache.access();\n            var byteWidths = this.maxByteWidthsCache.access();\n            var value = '';\n            for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n                var _a = entryTuples[entryIdx], first = _a[0], second = _a[1], third = _a[2];\n                var firstBytes = reverseArray(bytesFor(first));\n                var secondBytes = reverseArray(bytesFor(second));\n                var thirdBytes = reverseArray(bytesFor(third));\n                for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n                    value += (firstBytes[idx] || 0).toString(2);\n                }\n                for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n                    value += (secondBytes[idx] || 0).toString(2);\n                }\n                for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n                    value += (thirdBytes[idx] || 0).toString(2);\n                }\n            }\n            return value;\n        };\n        PDFCrossRefStream.prototype.getUnencodedContents = function () {\n            var entryTuples = this.entryTuplesCache.access();\n            var byteWidths = this.maxByteWidthsCache.access();\n            var buffer = new Uint8Array(this.getUnencodedContentsSize());\n            var offset = 0;\n            for (var entryIdx = 0, entriesLen = entryTuples.length; entryIdx < entriesLen; entryIdx++) {\n                var _a = entryTuples[entryIdx], first = _a[0], second = _a[1], third = _a[2];\n                var firstBytes = reverseArray(bytesFor(first));\n                var secondBytes = reverseArray(bytesFor(second));\n                var thirdBytes = reverseArray(bytesFor(third));\n                for (var idx = byteWidths[0] - 1; idx >= 0; idx--) {\n                    buffer[offset++] = firstBytes[idx] || 0;\n                }\n                for (var idx = byteWidths[1] - 1; idx >= 0; idx--) {\n                    buffer[offset++] = secondBytes[idx] || 0;\n                }\n                for (var idx = byteWidths[2] - 1; idx >= 0; idx--) {\n                    buffer[offset++] = thirdBytes[idx] || 0;\n                }\n            }\n            return buffer;\n        };\n        PDFCrossRefStream.prototype.getUnencodedContentsSize = function () {\n            var byteWidths = this.maxByteWidthsCache.access();\n            var entryWidth = sum(byteWidths);\n            return entryWidth * this.entries.length;\n        };\n        PDFCrossRefStream.prototype.updateDict = function () {\n            _super.prototype.updateDict.call(this);\n            var byteWidths = this.maxByteWidthsCache.access();\n            var index = this.indexCache.access();\n            var context = this.dict.context;\n            this.dict.set(PDFName.of('W'), context.obj(byteWidths));\n            this.dict.set(PDFName.of('Index'), context.obj(index));\n        };\n        PDFCrossRefStream.create = function (dict, encode) {\n            if (encode === void 0) { encode = true; }\n            var stream = new PDFCrossRefStream(dict, [], encode);\n            stream.addDeletedEntry(PDFRef.of(0, 65535), 0);\n            return stream;\n        };\n        PDFCrossRefStream.of = function (dict, entries, encode) {\n            if (encode === void 0) { encode = true; }\n            return new PDFCrossRefStream(dict, entries, encode);\n        };\n        return PDFCrossRefStream;\n    }(PDFFlateStream));\n\n    var PDFStreamWriter = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFStreamWriter, _super);\n        function PDFStreamWriter(context, objectsPerTick, encodeStreams, objectsPerStream) {\n            var _this = _super.call(this, context, objectsPerTick) || this;\n            _this.encodeStreams = encodeStreams;\n            _this.objectsPerStream = objectsPerStream;\n            return _this;\n        }\n        PDFStreamWriter.prototype.computeBufferSize = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var objectNumber, header, size, xrefStream, uncompressedObjects, compressedObjects, objectStreamRefs, indirectObjects, idx, len, indirectObject, ref, object, shouldNotCompress, chunk, objectStreamRef, idx, len, chunk, ref, objectStream, xrefStreamRef, xrefOffset, trailer;\n                return tslibExports.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            objectNumber = this.context.largestObjectNumber + 1;\n                            header = PDFHeader.forVersion(1, 7);\n                            size = header.sizeInBytes() + 2;\n                            xrefStream = PDFCrossRefStream.create(this.createTrailerDict(), this.encodeStreams);\n                            uncompressedObjects = [];\n                            compressedObjects = [];\n                            objectStreamRefs = [];\n                            indirectObjects = this.context.enumerateIndirectObjects();\n                            idx = 0, len = indirectObjects.length;\n                            _a.label = 1;\n                        case 1:\n                            if (!(idx < len)) return [3 /*break*/, 6];\n                            indirectObject = indirectObjects[idx];\n                            ref = indirectObject[0], object = indirectObject[1];\n                            shouldNotCompress = ref === this.context.trailerInfo.Encrypt ||\n                                object instanceof PDFStream ||\n                                object instanceof PDFInvalidObject ||\n                                ref.generationNumber !== 0;\n                            if (!shouldNotCompress) return [3 /*break*/, 4];\n                            uncompressedObjects.push(indirectObject);\n                            xrefStream.addUncompressedEntry(ref, size);\n                            size += this.computeIndirectObjectSize(indirectObject);\n                            if (!this.shouldWaitForTick(1)) return [3 /*break*/, 3];\n                            return [4 /*yield*/, waitForTick()];\n                        case 2:\n                            _a.sent();\n                            _a.label = 3;\n                        case 3: return [3 /*break*/, 5];\n                        case 4:\n                            chunk = last(compressedObjects);\n                            objectStreamRef = last(objectStreamRefs);\n                            if (!chunk || chunk.length % this.objectsPerStream === 0) {\n                                chunk = [];\n                                compressedObjects.push(chunk);\n                                objectStreamRef = PDFRef.of(objectNumber++);\n                                objectStreamRefs.push(objectStreamRef);\n                            }\n                            xrefStream.addCompressedEntry(ref, objectStreamRef, chunk.length);\n                            chunk.push(indirectObject);\n                            _a.label = 5;\n                        case 5:\n                            idx++;\n                            return [3 /*break*/, 1];\n                        case 6:\n                            idx = 0, len = compressedObjects.length;\n                            _a.label = 7;\n                        case 7:\n                            if (!(idx < len)) return [3 /*break*/, 10];\n                            chunk = compressedObjects[idx];\n                            ref = objectStreamRefs[idx];\n                            objectStream = PDFObjectStream.withContextAndObjects(this.context, chunk, this.encodeStreams);\n                            xrefStream.addUncompressedEntry(ref, size);\n                            size += this.computeIndirectObjectSize([ref, objectStream]);\n                            uncompressedObjects.push([ref, objectStream]);\n                            if (!this.shouldWaitForTick(chunk.length)) return [3 /*break*/, 9];\n                            return [4 /*yield*/, waitForTick()];\n                        case 8:\n                            _a.sent();\n                            _a.label = 9;\n                        case 9:\n                            idx++;\n                            return [3 /*break*/, 7];\n                        case 10:\n                            xrefStreamRef = PDFRef.of(objectNumber++);\n                            xrefStream.dict.set(PDFName.of('Size'), PDFNumber.of(objectNumber));\n                            xrefStream.addUncompressedEntry(xrefStreamRef, size);\n                            xrefOffset = size;\n                            size += this.computeIndirectObjectSize([xrefStreamRef, xrefStream]);\n                            uncompressedObjects.push([xrefStreamRef, xrefStream]);\n                            trailer = PDFTrailer.forLastCrossRefSectionOffset(xrefOffset);\n                            size += trailer.sizeInBytes();\n                            return [2 /*return*/, { size: size, header: header, indirectObjects: uncompressedObjects, trailer: trailer }];\n                    }\n                });\n            });\n        };\n        PDFStreamWriter.forContext = function (context, objectsPerTick, encodeStreams, objectsPerStream) {\n            if (encodeStreams === void 0) { encodeStreams = true; }\n            if (objectsPerStream === void 0) { objectsPerStream = 50; }\n            return new PDFStreamWriter(context, objectsPerTick, encodeStreams, objectsPerStream);\n        };\n        return PDFStreamWriter;\n    }(PDFWriter));\n\n    var PDFHexString = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFHexString, _super);\n        function PDFHexString(value) {\n            var _this = _super.call(this) || this;\n            _this.value = value;\n            return _this;\n        }\n        PDFHexString.prototype.asBytes = function () {\n            // Append a zero if the number of digits is odd. See PDF spec 7.3.4.3\n            var hex = this.value + (this.value.length % 2 === 1 ? '0' : '');\n            var hexLength = hex.length;\n            var bytes = new Uint8Array(hex.length / 2);\n            var hexOffset = 0;\n            var bytesOffset = 0;\n            // Interpret each pair of hex digits as a single byte\n            while (hexOffset < hexLength) {\n                var byte = parseInt(hex.substring(hexOffset, hexOffset + 2), 16);\n                bytes[bytesOffset] = byte;\n                hexOffset += 2;\n                bytesOffset += 1;\n            }\n            return bytes;\n        };\n        PDFHexString.prototype.decodeText = function () {\n            var bytes = this.asBytes();\n            if (hasUtf16BOM(bytes))\n                return utf16Decode(bytes);\n            return pdfDocEncodingDecode(bytes);\n        };\n        PDFHexString.prototype.decodeDate = function () {\n            var text = this.decodeText();\n            var date = parseDate(text);\n            if (!date)\n                throw new InvalidPDFDateStringError(text);\n            return date;\n        };\n        PDFHexString.prototype.asString = function () {\n            return this.value;\n        };\n        PDFHexString.prototype.clone = function () {\n            return PDFHexString.of(this.value);\n        };\n        PDFHexString.prototype.toString = function () {\n            return \"<\" + this.value + \">\";\n        };\n        PDFHexString.prototype.sizeInBytes = function () {\n            return this.value.length + 2;\n        };\n        PDFHexString.prototype.copyBytesInto = function (buffer, offset) {\n            buffer[offset++] = CharCodes$1.LessThan;\n            offset += copyStringIntoBuffer(this.value, buffer, offset);\n            buffer[offset++] = CharCodes$1.GreaterThan;\n            return this.value.length + 2;\n        };\n        PDFHexString.of = function (value) { return new PDFHexString(value); };\n        PDFHexString.fromText = function (value) {\n            var encoded = utf16Encode(value);\n            var hex = '';\n            for (var idx = 0, len = encoded.length; idx < len; idx++) {\n                hex += toHexStringOfMinLength(encoded[idx], 4);\n            }\n            return new PDFHexString(hex);\n        };\n        return PDFHexString;\n    }(PDFObject));\n\n    /**\n     * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n     * this class borrows from:\n     *   https://github.com/foliojs/pdfkit/blob/f91bdd61c164a72ea06be1a43dc0a412afc3925f/lib/font/afm.coffee\n     */\n    var StandardFontEmbedder = /** @class */ (function () {\n        function StandardFontEmbedder(fontName, customName) {\n            // prettier-ignore\n            this.encoding = (fontName === FontNames.ZapfDingbats ? Encodings.ZapfDingbats\n                : fontName === FontNames.Symbol ? Encodings.Symbol\n                    : Encodings.WinAnsi);\n            this.font = Font.load(fontName);\n            this.fontName = this.font.FontName;\n            this.customName = customName;\n        }\n        /**\n         * Encode the JavaScript string into this font. (JavaScript encodes strings in\n         * Unicode, but standard fonts use either WinAnsi, ZapfDingbats, or Symbol\n         * encodings)\n         */\n        StandardFontEmbedder.prototype.encodeText = function (text) {\n            var glyphs = this.encodeTextAsGlyphs(text);\n            var hexCodes = new Array(glyphs.length);\n            for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n                hexCodes[idx] = toHexString(glyphs[idx].code);\n            }\n            return PDFHexString.of(hexCodes.join(''));\n        };\n        StandardFontEmbedder.prototype.widthOfTextAtSize = function (text, size) {\n            var glyphs = this.encodeTextAsGlyphs(text);\n            var totalWidth = 0;\n            for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n                var left = glyphs[idx].name;\n                var right = (glyphs[idx + 1] || {}).name;\n                var kernAmount = this.font.getXAxisKerningForPair(left, right) || 0;\n                totalWidth += this.widthOfGlyph(left) + kernAmount;\n            }\n            var scale = size / 1000;\n            return totalWidth * scale;\n        };\n        StandardFontEmbedder.prototype.heightOfFontAtSize = function (size, options) {\n            if (options === void 0) { options = {}; }\n            var _a = options.descender, descender = _a === void 0 ? true : _a;\n            var _b = this.font, Ascender = _b.Ascender, Descender = _b.Descender, FontBBox = _b.FontBBox;\n            var yTop = Ascender || FontBBox[3];\n            var yBottom = Descender || FontBBox[1];\n            var height = yTop - yBottom;\n            if (!descender)\n                height += Descender || 0;\n            return (height / 1000) * size;\n        };\n        StandardFontEmbedder.prototype.sizeOfFontAtHeight = function (height) {\n            var _a = this.font, Ascender = _a.Ascender, Descender = _a.Descender, FontBBox = _a.FontBBox;\n            var yTop = Ascender || FontBBox[3];\n            var yBottom = Descender || FontBBox[1];\n            return (1000 * height) / (yTop - yBottom);\n        };\n        StandardFontEmbedder.prototype.embedIntoContext = function (context, ref) {\n            var fontDict = context.obj({\n                Type: 'Font',\n                Subtype: 'Type1',\n                BaseFont: this.customName || this.fontName,\n                Encoding: this.encoding === Encodings.WinAnsi ? 'WinAnsiEncoding' : undefined,\n            });\n            if (ref) {\n                context.assign(ref, fontDict);\n                return ref;\n            }\n            else {\n                return context.register(fontDict);\n            }\n        };\n        StandardFontEmbedder.prototype.widthOfGlyph = function (glyphName) {\n            // Default to 250 if font doesn't specify a width\n            return this.font.getWidthOfGlyph(glyphName) || 250;\n        };\n        StandardFontEmbedder.prototype.encodeTextAsGlyphs = function (text) {\n            var codePoints = Array.from(text);\n            var glyphs = new Array(codePoints.length);\n            for (var idx = 0, len = codePoints.length; idx < len; idx++) {\n                var codePoint = toCodePoint(codePoints[idx]);\n                glyphs[idx] = this.encoding.encodeUnicodeCodePoint(codePoint);\n            }\n            return glyphs;\n        };\n        StandardFontEmbedder.for = function (fontName, customName) {\n            return new StandardFontEmbedder(fontName, customName);\n        };\n        return StandardFontEmbedder;\n    }());\n\n    /** `glyphs` should be an array of unique glyphs */\n    var createCmap = function (glyphs, glyphId) {\n        var bfChars = new Array(glyphs.length);\n        for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n            var glyph = glyphs[idx];\n            var id = cmapHexFormat(cmapHexString(glyphId(glyph)));\n            var unicode = cmapHexFormat.apply(void 0, glyph.codePoints.map(cmapCodePointFormat));\n            bfChars[idx] = [id, unicode];\n        }\n        return fillCmapTemplate(bfChars);\n    };\n    /* =============================== Templates ================================ */\n    var fillCmapTemplate = function (bfChars) { return \"/CIDInit /ProcSet findresource begin\\n12 dict begin\\nbegincmap\\n/CIDSystemInfo <<\\n  /Registry (Adobe)\\n  /Ordering (UCS)\\n  /Supplement 0\\n>> def\\n/CMapName /Adobe-Identity-UCS def\\n/CMapType 2 def\\n1 begincodespacerange\\n<0000><ffff>\\nendcodespacerange\\n\" + bfChars.length + \" beginbfchar\\n\" + bfChars.map(function (_a) {\n        var glyphId = _a[0], codePoint = _a[1];\n        return glyphId + \" \" + codePoint;\n    }).join('\\n') + \"\\nendbfchar\\nendcmap\\nCMapName currentdict /CMap defineresource pop\\nend\\nend\"; };\n    /* =============================== Utilities ================================ */\n    var cmapHexFormat = function () {\n        var values = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            values[_i] = arguments[_i];\n        }\n        return \"<\" + values.join('') + \">\";\n    };\n    var cmapHexString = function (value) { return toHexStringOfMinLength(value, 4); };\n    var cmapCodePointFormat = function (codePoint) {\n        if (isWithinBMP(codePoint))\n            return cmapHexString(codePoint);\n        if (hasSurrogates(codePoint)) {\n            var hs = highSurrogate(codePoint);\n            var ls = lowSurrogate(codePoint);\n            return \"\" + cmapHexString(hs) + cmapHexString(ls);\n        }\n        var hex = toHexString(codePoint);\n        var msg = \"0x\" + hex + \" is not a valid UTF-8 or UTF-16 codepoint.\";\n        throw new Error(msg);\n    };\n\n    // prettier-ignore\n    var makeFontFlags = function (options) {\n        var flags = 0;\n        var flipBit = function (bit) { flags |= (1 << (bit - 1)); };\n        if (options.fixedPitch)\n            flipBit(1);\n        if (options.serif)\n            flipBit(2);\n        flipBit(3);\n        if (options.script)\n            flipBit(4);\n        if (options.nonsymbolic)\n            flipBit(6);\n        if (options.italic)\n            flipBit(7);\n        if (options.allCap)\n            flipBit(17);\n        if (options.smallCap)\n            flipBit(18);\n        if (options.forceBold)\n            flipBit(19);\n        return flags;\n    };\n    // From: https://github.com/foliojs/pdfkit/blob/83f5f7243172a017adcf6a7faa5547c55982c57b/lib/font/embedded.js#L123-L129\n    var deriveFontFlags = function (font) {\n        var familyClass = font['OS/2'] ? font['OS/2'].sFamilyClass : 0;\n        var flags = makeFontFlags({\n            fixedPitch: font.post.isFixedPitch,\n            serif: 1 <= familyClass && familyClass <= 7,\n            symbolic: true,\n            script: familyClass === 10,\n            italic: font.head.macStyle.italic,\n        });\n        return flags;\n    };\n\n    var PDFString = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFString, _super);\n        function PDFString(value) {\n            var _this = _super.call(this) || this;\n            _this.value = value;\n            return _this;\n        }\n        PDFString.prototype.asBytes = function () {\n            var bytes = [];\n            var octal = '';\n            var escaped = false;\n            var pushByte = function (byte) {\n                if (byte !== undefined)\n                    bytes.push(byte);\n                escaped = false;\n            };\n            for (var idx = 0, len = this.value.length; idx < len; idx++) {\n                var char = this.value[idx];\n                var byte = toCharCode(char);\n                var nextChar = this.value[idx + 1];\n                if (!escaped) {\n                    if (byte === CharCodes$1.BackSlash)\n                        escaped = true;\n                    else\n                        pushByte(byte);\n                }\n                else {\n                    if (byte === CharCodes$1.Newline)\n                        pushByte();\n                    else if (byte === CharCodes$1.CarriageReturn)\n                        pushByte();\n                    else if (byte === CharCodes$1.n)\n                        pushByte(CharCodes$1.Newline);\n                    else if (byte === CharCodes$1.r)\n                        pushByte(CharCodes$1.CarriageReturn);\n                    else if (byte === CharCodes$1.t)\n                        pushByte(CharCodes$1.Tab);\n                    else if (byte === CharCodes$1.b)\n                        pushByte(CharCodes$1.Backspace);\n                    else if (byte === CharCodes$1.f)\n                        pushByte(CharCodes$1.FormFeed);\n                    else if (byte === CharCodes$1.LeftParen)\n                        pushByte(CharCodes$1.LeftParen);\n                    else if (byte === CharCodes$1.RightParen)\n                        pushByte(CharCodes$1.RightParen);\n                    else if (byte === CharCodes$1.Backspace)\n                        pushByte(CharCodes$1.BackSlash);\n                    else if (byte >= CharCodes$1.Zero && byte <= CharCodes$1.Seven) {\n                        octal += char;\n                        if (octal.length === 3 || !(nextChar >= '0' && nextChar <= '7')) {\n                            pushByte(parseInt(octal, 8));\n                            octal = '';\n                        }\n                    }\n                    else {\n                        pushByte(byte);\n                    }\n                }\n            }\n            return new Uint8Array(bytes);\n        };\n        PDFString.prototype.decodeText = function () {\n            var bytes = this.asBytes();\n            if (hasUtf16BOM(bytes))\n                return utf16Decode(bytes);\n            return pdfDocEncodingDecode(bytes);\n        };\n        PDFString.prototype.decodeDate = function () {\n            var text = this.decodeText();\n            var date = parseDate(text);\n            if (!date)\n                throw new InvalidPDFDateStringError(text);\n            return date;\n        };\n        PDFString.prototype.asString = function () {\n            return this.value;\n        };\n        PDFString.prototype.clone = function () {\n            return PDFString.of(this.value);\n        };\n        PDFString.prototype.toString = function () {\n            return \"(\" + this.value + \")\";\n        };\n        PDFString.prototype.sizeInBytes = function () {\n            return this.value.length + 2;\n        };\n        PDFString.prototype.copyBytesInto = function (buffer, offset) {\n            buffer[offset++] = CharCodes$1.LeftParen;\n            offset += copyStringIntoBuffer(this.value, buffer, offset);\n            buffer[offset++] = CharCodes$1.RightParen;\n            return this.value.length + 2;\n        };\n        // The PDF spec allows newlines and parens to appear directly within a literal\n        // string. These character _may_ be escaped. But they do not _have_ to be. So\n        // for simplicity, we will not bother escaping them.\n        PDFString.of = function (value) { return new PDFString(value); };\n        PDFString.fromDate = function (date) {\n            var year = padStart$1(String(date.getUTCFullYear()), 4, '0');\n            var month = padStart$1(String(date.getUTCMonth() + 1), 2, '0');\n            var day = padStart$1(String(date.getUTCDate()), 2, '0');\n            var hours = padStart$1(String(date.getUTCHours()), 2, '0');\n            var mins = padStart$1(String(date.getUTCMinutes()), 2, '0');\n            var secs = padStart$1(String(date.getUTCSeconds()), 2, '0');\n            return new PDFString(\"D:\" + year + month + day + hours + mins + secs + \"Z\");\n        };\n        return PDFString;\n    }(PDFObject));\n\n    /**\n     * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n     * this class borrows from:\n     *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\n     */\n    var CustomFontEmbedder = /** @class */ (function () {\n        function CustomFontEmbedder(font, fontData, customName, fontFeatures) {\n            var _this = this;\n            this.allGlyphsInFontSortedById = function () {\n                var glyphs = new Array(_this.font.characterSet.length);\n                for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n                    var codePoint = _this.font.characterSet[idx];\n                    glyphs[idx] = _this.font.glyphForCodePoint(codePoint);\n                }\n                return sortedUniq(glyphs.sort(byAscendingId), function (g) { return g.id; });\n            };\n            this.font = font;\n            this.scale = 1000 / this.font.unitsPerEm;\n            this.fontData = fontData;\n            this.fontName = this.font.postscriptName || 'Font';\n            this.customName = customName;\n            this.fontFeatures = fontFeatures;\n            this.baseFontName = '';\n            this.glyphCache = Cache.populatedBy(this.allGlyphsInFontSortedById);\n        }\n        CustomFontEmbedder.for = function (fontkit, fontData, customName, fontFeatures) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var font;\n                return tslibExports.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, fontkit.create(fontData)];\n                        case 1:\n                            font = _a.sent();\n                            return [2 /*return*/, new CustomFontEmbedder(font, fontData, customName, fontFeatures)];\n                    }\n                });\n            });\n        };\n        /**\n         * Encode the JavaScript string into this font. (JavaScript encodes strings in\n         * Unicode, but embedded fonts use their own custom encodings)\n         */\n        CustomFontEmbedder.prototype.encodeText = function (text) {\n            var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n            var hexCodes = new Array(glyphs.length);\n            for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n                hexCodes[idx] = toHexStringOfMinLength(glyphs[idx].id, 4);\n            }\n            return PDFHexString.of(hexCodes.join(''));\n        };\n        // The advanceWidth takes into account kerning automatically, so we don't\n        // have to do that manually like we do for the standard fonts.\n        CustomFontEmbedder.prototype.widthOfTextAtSize = function (text, size) {\n            var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n            var totalWidth = 0;\n            for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n                totalWidth += glyphs[idx].advanceWidth * this.scale;\n            }\n            var scale = size / 1000;\n            return totalWidth * scale;\n        };\n        CustomFontEmbedder.prototype.heightOfFontAtSize = function (size, options) {\n            if (options === void 0) { options = {}; }\n            var _a = options.descender, descender = _a === void 0 ? true : _a;\n            var _b = this.font, ascent = _b.ascent, descent = _b.descent, bbox = _b.bbox;\n            var yTop = (ascent || bbox.maxY) * this.scale;\n            var yBottom = (descent || bbox.minY) * this.scale;\n            var height = yTop - yBottom;\n            if (!descender)\n                height -= Math.abs(descent) || 0;\n            return (height / 1000) * size;\n        };\n        CustomFontEmbedder.prototype.sizeOfFontAtHeight = function (height) {\n            var _a = this.font, ascent = _a.ascent, descent = _a.descent, bbox = _a.bbox;\n            var yTop = (ascent || bbox.maxY) * this.scale;\n            var yBottom = (descent || bbox.minY) * this.scale;\n            return (1000 * height) / (yTop - yBottom);\n        };\n        CustomFontEmbedder.prototype.embedIntoContext = function (context, ref) {\n            this.baseFontName =\n                this.customName || context.addRandomSuffix(this.fontName);\n            return this.embedFontDict(context, ref);\n        };\n        CustomFontEmbedder.prototype.embedFontDict = function (context, ref) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var cidFontDictRef, unicodeCMapRef, fontDict;\n                return tslibExports.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.embedCIDFontDict(context)];\n                        case 1:\n                            cidFontDictRef = _a.sent();\n                            unicodeCMapRef = this.embedUnicodeCmap(context);\n                            fontDict = context.obj({\n                                Type: 'Font',\n                                Subtype: 'Type0',\n                                BaseFont: this.baseFontName,\n                                Encoding: 'Identity-H',\n                                DescendantFonts: [cidFontDictRef],\n                                ToUnicode: unicodeCMapRef,\n                            });\n                            if (ref) {\n                                context.assign(ref, fontDict);\n                                return [2 /*return*/, ref];\n                            }\n                            else {\n                                return [2 /*return*/, context.register(fontDict)];\n                            }\n                    }\n                });\n            });\n        };\n        CustomFontEmbedder.prototype.isCFF = function () {\n            return this.font.cff;\n        };\n        CustomFontEmbedder.prototype.embedCIDFontDict = function (context) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var fontDescriptorRef, cidFontDict;\n                return tslibExports.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.embedFontDescriptor(context)];\n                        case 1:\n                            fontDescriptorRef = _a.sent();\n                            cidFontDict = context.obj({\n                                Type: 'Font',\n                                Subtype: this.isCFF() ? 'CIDFontType0' : 'CIDFontType2',\n                                CIDToGIDMap: 'Identity',\n                                BaseFont: this.baseFontName,\n                                CIDSystemInfo: {\n                                    Registry: PDFString.of('Adobe'),\n                                    Ordering: PDFString.of('Identity'),\n                                    Supplement: 0,\n                                },\n                                FontDescriptor: fontDescriptorRef,\n                                W: this.computeWidths(),\n                            });\n                            return [2 /*return*/, context.register(cidFontDict)];\n                    }\n                });\n            });\n        };\n        CustomFontEmbedder.prototype.embedFontDescriptor = function (context) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var fontStreamRef, scale, _a, italicAngle, ascent, descent, capHeight, xHeight, _b, minX, minY, maxX, maxY, fontDescriptor;\n                var _c;\n                return tslibExports.__generator(this, function (_d) {\n                    switch (_d.label) {\n                        case 0: return [4 /*yield*/, this.embedFontStream(context)];\n                        case 1:\n                            fontStreamRef = _d.sent();\n                            scale = this.scale;\n                            _a = this.font, italicAngle = _a.italicAngle, ascent = _a.ascent, descent = _a.descent, capHeight = _a.capHeight, xHeight = _a.xHeight;\n                            _b = this.font.bbox, minX = _b.minX, minY = _b.minY, maxX = _b.maxX, maxY = _b.maxY;\n                            fontDescriptor = context.obj((_c = {\n                                    Type: 'FontDescriptor',\n                                    FontName: this.baseFontName,\n                                    Flags: deriveFontFlags(this.font),\n                                    FontBBox: [minX * scale, minY * scale, maxX * scale, maxY * scale],\n                                    ItalicAngle: italicAngle,\n                                    Ascent: ascent * scale,\n                                    Descent: descent * scale,\n                                    CapHeight: (capHeight || ascent) * scale,\n                                    XHeight: (xHeight || 0) * scale,\n                                    // Not sure how to compute/find this, nor is anybody else really:\n                                    // https://stackoverflow.com/questions/35485179/stemv-value-of-the-truetype-font\n                                    StemV: 0\n                                },\n                                _c[this.isCFF() ? 'FontFile3' : 'FontFile2'] = fontStreamRef,\n                                _c));\n                            return [2 /*return*/, context.register(fontDescriptor)];\n                    }\n                });\n            });\n        };\n        CustomFontEmbedder.prototype.serializeFont = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                return tslibExports.__generator(this, function (_a) {\n                    return [2 /*return*/, this.fontData];\n                });\n            });\n        };\n        CustomFontEmbedder.prototype.embedFontStream = function (context) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var fontStream, _a, _b;\n                return tslibExports.__generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            _b = (_a = context).flateStream;\n                            return [4 /*yield*/, this.serializeFont()];\n                        case 1:\n                            fontStream = _b.apply(_a, [_c.sent(), {\n                                    Subtype: this.isCFF() ? 'CIDFontType0C' : undefined,\n                                }]);\n                            return [2 /*return*/, context.register(fontStream)];\n                    }\n                });\n            });\n        };\n        CustomFontEmbedder.prototype.embedUnicodeCmap = function (context) {\n            var cmap = createCmap(this.glyphCache.access(), this.glyphId.bind(this));\n            var cmapStream = context.flateStream(cmap);\n            return context.register(cmapStream);\n        };\n        CustomFontEmbedder.prototype.glyphId = function (glyph) {\n            return glyph ? glyph.id : -1;\n        };\n        CustomFontEmbedder.prototype.computeWidths = function () {\n            var glyphs = this.glyphCache.access();\n            var widths = [];\n            var currSection = [];\n            for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n                var currGlyph = glyphs[idx];\n                var prevGlyph = glyphs[idx - 1];\n                var currGlyphId = this.glyphId(currGlyph);\n                var prevGlyphId = this.glyphId(prevGlyph);\n                if (idx === 0) {\n                    widths.push(currGlyphId);\n                }\n                else if (currGlyphId - prevGlyphId !== 1) {\n                    widths.push(currSection);\n                    widths.push(currGlyphId);\n                    currSection = [];\n                }\n                currSection.push(currGlyph.advanceWidth * this.scale);\n            }\n            widths.push(currSection);\n            return widths;\n        };\n        return CustomFontEmbedder;\n    }());\n\n    /**\n     * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n     * this class borrows from:\n     *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/jpeg.coffee\n     */\n    var CustomFontSubsetEmbedder = /** @class */ (function (_super) {\n        tslibExports.__extends(CustomFontSubsetEmbedder, _super);\n        function CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures) {\n            var _this = _super.call(this, font, fontData, customFontName, fontFeatures) || this;\n            _this.subset = _this.font.createSubset();\n            _this.glyphs = [];\n            _this.glyphCache = Cache.populatedBy(function () { return _this.glyphs; });\n            _this.glyphIdMap = new Map();\n            return _this;\n        }\n        CustomFontSubsetEmbedder.for = function (fontkit, fontData, customFontName, fontFeatures) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var font;\n                return tslibExports.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, fontkit.create(fontData)];\n                        case 1:\n                            font = _a.sent();\n                            return [2 /*return*/, new CustomFontSubsetEmbedder(font, fontData, customFontName, fontFeatures)];\n                    }\n                });\n            });\n        };\n        CustomFontSubsetEmbedder.prototype.encodeText = function (text) {\n            var glyphs = this.font.layout(text, this.fontFeatures).glyphs;\n            var hexCodes = new Array(glyphs.length);\n            for (var idx = 0, len = glyphs.length; idx < len; idx++) {\n                var glyph = glyphs[idx];\n                var subsetGlyphId = this.subset.includeGlyph(glyph);\n                this.glyphs[subsetGlyphId - 1] = glyph;\n                this.glyphIdMap.set(glyph.id, subsetGlyphId);\n                hexCodes[idx] = toHexStringOfMinLength(subsetGlyphId, 4);\n            }\n            this.glyphCache.invalidate();\n            return PDFHexString.of(hexCodes.join(''));\n        };\n        CustomFontSubsetEmbedder.prototype.isCFF = function () {\n            return this.subset.cff;\n        };\n        CustomFontSubsetEmbedder.prototype.glyphId = function (glyph) {\n            return glyph ? this.glyphIdMap.get(glyph.id) : -1;\n        };\n        CustomFontSubsetEmbedder.prototype.serializeFont = function () {\n            var _this = this;\n            return new Promise(function (resolve, reject) {\n                var parts = [];\n                _this.subset\n                    .encodeStream()\n                    .on('data', function (bytes) { return parts.push(bytes); })\n                    .on('end', function () { return resolve(mergeUint8Arrays(parts)); })\n                    .on('error', function (err) { return reject(err); });\n            });\n        };\n        return CustomFontSubsetEmbedder;\n    }(CustomFontEmbedder));\n\n    /**\n     * From the PDF-A3 specification, section **3.1. Requirements - General**.\n     * See:\n     * * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\n     */\n    exports.AFRelationship = void 0;\n    (function (AFRelationship) {\n        AFRelationship[\"Source\"] = \"Source\";\n        AFRelationship[\"Data\"] = \"Data\";\n        AFRelationship[\"Alternative\"] = \"Alternative\";\n        AFRelationship[\"Supplement\"] = \"Supplement\";\n        AFRelationship[\"EncryptedPayload\"] = \"EncryptedPayload\";\n        AFRelationship[\"FormData\"] = \"EncryptedPayload\";\n        AFRelationship[\"Schema\"] = \"Schema\";\n        AFRelationship[\"Unspecified\"] = \"Unspecified\";\n    })(exports.AFRelationship || (exports.AFRelationship = {}));\n    var FileEmbedder = /** @class */ (function () {\n        function FileEmbedder(fileData, fileName, options) {\n            if (options === void 0) { options = {}; }\n            this.fileData = fileData;\n            this.fileName = fileName;\n            this.options = options;\n        }\n        FileEmbedder.for = function (bytes, fileName, options) {\n            if (options === void 0) { options = {}; }\n            return new FileEmbedder(bytes, fileName, options);\n        };\n        FileEmbedder.prototype.embedIntoContext = function (context, ref) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var _a, mimeType, description, creationDate, modificationDate, afRelationship, embeddedFileStream, embeddedFileStreamRef, fileSpecDict;\n                return tslibExports.__generator(this, function (_b) {\n                    _a = this.options, mimeType = _a.mimeType, description = _a.description, creationDate = _a.creationDate, modificationDate = _a.modificationDate, afRelationship = _a.afRelationship;\n                    embeddedFileStream = context.flateStream(this.fileData, {\n                        Type: 'EmbeddedFile',\n                        Subtype: mimeType !== null && mimeType !== void 0 ? mimeType : undefined,\n                        Params: {\n                            Size: this.fileData.length,\n                            CreationDate: creationDate\n                                ? PDFString.fromDate(creationDate)\n                                : undefined,\n                            ModDate: modificationDate\n                                ? PDFString.fromDate(modificationDate)\n                                : undefined,\n                        },\n                    });\n                    embeddedFileStreamRef = context.register(embeddedFileStream);\n                    fileSpecDict = context.obj({\n                        Type: 'Filespec',\n                        F: PDFString.of(this.fileName),\n                        UF: PDFHexString.fromText(this.fileName),\n                        EF: { F: embeddedFileStreamRef },\n                        Desc: description ? PDFHexString.fromText(description) : undefined,\n                        AFRelationship: afRelationship !== null && afRelationship !== void 0 ? afRelationship : undefined,\n                    });\n                    if (ref) {\n                        context.assign(ref, fileSpecDict);\n                        return [2 /*return*/, ref];\n                    }\n                    else {\n                        return [2 /*return*/, context.register(fileSpecDict)];\n                    }\n                });\n            });\n        };\n        return FileEmbedder;\n    }());\n\n    // prettier-ignore\n    var MARKERS = [\n        0xffc0, 0xffc1, 0xffc2,\n        0xffc3, 0xffc5, 0xffc6,\n        0xffc7, 0xffc8, 0xffc9,\n        0xffca, 0xffcb, 0xffcc,\n        0xffcd, 0xffce, 0xffcf,\n    ];\n    var ColorSpace;\n    (function (ColorSpace) {\n        ColorSpace[\"DeviceGray\"] = \"DeviceGray\";\n        ColorSpace[\"DeviceRGB\"] = \"DeviceRGB\";\n        ColorSpace[\"DeviceCMYK\"] = \"DeviceCMYK\";\n    })(ColorSpace || (ColorSpace = {}));\n    var ChannelToColorSpace = {\n        1: ColorSpace.DeviceGray,\n        3: ColorSpace.DeviceRGB,\n        4: ColorSpace.DeviceCMYK,\n    };\n    /**\n     * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n     * this class borrows from:\n     *   https://github.com/foliojs/pdfkit/blob/a6af76467ce06bd6a2af4aa7271ccac9ff152a7d/lib/image/jpeg.js\n     */\n    var JpegEmbedder = /** @class */ (function () {\n        function JpegEmbedder(imageData, bitsPerComponent, width, height, colorSpace) {\n            this.imageData = imageData;\n            this.bitsPerComponent = bitsPerComponent;\n            this.width = width;\n            this.height = height;\n            this.colorSpace = colorSpace;\n        }\n        JpegEmbedder.for = function (imageData) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var dataView, soi, pos, marker, bitsPerComponent, height, width, channelByte, channelName, colorSpace;\n                return tslibExports.__generator(this, function (_a) {\n                    dataView = new DataView(imageData.buffer);\n                    soi = dataView.getUint16(0);\n                    if (soi !== 0xffd8)\n                        throw new Error('SOI not found in JPEG');\n                    pos = 2;\n                    while (pos < dataView.byteLength) {\n                        marker = dataView.getUint16(pos);\n                        pos += 2;\n                        if (MARKERS.includes(marker))\n                            break;\n                        pos += dataView.getUint16(pos);\n                    }\n                    if (!MARKERS.includes(marker))\n                        throw new Error('Invalid JPEG');\n                    pos += 2;\n                    bitsPerComponent = dataView.getUint8(pos++);\n                    height = dataView.getUint16(pos);\n                    pos += 2;\n                    width = dataView.getUint16(pos);\n                    pos += 2;\n                    channelByte = dataView.getUint8(pos++);\n                    channelName = ChannelToColorSpace[channelByte];\n                    if (!channelName)\n                        throw new Error('Unknown JPEG channel.');\n                    colorSpace = channelName;\n                    return [2 /*return*/, new JpegEmbedder(imageData, bitsPerComponent, width, height, colorSpace)];\n                });\n            });\n        };\n        JpegEmbedder.prototype.embedIntoContext = function (context, ref) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var xObject;\n                return tslibExports.__generator(this, function (_a) {\n                    xObject = context.stream(this.imageData, {\n                        Type: 'XObject',\n                        Subtype: 'Image',\n                        BitsPerComponent: this.bitsPerComponent,\n                        Width: this.width,\n                        Height: this.height,\n                        ColorSpace: this.colorSpace,\n                        Filter: 'DCTDecode',\n                        // CMYK JPEG streams in PDF are typically stored complemented,\n                        // with 1 as 'off' and 0 as 'on' (PDF 32000-1:2008, 8.6.4.4).\n                        //\n                        // Standalone CMYK JPEG (usually exported by Photoshop) are\n                        // stored inverse, with 0 as 'off' and 1 as 'on', like RGB.\n                        //\n                        // Applying a swap here as a hedge that most bytes passing\n                        // through this method will benefit from it.\n                        Decode: this.colorSpace === ColorSpace.DeviceCMYK\n                            ? [1, 0, 1, 0, 1, 0, 1, 0]\n                            : undefined,\n                    });\n                    if (ref) {\n                        context.assign(ref, xObject);\n                        return [2 /*return*/, ref];\n                    }\n                    else {\n                        return [2 /*return*/, context.register(xObject)];\n                    }\n                });\n            });\n        };\n        return JpegEmbedder;\n    }());\n\n    var UPNG = {};\n\n    \t\n\n    UPNG.toRGBA8 = function(out)\n    {\n    \tvar w = out.width, h = out.height;\n    \tif(out.tabs.acTL==null) return [UPNG.toRGBA8.decodeImage(out.data, w, h, out).buffer];\n    \t\n    \tvar frms = [];\n    \tif(out.frames[0].data==null) out.frames[0].data = out.data;\n    \t\n    \tvar len = w*h*4, img = new Uint8Array(len), empty = new Uint8Array(len), prev=new Uint8Array(len);\n    \tfor(var i=0; i<out.frames.length; i++)\n    \t{\n    \t\tvar frm = out.frames[i];\n    \t\tvar fx=frm.rect.x, fy=frm.rect.y, fw = frm.rect.width, fh = frm.rect.height;\n    \t\tvar fdata = UPNG.toRGBA8.decodeImage(frm.data, fw,fh, out);\n    \t\t\n    \t\tif(i!=0) for(var j=0; j<len; j++) prev[j]=img[j];\n    \t\t\n    \t\tif     (frm.blend==0) UPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 0);\n    \t\telse if(frm.blend==1) UPNG._copyTile(fdata, fw, fh, img, w, h, fx, fy, 1);\n    \t\t\n    \t\tfrms.push(img.buffer.slice(0));\n    \t\t\n    \t\tif     (frm.dispose==0) ;\n    \t\telse if(frm.dispose==1) UPNG._copyTile(empty, fw, fh, img, w, h, fx, fy, 0);\n    \t\telse if(frm.dispose==2) for(var j=0; j<len; j++) img[j]=prev[j];\n    \t}\n    \treturn frms;\n    };\n    UPNG.toRGBA8.decodeImage = function(data, w, h, out)\n    {\n    \tvar area = w*h, bpp = UPNG.decode._getBPP(out);\n    \tvar bpl = Math.ceil(w*bpp/8);\t// bytes per line\n\n    \tvar bf = new Uint8Array(area*4), bf32 = new Uint32Array(bf.buffer);\n    \tvar ctype = out.ctype, depth = out.depth;\n    \tvar rs = UPNG._bin.readUshort;\n\n    \tif     (ctype==6) { // RGB + alpha\n    \t\tvar qarea = area<<2;\n    \t\tif(depth== 8) for(var i=0; i<qarea;i+=4) {  bf[i] = data[i];  bf[i+1] = data[i+1];  bf[i+2] = data[i+2];  bf[i+3] = data[i+3]; }\n    \t\tif(depth==16) for(var i=0; i<qarea;i++ ) {  bf[i] = data[i<<1];  }\n    \t}\n    \telse if(ctype==2) {\t// RGB\n    \t\tvar ts=out.tabs[\"tRNS\"];\n    \t\tif(ts==null) {\n    \t\t\tif(depth== 8) for(var i=0; i<area; i++) {  var ti=i*3;  bf32[i] = (255<<24)|(data[ti+2]<<16)|(data[ti+1]<<8)|data[ti];  }\n    \t\t\tif(depth==16) for(var i=0; i<area; i++) {  var ti=i*6;  bf32[i] = (255<<24)|(data[ti+4]<<16)|(data[ti+2]<<8)|data[ti];  }\n    \t\t}\n    \t\telse {  var tr=ts[0], tg=ts[1], tb=ts[2];\n    \t\t\tif(depth== 8) for(var i=0; i<area; i++) {  var qi=i<<2, ti=i*3;  bf32[i] = (255<<24)|(data[ti+2]<<16)|(data[ti+1]<<8)|data[ti];\n    \t\t\t\tif(data[ti]   ==tr && data[ti+1]   ==tg && data[ti+2]   ==tb) bf[qi+3] = 0;  }\n    \t\t\tif(depth==16) for(var i=0; i<area; i++) {  var qi=i<<2, ti=i*6;  bf32[i] = (255<<24)|(data[ti+4]<<16)|(data[ti+2]<<8)|data[ti];\n    \t\t\t\tif(rs(data,ti)==tr && rs(data,ti+2)==tg && rs(data,ti+4)==tb) bf[qi+3] = 0;  }\n    \t\t}\n    \t}\n    \telse if(ctype==3) {\t// palette\n    \t\tvar p=out.tabs[\"PLTE\"], ap=out.tabs[\"tRNS\"], tl=ap?ap.length:0;\n    \t\t//console.log(p, ap);\n    \t\tif(depth==1) for(var y=0; y<h; y++) {  var s0 = y*bpl, t0 = y*w;\n    \t\t\tfor(var i=0; i<w; i++) { var qi=(t0+i)<<2, j=((data[s0+(i>>3)]>>(7-((i&7)<<0)))& 1), cj=3*j;  bf[qi]=p[cj];  bf[qi+1]=p[cj+1];  bf[qi+2]=p[cj+2];  bf[qi+3]=(j<tl)?ap[j]:255;  }\n    \t\t}\n    \t\tif(depth==2) for(var y=0; y<h; y++) {  var s0 = y*bpl, t0 = y*w;\n    \t\t\tfor(var i=0; i<w; i++) { var qi=(t0+i)<<2, j=((data[s0+(i>>2)]>>(6-((i&3)<<1)))& 3), cj=3*j;  bf[qi]=p[cj];  bf[qi+1]=p[cj+1];  bf[qi+2]=p[cj+2];  bf[qi+3]=(j<tl)?ap[j]:255;  }\n    \t\t}\n    \t\tif(depth==4) for(var y=0; y<h; y++) {  var s0 = y*bpl, t0 = y*w;\n    \t\t\tfor(var i=0; i<w; i++) { var qi=(t0+i)<<2, j=((data[s0+(i>>1)]>>(4-((i&1)<<2)))&15), cj=3*j;  bf[qi]=p[cj];  bf[qi+1]=p[cj+1];  bf[qi+2]=p[cj+2];  bf[qi+3]=(j<tl)?ap[j]:255;  }\n    \t\t}\n    \t\tif(depth==8) for(var i=0; i<area; i++ ) {  var qi=i<<2, j=data[i]                      , cj=3*j;  bf[qi]=p[cj];  bf[qi+1]=p[cj+1];  bf[qi+2]=p[cj+2];  bf[qi+3]=(j<tl)?ap[j]:255;  }\n    \t}\n    \telse if(ctype==4) {\t// gray + alpha\n    \t\tif(depth== 8)  for(var i=0; i<area; i++) {  var qi=i<<2, di=i<<1, gr=data[di];  bf[qi]=gr;  bf[qi+1]=gr;  bf[qi+2]=gr;  bf[qi+3]=data[di+1];  }\n    \t\tif(depth==16)  for(var i=0; i<area; i++) {  var qi=i<<2, di=i<<2, gr=data[di];  bf[qi]=gr;  bf[qi+1]=gr;  bf[qi+2]=gr;  bf[qi+3]=data[di+2];  }\n    \t}\n    \telse if(ctype==0) {\t// gray\n    \t\tvar tr = out.tabs[\"tRNS\"] ? out.tabs[\"tRNS\"] : -1;\n    \t\tfor(var y=0; y<h; y++) {\n    \t\t\tvar off = y*bpl, to = y*w;\n    \t\t\tif     (depth== 1) for(var x=0; x<w; x++) {  var gr=255*((data[off+(x>>>3)]>>>(7 -((x&7)   )))& 1), al=(gr==tr*255)?0:255;  bf32[to+x]=(al<<24)|(gr<<16)|(gr<<8)|gr;  }\n    \t\t\telse if(depth== 2) for(var x=0; x<w; x++) {  var gr= 85*((data[off+(x>>>2)]>>>(6 -((x&3)<<1)))& 3), al=(gr==tr* 85)?0:255;  bf32[to+x]=(al<<24)|(gr<<16)|(gr<<8)|gr;  }\n    \t\t\telse if(depth== 4) for(var x=0; x<w; x++) {  var gr= 17*((data[off+(x>>>1)]>>>(4 -((x&1)<<2)))&15), al=(gr==tr* 17)?0:255;  bf32[to+x]=(al<<24)|(gr<<16)|(gr<<8)|gr;  }\n    \t\t\telse if(depth== 8) for(var x=0; x<w; x++) {  var gr=data[off+     x], al=(gr                 ==tr)?0:255;  bf32[to+x]=(al<<24)|(gr<<16)|(gr<<8)|gr;  }\n    \t\t\telse if(depth==16) for(var x=0; x<w; x++) {  var gr=data[off+(x<<1)], al=(rs(data,off+(x<<i))==tr)?0:255;  bf32[to+x]=(al<<24)|(gr<<16)|(gr<<8)|gr;  }\n    \t\t}\n    \t}\n    \t//console.log(Date.now()-time);\n    \treturn bf;\n    };\n\n\n\n    UPNG.decode = function(buff)\n    {\n    \tvar data = new Uint8Array(buff), offset = 8, bin = UPNG._bin, rUs = bin.readUshort, rUi = bin.readUint;\n    \tvar out = {tabs:{}, frames:[]};\n    \tvar dd = new Uint8Array(data.length), doff = 0;\t // put all IDAT data into it\n    \tvar fd, foff = 0;\t// frames\n    \t\n    \tvar mgck = [0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a];\n    \tfor(var i=0; i<8; i++) if(data[i]!=mgck[i]) throw \"The input is not a PNG file!\";\n\n    \twhile(offset<data.length)\n    \t{\n    \t\tvar len  = bin.readUint(data, offset);  offset += 4;\n    \t\tvar type = bin.readASCII(data, offset, 4);  offset += 4;\n    \t\t//console.log(type,len);\n    \t\t\n    \t\tif     (type==\"IHDR\")  {  UPNG.decode._IHDR(data, offset, out);  }\n    \t\telse if(type==\"IDAT\") {\n    \t\t\tfor(var i=0; i<len; i++) dd[doff+i] = data[offset+i];\n    \t\t\tdoff += len;\n    \t\t}\n    \t\telse if(type==\"acTL\")  {\n    \t\t\tout.tabs[type] = {  num_frames:rUi(data, offset), num_plays:rUi(data, offset+4)  };\n    \t\t\tfd = new Uint8Array(data.length);\n    \t\t}\n    \t\telse if(type==\"fcTL\")  {\n    \t\t\tif(foff!=0) {  var fr = out.frames[out.frames.length-1];\n    \t\t\t\tfr.data = UPNG.decode._decompress(out, fd.slice(0,foff), fr.rect.width, fr.rect.height);  foff=0;\n    \t\t\t}\n    \t\t\tvar rct = {x:rUi(data, offset+12),y:rUi(data, offset+16),width:rUi(data, offset+4),height:rUi(data, offset+8)};\n    \t\t\tvar del = rUs(data, offset+22);  del = rUs(data, offset+20) / (del==0?100:del);\n    \t\t\tvar frm = {rect:rct, delay:Math.round(del*1000), dispose:data[offset+24], blend:data[offset+25]};\n    \t\t\t//console.log(frm);\n    \t\t\tout.frames.push(frm);\n    \t\t}\n    \t\telse if(type==\"fdAT\") {\n    \t\t\tfor(var i=0; i<len-4; i++) fd[foff+i] = data[offset+i+4];\n    \t\t\tfoff += len-4;\n    \t\t}\n    \t\telse if(type==\"pHYs\") {\n    \t\t\tout.tabs[type] = [bin.readUint(data, offset), bin.readUint(data, offset+4), data[offset+8]];\n    \t\t}\n    \t\telse if(type==\"cHRM\") {\n    \t\t\tout.tabs[type] = [];\n    \t\t\tfor(var i=0; i<8; i++) out.tabs[type].push(bin.readUint(data, offset+i*4));\n    \t\t}\n    \t\telse if(type==\"tEXt\") {\n    \t\t\tif(out.tabs[type]==null) out.tabs[type] = {};\n    \t\t\tvar nz = bin.nextZero(data, offset);\n    \t\t\tvar keyw = bin.readASCII(data, offset, nz-offset);\n    \t\t\tvar text = bin.readASCII(data, nz+1, offset+len-nz-1);\n    \t\t\tout.tabs[type][keyw] = text;\n    \t\t}\n    \t\telse if(type==\"iTXt\") {\n    \t\t\tif(out.tabs[type]==null) out.tabs[type] = {};\n    \t\t\tvar nz = 0, off = offset;\n    \t\t\tnz = bin.nextZero(data, off);\n    \t\t\tvar keyw = bin.readASCII(data, off, nz-off);  off = nz + 1;\n    \t\t\tdata[off]; data[off+1];  off+=2;\n    \t\t\tnz = bin.nextZero(data, off);\n    \t\t\tbin.readASCII(data, off, nz-off);  off = nz + 1;\n    \t\t\tnz = bin.nextZero(data, off);\n    \t\t\tbin.readUTF8(data, off, nz-off);  off = nz + 1;\n    \t\t\tvar text  = bin.readUTF8(data, off, len-(off-offset));\n    \t\t\tout.tabs[type][keyw] = text;\n    \t\t}\n    \t\telse if(type==\"PLTE\") {\n    \t\t\tout.tabs[type] = bin.readBytes(data, offset, len);\n    \t\t}\n    \t\telse if(type==\"hIST\") {\n    \t\t\tvar pl = out.tabs[\"PLTE\"].length/3;\n    \t\t\tout.tabs[type] = [];  for(var i=0; i<pl; i++) out.tabs[type].push(rUs(data, offset+i*2));\n    \t\t}\n    \t\telse if(type==\"tRNS\") {\n    \t\t\tif     (out.ctype==3) out.tabs[type] = bin.readBytes(data, offset, len);\n    \t\t\telse if(out.ctype==0) out.tabs[type] = rUs(data, offset);\n    \t\t\telse if(out.ctype==2) out.tabs[type] = [ rUs(data,offset),rUs(data,offset+2),rUs(data,offset+4) ];\n    \t\t\t//else console.log(\"tRNS for unsupported color type\",out.ctype, len);\n    \t\t}\n    \t\telse if(type==\"gAMA\") out.tabs[type] = bin.readUint(data, offset)/100000;\n    \t\telse if(type==\"sRGB\") out.tabs[type] = data[offset];\n    \t\telse if(type==\"bKGD\")\n    \t\t{\n    \t\t\tif     (out.ctype==0 || out.ctype==4) out.tabs[type] = [rUs(data, offset)];\n    \t\t\telse if(out.ctype==2 || out.ctype==6) out.tabs[type] = [rUs(data, offset), rUs(data, offset+2), rUs(data, offset+4)];\n    \t\t\telse if(out.ctype==3) out.tabs[type] = data[offset];\n    \t\t}\n    \t\telse if(type==\"IEND\") {\n    \t\t\tbreak;\n    \t\t}\n    \t\t//else {  log(\"unknown chunk type\", type, len);  }\n    \t\toffset += len;\n    \t\tbin.readUint(data, offset);  offset += 4;\n    \t}\n    \tif(foff!=0) {  var fr = out.frames[out.frames.length-1];\n    \t\tfr.data = UPNG.decode._decompress(out, fd.slice(0,foff), fr.rect.width, fr.rect.height);  foff=0;\n    \t}\t\n    \tout.data = UPNG.decode._decompress(out, dd, out.width, out.height);\n    \t\n    \tdelete out.compress;  delete out.interlace;  delete out.filter;\n    \treturn out;\n    };\n\n    UPNG.decode._decompress = function(out, dd, w, h) {\n    \tvar bpp = UPNG.decode._getBPP(out), bpl = Math.ceil(w*bpp/8), buff = new Uint8Array((bpl+1+out.interlace)*h);\n    \tdd = UPNG.decode._inflate(dd,buff);\n    \tif     (out.interlace==0) dd = UPNG.decode._filterZero(dd, out, 0, w, h);\n    \telse if(out.interlace==1) dd = UPNG.decode._readInterlace(dd, out);\n    \t//console.log(Date.now()-time);\n    \treturn dd;\n    };\n\n    UPNG.decode._inflate = function(data, buff) {  var out=UPNG[\"inflateRaw\"](new Uint8Array(data.buffer, 2,data.length-6),buff);  return out;  };\n    UPNG.inflateRaw=function(){var H={};H.H={};H.H.N=function(N,W){var R=Uint8Array,i=0,m=0,J=0,h=0,Q=0,X=0,u=0,w=0,d=0,v,C;\n    if(N[0]==3&&N[1]==0)return W?W:new R(0);var V=H.H,n=V.b,A=V.e,l=V.R,M=V.n,I=V.A,e=V.Z,b=V.m,Z=W==null;\n    if(Z)W=new R(N.length>>>2<<3);while(i==0){i=n(N,d,1);m=n(N,d+1,2);d+=3;if(m==0){if((d&7)!=0)d+=8-(d&7);\n    var D=(d>>>3)+4,q=N[D-4]|N[D-3]<<8;if(Z)W=H.H.W(W,w+q);W.set(new R(N.buffer,N.byteOffset+D,q),w);d=D+q<<3;\n    w+=q;continue}if(Z)W=H.H.W(W,w+(1<<17));if(m==1){v=b.J;C=b.h;X=(1<<9)-1;u=(1<<5)-1;}if(m==2){J=A(N,d,5)+257;\n    h=A(N,d+5,5)+1;Q=A(N,d+10,4)+4;d+=14;var j=1;for(var c=0;c<38;c+=2){b.Q[c]=0;b.Q[c+1]=0;}for(var c=0;\n    c<Q;c++){var K=A(N,d+c*3,3);b.Q[(b.X[c]<<1)+1]=K;if(K>j)j=K;}d+=3*Q;M(b.Q,j);I(b.Q,j,b.u);v=b.w;C=b.d;\n    d=l(b.u,(1<<j)-1,J+h,N,d,b.v);var r=V.V(b.v,0,J,b.C);X=(1<<r)-1;var S=V.V(b.v,J,h,b.D);u=(1<<S)-1;M(b.C,r);\n    I(b.C,r,v);M(b.D,S);I(b.D,S,C);}while(!0){var T=v[e(N,d)&X];d+=T&15;var p=T>>>4;if(p>>>8==0){W[w++]=p;}else if(p==256){break}else {var z=w+p-254;\n    if(p>264){var _=b.q[p-257];z=w+(_>>>3)+A(N,d,_&7);d+=_&7;}var $=C[e(N,d)&u];d+=$&15;var s=$>>>4,Y=b.c[s],a=(Y>>>4)+n(N,d,Y&15);\n    d+=Y&15;while(w<z){W[w]=W[w++-a];W[w]=W[w++-a];W[w]=W[w++-a];W[w]=W[w++-a];}w=z;}}}return W.length==w?W:W.slice(0,w)};\n    H.H.W=function(N,W){var R=N.length;if(W<=R)return N;var V=new Uint8Array(R<<1);V.set(N,0);return V};\n    H.H.R=function(N,W,R,V,n,A){var l=H.H.e,M=H.H.Z,I=0;while(I<R){var e=N[M(V,n)&W];n+=e&15;var b=e>>>4;\n    if(b<=15){A[I]=b;I++;}else {var Z=0,m=0;if(b==16){m=3+l(V,n,2);n+=2;Z=A[I-1];}else if(b==17){m=3+l(V,n,3);\n    n+=3;}else if(b==18){m=11+l(V,n,7);n+=7;}var J=I+m;while(I<J){A[I]=Z;I++;}}}return n};H.H.V=function(N,W,R,V){var n=0,A=0,l=V.length>>>1;\n    while(A<R){var M=N[A+W];V[A<<1]=0;V[(A<<1)+1]=M;if(M>n)n=M;A++;}while(A<l){V[A<<1]=0;V[(A<<1)+1]=0;A++;}return n};\n    H.H.n=function(N,W){var R=H.H.m,V=N.length,n,A,l,M,I,e=R.j;for(var M=0;M<=W;M++)e[M]=0;for(M=1;M<V;M+=2)e[N[M]]++;\n    var b=R.K;n=0;e[0]=0;for(A=1;A<=W;A++){n=n+e[A-1]<<1;b[A]=n;}for(l=0;l<V;l+=2){I=N[l+1];if(I!=0){N[l]=b[I];\n    b[I]++;}}};H.H.A=function(N,W,R){var V=N.length,n=H.H.m,A=n.r;for(var l=0;l<V;l+=2)if(N[l+1]!=0){var M=l>>1,I=N[l+1],e=M<<4|I,b=W-I,Z=N[l]<<b,m=Z+(1<<b);\n    while(Z!=m){var J=A[Z]>>>15-W;R[J]=e;Z++;}}};H.H.l=function(N,W){var R=H.H.m.r,V=15-W;for(var n=0;n<N.length;\n    n+=2){var A=N[n]<<W-N[n+1];N[n]=R[A]>>>V;}};H.H.M=function(N,W,R){R=R<<(W&7);var V=W>>>3;N[V]|=R;N[V+1]|=R>>>8;};\n    H.H.I=function(N,W,R){R=R<<(W&7);var V=W>>>3;N[V]|=R;N[V+1]|=R>>>8;N[V+2]|=R>>>16;};H.H.e=function(N,W,R){return (N[W>>>3]|N[(W>>>3)+1]<<8)>>>(W&7)&(1<<R)-1};\n    H.H.b=function(N,W,R){return (N[W>>>3]|N[(W>>>3)+1]<<8|N[(W>>>3)+2]<<16)>>>(W&7)&(1<<R)-1};H.H.Z=function(N,W){return (N[W>>>3]|N[(W>>>3)+1]<<8|N[(W>>>3)+2]<<16)>>>(W&7)};\n    H.H.i=function(N,W){return (N[W>>>3]|N[(W>>>3)+1]<<8|N[(W>>>3)+2]<<16|N[(W>>>3)+3]<<24)>>>(W&7)};H.H.m=function(){var N=Uint16Array,W=Uint32Array;\n    return {K:new N(16),j:new N(16),X:[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],S:[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,999,999,999],T:[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0],q:new N(32),p:[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,65535,65535],z:[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0],c:new W(32),J:new N(512),_:[],h:new N(32),$:[],w:new N(32768),C:[],v:[],d:new N(32768),D:[],u:new N(512),Q:[],r:new N(1<<15),s:new W(286),Y:new W(30),a:new W(19),t:new W(15e3),k:new N(1<<16),g:new N(1<<15)}}();\n    (function(){var N=H.H.m,W=1<<15;for(var R=0;R<W;R++){var V=R;V=(V&2863311530)>>>1|(V&1431655765)<<1;\n    V=(V&3435973836)>>>2|(V&858993459)<<2;V=(V&4042322160)>>>4|(V&252645135)<<4;V=(V&4278255360)>>>8|(V&16711935)<<8;\n    N.r[R]=(V>>>16|V<<16)>>>17;}function n(A,l,M){while(l--!=0)A.push(0,M);}for(var R=0;R<32;R++){N.q[R]=N.S[R]<<3|N.T[R];\n    N.c[R]=N.p[R]<<4|N.z[R];}n(N._,144,8);n(N._,255-143,9);n(N._,279-255,7);n(N._,287-279,8);H.H.n(N._,9);\n    H.H.A(N._,9,N.J);H.H.l(N._,9);n(N.$,32,5);H.H.n(N.$,5);H.H.A(N.$,5,N.h);H.H.l(N.$,5);n(N.Q,19,0);n(N.C,286,0);\n    n(N.D,30,0);n(N.v,320,0);}());return H.H.N}();\n\n\n    UPNG.decode._readInterlace = function(data, out)\n    {\n    \tvar w = out.width, h = out.height;\n    \tvar bpp = UPNG.decode._getBPP(out), cbpp = bpp>>3, bpl = Math.ceil(w*bpp/8);\n    \tvar img = new Uint8Array( h * bpl );\n    \tvar di = 0;\n\n    \tvar starting_row  = [ 0, 0, 4, 0, 2, 0, 1 ];\n    \tvar starting_col  = [ 0, 4, 0, 2, 0, 1, 0 ];\n    \tvar row_increment = [ 8, 8, 8, 4, 4, 2, 2 ];\n    \tvar col_increment = [ 8, 8, 4, 4, 2, 2, 1 ];\n\n    \tvar pass=0;\n    \twhile(pass<7)\n    \t{\n    \t\tvar ri = row_increment[pass], ci = col_increment[pass];\n    \t\tvar sw = 0, sh = 0;\n    \t\tvar cr = starting_row[pass];  while(cr<h) {  cr+=ri;  sh++;  }\n    \t\tvar cc = starting_col[pass];  while(cc<w) {  cc+=ci;  sw++;  }\n    \t\tvar bpll = Math.ceil(sw*bpp/8);\n    \t\tUPNG.decode._filterZero(data, out, di, sw, sh);\n\n    \t\tvar y=0, row = starting_row[pass];\n    \t\twhile(row<h)\n    \t\t{\n    \t\t\tvar col = starting_col[pass];\n    \t\t\tvar cdi = (di+y*bpll)<<3;\n\n    \t\t\twhile(col<w)\n    \t\t\t{\n    \t\t\t\tif(bpp==1) {\n    \t\t\t\t\tvar val = data[cdi>>3];  val = (val>>(7-(cdi&7)))&1;\n    \t\t\t\t\timg[row*bpl + (col>>3)] |= (val << (7-((col&7)<<0)));\n    \t\t\t\t}\n    \t\t\t\tif(bpp==2) {\n    \t\t\t\t\tvar val = data[cdi>>3];  val = (val>>(6-(cdi&7)))&3;\n    \t\t\t\t\timg[row*bpl + (col>>2)] |= (val << (6-((col&3)<<1)));\n    \t\t\t\t}\n    \t\t\t\tif(bpp==4) {\n    \t\t\t\t\tvar val = data[cdi>>3];  val = (val>>(4-(cdi&7)))&15;\n    \t\t\t\t\timg[row*bpl + (col>>1)] |= (val << (4-((col&1)<<2)));\n    \t\t\t\t}\n    \t\t\t\tif(bpp>=8) {\n    \t\t\t\t\tvar ii = row*bpl+col*cbpp;\n    \t\t\t\t\tfor(var j=0; j<cbpp; j++) img[ii+j] = data[(cdi>>3)+j];\n    \t\t\t\t}\n    \t\t\t\tcdi+=bpp;  col+=ci;\n    \t\t\t}\n    \t\t\ty++;  row += ri;\n    \t\t}\n    \t\tif(sw*sh!=0) di += sh * (1 + bpll);\n    \t\tpass = pass + 1;\n    \t}\n    \treturn img;\n    };\n\n    UPNG.decode._getBPP = function(out) {\n    \tvar noc = [1,null,3,1,2,null,4][out.ctype];\n    \treturn noc * out.depth;\n    };\n\n    UPNG.decode._filterZero = function(data, out, off, w, h)\n    {\n    \tvar bpp = UPNG.decode._getBPP(out), bpl = Math.ceil(w*bpp/8), paeth = UPNG.decode._paeth;\n    \tbpp = Math.ceil(bpp/8);\n    \t\n    \tvar i=0, di=1, type=data[off], x=0;\n    \t\n    \tif(type>1) data[off]=[0,0,1][type-2];  \n    \tif(type==3) for(x=bpp; x<bpl; x++) data[x+1] = (data[x+1] + (data[x+1-bpp]>>>1) )&255;\n\n    \tfor(var y=0; y<h; y++)  {\n    \t\ti = off+y*bpl; di = i+y+1;\n    \t\ttype = data[di-1]; x=0;\n\n    \t\tif     (type==0)   for(; x<bpl; x++) data[i+x] = data[di+x];\n    \t\telse if(type==1) { for(; x<bpp; x++) data[i+x] = data[di+x];\n    \t\t\t\t\t\t   for(; x<bpl; x++) data[i+x] = (data[di+x] + data[i+x-bpp]);  }\n    \t\telse if(type==2) { for(; x<bpl; x++) data[i+x] = (data[di+x] + data[i+x-bpl]);  }\n    \t\telse if(type==3) { for(; x<bpp; x++) data[i+x] = (data[di+x] + ( data[i+x-bpl]>>>1));\n    \t\t\t               for(; x<bpl; x++) data[i+x] = (data[di+x] + ((data[i+x-bpl]+data[i+x-bpp])>>>1) );  }\n    \t\telse             { for(; x<bpp; x++) data[i+x] = (data[di+x] + paeth(0, data[i+x-bpl], 0));\n    \t\t\t\t\t\t   for(; x<bpl; x++) data[i+x] = (data[di+x] + paeth(data[i+x-bpp], data[i+x-bpl], data[i+x-bpp-bpl]) );  }\n    \t}\n    \treturn data;\n    };\n\n    UPNG.decode._paeth = function(a,b,c)\n    {\n    \tvar p = a+b-c, pa = (p-a), pb = (p-b), pc = (p-c);\n    \tif (pa*pa <= pb*pb && pa*pa <= pc*pc)  return a;\n    \telse if (pb*pb <= pc*pc)  return b;\n    \treturn c;\n    };\n\n    UPNG.decode._IHDR = function(data, offset, out)\n    {\n    \tvar bin = UPNG._bin;\n    \tout.width  = bin.readUint(data, offset);  offset += 4;\n    \tout.height = bin.readUint(data, offset);  offset += 4;\n    \tout.depth     = data[offset];  offset++;\n    \tout.ctype     = data[offset];  offset++;\n    \tout.compress  = data[offset];  offset++;\n    \tout.filter    = data[offset];  offset++;\n    \tout.interlace = data[offset];  offset++;\n    };\n\n    UPNG._bin = {\n    \tnextZero   : function(data,p)  {  while(data[p]!=0) p++;  return p;  },\n    \treadUshort : function(buff,p)  {  return (buff[p]<< 8) | buff[p+1];  },\n    \twriteUshort: function(buff,p,n){  buff[p] = (n>>8)&255;  buff[p+1] = n&255;  },\n    \treadUint   : function(buff,p)  {  return (buff[p]*(256*256*256)) + ((buff[p+1]<<16) | (buff[p+2]<< 8) | buff[p+3]);  },\n    \twriteUint  : function(buff,p,n){  buff[p]=(n>>24)&255;  buff[p+1]=(n>>16)&255;  buff[p+2]=(n>>8)&255;  buff[p+3]=n&255;  },\n    \treadASCII  : function(buff,p,l){  var s = \"\";  for(var i=0; i<l; i++) s += String.fromCharCode(buff[p+i]);  return s;    },\n    \twriteASCII : function(data,p,s){  for(var i=0; i<s.length; i++) data[p+i] = s.charCodeAt(i);  },\n    \treadBytes  : function(buff,p,l){  var arr = [];   for(var i=0; i<l; i++) arr.push(buff[p+i]);   return arr;  },\n    \tpad : function(n) { return n.length < 2 ? \"0\" + n : n; },\n    \treadUTF8 : function(buff, p, l) {\n    \t\tvar s = \"\", ns;\n    \t\tfor(var i=0; i<l; i++) s += \"%\" + UPNG._bin.pad(buff[p+i].toString(16));\n    \t\ttry {  ns = decodeURIComponent(s); }\n    \t\tcatch(e) {  return UPNG._bin.readASCII(buff, p, l);  }\n    \t\treturn  ns;\n    \t}\n    };\n    UPNG._copyTile = function(sb, sw, sh, tb, tw, th, xoff, yoff, mode)\n    {\n    \tvar w = Math.min(sw,tw), h = Math.min(sh,th);\n    \tvar si=0, ti=0;\n    \tfor(var y=0; y<h; y++)\n    \t\tfor(var x=0; x<w; x++)\n    \t\t{\n    \t\t\tif(xoff>=0 && yoff>=0) {  si = (y*sw+x)<<2;  ti = (( yoff+y)*tw+xoff+x)<<2;  }\n    \t\t\telse                   {  si = ((-yoff+y)*sw-xoff+x)<<2;  ti = (y*tw+x)<<2;  }\n    \t\t\t\n    \t\t\tif     (mode==0) {  tb[ti] = sb[si];  tb[ti+1] = sb[si+1];  tb[ti+2] = sb[si+2];  tb[ti+3] = sb[si+3];  }\n    \t\t\telse if(mode==1) {\n    \t\t\t\tvar fa = sb[si+3]*(1/255), fr=sb[si]*fa, fg=sb[si+1]*fa, fb=sb[si+2]*fa; \n    \t\t\t\tvar ba = tb[ti+3]*(1/255), br=tb[ti]*ba, bg=tb[ti+1]*ba, bb=tb[ti+2]*ba; \n    \t\t\t\t\n    \t\t\t\tvar ifa=1-fa, oa = fa+ba*ifa, ioa = (oa==0?0:1/oa);\n    \t\t\t\ttb[ti+3] = 255*oa;  \n    \t\t\t\ttb[ti+0] = (fr+br*ifa)*ioa;  \n    \t\t\t\ttb[ti+1] = (fg+bg*ifa)*ioa;   \n    \t\t\t\ttb[ti+2] = (fb+bb*ifa)*ioa;  \n    \t\t\t}\n    \t\t\telse if(mode==2){\t// copy only differences, otherwise zero\n    \t\t\t\tvar fa = sb[si+3], fr=sb[si], fg=sb[si+1], fb=sb[si+2]; \n    \t\t\t\tvar ba = tb[ti+3], br=tb[ti], bg=tb[ti+1], bb=tb[ti+2]; \n    \t\t\t\tif(fa==ba && fr==br && fg==bg && fb==bb) {  tb[ti]=0;  tb[ti+1]=0;  tb[ti+2]=0;  tb[ti+3]=0;  }\n    \t\t\t\telse {  tb[ti]=fr;  tb[ti+1]=fg;  tb[ti+2]=fb;  tb[ti+3]=fa;  }\n    \t\t\t}\n    \t\t\telse if(mode==3){\t// check if can be blended\n    \t\t\t\tvar fa = sb[si+3], fr=sb[si], fg=sb[si+1], fb=sb[si+2]; \n    \t\t\t\tvar ba = tb[ti+3], br=tb[ti], bg=tb[ti+1], bb=tb[ti+2]; \n    \t\t\t\tif(fa==ba && fr==br && fg==bg && fb==bb) continue;\n    \t\t\t\t//if(fa!=255 && ba!=0) return false;\n    \t\t\t\tif(fa<220 && ba>20) return false;\n    \t\t\t}\n    \t\t}\n    \treturn true;\n    };\n\n\n\n\n    UPNG.encode = function(bufs, w, h, ps, dels, tabs, forbidPlte)\n    {\n    \tif(ps==null) ps=0;\n    \tif(forbidPlte==null) forbidPlte = false;\n\n    \tvar nimg = UPNG.encode.compress(bufs, w, h, ps, [false, false, false, 0, forbidPlte]);\n    \tUPNG.encode.compressPNG(nimg, -1);\n    \t\n    \treturn UPNG.encode._main(nimg, w, h, dels, tabs);\n    };\n\n    UPNG.encodeLL = function(bufs, w, h, cc, ac, depth, dels, tabs) {\n    \tvar nimg = {  ctype: 0 + (cc==1 ? 0 : 2) + (ac==0 ? 0 : 4),      depth: depth,  frames: []  };\n    \tvar bipp = (cc+ac)*depth, bipl = bipp * w;\n    \tfor(var i=0; i<bufs.length; i++)\n    \t\tnimg.frames.push({  rect:{x:0,y:0,width:w,height:h},  img:new Uint8Array(bufs[i]), blend:0, dispose:1, bpp:Math.ceil(bipp/8), bpl:Math.ceil(bipl/8)  });\n    \t\n    \tUPNG.encode.compressPNG(nimg, 0, true);\n    \t\n    \tvar out = UPNG.encode._main(nimg, w, h, dels, tabs);\n    \treturn out;\n    };\n\n    UPNG.encode._main = function(nimg, w, h, dels, tabs) {\n    \tif(tabs==null) tabs={};\n    \tvar crc = UPNG.crc.crc, wUi = UPNG._bin.writeUint, wUs = UPNG._bin.writeUshort, wAs = UPNG._bin.writeASCII;\n    \tvar offset = 8, anim = nimg.frames.length>1, pltAlpha = false;\n    \t\n    \tvar leng = 8 + (16+5+4) /*+ (9+4)*/ + (anim ? 20 : 0);\n    \tif(tabs[\"sRGB\"]!=null) leng += 8+1+4;\n    \tif(tabs[\"pHYs\"]!=null) leng += 8+9+4;\n    \tif(nimg.ctype==3) {\n    \t\tvar dl = nimg.plte.length;\n    \t\tfor(var i=0; i<dl; i++) if((nimg.plte[i]>>>24)!=255) pltAlpha = true;\n    \t\tleng += (8 + dl*3 + 4) + (pltAlpha ? (8 + dl*1 + 4) : 0);\n    \t}\n    \tfor(var j=0; j<nimg.frames.length; j++)\n    \t{\n    \t\tvar fr = nimg.frames[j];\n    \t\tif(anim) leng += 38;\n    \t\tleng += fr.cimg.length + 12;\n    \t\tif(j!=0) leng+=4;\n    \t}\n    \tleng += 12; \n    \t\n    \tvar data = new Uint8Array(leng);\n    \tvar wr=[0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a];\n    \tfor(var i=0; i<8; i++) data[i]=wr[i];\n    \t\n    \twUi(data,offset, 13);     offset+=4;\n    \twAs(data,offset,\"IHDR\");  offset+=4;\n    \twUi(data,offset,w);  offset+=4;\n    \twUi(data,offset,h);  offset+=4;\n    \tdata[offset] = nimg.depth;  offset++;  // depth\n    \tdata[offset] = nimg.ctype;  offset++;  // ctype\n    \tdata[offset] = 0;  offset++;  // compress\n    \tdata[offset] = 0;  offset++;  // filter\n    \tdata[offset] = 0;  offset++;  // interlace\n    \twUi(data,offset,crc(data,offset-17,17));  offset+=4; // crc\n\n    \t// 13 bytes to say, that it is sRGB\n    \tif(tabs[\"sRGB\"]!=null) {\n    \t\twUi(data,offset, 1);      offset+=4;\n    \t\twAs(data,offset,\"sRGB\");  offset+=4;\n    \t\tdata[offset] = tabs[\"sRGB\"];  offset++;\n    \t\twUi(data,offset,crc(data,offset-5,5));  offset+=4; // crc\n    \t}\n    \tif(tabs[\"pHYs\"]!=null) {\n    \t\twUi(data,offset, 9);      offset+=4;\n    \t\twAs(data,offset,\"pHYs\");  offset+=4;\n    \t\twUi(data,offset, tabs[\"pHYs\"][0]);      offset+=4;\n    \t\twUi(data,offset, tabs[\"pHYs\"][1]);      offset+=4;\n    \t\tdata[offset]=tabs[\"pHYs\"][2];\t\t\toffset++;\n    \t\twUi(data,offset,crc(data,offset-13,13));  offset+=4; // crc\n    \t}\n\n    \tif(anim) {\n    \t\twUi(data,offset, 8);      offset+=4;\n    \t\twAs(data,offset,\"acTL\");  offset+=4;\n    \t\twUi(data,offset, nimg.frames.length);     offset+=4;\n    \t\twUi(data,offset, tabs[\"loop\"]!=null?tabs[\"loop\"]:0);      offset+=4;\n    \t\twUi(data,offset,crc(data,offset-12,12));  offset+=4; // crc\n    \t}\n\n    \tif(nimg.ctype==3) {\n    \t\tvar dl = nimg.plte.length;\n    \t\twUi(data,offset, dl*3);  offset+=4;\n    \t\twAs(data,offset,\"PLTE\");  offset+=4;\n    \t\tfor(var i=0; i<dl; i++){\n    \t\t\tvar ti=i*3, c=nimg.plte[i], r=(c)&255, g=(c>>>8)&255, b=(c>>>16)&255;\n    \t\t\tdata[offset+ti+0]=r;  data[offset+ti+1]=g;  data[offset+ti+2]=b;\n    \t\t}\n    \t\toffset+=dl*3;\n    \t\twUi(data,offset,crc(data,offset-dl*3-4,dl*3+4));  offset+=4; // crc\n\n    \t\tif(pltAlpha) {\n    \t\t\twUi(data,offset, dl);  offset+=4;\n    \t\t\twAs(data,offset,\"tRNS\");  offset+=4;\n    \t\t\tfor(var i=0; i<dl; i++)  data[offset+i]=(nimg.plte[i]>>>24)&255;\n    \t\t\toffset+=dl;\n    \t\t\twUi(data,offset,crc(data,offset-dl-4,dl+4));  offset+=4; // crc\n    \t\t}\n    \t}\n    \t\n    \tvar fi = 0;\n    \tfor(var j=0; j<nimg.frames.length; j++)\n    \t{\n    \t\tvar fr = nimg.frames[j];\n    \t\tif(anim) {\n    \t\t\twUi(data, offset, 26);     offset+=4;\n    \t\t\twAs(data, offset,\"fcTL\");  offset+=4;\n    \t\t\twUi(data, offset, fi++);   offset+=4;\n    \t\t\twUi(data, offset, fr.rect.width );   offset+=4;\n    \t\t\twUi(data, offset, fr.rect.height);   offset+=4;\n    \t\t\twUi(data, offset, fr.rect.x);   offset+=4;\n    \t\t\twUi(data, offset, fr.rect.y);   offset+=4;\n    \t\t\twUs(data, offset, dels[j]);   offset+=2;\n    \t\t\twUs(data, offset,  1000);   offset+=2;\n    \t\t\tdata[offset] = fr.dispose;  offset++;\t// dispose\n    \t\t\tdata[offset] = fr.blend  ;  offset++;\t// blend\n    \t\t\twUi(data,offset,crc(data,offset-30,30));  offset+=4; // crc\n    \t\t}\n    \t\t\t\t\n    \t\tvar imgd = fr.cimg, dl = imgd.length;\n    \t\twUi(data,offset, dl+(j==0?0:4));     offset+=4;\n    \t\tvar ioff = offset;\n    \t\twAs(data,offset,(j==0)?\"IDAT\":\"fdAT\");  offset+=4;\n    \t\tif(j!=0) {  wUi(data, offset, fi++);  offset+=4;  }\n    \t\tdata.set(imgd,offset);\n    \t\toffset += dl;\n    \t\twUi(data,offset,crc(data,ioff,offset-ioff));  offset+=4; // crc\n    \t}\n\n    \twUi(data,offset, 0);     offset+=4;\n    \twAs(data,offset,\"IEND\");  offset+=4;\n    \twUi(data,offset,crc(data,offset-4,4));  offset+=4; // crc\n\n    \treturn data.buffer;\n    };\n\n    UPNG.encode.compressPNG = function(out, filter, levelZero) {\n    \tfor(var i=0; i<out.frames.length; i++) {\n    \t\tvar frm = out.frames[i]; frm.rect.width; var nh=frm.rect.height;\n    \t\tvar fdata = new Uint8Array(nh*frm.bpl+nh);\n    \t\tfrm.cimg = UPNG.encode._filterZero(frm.img,nh,frm.bpp,frm.bpl,fdata, filter, levelZero);\n    \t}\n    };\n\n\n\n    UPNG.encode.compress = function(bufs, w, h, ps, prms) // prms:  onlyBlend, minBits, forbidPlte\n    {\n    \t//var time = Date.now();\n    \tvar onlyBlend = prms[0], evenCrd = prms[1], forbidPrev = prms[2], minBits = prms[3], forbidPlte = prms[4];\n    \t\n    \tvar ctype = 6, depth = 8, alphaAnd=255;\n    \t\n    \tfor(var j=0; j<bufs.length; j++)  {  // when not quantized, other frames can contain colors, that are not in an initial frame\n    \t\tvar img = new Uint8Array(bufs[j]), ilen = img.length;\n    \t\tfor(var i=0; i<ilen; i+=4) alphaAnd &= img[i+3];\n    \t}\n    \tvar gotAlpha = (alphaAnd!=255);\n    \t\n    \t//console.log(\"alpha check\", Date.now()-time);  time = Date.now();\n    \t\n    \t//var brute = gotAlpha && forGIF;\t\t// brute : frames can only be copied, not \"blended\"\n    \tvar frms = UPNG.encode.framize(bufs, w, h, onlyBlend, evenCrd, forbidPrev);\n    \t//console.log(\"framize\", Date.now()-time);  time = Date.now();\n    \t\n    \tvar cmap={}, plte=[], inds=[];  \n    \t\n    \tif(ps!=0) {\n    \t\tvar nbufs = [];  for(var i=0; i<frms.length; i++) nbufs.push(frms[i].img.buffer);\n    \t\t\n    \t\tvar abuf = UPNG.encode.concatRGBA(nbufs), qres = UPNG.quantize(abuf, ps);  \n    \t\tvar cof = 0, bb = new Uint8Array(qres.abuf);\n    \t\tfor(var i=0; i<frms.length; i++) {  var ti=frms[i].img, bln=ti.length;  inds.push(new Uint8Array(qres.inds.buffer, cof>>2, bln>>2));\n    \t\t\tfor(var j=0; j<bln; j+=4) {  ti[j]=bb[cof+j];  ti[j+1]=bb[cof+j+1];  ti[j+2]=bb[cof+j+2];  ti[j+3]=bb[cof+j+3];  }    cof+=bln;  }\n    \t\t\n    \t\tfor(var i=0; i<qres.plte.length; i++) plte.push(qres.plte[i].est.rgba);\n    \t\t//console.log(\"quantize\", Date.now()-time);  time = Date.now();\n    \t}\n    \telse {\n    \t\t// what if ps==0, but there are <=256 colors?  we still need to detect, if the palette could be used\n    \t\tfor(var j=0; j<frms.length; j++)  {  // when not quantized, other frames can contain colors, that are not in an initial frame\n    \t\t\tvar frm = frms[j], img32 = new Uint32Array(frm.img.buffer), nw=frm.rect.width, ilen = img32.length;\n    \t\t\tvar ind = new Uint8Array(ilen);  inds.push(ind);\n    \t\t\tfor(var i=0; i<ilen; i++) {\n    \t\t\t\tvar c = img32[i];\n    \t\t\t\tif     (i!=0 && c==img32[i- 1]) ind[i]=ind[i-1];\n    \t\t\t\telse if(i>nw && c==img32[i-nw]) ind[i]=ind[i-nw];\n    \t\t\t\telse {\n    \t\t\t\t\tvar cmc = cmap[c];\n    \t\t\t\t\tif(cmc==null) {  cmap[c]=cmc=plte.length;  plte.push(c);  if(plte.length>=300) break;  }\n    \t\t\t\t\tind[i]=cmc;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t}\n    \t\t//console.log(\"make palette\", Date.now()-time);  time = Date.now();\n    \t}\n    \t\n    \tvar cc=plte.length; //console.log(\"colors:\",cc);\n    \tif(cc<=256 && forbidPlte==false) {\n    \t\tif(cc<= 2) depth=1;  else if(cc<= 4) depth=2;  else if(cc<=16) depth=4;  else depth=8;\n    \t\tdepth =  Math.max(depth, minBits);\n    \t}\n    \t\n    \tfor(var j=0; j<frms.length; j++)\n    \t{\n    \t\tvar frm = frms[j]; frm.rect.x; frm.rect.y; var nw=frm.rect.width, nh=frm.rect.height;\n    \t\tvar cimg = frm.img; new Uint32Array(cimg.buffer);\n    \t\tvar bpl = 4*nw, bpp=4;\n    \t\tif(cc<=256 && forbidPlte==false) {\n    \t\t\tbpl = Math.ceil(depth*nw/8);\n    \t\t\tvar nimg = new Uint8Array(bpl*nh);\n    \t\t\tvar inj = inds[j];\n    \t\t\tfor(var y=0; y<nh; y++) {  var i=y*bpl, ii=y*nw;\n    \t\t\t\tif     (depth==8) for(var x=0; x<nw; x++) nimg[i+(x)   ]   =  (inj[ii+x]             );\n    \t\t\t\telse if(depth==4) for(var x=0; x<nw; x++) nimg[i+(x>>1)]  |=  (inj[ii+x]<<(4-(x&1)*4));\n    \t\t\t\telse if(depth==2) for(var x=0; x<nw; x++) nimg[i+(x>>2)]  |=  (inj[ii+x]<<(6-(x&3)*2));\n    \t\t\t\telse if(depth==1) for(var x=0; x<nw; x++) nimg[i+(x>>3)]  |=  (inj[ii+x]<<(7-(x&7)*1));\n    \t\t\t}\n    \t\t\tcimg=nimg;  ctype=3;  bpp=1;\n    \t\t}\n    \t\telse if(gotAlpha==false && frms.length==1) {\t// some next \"reduced\" frames may contain alpha for blending\n    \t\t\tvar nimg = new Uint8Array(nw*nh*3), area=nw*nh;\n    \t\t\tfor(var i=0; i<area; i++) { var ti=i*3, qi=i*4;  nimg[ti]=cimg[qi];  nimg[ti+1]=cimg[qi+1];  nimg[ti+2]=cimg[qi+2];  }\n    \t\t\tcimg=nimg;  ctype=2;  bpp=3;  bpl=3*nw;\n    \t\t}\n    \t\tfrm.img=cimg;  frm.bpl=bpl;  frm.bpp=bpp;\n    \t}\n    \t//console.log(\"colors => palette indices\", Date.now()-time);  time = Date.now();\n    \t\n    \treturn {ctype:ctype, depth:depth, plte:plte, frames:frms  };\n    };\n    UPNG.encode.framize = function(bufs,w,h,alwaysBlend,evenCrd,forbidPrev) {\n    \t/*  DISPOSE\n    \t    - 0 : no change\n    \t\t- 1 : clear to transparent\n    \t\t- 2 : retstore to content before rendering (previous frame disposed)\n    \t\tBLEND\n    \t\t- 0 : replace\n    \t\t- 1 : blend\n    \t*/\n    \tvar frms = [];\n    \tfor(var j=0; j<bufs.length; j++) {\n    \t\tvar cimg = new Uint8Array(bufs[j]), cimg32 = new Uint32Array(cimg.buffer);\n    \t\tvar nimg;\n    \t\t\n    \t\tvar nx=0, ny=0, nw=w, nh=h, blend=alwaysBlend?1:0;\n    \t\tif(j!=0) {\n    \t\t\tvar tlim = (forbidPrev || alwaysBlend || j==1 || frms[j-2].dispose!=0)?1:2, tstp = 0, tarea = 1e9;\n    \t\t\tfor(var it=0; it<tlim; it++)\n    \t\t\t{\n    \t\t\t\tvar pimg = new Uint8Array(bufs[j-1-it]), p32 = new Uint32Array(bufs[j-1-it]);\n    \t\t\t\tvar mix=w,miy=h,max=-1,may=-1;\n    \t\t\t\tfor(var y=0; y<h; y++) for(var x=0; x<w; x++) {\n    \t\t\t\t\tvar i = y*w+x;\n    \t\t\t\t\tif(cimg32[i]!=p32[i]) {\n    \t\t\t\t\t\tif(x<mix) mix=x;  if(x>max) max=x;\n    \t\t\t\t\t\tif(y<miy) miy=y;  if(y>may) may=y;\n    \t\t\t\t\t}\n    \t\t\t\t}\n    \t\t\t\tif(max==-1) mix=miy=max=may=0;\n    \t\t\t\tif(evenCrd) {  if((mix&1)==1)mix--;  if((miy&1)==1)miy--;  }\n    \t\t\t\tvar sarea = (max-mix+1)*(may-miy+1);\n    \t\t\t\tif(sarea<tarea) {\n    \t\t\t\t\ttarea = sarea;  tstp = it;\n    \t\t\t\t\tnx = mix; ny = miy; nw = max-mix+1; nh = may-miy+1;\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\t\n    \t\t\t// alwaysBlend: pokud zjistím, že blendit nelze, nastavím předchozímu snímku dispose=1. Zajistím, aby obsahoval můj obdélník.\n    \t\t\tvar pimg = new Uint8Array(bufs[j-1-tstp]);\n    \t\t\tif(tstp==1) frms[j-1].dispose = 2;\n    \t\t\t\n    \t\t\tnimg = new Uint8Array(nw*nh*4);\n    \t\t\tUPNG._copyTile(pimg,w,h, nimg,nw,nh, -nx,-ny, 0);\n    \t\t\t\n    \t\t\tblend =  UPNG._copyTile(cimg,w,h, nimg,nw,nh, -nx,-ny, 3) ? 1 : 0;\n    \t\t\tif(blend==1) UPNG.encode._prepareDiff(cimg,w,h,nimg,{x:nx,y:ny,width:nw,height:nh});\n    \t\t\telse         UPNG._copyTile(cimg,w,h, nimg,nw,nh, -nx,-ny, 0);\n    \t\t\t//UPNG._copyTile(cimg,w,h, nimg,nw,nh, -nx,-ny, blend==1?2:0);\n    \t\t}\n    \t\telse nimg = cimg.slice(0);\t// img may be rewritten further ... don't rewrite input\n    \t\t\n    \t\tfrms.push({rect:{x:nx,y:ny,width:nw,height:nh}, img:nimg, blend:blend, dispose:0});\n    \t}\n    \t\n    \t\n    \tif(alwaysBlend) for(var j=0; j<frms.length; j++) {\n    \t\tvar frm = frms[j];  if(frm.blend==1) continue;\n    \t\tvar r0 = frm.rect, r1 = frms[j-1].rect;\n    \t\tvar miX = Math.min(r0.x, r1.x), miY = Math.min(r0.y, r1.y);\n    \t\tvar maX = Math.max(r0.x+r0.width, r1.x+r1.width), maY = Math.max(r0.y+r0.height, r1.y+r1.height);\n    \t\tvar r = {x:miX, y:miY, width:maX-miX, height:maY-miY};\n    \t\t\n    \t\tfrms[j-1].dispose = 1;\n    \t\tif(j-1!=0) \n    \t\tUPNG.encode._updateFrame(bufs, w,h,frms, j-1,r, evenCrd);\n    \t\tUPNG.encode._updateFrame(bufs, w,h,frms, j  ,r, evenCrd);\n    \t}\n    \tvar area = 0;\n    \tif(bufs.length!=1) for(var i=0; i<frms.length; i++) {\n    \t\tvar frm = frms[i];\n    \t\tarea += frm.rect.width*frm.rect.height;\n    \t\t//if(i==0 || frm.blend!=1) continue;\n    \t\t//var ob = new Uint8Array(\n    \t\t//console.log(frm.blend, frm.dispose, frm.rect);\n    \t}\n    \t//if(area!=0) console.log(area);\n    \treturn frms;\n    };\n    UPNG.encode._updateFrame = function(bufs, w,h, frms, i, r, evenCrd) {\n    \tvar U8 = Uint8Array, U32 = Uint32Array;\n    \tvar pimg = new U8(bufs[i-1]), pimg32 = new U32(bufs[i-1]), nimg = i+1<bufs.length ? new U8(bufs[i+1]):null;\n    \tvar cimg = new U8(bufs[i]), cimg32 = new U32(cimg.buffer);\n    \t\n    \tvar mix=w,miy=h,max=-1,may=-1;\n    \tfor(var y=0; y<r.height; y++) for(var x=0; x<r.width; x++) {\n    \t\tvar cx = r.x+x, cy = r.y+y;\n    \t\tvar j = cy*w+cx, cc = cimg32[j];\n    \t\t// no need to draw transparency, or to dispose it. Or, if writing the same color and the next one does not need transparency.\n    \t\tif(cc==0 || (frms[i-1].dispose==0 && pimg32[j]==cc && (nimg==null || nimg[j*4+3]!=0))/**/) ;\n    \t\telse {\n    \t\t\tif(cx<mix) mix=cx;  if(cx>max) max=cx;\n    \t\t\tif(cy<miy) miy=cy;  if(cy>may) may=cy;\n    \t\t}\n    \t}\n    \tif(max==-1) mix=miy=max=may=0;\n    \tif(evenCrd) {  if((mix&1)==1)mix--;  if((miy&1)==1)miy--;  }\n    \tr = {x:mix, y:miy, width:max-mix+1, height:may-miy+1};\n    \t\n    \tvar fr = frms[i];  fr.rect = r;  fr.blend = 1;  fr.img = new Uint8Array(r.width*r.height*4);\n    \tif(frms[i-1].dispose==0) {\n    \t\tUPNG._copyTile(pimg,w,h, fr.img,r.width,r.height, -r.x,-r.y, 0);\n    \t\tUPNG.encode._prepareDiff(cimg,w,h,fr.img,r);\n    \t\t//UPNG._copyTile(cimg,w,h, fr.img,r.width,r.height, -r.x,-r.y, 2);\n    \t}\n    \telse\n    \t\tUPNG._copyTile(cimg,w,h, fr.img,r.width,r.height, -r.x,-r.y, 0);\n    };\n    UPNG.encode._prepareDiff = function(cimg, w,h, nimg, rec) {\n    \tUPNG._copyTile(cimg,w,h, nimg,rec.width,rec.height, -rec.x,-rec.y, 2);\n    \t/*\n    \tvar n32 = new Uint32Array(nimg.buffer);\n    \tvar og = new Uint8Array(rec.width*rec.height*4), o32 = new Uint32Array(og.buffer);\n    \tUPNG._copyTile(cimg,w,h, og,rec.width,rec.height, -rec.x,-rec.y, 0);\n    \tfor(var i=4; i<nimg.length; i+=4) {\n    \t\tif(nimg[i-1]!=0 && nimg[i+3]==0 && o32[i>>>2]==o32[(i>>>2)-1]) {\n    \t\t\tn32[i>>>2]=o32[i>>>2];\n    \t\t\t//var j = i, c=p32[(i>>>2)-1];\n    \t\t\t//while(p32[j>>>2]==c) {  n32[j>>>2]=c;  j+=4;  }\n    \t\t}\n    \t}\n    \tfor(var i=nimg.length-8; i>0; i-=4) {\n    \t\tif(nimg[i+7]!=0 && nimg[i+3]==0 && o32[i>>>2]==o32[(i>>>2)+1]) {\n    \t\t\tn32[i>>>2]=o32[i>>>2];\n    \t\t\t//var j = i, c=p32[(i>>>2)-1];\n    \t\t\t//while(p32[j>>>2]==c) {  n32[j>>>2]=c;  j+=4;  }\n    \t\t}\n    \t}*/\n    };\n\n    UPNG.encode._filterZero = function(img,h,bpp,bpl,data, filter, levelZero)\n    {\n    \tvar fls = [], ftry=[0,1,2,3,4];\n    \tif     (filter!=-1)             ftry=[filter];\n    \telse if(h*bpl>500000 || bpp==1) ftry=[0];\n    \tvar opts;  if(levelZero) opts={level:0};\n    \t\n    \tvar CMPR = (levelZero && UZIP!=null) ? UZIP : pako_1;\n    \t\n    \tfor(var i=0; i<ftry.length; i++) {\n    \t\tfor(var y=0; y<h; y++) UPNG.encode._filterLine(data, img, y, bpl, bpp, ftry[i]);\n    \t\t//var nimg = new Uint8Array(data.length);\n    \t\t//var sz = UZIP.F.deflate(data, nimg);  fls.push(nimg.slice(0,sz));\n    \t\t//var dfl = pako[\"deflate\"](data), dl=dfl.length-4;\n    \t\t//var crc = (dfl[dl+3]<<24)|(dfl[dl+2]<<16)|(dfl[dl+1]<<8)|(dfl[dl+0]<<0);\n    \t\t//console.log(crc, UZIP.adler(data,2,data.length-6));\n    \t\tfls.push(CMPR[\"deflate\"](data,opts));\n    \t}\n    \tvar ti, tsize=1e9;\n    \tfor(var i=0; i<fls.length; i++) if(fls[i].length<tsize) {  ti=i;  tsize=fls[i].length;  }\n    \treturn fls[ti];\n    };\n    UPNG.encode._filterLine = function(data, img, y, bpl, bpp, type)\n    {\n    \tvar i = y*bpl, di = i+y, paeth = UPNG.decode._paeth;\n    \tdata[di]=type;  di++;\n\n    \tif(type==0) {\n    \t\tif(bpl<500) for(var x=0; x<bpl; x++) data[di+x] = img[i+x];\n    \t\telse data.set(new Uint8Array(img.buffer,i,bpl),di);\n    \t}\n    \telse if(type==1) {\n    \t\tfor(var x=  0; x<bpp; x++) data[di+x] =  img[i+x];\n    \t\tfor(var x=bpp; x<bpl; x++) data[di+x] = (img[i+x]-img[i+x-bpp]+256)&255;\n    \t}\n    \telse if(y==0) {\n    \t\tfor(var x=  0; x<bpp; x++) data[di+x] = img[i+x];\n\n    \t\tif(type==2) for(var x=bpp; x<bpl; x++) data[di+x] = img[i+x];\n    \t\tif(type==3) for(var x=bpp; x<bpl; x++) data[di+x] = (img[i+x] - (img[i+x-bpp]>>1) +256)&255;\n    \t\tif(type==4) for(var x=bpp; x<bpl; x++) data[di+x] = (img[i+x] - paeth(img[i+x-bpp], 0, 0) +256)&255;\n    \t}\n    \telse {\n    \t\tif(type==2) { for(var x=  0; x<bpl; x++) data[di+x] = (img[i+x]+256 - img[i+x-bpl])&255;  }\n    \t\tif(type==3) { for(var x=  0; x<bpp; x++) data[di+x] = (img[i+x]+256 - (img[i+x-bpl]>>1))&255;\n    \t\t\t\t\t  for(var x=bpp; x<bpl; x++) data[di+x] = (img[i+x]+256 - ((img[i+x-bpl]+img[i+x-bpp])>>1))&255;  }\n    \t\tif(type==4) { for(var x=  0; x<bpp; x++) data[di+x] = (img[i+x]+256 - paeth(0, img[i+x-bpl], 0))&255;\n    \t\t\t\t\t  for(var x=bpp; x<bpl; x++) data[di+x] = (img[i+x]+256 - paeth(img[i+x-bpp], img[i+x-bpl], img[i+x-bpp-bpl]))&255;  }\n    \t}\n    };\n\n    UPNG.crc = {\n    \ttable : ( function() {\n    \t   var tab = new Uint32Array(256);\n    \t   for (var n=0; n<256; n++) {\n    \t\t\tvar c = n;\n    \t\t\tfor (var k=0; k<8; k++) {\n    \t\t\t\tif (c & 1)  c = 0xedb88320 ^ (c >>> 1);\n    \t\t\t\telse        c = c >>> 1;\n    \t\t\t}\n    \t\t\ttab[n] = c;  }\n    \t\treturn tab;  })(),\n    \tupdate : function(c, buf, off, len) {\n    \t\tfor (var i=0; i<len; i++)  c = UPNG.crc.table[(c ^ buf[off+i]) & 0xff] ^ (c >>> 8);\n    \t\treturn c;\n    \t},\n    \tcrc : function(b,o,l)  {  return UPNG.crc.update(0xffffffff,b,o,l) ^ 0xffffffff;  }\n    };\n\n\n    UPNG.quantize = function(abuf, ps)\n    {\t\n    \tvar oimg = new Uint8Array(abuf), nimg = oimg.slice(0), nimg32 = new Uint32Array(nimg.buffer);\n    \t\n    \tvar KD = UPNG.quantize.getKDtree(nimg, ps);\n    \tvar root = KD[0], leafs = KD[1];\n    \t\n    \tUPNG.quantize.planeDst;\n    \tvar sb = oimg, tb = nimg32, len=sb.length;\n    \t\t\n    \tvar inds = new Uint8Array(oimg.length>>2);\n    \tfor(var i=0; i<len; i+=4) {\n    \t\tvar r=sb[i]*(1/255), g=sb[i+1]*(1/255), b=sb[i+2]*(1/255), a=sb[i+3]*(1/255);\n    \t\t\n    \t\t//  exact, but too slow :(\n    \t\tvar nd = UPNG.quantize.getNearest(root, r, g, b, a);\n    \t\t//var nd = root;\n    \t\t//while(nd.left) nd = (planeDst(nd.est,r,g,b,a)<=0) ? nd.left : nd.right;\n    \t\t\n    \t\tinds[i>>2] = nd.ind;\n    \t\ttb[i>>2] = nd.est.rgba;\n    \t}\n    \treturn {  abuf:nimg.buffer, inds:inds, plte:leafs  };\n    };\n\n    UPNG.quantize.getKDtree = function(nimg, ps, err) {\n    \tif(err==null) err = 0.0001;\n    \tvar nimg32 = new Uint32Array(nimg.buffer);\n    \t\n    \tvar root = {i0:0, i1:nimg.length, bst:null, est:null, tdst:0, left:null, right:null };  // basic statistic, extra statistic\n    \troot.bst = UPNG.quantize.stats(  nimg,root.i0, root.i1  );  root.est = UPNG.quantize.estats( root.bst );\n    \tvar leafs = [root];\n    \t\n    \twhile(leafs.length<ps)\n    \t{\n    \t\tvar maxL = 0, mi=0;\n    \t\tfor(var i=0; i<leafs.length; i++) if(leafs[i].est.L > maxL) {  maxL=leafs[i].est.L;  mi=i;  }\n    \t\tif(maxL<err) break;\n    \t\tvar node = leafs[mi];\n    \t\t\n    \t\tvar s0 = UPNG.quantize.splitPixels(nimg,nimg32, node.i0, node.i1, node.est.e, node.est.eMq255);\n    \t\tvar s0wrong = (node.i0>=s0 || node.i1<=s0);\n    \t\t//console.log(maxL, leafs.length, mi);\n    \t\tif(s0wrong) {  node.est.L=0;  continue;  }\n    \t\t\n    \t\t\n    \t\tvar ln = {i0:node.i0, i1:s0, bst:null, est:null, tdst:0, left:null, right:null };  ln.bst = UPNG.quantize.stats( nimg, ln.i0, ln.i1 );  \n    \t\tln.est = UPNG.quantize.estats( ln.bst );\n    \t\tvar rn = {i0:s0, i1:node.i1, bst:null, est:null, tdst:0, left:null, right:null };  rn.bst = {R:[], m:[], N:node.bst.N-ln.bst.N};\n    \t\tfor(var i=0; i<16; i++) rn.bst.R[i] = node.bst.R[i]-ln.bst.R[i];\n    \t\tfor(var i=0; i< 4; i++) rn.bst.m[i] = node.bst.m[i]-ln.bst.m[i];\n    \t\trn.est = UPNG.quantize.estats( rn.bst );\n    \t\t\n    \t\tnode.left = ln;  node.right = rn;\n    \t\tleafs[mi]=ln;  leafs.push(rn);\n    \t}\n    \tleafs.sort(function(a,b) {  return b.bst.N-a.bst.N;  });\n    \tfor(var i=0; i<leafs.length; i++) leafs[i].ind=i;\n    \treturn [root, leafs];\n    };\n\n    UPNG.quantize.getNearest = function(nd, r,g,b,a)\n    {\n    \tif(nd.left==null) {  nd.tdst = UPNG.quantize.dist(nd.est.q,r,g,b,a);  return nd;  }\n    \tvar planeDst = UPNG.quantize.planeDst(nd.est,r,g,b,a);\n    \t\n    \tvar node0 = nd.left, node1 = nd.right;\n    \tif(planeDst>0) {  node0=nd.right;  node1=nd.left;  }\n    \t\n    \tvar ln = UPNG.quantize.getNearest(node0, r,g,b,a);\n    \tif(ln.tdst<=planeDst*planeDst) return ln;\n    \tvar rn = UPNG.quantize.getNearest(node1, r,g,b,a);\n    \treturn rn.tdst<ln.tdst ? rn : ln;\n    };\n    UPNG.quantize.planeDst = function(est, r,g,b,a) {  var e = est.e;  return e[0]*r + e[1]*g + e[2]*b + e[3]*a - est.eMq;  };\n    UPNG.quantize.dist     = function(q,   r,g,b,a) {  var d0=r-q[0], d1=g-q[1], d2=b-q[2], d3=a-q[3];  return d0*d0+d1*d1+d2*d2+d3*d3;  };\n\n    UPNG.quantize.splitPixels = function(nimg, nimg32, i0, i1, e, eMq)\n    {\n    \tvar vecDot = UPNG.quantize.vecDot;\n    \ti1-=4;\n    \twhile(i0<i1)\n    \t{\n    \t\twhile(vecDot(nimg, i0, e)<=eMq) i0+=4;\n    \t\twhile(vecDot(nimg, i1, e)> eMq) i1-=4;\n    \t\tif(i0>=i1) break;\n    \t\t\n    \t\tvar t = nimg32[i0>>2];  nimg32[i0>>2] = nimg32[i1>>2];  nimg32[i1>>2]=t;\n    \t\t\n    \t\ti0+=4;  i1-=4;\n    \t}\n    \twhile(vecDot(nimg, i0, e)>eMq) i0-=4;\n    \treturn i0+4;\n    };\n    UPNG.quantize.vecDot = function(nimg, i, e)\n    {\n    \treturn nimg[i]*e[0] + nimg[i+1]*e[1] + nimg[i+2]*e[2] + nimg[i+3]*e[3];\n    };\n    UPNG.quantize.stats = function(nimg, i0, i1){\n    \tvar R = [0,0,0,0,  0,0,0,0,  0,0,0,0,  0,0,0,0];\n    \tvar m = [0,0,0,0];\n    \tvar N = (i1-i0)>>2;\n    \tfor(var i=i0; i<i1; i+=4)\n    \t{\n    \t\tvar r = nimg[i]*(1/255), g = nimg[i+1]*(1/255), b = nimg[i+2]*(1/255), a = nimg[i+3]*(1/255);\n    \t\t//var r = nimg[i], g = nimg[i+1], b = nimg[i+2], a = nimg[i+3];\n    \t\tm[0]+=r;  m[1]+=g;  m[2]+=b;  m[3]+=a;\n    \t\t\n    \t\tR[ 0] += r*r;  R[ 1] += r*g;  R[ 2] += r*b;  R[ 3] += r*a;  \n    \t\t               R[ 5] += g*g;  R[ 6] += g*b;  R[ 7] += g*a; \n    \t\t                              R[10] += b*b;  R[11] += b*a;  \n    \t\t                                             R[15] += a*a;  \n    \t}\n    \tR[4]=R[1];  R[8]=R[2];  R[9]=R[6];  R[12]=R[3];  R[13]=R[7];  R[14]=R[11];\n    \t\n    \treturn {R:R, m:m, N:N};\n    };\n    UPNG.quantize.estats = function(stats){\n    \tvar R = stats.R, m = stats.m, N = stats.N;\n    \t\n    \t// when all samples are equal, but N is large (millions), the Rj can be non-zero ( 0.0003.... - precission error)\n    \tvar m0 = m[0], m1 = m[1], m2 = m[2], m3 = m[3], iN = (N==0 ? 0 : 1/N);\n    \tvar Rj = [\n    \t\tR[ 0] - m0*m0*iN,  R[ 1] - m0*m1*iN,  R[ 2] - m0*m2*iN,  R[ 3] - m0*m3*iN,  \n    \t\tR[ 4] - m1*m0*iN,  R[ 5] - m1*m1*iN,  R[ 6] - m1*m2*iN,  R[ 7] - m1*m3*iN,\n    \t\tR[ 8] - m2*m0*iN,  R[ 9] - m2*m1*iN,  R[10] - m2*m2*iN,  R[11] - m2*m3*iN,  \n    \t\tR[12] - m3*m0*iN,  R[13] - m3*m1*iN,  R[14] - m3*m2*iN,  R[15] - m3*m3*iN \n    \t];\n    \t\n    \tvar A = Rj, M = UPNG.M4;\n    \tvar b = [0.5,0.5,0.5,0.5], mi = 0, tmi = 0;\n    \t\n    \tif(N!=0)\n    \tfor(var i=0; i<10; i++) {\n    \t\tb = M.multVec(A, b);  tmi = Math.sqrt(M.dot(b,b));  b = M.sml(1/tmi,  b);\n    \t\tif(Math.abs(tmi-mi)<1e-9) break;  mi = tmi;\n    \t}\t\n    \t//b = [0,0,1,0];  mi=N;\n    \tvar q = [m0*iN, m1*iN, m2*iN, m3*iN];\n    \tvar eMq255 = M.dot(M.sml(255,q),b);\n    \t\n    \treturn {  Cov:Rj, q:q, e:b, L:mi,  eMq255:eMq255, eMq : M.dot(b,q),\n    \t\t\t\trgba: (((Math.round(255*q[3])<<24) | (Math.round(255*q[2])<<16) |  (Math.round(255*q[1])<<8) | (Math.round(255*q[0])<<0))>>>0)  };\n    };\n    UPNG.M4 = {\n    \tmultVec : function(m,v) {\n    \t\t\treturn [\n    \t\t\t\tm[ 0]*v[0] + m[ 1]*v[1] + m[ 2]*v[2] + m[ 3]*v[3],\n    \t\t\t\tm[ 4]*v[0] + m[ 5]*v[1] + m[ 6]*v[2] + m[ 7]*v[3],\n    \t\t\t\tm[ 8]*v[0] + m[ 9]*v[1] + m[10]*v[2] + m[11]*v[3],\n    \t\t\t\tm[12]*v[0] + m[13]*v[1] + m[14]*v[2] + m[15]*v[3]\n    \t\t\t];\n    \t},\n    \tdot : function(x,y) {  return  x[0]*y[0]+x[1]*y[1]+x[2]*y[2]+x[3]*y[3];  },\n    \tsml : function(a,y) {  return [a*y[0],a*y[1],a*y[2],a*y[3]];  }\n    };\n\n    UPNG.encode.concatRGBA = function(bufs) {\n    \tvar tlen = 0;\n    \tfor(var i=0; i<bufs.length; i++) tlen += bufs[i].byteLength;\n    \tvar nimg = new Uint8Array(tlen), noff=0;\n    \tfor(var i=0; i<bufs.length; i++) {\n    \t\tvar img = new Uint8Array(bufs[i]), il = img.length;\n    \t\tfor(var j=0; j<il; j+=4) {  \n    \t\t\tvar r=img[j], g=img[j+1], b=img[j+2], a = img[j+3];\n    \t\t\tif(a==0) r=g=b=0;\n    \t\t\tnimg[noff+j]=r;  nimg[noff+j+1]=g;  nimg[noff+j+2]=b;  nimg[noff+j+3]=a;  }\n    \t\tnoff += il;\n    \t}\n    \treturn nimg.buffer;\n    };\n\n    var getImageType = function (ctype) {\n        if (ctype === 0)\n            return PngType.Greyscale;\n        if (ctype === 2)\n            return PngType.Truecolour;\n        if (ctype === 3)\n            return PngType.IndexedColour;\n        if (ctype === 4)\n            return PngType.GreyscaleWithAlpha;\n        if (ctype === 6)\n            return PngType.TruecolourWithAlpha;\n        throw new Error(\"Unknown color type: \" + ctype);\n    };\n    var splitAlphaChannel = function (rgbaChannel) {\n        var pixelCount = Math.floor(rgbaChannel.length / 4);\n        var rgbChannel = new Uint8Array(pixelCount * 3);\n        var alphaChannel = new Uint8Array(pixelCount * 1);\n        var rgbaOffset = 0;\n        var rgbOffset = 0;\n        var alphaOffset = 0;\n        while (rgbaOffset < rgbaChannel.length) {\n            rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n            rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n            rgbChannel[rgbOffset++] = rgbaChannel[rgbaOffset++];\n            alphaChannel[alphaOffset++] = rgbaChannel[rgbaOffset++];\n        }\n        return { rgbChannel: rgbChannel, alphaChannel: alphaChannel };\n    };\n    var PngType;\n    (function (PngType) {\n        PngType[\"Greyscale\"] = \"Greyscale\";\n        PngType[\"Truecolour\"] = \"Truecolour\";\n        PngType[\"IndexedColour\"] = \"IndexedColour\";\n        PngType[\"GreyscaleWithAlpha\"] = \"GreyscaleWithAlpha\";\n        PngType[\"TruecolourWithAlpha\"] = \"TruecolourWithAlpha\";\n    })(PngType || (PngType = {}));\n    var PNG = /** @class */ (function () {\n        function PNG(pngData) {\n            var upng = UPNG.decode(pngData);\n            var frames = UPNG.toRGBA8(upng);\n            if (frames.length > 1)\n                throw new Error(\"Animated PNGs are not supported\");\n            var frame = new Uint8Array(frames[0]);\n            var _a = splitAlphaChannel(frame), rgbChannel = _a.rgbChannel, alphaChannel = _a.alphaChannel;\n            this.rgbChannel = rgbChannel;\n            var hasAlphaValues = alphaChannel.some(function (a) { return a < 255; });\n            if (hasAlphaValues)\n                this.alphaChannel = alphaChannel;\n            this.type = getImageType(upng.ctype);\n            this.width = upng.width;\n            this.height = upng.height;\n            this.bitsPerComponent = 8;\n        }\n        PNG.load = function (pngData) { return new PNG(pngData); };\n        return PNG;\n    }());\n\n    /**\n     * A note of thanks to the developers of https://github.com/foliojs/pdfkit, as\n     * this class borrows from:\n     *   https://github.com/devongovett/pdfkit/blob/e71edab0dd4657b5a767804ba86c94c58d01fbca/lib/image/png.coffee\n     */\n    var PngEmbedder = /** @class */ (function () {\n        function PngEmbedder(png) {\n            this.image = png;\n            this.bitsPerComponent = png.bitsPerComponent;\n            this.width = png.width;\n            this.height = png.height;\n            this.colorSpace = 'DeviceRGB';\n        }\n        PngEmbedder.for = function (imageData) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var png;\n                return tslibExports.__generator(this, function (_a) {\n                    png = PNG.load(imageData);\n                    return [2 /*return*/, new PngEmbedder(png)];\n                });\n            });\n        };\n        PngEmbedder.prototype.embedIntoContext = function (context, ref) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var SMask, xObject;\n                return tslibExports.__generator(this, function (_a) {\n                    SMask = this.embedAlphaChannel(context);\n                    xObject = context.flateStream(this.image.rgbChannel, {\n                        Type: 'XObject',\n                        Subtype: 'Image',\n                        BitsPerComponent: this.image.bitsPerComponent,\n                        Width: this.image.width,\n                        Height: this.image.height,\n                        ColorSpace: this.colorSpace,\n                        SMask: SMask,\n                    });\n                    if (ref) {\n                        context.assign(ref, xObject);\n                        return [2 /*return*/, ref];\n                    }\n                    else {\n                        return [2 /*return*/, context.register(xObject)];\n                    }\n                });\n            });\n        };\n        PngEmbedder.prototype.embedAlphaChannel = function (context) {\n            if (!this.image.alphaChannel)\n                return undefined;\n            var xObject = context.flateStream(this.image.alphaChannel, {\n                Type: 'XObject',\n                Subtype: 'Image',\n                Height: this.image.height,\n                Width: this.image.width,\n                BitsPerComponent: this.image.bitsPerComponent,\n                ColorSpace: 'DeviceGray',\n                Decode: [0, 1],\n            });\n            return context.register(xObject);\n        };\n        return PngEmbedder;\n    }());\n\n    /*\n     * Copyright 2012 Mozilla Foundation\n     *\n     * The Stream class contained in this file is a TypeScript port of the\n     * JavaScript Stream class in Mozilla's pdf.js project, made available\n     * under the Apache 2.0 open source license.\n     */\n    var Stream = /** @class */ (function () {\n        function Stream(buffer, start, length) {\n            this.bytes = buffer;\n            this.start = start || 0;\n            this.pos = this.start;\n            this.end = !!start && !!length ? start + length : this.bytes.length;\n        }\n        Object.defineProperty(Stream.prototype, \"length\", {\n            get: function () {\n                return this.end - this.start;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Stream.prototype, \"isEmpty\", {\n            get: function () {\n                return this.length === 0;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Stream.prototype.getByte = function () {\n            if (this.pos >= this.end) {\n                return -1;\n            }\n            return this.bytes[this.pos++];\n        };\n        Stream.prototype.getUint16 = function () {\n            var b0 = this.getByte();\n            var b1 = this.getByte();\n            if (b0 === -1 || b1 === -1) {\n                return -1;\n            }\n            return (b0 << 8) + b1;\n        };\n        Stream.prototype.getInt32 = function () {\n            var b0 = this.getByte();\n            var b1 = this.getByte();\n            var b2 = this.getByte();\n            var b3 = this.getByte();\n            return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n        };\n        // Returns subarray of original buffer, should only be read.\n        Stream.prototype.getBytes = function (length, forceClamped) {\n            if (forceClamped === void 0) { forceClamped = false; }\n            var bytes = this.bytes;\n            var pos = this.pos;\n            var strEnd = this.end;\n            if (!length) {\n                var subarray = bytes.subarray(pos, strEnd);\n                // `this.bytes` is always a `Uint8Array` here.\n                return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n            }\n            else {\n                var end = pos + length;\n                if (end > strEnd) {\n                    end = strEnd;\n                }\n                this.pos = end;\n                var subarray = bytes.subarray(pos, end);\n                // `this.bytes` is always a `Uint8Array` here.\n                return forceClamped ? new Uint8ClampedArray(subarray) : subarray;\n            }\n        };\n        Stream.prototype.peekByte = function () {\n            var peekedByte = this.getByte();\n            this.pos--;\n            return peekedByte;\n        };\n        Stream.prototype.peekBytes = function (length, forceClamped) {\n            if (forceClamped === void 0) { forceClamped = false; }\n            var bytes = this.getBytes(length, forceClamped);\n            this.pos -= bytes.length;\n            return bytes;\n        };\n        Stream.prototype.skip = function (n) {\n            if (!n) {\n                n = 1;\n            }\n            this.pos += n;\n        };\n        Stream.prototype.reset = function () {\n            this.pos = this.start;\n        };\n        Stream.prototype.moveStart = function () {\n            this.start = this.pos;\n        };\n        Stream.prototype.makeSubStream = function (start, length) {\n            return new Stream(this.bytes, start, length);\n        };\n        Stream.prototype.decode = function () {\n            return this.bytes;\n        };\n        return Stream;\n    }());\n\n    /*\n     * Copyright 2012 Mozilla Foundation\n     *\n     * The DecodeStream class contained in this file is a TypeScript port of the\n     * JavaScript DecodeStream class in Mozilla's pdf.js project, made available\n     * under the Apache 2.0 open source license.\n     */\n    // Lots of DecodeStreams are created whose buffers are never used.  For these\n    // we share a single empty buffer. This is (a) space-efficient and (b) avoids\n    // having special cases that would be required if we used |null| for an empty\n    // buffer.\n    var emptyBuffer = new Uint8Array(0);\n    /**\n     * Super class for the decoding streams\n     */\n    var DecodeStream = /** @class */ (function () {\n        function DecodeStream(maybeMinBufferLength) {\n            this.pos = 0;\n            this.bufferLength = 0;\n            this.eof = false;\n            this.buffer = emptyBuffer;\n            this.minBufferLength = 512;\n            if (maybeMinBufferLength) {\n                // Compute the first power of two that is as big as maybeMinBufferLength.\n                while (this.minBufferLength < maybeMinBufferLength) {\n                    this.minBufferLength *= 2;\n                }\n            }\n        }\n        Object.defineProperty(DecodeStream.prototype, \"isEmpty\", {\n            get: function () {\n                while (!this.eof && this.bufferLength === 0) {\n                    this.readBlock();\n                }\n                return this.bufferLength === 0;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        DecodeStream.prototype.getByte = function () {\n            var pos = this.pos;\n            while (this.bufferLength <= pos) {\n                if (this.eof) {\n                    return -1;\n                }\n                this.readBlock();\n            }\n            return this.buffer[this.pos++];\n        };\n        DecodeStream.prototype.getUint16 = function () {\n            var b0 = this.getByte();\n            var b1 = this.getByte();\n            if (b0 === -1 || b1 === -1) {\n                return -1;\n            }\n            return (b0 << 8) + b1;\n        };\n        DecodeStream.prototype.getInt32 = function () {\n            var b0 = this.getByte();\n            var b1 = this.getByte();\n            var b2 = this.getByte();\n            var b3 = this.getByte();\n            return (b0 << 24) + (b1 << 16) + (b2 << 8) + b3;\n        };\n        DecodeStream.prototype.getBytes = function (length, forceClamped) {\n            if (forceClamped === void 0) { forceClamped = false; }\n            var end;\n            var pos = this.pos;\n            if (length) {\n                this.ensureBuffer(pos + length);\n                end = pos + length;\n                while (!this.eof && this.bufferLength < end) {\n                    this.readBlock();\n                }\n                var bufEnd = this.bufferLength;\n                if (end > bufEnd) {\n                    end = bufEnd;\n                }\n            }\n            else {\n                while (!this.eof) {\n                    this.readBlock();\n                }\n                end = this.bufferLength;\n            }\n            this.pos = end;\n            var subarray = this.buffer.subarray(pos, end);\n            // `this.buffer` is either a `Uint8Array` or `Uint8ClampedArray` here.\n            return forceClamped && !(subarray instanceof Uint8ClampedArray)\n                ? new Uint8ClampedArray(subarray)\n                : subarray;\n        };\n        DecodeStream.prototype.peekByte = function () {\n            var peekedByte = this.getByte();\n            this.pos--;\n            return peekedByte;\n        };\n        DecodeStream.prototype.peekBytes = function (length, forceClamped) {\n            if (forceClamped === void 0) { forceClamped = false; }\n            var bytes = this.getBytes(length, forceClamped);\n            this.pos -= bytes.length;\n            return bytes;\n        };\n        DecodeStream.prototype.skip = function (n) {\n            if (!n) {\n                n = 1;\n            }\n            this.pos += n;\n        };\n        DecodeStream.prototype.reset = function () {\n            this.pos = 0;\n        };\n        DecodeStream.prototype.makeSubStream = function (start, length /* dict */) {\n            var end = start + length;\n            while (this.bufferLength <= end && !this.eof) {\n                this.readBlock();\n            }\n            return new Stream(this.buffer, start, length /* dict */);\n        };\n        DecodeStream.prototype.decode = function () {\n            while (!this.eof)\n                this.readBlock();\n            return this.buffer.subarray(0, this.bufferLength);\n        };\n        DecodeStream.prototype.readBlock = function () {\n            throw new MethodNotImplementedError(this.constructor.name, 'readBlock');\n        };\n        DecodeStream.prototype.ensureBuffer = function (requested) {\n            var buffer = this.buffer;\n            if (requested <= buffer.byteLength) {\n                return buffer;\n            }\n            var size = this.minBufferLength;\n            while (size < requested) {\n                size *= 2;\n            }\n            var buffer2 = new Uint8Array(size);\n            buffer2.set(buffer);\n            return (this.buffer = buffer2);\n        };\n        return DecodeStream;\n    }());\n\n    /*\n     * Copyright 2012 Mozilla Foundation\n     *\n     * The Ascii85Stream class contained in this file is a TypeScript port of the\n     * JavaScript Ascii85Stream class in Mozilla's pdf.js project, made available\n     * under the Apache 2.0 open source license.\n     */\n    var isSpace = function (ch) {\n        return ch === 0x20 || ch === 0x09 || ch === 0x0d || ch === 0x0a;\n    };\n    var Ascii85Stream = /** @class */ (function (_super) {\n        tslibExports.__extends(Ascii85Stream, _super);\n        function Ascii85Stream(stream, maybeLength) {\n            var _this = _super.call(this, maybeLength) || this;\n            _this.stream = stream;\n            _this.input = new Uint8Array(5);\n            // Most streams increase in size when decoded, but Ascii85 streams\n            // typically shrink by ~20%.\n            if (maybeLength) {\n                maybeLength = 0.8 * maybeLength;\n            }\n            return _this;\n        }\n        Ascii85Stream.prototype.readBlock = function () {\n            var TILDA_CHAR = 0x7e; // '~'\n            var Z_LOWER_CHAR = 0x7a; // 'z'\n            var EOF = -1;\n            var stream = this.stream;\n            var c = stream.getByte();\n            while (isSpace(c)) {\n                c = stream.getByte();\n            }\n            if (c === EOF || c === TILDA_CHAR) {\n                this.eof = true;\n                return;\n            }\n            var bufferLength = this.bufferLength;\n            var buffer;\n            var i;\n            // special code for z\n            if (c === Z_LOWER_CHAR) {\n                buffer = this.ensureBuffer(bufferLength + 4);\n                for (i = 0; i < 4; ++i) {\n                    buffer[bufferLength + i] = 0;\n                }\n                this.bufferLength += 4;\n            }\n            else {\n                var input = this.input;\n                input[0] = c;\n                for (i = 1; i < 5; ++i) {\n                    c = stream.getByte();\n                    while (isSpace(c)) {\n                        c = stream.getByte();\n                    }\n                    input[i] = c;\n                    if (c === EOF || c === TILDA_CHAR) {\n                        break;\n                    }\n                }\n                buffer = this.ensureBuffer(bufferLength + i - 1);\n                this.bufferLength += i - 1;\n                // partial ending;\n                if (i < 5) {\n                    for (; i < 5; ++i) {\n                        input[i] = 0x21 + 84;\n                    }\n                    this.eof = true;\n                }\n                var t = 0;\n                for (i = 0; i < 5; ++i) {\n                    t = t * 85 + (input[i] - 0x21);\n                }\n                for (i = 3; i >= 0; --i) {\n                    buffer[bufferLength + i] = t & 0xff;\n                    t >>= 8;\n                }\n            }\n        };\n        return Ascii85Stream;\n    }(DecodeStream));\n\n    /*\n     * Copyright 2012 Mozilla Foundation\n     *\n     * The AsciiHexStream class contained in this file is a TypeScript port of the\n     * JavaScript AsciiHexStream class in Mozilla's pdf.js project, made available\n     * under the Apache 2.0 open source license.\n     */\n    var AsciiHexStream = /** @class */ (function (_super) {\n        tslibExports.__extends(AsciiHexStream, _super);\n        function AsciiHexStream(stream, maybeLength) {\n            var _this = _super.call(this, maybeLength) || this;\n            _this.stream = stream;\n            _this.firstDigit = -1;\n            // Most streams increase in size when decoded, but AsciiHex streams shrink\n            // by 50%.\n            if (maybeLength) {\n                maybeLength = 0.5 * maybeLength;\n            }\n            return _this;\n        }\n        AsciiHexStream.prototype.readBlock = function () {\n            var UPSTREAM_BLOCK_SIZE = 8000;\n            var bytes = this.stream.getBytes(UPSTREAM_BLOCK_SIZE);\n            if (!bytes.length) {\n                this.eof = true;\n                return;\n            }\n            var maxDecodeLength = (bytes.length + 1) >> 1;\n            var buffer = this.ensureBuffer(this.bufferLength + maxDecodeLength);\n            var bufferLength = this.bufferLength;\n            var firstDigit = this.firstDigit;\n            for (var i = 0, ii = bytes.length; i < ii; i++) {\n                var ch = bytes[i];\n                var digit = void 0;\n                if (ch >= 0x30 && ch <= 0x39) {\n                    // '0'-'9'\n                    digit = ch & 0x0f;\n                }\n                else if ((ch >= 0x41 && ch <= 0x46) || (ch >= 0x61 && ch <= 0x66)) {\n                    // 'A'-'Z', 'a'-'z'\n                    digit = (ch & 0x0f) + 9;\n                }\n                else if (ch === 0x3e) {\n                    // '>'\n                    this.eof = true;\n                    break;\n                }\n                else {\n                    // probably whitespace\n                    continue; // ignoring\n                }\n                if (firstDigit < 0) {\n                    firstDigit = digit;\n                }\n                else {\n                    buffer[bufferLength++] = (firstDigit << 4) | digit;\n                    firstDigit = -1;\n                }\n            }\n            if (firstDigit >= 0 && this.eof) {\n                // incomplete byte\n                buffer[bufferLength++] = firstDigit << 4;\n                firstDigit = -1;\n            }\n            this.firstDigit = firstDigit;\n            this.bufferLength = bufferLength;\n        };\n        return AsciiHexStream;\n    }(DecodeStream));\n\n    /*\n     * Copyright 1996-2003 Glyph & Cog, LLC\n     *\n     * The flate stream implementation contained in this file is a JavaScript port\n     * of XPDF's implementation, made available under the Apache 2.0 open source\n     * license.\n     */\n    // prettier-ignore\n    var codeLenCodeMap = new Int32Array([\n        16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15\n    ]);\n    // prettier-ignore\n    var lengthDecode = new Int32Array([\n        0x00003, 0x00004, 0x00005, 0x00006, 0x00007, 0x00008, 0x00009, 0x0000a,\n        0x1000b, 0x1000d, 0x1000f, 0x10011, 0x20013, 0x20017, 0x2001b, 0x2001f,\n        0x30023, 0x3002b, 0x30033, 0x3003b, 0x40043, 0x40053, 0x40063, 0x40073,\n        0x50083, 0x500a3, 0x500c3, 0x500e3, 0x00102, 0x00102, 0x00102\n    ]);\n    // prettier-ignore\n    var distDecode = new Int32Array([\n        0x00001, 0x00002, 0x00003, 0x00004, 0x10005, 0x10007, 0x20009, 0x2000d,\n        0x30011, 0x30019, 0x40021, 0x40031, 0x50041, 0x50061, 0x60081, 0x600c1,\n        0x70101, 0x70181, 0x80201, 0x80301, 0x90401, 0x90601, 0xa0801, 0xa0c01,\n        0xb1001, 0xb1801, 0xc2001, 0xc3001, 0xd4001, 0xd6001\n    ]);\n    // prettier-ignore\n    var fixedLitCodeTab = [new Int32Array([\n            0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c0,\n            0x70108, 0x80060, 0x80020, 0x900a0, 0x80000, 0x80080, 0x80040, 0x900e0,\n            0x70104, 0x80058, 0x80018, 0x90090, 0x70114, 0x80078, 0x80038, 0x900d0,\n            0x7010c, 0x80068, 0x80028, 0x900b0, 0x80008, 0x80088, 0x80048, 0x900f0,\n            0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c8,\n            0x7010a, 0x80064, 0x80024, 0x900a8, 0x80004, 0x80084, 0x80044, 0x900e8,\n            0x70106, 0x8005c, 0x8001c, 0x90098, 0x70116, 0x8007c, 0x8003c, 0x900d8,\n            0x7010e, 0x8006c, 0x8002c, 0x900b8, 0x8000c, 0x8008c, 0x8004c, 0x900f8,\n            0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c4,\n            0x70109, 0x80062, 0x80022, 0x900a4, 0x80002, 0x80082, 0x80042, 0x900e4,\n            0x70105, 0x8005a, 0x8001a, 0x90094, 0x70115, 0x8007a, 0x8003a, 0x900d4,\n            0x7010d, 0x8006a, 0x8002a, 0x900b4, 0x8000a, 0x8008a, 0x8004a, 0x900f4,\n            0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cc,\n            0x7010b, 0x80066, 0x80026, 0x900ac, 0x80006, 0x80086, 0x80046, 0x900ec,\n            0x70107, 0x8005e, 0x8001e, 0x9009c, 0x70117, 0x8007e, 0x8003e, 0x900dc,\n            0x7010f, 0x8006e, 0x8002e, 0x900bc, 0x8000e, 0x8008e, 0x8004e, 0x900fc,\n            0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c2,\n            0x70108, 0x80061, 0x80021, 0x900a2, 0x80001, 0x80081, 0x80041, 0x900e2,\n            0x70104, 0x80059, 0x80019, 0x90092, 0x70114, 0x80079, 0x80039, 0x900d2,\n            0x7010c, 0x80069, 0x80029, 0x900b2, 0x80009, 0x80089, 0x80049, 0x900f2,\n            0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900ca,\n            0x7010a, 0x80065, 0x80025, 0x900aa, 0x80005, 0x80085, 0x80045, 0x900ea,\n            0x70106, 0x8005d, 0x8001d, 0x9009a, 0x70116, 0x8007d, 0x8003d, 0x900da,\n            0x7010e, 0x8006d, 0x8002d, 0x900ba, 0x8000d, 0x8008d, 0x8004d, 0x900fa,\n            0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c6,\n            0x70109, 0x80063, 0x80023, 0x900a6, 0x80003, 0x80083, 0x80043, 0x900e6,\n            0x70105, 0x8005b, 0x8001b, 0x90096, 0x70115, 0x8007b, 0x8003b, 0x900d6,\n            0x7010d, 0x8006b, 0x8002b, 0x900b6, 0x8000b, 0x8008b, 0x8004b, 0x900f6,\n            0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900ce,\n            0x7010b, 0x80067, 0x80027, 0x900ae, 0x80007, 0x80087, 0x80047, 0x900ee,\n            0x70107, 0x8005f, 0x8001f, 0x9009e, 0x70117, 0x8007f, 0x8003f, 0x900de,\n            0x7010f, 0x8006f, 0x8002f, 0x900be, 0x8000f, 0x8008f, 0x8004f, 0x900fe,\n            0x70100, 0x80050, 0x80010, 0x80118, 0x70110, 0x80070, 0x80030, 0x900c1,\n            0x70108, 0x80060, 0x80020, 0x900a1, 0x80000, 0x80080, 0x80040, 0x900e1,\n            0x70104, 0x80058, 0x80018, 0x90091, 0x70114, 0x80078, 0x80038, 0x900d1,\n            0x7010c, 0x80068, 0x80028, 0x900b1, 0x80008, 0x80088, 0x80048, 0x900f1,\n            0x70102, 0x80054, 0x80014, 0x8011c, 0x70112, 0x80074, 0x80034, 0x900c9,\n            0x7010a, 0x80064, 0x80024, 0x900a9, 0x80004, 0x80084, 0x80044, 0x900e9,\n            0x70106, 0x8005c, 0x8001c, 0x90099, 0x70116, 0x8007c, 0x8003c, 0x900d9,\n            0x7010e, 0x8006c, 0x8002c, 0x900b9, 0x8000c, 0x8008c, 0x8004c, 0x900f9,\n            0x70101, 0x80052, 0x80012, 0x8011a, 0x70111, 0x80072, 0x80032, 0x900c5,\n            0x70109, 0x80062, 0x80022, 0x900a5, 0x80002, 0x80082, 0x80042, 0x900e5,\n            0x70105, 0x8005a, 0x8001a, 0x90095, 0x70115, 0x8007a, 0x8003a, 0x900d5,\n            0x7010d, 0x8006a, 0x8002a, 0x900b5, 0x8000a, 0x8008a, 0x8004a, 0x900f5,\n            0x70103, 0x80056, 0x80016, 0x8011e, 0x70113, 0x80076, 0x80036, 0x900cd,\n            0x7010b, 0x80066, 0x80026, 0x900ad, 0x80006, 0x80086, 0x80046, 0x900ed,\n            0x70107, 0x8005e, 0x8001e, 0x9009d, 0x70117, 0x8007e, 0x8003e, 0x900dd,\n            0x7010f, 0x8006e, 0x8002e, 0x900bd, 0x8000e, 0x8008e, 0x8004e, 0x900fd,\n            0x70100, 0x80051, 0x80011, 0x80119, 0x70110, 0x80071, 0x80031, 0x900c3,\n            0x70108, 0x80061, 0x80021, 0x900a3, 0x80001, 0x80081, 0x80041, 0x900e3,\n            0x70104, 0x80059, 0x80019, 0x90093, 0x70114, 0x80079, 0x80039, 0x900d3,\n            0x7010c, 0x80069, 0x80029, 0x900b3, 0x80009, 0x80089, 0x80049, 0x900f3,\n            0x70102, 0x80055, 0x80015, 0x8011d, 0x70112, 0x80075, 0x80035, 0x900cb,\n            0x7010a, 0x80065, 0x80025, 0x900ab, 0x80005, 0x80085, 0x80045, 0x900eb,\n            0x70106, 0x8005d, 0x8001d, 0x9009b, 0x70116, 0x8007d, 0x8003d, 0x900db,\n            0x7010e, 0x8006d, 0x8002d, 0x900bb, 0x8000d, 0x8008d, 0x8004d, 0x900fb,\n            0x70101, 0x80053, 0x80013, 0x8011b, 0x70111, 0x80073, 0x80033, 0x900c7,\n            0x70109, 0x80063, 0x80023, 0x900a7, 0x80003, 0x80083, 0x80043, 0x900e7,\n            0x70105, 0x8005b, 0x8001b, 0x90097, 0x70115, 0x8007b, 0x8003b, 0x900d7,\n            0x7010d, 0x8006b, 0x8002b, 0x900b7, 0x8000b, 0x8008b, 0x8004b, 0x900f7,\n            0x70103, 0x80057, 0x80017, 0x8011f, 0x70113, 0x80077, 0x80037, 0x900cf,\n            0x7010b, 0x80067, 0x80027, 0x900af, 0x80007, 0x80087, 0x80047, 0x900ef,\n            0x70107, 0x8005f, 0x8001f, 0x9009f, 0x70117, 0x8007f, 0x8003f, 0x900df,\n            0x7010f, 0x8006f, 0x8002f, 0x900bf, 0x8000f, 0x8008f, 0x8004f, 0x900ff\n        ]), 9];\n    // prettier-ignore\n    var fixedDistCodeTab = [new Int32Array([\n            0x50000, 0x50010, 0x50008, 0x50018, 0x50004, 0x50014, 0x5000c, 0x5001c,\n            0x50002, 0x50012, 0x5000a, 0x5001a, 0x50006, 0x50016, 0x5000e, 0x00000,\n            0x50001, 0x50011, 0x50009, 0x50019, 0x50005, 0x50015, 0x5000d, 0x5001d,\n            0x50003, 0x50013, 0x5000b, 0x5001b, 0x50007, 0x50017, 0x5000f, 0x00000\n        ]), 5];\n    var FlateStream = /** @class */ (function (_super) {\n        tslibExports.__extends(FlateStream, _super);\n        function FlateStream(stream, maybeLength) {\n            var _this = _super.call(this, maybeLength) || this;\n            _this.stream = stream;\n            var cmf = stream.getByte();\n            var flg = stream.getByte();\n            if (cmf === -1 || flg === -1) {\n                throw new Error(\"Invalid header in flate stream: \" + cmf + \", \" + flg);\n            }\n            if ((cmf & 0x0f) !== 0x08) {\n                throw new Error(\"Unknown compression method in flate stream: \" + cmf + \", \" + flg);\n            }\n            if (((cmf << 8) + flg) % 31 !== 0) {\n                throw new Error(\"Bad FCHECK in flate stream: \" + cmf + \", \" + flg);\n            }\n            if (flg & 0x20) {\n                throw new Error(\"FDICT bit set in flate stream: \" + cmf + \", \" + flg);\n            }\n            _this.codeSize = 0;\n            _this.codeBuf = 0;\n            return _this;\n        }\n        FlateStream.prototype.readBlock = function () {\n            var buffer;\n            var len;\n            var str = this.stream;\n            // read block header\n            var hdr = this.getBits(3);\n            if (hdr & 1) {\n                this.eof = true;\n            }\n            hdr >>= 1;\n            if (hdr === 0) {\n                // uncompressed block\n                var b = void 0;\n                if ((b = str.getByte()) === -1) {\n                    throw new Error('Bad block header in flate stream');\n                }\n                var blockLen = b;\n                if ((b = str.getByte()) === -1) {\n                    throw new Error('Bad block header in flate stream');\n                }\n                blockLen |= b << 8;\n                if ((b = str.getByte()) === -1) {\n                    throw new Error('Bad block header in flate stream');\n                }\n                var check = b;\n                if ((b = str.getByte()) === -1) {\n                    throw new Error('Bad block header in flate stream');\n                }\n                check |= b << 8;\n                if (check !== (~blockLen & 0xffff) && (blockLen !== 0 || check !== 0)) {\n                    // Ignoring error for bad \"empty\" block (see issue 1277)\n                    throw new Error('Bad uncompressed block length in flate stream');\n                }\n                this.codeBuf = 0;\n                this.codeSize = 0;\n                var bufferLength = this.bufferLength;\n                buffer = this.ensureBuffer(bufferLength + blockLen);\n                var end = bufferLength + blockLen;\n                this.bufferLength = end;\n                if (blockLen === 0) {\n                    if (str.peekByte() === -1) {\n                        this.eof = true;\n                    }\n                }\n                else {\n                    for (var n = bufferLength; n < end; ++n) {\n                        if ((b = str.getByte()) === -1) {\n                            this.eof = true;\n                            break;\n                        }\n                        buffer[n] = b;\n                    }\n                }\n                return;\n            }\n            var litCodeTable;\n            var distCodeTable;\n            if (hdr === 1) {\n                // compressed block, fixed codes\n                litCodeTable = fixedLitCodeTab;\n                distCodeTable = fixedDistCodeTab;\n            }\n            else if (hdr === 2) {\n                // compressed block, dynamic codes\n                var numLitCodes = this.getBits(5) + 257;\n                var numDistCodes = this.getBits(5) + 1;\n                var numCodeLenCodes = this.getBits(4) + 4;\n                // build the code lengths code table\n                var codeLenCodeLengths = new Uint8Array(codeLenCodeMap.length);\n                var i = void 0;\n                for (i = 0; i < numCodeLenCodes; ++i) {\n                    codeLenCodeLengths[codeLenCodeMap[i]] = this.getBits(3);\n                }\n                var codeLenCodeTab = this.generateHuffmanTable(codeLenCodeLengths);\n                // build the literal and distance code tables\n                len = 0;\n                i = 0;\n                var codes = numLitCodes + numDistCodes;\n                var codeLengths = new Uint8Array(codes);\n                var bitsLength = void 0;\n                var bitsOffset = void 0;\n                var what = void 0;\n                while (i < codes) {\n                    var code = this.getCode(codeLenCodeTab);\n                    if (code === 16) {\n                        bitsLength = 2;\n                        bitsOffset = 3;\n                        what = len;\n                    }\n                    else if (code === 17) {\n                        bitsLength = 3;\n                        bitsOffset = 3;\n                        what = len = 0;\n                    }\n                    else if (code === 18) {\n                        bitsLength = 7;\n                        bitsOffset = 11;\n                        what = len = 0;\n                    }\n                    else {\n                        codeLengths[i++] = len = code;\n                        continue;\n                    }\n                    var repeatLength = this.getBits(bitsLength) + bitsOffset;\n                    while (repeatLength-- > 0) {\n                        codeLengths[i++] = what;\n                    }\n                }\n                litCodeTable = this.generateHuffmanTable(codeLengths.subarray(0, numLitCodes));\n                distCodeTable = this.generateHuffmanTable(codeLengths.subarray(numLitCodes, codes));\n            }\n            else {\n                throw new Error('Unknown block type in flate stream');\n            }\n            buffer = this.buffer;\n            var limit = buffer ? buffer.length : 0;\n            var pos = this.bufferLength;\n            while (true) {\n                var code1 = this.getCode(litCodeTable);\n                if (code1 < 256) {\n                    if (pos + 1 >= limit) {\n                        buffer = this.ensureBuffer(pos + 1);\n                        limit = buffer.length;\n                    }\n                    buffer[pos++] = code1;\n                    continue;\n                }\n                if (code1 === 256) {\n                    this.bufferLength = pos;\n                    return;\n                }\n                code1 -= 257;\n                code1 = lengthDecode[code1];\n                var code2 = code1 >> 16;\n                if (code2 > 0) {\n                    code2 = this.getBits(code2);\n                }\n                len = (code1 & 0xffff) + code2;\n                code1 = this.getCode(distCodeTable);\n                code1 = distDecode[code1];\n                code2 = code1 >> 16;\n                if (code2 > 0) {\n                    code2 = this.getBits(code2);\n                }\n                var dist = (code1 & 0xffff) + code2;\n                if (pos + len >= limit) {\n                    buffer = this.ensureBuffer(pos + len);\n                    limit = buffer.length;\n                }\n                for (var k = 0; k < len; ++k, ++pos) {\n                    buffer[pos] = buffer[pos - dist];\n                }\n            }\n        };\n        FlateStream.prototype.getBits = function (bits) {\n            var str = this.stream;\n            var codeSize = this.codeSize;\n            var codeBuf = this.codeBuf;\n            var b;\n            while (codeSize < bits) {\n                if ((b = str.getByte()) === -1) {\n                    throw new Error('Bad encoding in flate stream');\n                }\n                codeBuf |= b << codeSize;\n                codeSize += 8;\n            }\n            b = codeBuf & ((1 << bits) - 1);\n            this.codeBuf = codeBuf >> bits;\n            this.codeSize = codeSize -= bits;\n            return b;\n        };\n        FlateStream.prototype.getCode = function (table) {\n            var str = this.stream;\n            var codes = table[0];\n            var maxLen = table[1];\n            var codeSize = this.codeSize;\n            var codeBuf = this.codeBuf;\n            var b;\n            while (codeSize < maxLen) {\n                if ((b = str.getByte()) === -1) {\n                    // premature end of stream. code might however still be valid.\n                    // codeSize < codeLen check below guards against incomplete codeVal.\n                    break;\n                }\n                codeBuf |= b << codeSize;\n                codeSize += 8;\n            }\n            var code = codes[codeBuf & ((1 << maxLen) - 1)];\n            if (typeof codes === 'number') {\n                console.log('FLATE:', code);\n            }\n            var codeLen = code >> 16;\n            var codeVal = code & 0xffff;\n            if (codeLen < 1 || codeSize < codeLen) {\n                throw new Error('Bad encoding in flate stream');\n            }\n            this.codeBuf = codeBuf >> codeLen;\n            this.codeSize = codeSize - codeLen;\n            return codeVal;\n        };\n        FlateStream.prototype.generateHuffmanTable = function (lengths) {\n            var n = lengths.length;\n            // find max code length\n            var maxLen = 0;\n            var i;\n            for (i = 0; i < n; ++i) {\n                if (lengths[i] > maxLen) {\n                    maxLen = lengths[i];\n                }\n            }\n            // build the table\n            var size = 1 << maxLen;\n            var codes = new Int32Array(size);\n            for (var len = 1, code = 0, skip = 2; len <= maxLen; ++len, code <<= 1, skip <<= 1) {\n                for (var val = 0; val < n; ++val) {\n                    if (lengths[val] === len) {\n                        // bit-reverse the code\n                        var code2 = 0;\n                        var t = code;\n                        for (i = 0; i < len; ++i) {\n                            code2 = (code2 << 1) | (t & 1);\n                            t >>= 1;\n                        }\n                        // fill the table entries\n                        for (i = code2; i < size; i += skip) {\n                            codes[i] = (len << 16) | val;\n                        }\n                        ++code;\n                    }\n                }\n            }\n            return [codes, maxLen];\n        };\n        return FlateStream;\n    }(DecodeStream));\n\n    /*\n     * Copyright 2012 Mozilla Foundation\n     *\n     * The LZWStream class contained in this file is a TypeScript port of the\n     * JavaScript LZWStream class in Mozilla's pdf.js project, made available\n     * under the Apache 2.0 open source license.\n     */\n    var LZWStream = /** @class */ (function (_super) {\n        tslibExports.__extends(LZWStream, _super);\n        function LZWStream(stream, maybeLength, earlyChange) {\n            var _this = _super.call(this, maybeLength) || this;\n            _this.stream = stream;\n            _this.cachedData = 0;\n            _this.bitsCached = 0;\n            var maxLzwDictionarySize = 4096;\n            var lzwState = {\n                earlyChange: earlyChange,\n                codeLength: 9,\n                nextCode: 258,\n                dictionaryValues: new Uint8Array(maxLzwDictionarySize),\n                dictionaryLengths: new Uint16Array(maxLzwDictionarySize),\n                dictionaryPrevCodes: new Uint16Array(maxLzwDictionarySize),\n                currentSequence: new Uint8Array(maxLzwDictionarySize),\n                currentSequenceLength: 0,\n            };\n            for (var i = 0; i < 256; ++i) {\n                lzwState.dictionaryValues[i] = i;\n                lzwState.dictionaryLengths[i] = 1;\n            }\n            _this.lzwState = lzwState;\n            return _this;\n        }\n        LZWStream.prototype.readBlock = function () {\n            var blockSize = 512;\n            var estimatedDecodedSize = blockSize * 2;\n            var decodedSizeDelta = blockSize;\n            var i;\n            var j;\n            var q;\n            var lzwState = this.lzwState;\n            if (!lzwState) {\n                return; // eof was found\n            }\n            var earlyChange = lzwState.earlyChange;\n            var nextCode = lzwState.nextCode;\n            var dictionaryValues = lzwState.dictionaryValues;\n            var dictionaryLengths = lzwState.dictionaryLengths;\n            var dictionaryPrevCodes = lzwState.dictionaryPrevCodes;\n            var codeLength = lzwState.codeLength;\n            var prevCode = lzwState.prevCode;\n            var currentSequence = lzwState.currentSequence;\n            var currentSequenceLength = lzwState.currentSequenceLength;\n            var decodedLength = 0;\n            var currentBufferLength = this.bufferLength;\n            var buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n            for (i = 0; i < blockSize; i++) {\n                var code = this.readBits(codeLength);\n                var hasPrev = currentSequenceLength > 0;\n                if (!code || code < 256) {\n                    currentSequence[0] = code;\n                    currentSequenceLength = 1;\n                }\n                else if (code >= 258) {\n                    if (code < nextCode) {\n                        currentSequenceLength = dictionaryLengths[code];\n                        for (j = currentSequenceLength - 1, q = code; j >= 0; j--) {\n                            currentSequence[j] = dictionaryValues[q];\n                            q = dictionaryPrevCodes[q];\n                        }\n                    }\n                    else {\n                        currentSequence[currentSequenceLength++] = currentSequence[0];\n                    }\n                }\n                else if (code === 256) {\n                    codeLength = 9;\n                    nextCode = 258;\n                    currentSequenceLength = 0;\n                    continue;\n                }\n                else {\n                    this.eof = true;\n                    delete this.lzwState;\n                    break;\n                }\n                if (hasPrev) {\n                    dictionaryPrevCodes[nextCode] = prevCode;\n                    dictionaryLengths[nextCode] = dictionaryLengths[prevCode] + 1;\n                    dictionaryValues[nextCode] = currentSequence[0];\n                    nextCode++;\n                    codeLength =\n                        (nextCode + earlyChange) & (nextCode + earlyChange - 1)\n                            ? codeLength\n                            : Math.min(Math.log(nextCode + earlyChange) / 0.6931471805599453 + 1, 12) | 0;\n                }\n                prevCode = code;\n                decodedLength += currentSequenceLength;\n                if (estimatedDecodedSize < decodedLength) {\n                    do {\n                        estimatedDecodedSize += decodedSizeDelta;\n                    } while (estimatedDecodedSize < decodedLength);\n                    buffer = this.ensureBuffer(this.bufferLength + estimatedDecodedSize);\n                }\n                for (j = 0; j < currentSequenceLength; j++) {\n                    buffer[currentBufferLength++] = currentSequence[j];\n                }\n            }\n            lzwState.nextCode = nextCode;\n            lzwState.codeLength = codeLength;\n            lzwState.prevCode = prevCode;\n            lzwState.currentSequenceLength = currentSequenceLength;\n            this.bufferLength = currentBufferLength;\n        };\n        LZWStream.prototype.readBits = function (n) {\n            var bitsCached = this.bitsCached;\n            var cachedData = this.cachedData;\n            while (bitsCached < n) {\n                var c = this.stream.getByte();\n                if (c === -1) {\n                    this.eof = true;\n                    return null;\n                }\n                cachedData = (cachedData << 8) | c;\n                bitsCached += 8;\n            }\n            this.bitsCached = bitsCached -= n;\n            this.cachedData = cachedData;\n            return (cachedData >>> bitsCached) & ((1 << n) - 1);\n        };\n        return LZWStream;\n    }(DecodeStream));\n\n    /*\n     * Copyright 2012 Mozilla Foundation\n     *\n     * The RunLengthStream class contained in this file is a TypeScript port of the\n     * JavaScript RunLengthStream class in Mozilla's pdf.js project, made available\n     * under the Apache 2.0 open source license.\n     */\n    var RunLengthStream = /** @class */ (function (_super) {\n        tslibExports.__extends(RunLengthStream, _super);\n        function RunLengthStream(stream, maybeLength) {\n            var _this = _super.call(this, maybeLength) || this;\n            _this.stream = stream;\n            return _this;\n        }\n        RunLengthStream.prototype.readBlock = function () {\n            // The repeatHeader has following format. The first byte defines type of run\n            // and amount of bytes to repeat/copy: n = 0 through 127 - copy next n bytes\n            // (in addition to the second byte from the header), n = 129 through 255 -\n            // duplicate the second byte from the header (257 - n) times, n = 128 - end.\n            var repeatHeader = this.stream.getBytes(2);\n            if (!repeatHeader || repeatHeader.length < 2 || repeatHeader[0] === 128) {\n                this.eof = true;\n                return;\n            }\n            var buffer;\n            var bufferLength = this.bufferLength;\n            var n = repeatHeader[0];\n            if (n < 128) {\n                // copy n bytes\n                buffer = this.ensureBuffer(bufferLength + n + 1);\n                buffer[bufferLength++] = repeatHeader[1];\n                if (n > 0) {\n                    var source = this.stream.getBytes(n);\n                    buffer.set(source, bufferLength);\n                    bufferLength += n;\n                }\n            }\n            else {\n                n = 257 - n;\n                var b = repeatHeader[1];\n                buffer = this.ensureBuffer(bufferLength + n + 1);\n                for (var i = 0; i < n; i++) {\n                    buffer[bufferLength++] = b;\n                }\n            }\n            this.bufferLength = bufferLength;\n        };\n        return RunLengthStream;\n    }(DecodeStream));\n\n    var decodeStream = function (stream, encoding, params) {\n        if (encoding === PDFName.of('FlateDecode')) {\n            return new FlateStream(stream);\n        }\n        if (encoding === PDFName.of('LZWDecode')) {\n            var earlyChange = 1;\n            if (params instanceof PDFDict) {\n                var EarlyChange = params.lookup(PDFName.of('EarlyChange'));\n                if (EarlyChange instanceof PDFNumber) {\n                    earlyChange = EarlyChange.asNumber();\n                }\n            }\n            return new LZWStream(stream, undefined, earlyChange);\n        }\n        if (encoding === PDFName.of('ASCII85Decode')) {\n            return new Ascii85Stream(stream);\n        }\n        if (encoding === PDFName.of('ASCIIHexDecode')) {\n            return new AsciiHexStream(stream);\n        }\n        if (encoding === PDFName.of('RunLengthDecode')) {\n            return new RunLengthStream(stream);\n        }\n        throw new UnsupportedEncodingError(encoding.asString());\n    };\n    var decodePDFRawStream = function (_a) {\n        var dict = _a.dict, contents = _a.contents;\n        var stream = new Stream(contents);\n        var Filter = dict.lookup(PDFName.of('Filter'));\n        var DecodeParms = dict.lookup(PDFName.of('DecodeParms'));\n        if (Filter instanceof PDFName) {\n            stream = decodeStream(stream, Filter, DecodeParms);\n        }\n        else if (Filter instanceof PDFArray) {\n            for (var idx = 0, len = Filter.size(); idx < len; idx++) {\n                stream = decodeStream(stream, Filter.lookup(idx, PDFName), DecodeParms && DecodeParms.lookupMaybe(idx, PDFDict));\n            }\n        }\n        else if (!!Filter) {\n            throw new UnexpectedObjectTypeError([PDFName, PDFArray], Filter);\n        }\n        return stream;\n    };\n\n    var fullPageBoundingBox = function (page) {\n        var mediaBox = page.MediaBox();\n        var width = mediaBox.lookup(2, PDFNumber).asNumber() -\n            mediaBox.lookup(0, PDFNumber).asNumber();\n        var height = mediaBox.lookup(3, PDFNumber).asNumber() -\n            mediaBox.lookup(1, PDFNumber).asNumber();\n        return { left: 0, bottom: 0, right: width, top: height };\n    };\n    // Returns the identity matrix, modified to position the content of the given\n    // bounding box at (0, 0).\n    var boundingBoxAdjustedMatrix = function (bb) { return [1, 0, 0, 1, -bb.left, -bb.bottom]; };\n    var PDFPageEmbedder = /** @class */ (function () {\n        function PDFPageEmbedder(page, boundingBox, transformationMatrix) {\n            this.page = page;\n            var bb = boundingBox !== null && boundingBox !== void 0 ? boundingBox : fullPageBoundingBox(page);\n            this.width = bb.right - bb.left;\n            this.height = bb.top - bb.bottom;\n            this.boundingBox = bb;\n            this.transformationMatrix = transformationMatrix !== null && transformationMatrix !== void 0 ? transformationMatrix : boundingBoxAdjustedMatrix(bb);\n        }\n        PDFPageEmbedder.for = function (page, boundingBox, transformationMatrix) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                return tslibExports.__generator(this, function (_a) {\n                    return [2 /*return*/, new PDFPageEmbedder(page, boundingBox, transformationMatrix)];\n                });\n            });\n        };\n        PDFPageEmbedder.prototype.embedIntoContext = function (context, ref) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var _a, Contents, Resources, decodedContents, _b, left, bottom, right, top, xObject;\n                return tslibExports.__generator(this, function (_c) {\n                    _a = this.page.normalizedEntries(), Contents = _a.Contents, Resources = _a.Resources;\n                    if (!Contents)\n                        throw new MissingPageContentsEmbeddingError();\n                    decodedContents = this.decodeContents(Contents);\n                    _b = this.boundingBox, left = _b.left, bottom = _b.bottom, right = _b.right, top = _b.top;\n                    xObject = context.flateStream(decodedContents, {\n                        Type: 'XObject',\n                        Subtype: 'Form',\n                        FormType: 1,\n                        BBox: [left, bottom, right, top],\n                        Matrix: this.transformationMatrix,\n                        Resources: Resources,\n                    });\n                    if (ref) {\n                        context.assign(ref, xObject);\n                        return [2 /*return*/, ref];\n                    }\n                    else {\n                        return [2 /*return*/, context.register(xObject)];\n                    }\n                });\n            });\n        };\n        // `contents` is an array of streams which are merged to include them in the XObject.\n        // This methods extracts each stream and joins them with a newline character.\n        PDFPageEmbedder.prototype.decodeContents = function (contents) {\n            var newline = Uint8Array.of(CharCodes$1.Newline);\n            var decodedContents = [];\n            for (var idx = 0, len = contents.size(); idx < len; idx++) {\n                var stream = contents.lookup(idx, PDFStream);\n                var content = void 0;\n                if (stream instanceof PDFRawStream) {\n                    content = decodePDFRawStream(stream).decode();\n                }\n                else if (stream instanceof PDFContentStream) {\n                    content = stream.getUnencodedContents();\n                }\n                else {\n                    throw new UnrecognizedStreamTypeError(stream);\n                }\n                decodedContents.push(content, newline);\n            }\n            return mergeIntoTypedArray.apply(void 0, decodedContents);\n        };\n        return PDFPageEmbedder;\n    }());\n\n    var asEnum = function (rawValue, enumType) {\n        if (rawValue === undefined)\n            return undefined;\n        return enumType[rawValue];\n    };\n    exports.NonFullScreenPageMode = void 0;\n    (function (NonFullScreenPageMode) {\n        /**\n         * After exiting FullScreen mode, neither the document outline nor thumbnail\n         * images should be visible.\n         */\n        NonFullScreenPageMode[\"UseNone\"] = \"UseNone\";\n        /** After exiting FullScreen mode, the document outline should be visible. */\n        NonFullScreenPageMode[\"UseOutlines\"] = \"UseOutlines\";\n        /** After exiting FullScreen mode, thumbnail images should be visible. */\n        NonFullScreenPageMode[\"UseThumbs\"] = \"UseThumbs\";\n        /**\n         * After exiting FullScreen mode, the optional content group panel should be\n         * visible.\n         */\n        NonFullScreenPageMode[\"UseOC\"] = \"UseOC\";\n    })(exports.NonFullScreenPageMode || (exports.NonFullScreenPageMode = {}));\n    exports.ReadingDirection = void 0;\n    (function (ReadingDirection) {\n        /** The predominant reading order is Left to Right. */\n        ReadingDirection[\"L2R\"] = \"L2R\";\n        /**\n         * The predominant reading order is Right to left (including vertical writing\n         * systems, such as Chinese, Japanese and Korean).\n         */\n        ReadingDirection[\"R2L\"] = \"R2L\";\n    })(exports.ReadingDirection || (exports.ReadingDirection = {}));\n    exports.PrintScaling = void 0;\n    (function (PrintScaling) {\n        /** No page scaling. */\n        PrintScaling[\"None\"] = \"None\";\n        /* Use the PDF reader's default print scaling. */\n        PrintScaling[\"AppDefault\"] = \"AppDefault\";\n    })(exports.PrintScaling || (exports.PrintScaling = {}));\n    exports.Duplex = void 0;\n    (function (Duplex) {\n        /** The PDF reader should print single-sided. */\n        Duplex[\"Simplex\"] = \"Simplex\";\n        /**\n         * The PDF reader should print double sided and flip on the short edge of the\n         * sheet.\n         */\n        Duplex[\"DuplexFlipShortEdge\"] = \"DuplexFlipShortEdge\";\n        /**\n         * The PDF reader should print double sided and flip on the long edge of the\n         * sheet.\n         */\n        Duplex[\"DuplexFlipLongEdge\"] = \"DuplexFlipLongEdge\";\n    })(exports.Duplex || (exports.Duplex = {}));\n    var ViewerPreferences = /** @class */ (function () {\n        /** @ignore */\n        function ViewerPreferences(dict) {\n            this.dict = dict;\n        }\n        ViewerPreferences.prototype.lookupBool = function (key) {\n            var returnObj = this.dict.lookup(PDFName.of(key));\n            if (returnObj instanceof PDFBool)\n                return returnObj;\n            return undefined;\n        };\n        ViewerPreferences.prototype.lookupName = function (key) {\n            var returnObj = this.dict.lookup(PDFName.of(key));\n            if (returnObj instanceof PDFName)\n                return returnObj;\n            return undefined;\n        };\n        /** @ignore */\n        ViewerPreferences.prototype.HideToolbar = function () {\n            return this.lookupBool('HideToolbar');\n        };\n        /** @ignore */\n        ViewerPreferences.prototype.HideMenubar = function () {\n            return this.lookupBool('HideMenubar');\n        };\n        /** @ignore */\n        ViewerPreferences.prototype.HideWindowUI = function () {\n            return this.lookupBool('HideWindowUI');\n        };\n        /** @ignore */\n        ViewerPreferences.prototype.FitWindow = function () {\n            return this.lookupBool('FitWindow');\n        };\n        /** @ignore */\n        ViewerPreferences.prototype.CenterWindow = function () {\n            return this.lookupBool('CenterWindow');\n        };\n        /** @ignore */\n        ViewerPreferences.prototype.DisplayDocTitle = function () {\n            return this.lookupBool('DisplayDocTitle');\n        };\n        /** @ignore */\n        ViewerPreferences.prototype.NonFullScreenPageMode = function () {\n            return this.lookupName('NonFullScreenPageMode');\n        };\n        /** @ignore */\n        ViewerPreferences.prototype.Direction = function () {\n            return this.lookupName('Direction');\n        };\n        /** @ignore */\n        ViewerPreferences.prototype.PrintScaling = function () {\n            return this.lookupName('PrintScaling');\n        };\n        /** @ignore */\n        ViewerPreferences.prototype.Duplex = function () {\n            return this.lookupName('Duplex');\n        };\n        /** @ignore */\n        ViewerPreferences.prototype.PickTrayByPDFSize = function () {\n            return this.lookupBool('PickTrayByPDFSize');\n        };\n        /** @ignore */\n        ViewerPreferences.prototype.PrintPageRange = function () {\n            var PrintPageRange = this.dict.lookup(PDFName.of('PrintPageRange'));\n            if (PrintPageRange instanceof PDFArray)\n                return PrintPageRange;\n            return undefined;\n        };\n        /** @ignore */\n        ViewerPreferences.prototype.NumCopies = function () {\n            var NumCopies = this.dict.lookup(PDFName.of('NumCopies'));\n            if (NumCopies instanceof PDFNumber)\n                return NumCopies;\n            return undefined;\n        };\n        /**\n         * Returns `true` if PDF readers should hide the toolbar menus when displaying\n         * this document.\n         * @returns Whether or not toolbars should be hidden.\n         */\n        ViewerPreferences.prototype.getHideToolbar = function () {\n            var _a, _b;\n            return (_b = (_a = this.HideToolbar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n        };\n        /**\n         * Returns `true` if PDF readers should hide the menu bar when displaying this\n         * document.\n         * @returns Whether or not the menu bar should be hidden.\n         */\n        ViewerPreferences.prototype.getHideMenubar = function () {\n            var _a, _b;\n            return (_b = (_a = this.HideMenubar()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n        };\n        /**\n         * Returns `true` if PDF readers should hide the user interface elements in\n         * the document's window (such as scroll bars and navigation controls),\n         * leaving only the document's contents displayed.\n         * @returns Whether or not user interface elements should be hidden.\n         */\n        ViewerPreferences.prototype.getHideWindowUI = function () {\n            var _a, _b;\n            return (_b = (_a = this.HideWindowUI()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n        };\n        /**\n         * Returns `true` if PDF readers should resize the document's window to fit\n         * the size of the first displayed page.\n         * @returns Whether or not the window should be resized to fit.\n         */\n        ViewerPreferences.prototype.getFitWindow = function () {\n            var _a, _b;\n            return (_b = (_a = this.FitWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n        };\n        /**\n         * Returns `true` if PDF readers should position the document's window in the\n         * center of the screen.\n         * @returns Whether or not to center the document window.\n         */\n        ViewerPreferences.prototype.getCenterWindow = function () {\n            var _a, _b;\n            return (_b = (_a = this.CenterWindow()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n        };\n        /**\n         * Returns `true` if the window's title bar should display the document\n         * `Title`, taken from the document metadata (see [[PDFDocument.getTitle]]).\n         * Returns `false` if the title bar should instead display the filename of the\n         * PDF file.\n         * @returns Whether to display the document title.\n         */\n        ViewerPreferences.prototype.getDisplayDocTitle = function () {\n            var _a, _b;\n            return (_b = (_a = this.DisplayDocTitle()) === null || _a === void 0 ? void 0 : _a.asBoolean()) !== null && _b !== void 0 ? _b : false;\n        };\n        /**\n         * Returns the page mode, which tells the PDF reader how to display the\n         * document after exiting full-screen mode.\n         * @returns The page mode after exiting full-screen mode.\n         */\n        ViewerPreferences.prototype.getNonFullScreenPageMode = function () {\n            var _a, _b;\n            var mode = (_a = this.NonFullScreenPageMode()) === null || _a === void 0 ? void 0 : _a.decodeText();\n            return (_b = asEnum(mode, exports.NonFullScreenPageMode)) !== null && _b !== void 0 ? _b : exports.NonFullScreenPageMode.UseNone;\n        };\n        /**\n         * Returns the predominant reading order for text.\n         * @returns The text reading order.\n         */\n        ViewerPreferences.prototype.getReadingDirection = function () {\n            var _a, _b;\n            var direction = (_a = this.Direction()) === null || _a === void 0 ? void 0 : _a.decodeText();\n            return (_b = asEnum(direction, exports.ReadingDirection)) !== null && _b !== void 0 ? _b : exports.ReadingDirection.L2R;\n        };\n        /**\n         * Returns the page scaling option that the PDF reader should select when the\n         * print dialog is displayed.\n         * @returns The page scaling option.\n         */\n        ViewerPreferences.prototype.getPrintScaling = function () {\n            var _a, _b;\n            var scaling = (_a = this.PrintScaling()) === null || _a === void 0 ? void 0 : _a.decodeText();\n            return (_b = asEnum(scaling, exports.PrintScaling)) !== null && _b !== void 0 ? _b : exports.PrintScaling.AppDefault;\n        };\n        /**\n         * Returns the paper handling option that should be used when printing the\n         * file from the print dialog.\n         * @returns The paper handling option.\n         */\n        ViewerPreferences.prototype.getDuplex = function () {\n            var _a;\n            var duplex = (_a = this.Duplex()) === null || _a === void 0 ? void 0 : _a.decodeText();\n            return asEnum(duplex, exports.Duplex);\n        };\n        /**\n         * Returns `true` if the PDF page size should be used to select the input\n         * paper tray.\n         * @returns Whether or not the PDF page size should be used to select the\n         *          input paper tray.\n         */\n        ViewerPreferences.prototype.getPickTrayByPDFSize = function () {\n            var _a;\n            return (_a = this.PickTrayByPDFSize()) === null || _a === void 0 ? void 0 : _a.asBoolean();\n        };\n        /**\n         * Returns an array of page number ranges, which are the values used to\n         * initialize the print dialog box when the file is printed. Each range\n         * specifies the first (`start`) and last (`end`) pages in a sub-range of\n         * pages to be printed. The first page of the PDF file is denoted by 0.\n         * For example:\n         * ```js\n         * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n         * const includesPage3 = viewerPrefs\n         *   .getPrintRanges()\n         *   .some(pr => pr.start =< 2 && pr.end >= 2)\n         * if (includesPage3) console.log('printRange includes page 3')\n         * ```\n         * @returns An array of objects, each with the properties `start` and `end`,\n         *          denoting page indices. If not, specified an empty array is\n         *          returned.\n         */\n        ViewerPreferences.prototype.getPrintPageRange = function () {\n            var rng = this.PrintPageRange();\n            if (!rng)\n                return [];\n            var pageRanges = [];\n            for (var i = 0; i < rng.size(); i += 2) {\n                // Despite the spec clearly stating that \"The first page of the PDF file\n                // shall be donoted by 1\", several test PDFs (spec 1.7) created in\n                // Acrobat XI 11.0 and also read with Reader DC 2020.013 indicate this is\n                // actually a 0 based index.\n                var start = rng.lookup(i, PDFNumber).asNumber();\n                var end = rng.lookup(i + 1, PDFNumber).asNumber();\n                pageRanges.push({ start: start, end: end });\n            }\n            return pageRanges;\n        };\n        /**\n         * Returns the number of copies to be printed when the print dialog is opened\n         * for this document.\n         * @returns The default number of copies to be printed.\n         */\n        ViewerPreferences.prototype.getNumCopies = function () {\n            var _a, _b;\n            return (_b = (_a = this.NumCopies()) === null || _a === void 0 ? void 0 : _a.asNumber()) !== null && _b !== void 0 ? _b : 1;\n        };\n        /**\n         * Choose whether the PDF reader's toolbars should be hidden while the\n         * document is active.\n         * @param hideToolbar `true` if the toolbar should be hidden.\n         */\n        ViewerPreferences.prototype.setHideToolbar = function (hideToolbar) {\n            var HideToolbar = this.dict.context.obj(hideToolbar);\n            this.dict.set(PDFName.of('HideToolbar'), HideToolbar);\n        };\n        /**\n         * Choose whether the PDF reader's menu bar should be hidden while the\n         * document is active.\n         * @param hideMenubar `true` if the menu bar should be hidden.\n         */\n        ViewerPreferences.prototype.setHideMenubar = function (hideMenubar) {\n            var HideMenubar = this.dict.context.obj(hideMenubar);\n            this.dict.set(PDFName.of('HideMenubar'), HideMenubar);\n        };\n        /**\n         * Choose whether the PDF reader should hide user interface elements in the\n         * document's window (such as scroll bars and navigation controls), leaving\n         * only the document's contents displayed.\n         * @param hideWindowUI `true` if the user interface elements should be hidden.\n         */\n        ViewerPreferences.prototype.setHideWindowUI = function (hideWindowUI) {\n            var HideWindowUI = this.dict.context.obj(hideWindowUI);\n            this.dict.set(PDFName.of('HideWindowUI'), HideWindowUI);\n        };\n        /**\n         * Choose whether the PDF reader should resize the document's window to fit\n         * the size of the first displayed page.\n         * @param fitWindow `true` if the window should be resized.\n         */\n        ViewerPreferences.prototype.setFitWindow = function (fitWindow) {\n            var FitWindow = this.dict.context.obj(fitWindow);\n            this.dict.set(PDFName.of('FitWindow'), FitWindow);\n        };\n        /**\n         * Choose whether the PDF reader should position the document's window in the\n         * center of the screen.\n         * @param centerWindow `true` if the window should be centered.\n         */\n        ViewerPreferences.prototype.setCenterWindow = function (centerWindow) {\n            var CenterWindow = this.dict.context.obj(centerWindow);\n            this.dict.set(PDFName.of('CenterWindow'), CenterWindow);\n        };\n        /**\n         * Choose whether the window's title bar should display the document `Title`\n         * taken from the document metadata (see [[PDFDocument.setTitle]]). If\n         * `false`, the title bar should instead display the PDF filename.\n         * @param displayTitle `true` if the document title should be displayed.\n         */\n        ViewerPreferences.prototype.setDisplayDocTitle = function (displayTitle) {\n            var DisplayDocTitle = this.dict.context.obj(displayTitle);\n            this.dict.set(PDFName.of('DisplayDocTitle'), DisplayDocTitle);\n        };\n        /**\n         * Choose how the PDF reader should display the document upon exiting\n         * full-screen mode. This entry is meaningful only if the value of the\n         * `PageMode` entry in the document's [[PDFCatalog]] is `FullScreen`.\n         *\n         * For example:\n         * ```js\n         * import { PDFDocument, NonFullScreenPageMode, PDFName } from 'pdf-lib'\n         *\n         * const pdfDoc = await PDFDocument.create()\n         *\n         * // Set the PageMode\n         * pdfDoc.catalog.set(PDFName.of('PageMode'),PDFName.of('FullScreen'))\n         *\n         * // Set what happens when full-screen is closed\n         * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n         * viewerPrefs.setNonFullScreenPageMode(NonFullScreenPageMode.UseOutlines)\n         * ```\n         *\n         * @param nonFullScreenPageMode How the document should be displayed upon\n         *                              exiting full screen mode.\n         */\n        ViewerPreferences.prototype.setNonFullScreenPageMode = function (nonFullScreenPageMode) {\n            assertIsOneOf(nonFullScreenPageMode, 'nonFullScreenPageMode', exports.NonFullScreenPageMode);\n            var mode = PDFName.of(nonFullScreenPageMode);\n            this.dict.set(PDFName.of('NonFullScreenPageMode'), mode);\n        };\n        /**\n         * Choose the predominant reading order for text.\n         *\n         * This entry has no direct effect on the document's contents or page\n         * numbering, but may be used to determine the relative positioning of pages\n         * when displayed side by side or printed n-up.\n         *\n         * For example:\n         * ```js\n         * import { PDFDocument, ReadingDirection } from 'pdf-lib'\n         *\n         * const pdfDoc = await PDFDocument.create()\n         * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n         * viewerPrefs.setReadingDirection(ReadingDirection.R2L)\n         * ```\n         *\n         * @param readingDirection The reading order for text.\n         */\n        ViewerPreferences.prototype.setReadingDirection = function (readingDirection) {\n            assertIsOneOf(readingDirection, 'readingDirection', exports.ReadingDirection);\n            var direction = PDFName.of(readingDirection);\n            this.dict.set(PDFName.of('Direction'), direction);\n        };\n        /**\n         * Choose the page scaling option that should be selected when a print dialog\n         * is displayed for this document.\n         *\n         * For example:\n         * ```js\n         * import { PDFDocument, PrintScaling } from 'pdf-lib'\n         *\n         * const pdfDoc = await PDFDocument.create()\n         * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n         * viewerPrefs.setPrintScaling(PrintScaling.None)\n         * ```\n         *\n         * @param printScaling The print scaling option.\n         */\n        ViewerPreferences.prototype.setPrintScaling = function (printScaling) {\n            assertIsOneOf(printScaling, 'printScaling', exports.PrintScaling);\n            var scaling = PDFName.of(printScaling);\n            this.dict.set(PDFName.of('PrintScaling'), scaling);\n        };\n        /**\n         * Choose the paper handling option that should be selected by default in the\n         * print dialog.\n         *\n         * For example:\n         * ```js\n         * import { PDFDocument, Duplex } from 'pdf-lib'\n         *\n         * const pdfDoc = await PDFDocument.create()\n         * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n         * viewerPrefs.setDuplex(Duplex.DuplexFlipShortEdge)\n         * ```\n         *\n         * @param duplex The double or single sided printing option.\n         */\n        ViewerPreferences.prototype.setDuplex = function (duplex) {\n            assertIsOneOf(duplex, 'duplex', exports.Duplex);\n            var dup = PDFName.of(duplex);\n            this.dict.set(PDFName.of('Duplex'), dup);\n        };\n        /**\n         * Choose whether the PDF document's page size should be used to select the\n         * input paper tray when printing. This setting influences only the preset\n         * values used to populate the print dialog presented by a PDF reader.\n         *\n         * If PickTrayByPDFSize is true, the check box in the print dialog associated\n         * with input paper tray should be checked. This setting has no effect on\n         * operating systems that do not provide the ability to pick the input tray\n         * by size.\n         *\n         * @param pickTrayByPDFSize `true` if the document's page size should be used\n         *                          to select the input paper tray.\n         */\n        ViewerPreferences.prototype.setPickTrayByPDFSize = function (pickTrayByPDFSize) {\n            var PickTrayByPDFSize = this.dict.context.obj(pickTrayByPDFSize);\n            this.dict.set(PDFName.of('PickTrayByPDFSize'), PickTrayByPDFSize);\n        };\n        /**\n         * Choose the page numbers used to initialize the print dialog box when the\n         * file is printed. The first page of the PDF file is denoted by 0.\n         *\n         * For example:\n         * ```js\n         * import { PDFDocument } from 'pdf-lib'\n         *\n         * const pdfDoc = await PDFDocument.create()\n         * const viewerPrefs = pdfDoc.catalog.getOrCreateViewerPreferences()\n         *\n         * // We can set the default print range to only the first page\n         * viewerPrefs.setPrintPageRange({ start: 0, end: 0 })\n         *\n         * // Or we can supply noncontiguous ranges (e.g. pages 1, 3, and 5-7)\n         * viewerPrefs.setPrintPageRange([\n         *   { start: 0, end: 0 },\n         *   { start: 2, end: 2 },\n         *   { start: 4, end: 6 },\n         * ])\n         * ```\n         *\n         * @param printPageRange An object or array of objects, each with the\n         *                       properties `start` and `end`, denoting a range of\n         *                       page indices.\n         */\n        ViewerPreferences.prototype.setPrintPageRange = function (printPageRange) {\n            if (!Array.isArray(printPageRange))\n                printPageRange = [printPageRange];\n            var flatRange = [];\n            for (var idx = 0, len = printPageRange.length; idx < len; idx++) {\n                flatRange.push(printPageRange[idx].start);\n                flatRange.push(printPageRange[idx].end);\n            }\n            assertEachIs(flatRange, 'printPageRange', ['number']);\n            var pageRanges = this.dict.context.obj(flatRange);\n            this.dict.set(PDFName.of('PrintPageRange'), pageRanges);\n        };\n        /**\n         * Choose the default number of copies to be printed when the print dialog is\n         * opened for this file.\n         * @param numCopies The default number of copies.\n         */\n        ViewerPreferences.prototype.setNumCopies = function (numCopies) {\n            assertRange(numCopies, 'numCopies', 1, Number.MAX_VALUE);\n            assertInteger(numCopies, 'numCopies');\n            var NumCopies = this.dict.context.obj(numCopies);\n            this.dict.set(PDFName.of('NumCopies'), NumCopies);\n        };\n        /** @ignore */\n        ViewerPreferences.fromDict = function (dict) {\n            return new ViewerPreferences(dict);\n        };\n        /** @ignore */\n        ViewerPreferences.create = function (context) {\n            var dict = context.obj({});\n            return new ViewerPreferences(dict);\n        };\n        return ViewerPreferences;\n    }());\n\n    // Examples:\n    //   `/Helv 12 Tf` -> ['Helv', '12']\n    //   `/HeBo 8.00 Tf` -> ['HeBo', '8.00']\n    //   `/HeBo Tf` -> ['HeBo', undefined]\n    var tfRegex$1 = /\\/([^\\0\\t\\n\\f\\r\\ ]+)[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]+Tf/;\n    var PDFAcroField = /** @class */ (function () {\n        function PDFAcroField(dict, ref) {\n            this.dict = dict;\n            this.ref = ref;\n        }\n        PDFAcroField.prototype.T = function () {\n            return this.dict.lookupMaybe(PDFName.of('T'), PDFString, PDFHexString);\n        };\n        PDFAcroField.prototype.Ff = function () {\n            var numberOrRef = this.getInheritableAttribute(PDFName.of('Ff'));\n            return this.dict.context.lookupMaybe(numberOrRef, PDFNumber);\n        };\n        PDFAcroField.prototype.V = function () {\n            var valueOrRef = this.getInheritableAttribute(PDFName.of('V'));\n            return this.dict.context.lookup(valueOrRef);\n        };\n        PDFAcroField.prototype.Kids = function () {\n            return this.dict.lookupMaybe(PDFName.of('Kids'), PDFArray);\n        };\n        // Parent(): PDFDict | undefined {\n        //   return this.dict.lookupMaybe(PDFName.of('Parent'), PDFDict);\n        // }\n        PDFAcroField.prototype.DA = function () {\n            var da = this.dict.lookup(PDFName.of('DA'));\n            if (da instanceof PDFString || da instanceof PDFHexString)\n                return da;\n            return undefined;\n        };\n        PDFAcroField.prototype.setKids = function (kids) {\n            this.dict.set(PDFName.of('Kids'), this.dict.context.obj(kids));\n        };\n        PDFAcroField.prototype.getParent = function () {\n            // const parent = this.Parent();\n            // if (!parent) return undefined;\n            // return new PDFAcroField(parent);\n            var parentRef = this.dict.get(PDFName.of('Parent'));\n            if (parentRef instanceof PDFRef) {\n                var parent_1 = this.dict.lookup(PDFName.of('Parent'), PDFDict);\n                return new PDFAcroField(parent_1, parentRef);\n            }\n            return undefined;\n        };\n        PDFAcroField.prototype.setParent = function (parent) {\n            if (!parent)\n                this.dict.delete(PDFName.of('Parent'));\n            else\n                this.dict.set(PDFName.of('Parent'), parent);\n        };\n        PDFAcroField.prototype.getFullyQualifiedName = function () {\n            var parent = this.getParent();\n            if (!parent)\n                return this.getPartialName();\n            return parent.getFullyQualifiedName() + \".\" + this.getPartialName();\n        };\n        PDFAcroField.prototype.getPartialName = function () {\n            var _a;\n            return (_a = this.T()) === null || _a === void 0 ? void 0 : _a.decodeText();\n        };\n        PDFAcroField.prototype.setPartialName = function (partialName) {\n            if (!partialName)\n                this.dict.delete(PDFName.of('T'));\n            else\n                this.dict.set(PDFName.of('T'), PDFHexString.fromText(partialName));\n        };\n        PDFAcroField.prototype.setDefaultAppearance = function (appearance) {\n            this.dict.set(PDFName.of('DA'), PDFString.of(appearance));\n        };\n        PDFAcroField.prototype.getDefaultAppearance = function () {\n            var DA = this.DA();\n            if (DA instanceof PDFHexString) {\n                return DA.decodeText();\n            }\n            return DA === null || DA === void 0 ? void 0 : DA.asString();\n        };\n        PDFAcroField.prototype.setFontSize = function (fontSize) {\n            var _a;\n            var name = (_a = this.getFullyQualifiedName()) !== null && _a !== void 0 ? _a : '';\n            var da = this.getDefaultAppearance();\n            if (!da)\n                throw new MissingDAEntryError(name);\n            var daMatch = findLastMatch(da, tfRegex$1);\n            if (!daMatch.match)\n                throw new MissingTfOperatorError(name);\n            var daStart = da.slice(0, daMatch.pos - daMatch.match[0].length);\n            var daEnd = daMatch.pos <= da.length ? da.slice(daMatch.pos) : '';\n            var fontName = daMatch.match[1];\n            var modifiedDa = daStart + \" /\" + fontName + \" \" + fontSize + \" Tf \" + daEnd;\n            this.setDefaultAppearance(modifiedDa);\n        };\n        PDFAcroField.prototype.getFlags = function () {\n            var _a, _b;\n            return (_b = (_a = this.Ff()) === null || _a === void 0 ? void 0 : _a.asNumber()) !== null && _b !== void 0 ? _b : 0;\n        };\n        PDFAcroField.prototype.setFlags = function (flags) {\n            this.dict.set(PDFName.of('Ff'), PDFNumber.of(flags));\n        };\n        PDFAcroField.prototype.hasFlag = function (flag) {\n            var flags = this.getFlags();\n            return (flags & flag) !== 0;\n        };\n        PDFAcroField.prototype.setFlag = function (flag) {\n            var flags = this.getFlags();\n            this.setFlags(flags | flag);\n        };\n        PDFAcroField.prototype.clearFlag = function (flag) {\n            var flags = this.getFlags();\n            this.setFlags(flags & ~flag);\n        };\n        PDFAcroField.prototype.setFlagTo = function (flag, enable) {\n            if (enable)\n                this.setFlag(flag);\n            else\n                this.clearFlag(flag);\n        };\n        PDFAcroField.prototype.getInheritableAttribute = function (name) {\n            var attribute;\n            this.ascend(function (node) {\n                if (!attribute)\n                    attribute = node.dict.get(name);\n            });\n            return attribute;\n        };\n        PDFAcroField.prototype.ascend = function (visitor) {\n            visitor(this);\n            var parent = this.getParent();\n            if (parent)\n                parent.ascend(visitor);\n        };\n        return PDFAcroField;\n    }());\n\n    // TODO: Also handle the `/S` and `/D` entries\n    var BorderStyle = /** @class */ (function () {\n        function BorderStyle(dict) {\n            this.dict = dict;\n        }\n        BorderStyle.prototype.W = function () {\n            var W = this.dict.lookup(PDFName.of('W'));\n            if (W instanceof PDFNumber)\n                return W;\n            return undefined;\n        };\n        BorderStyle.prototype.getWidth = function () {\n            var _a, _b;\n            return (_b = (_a = this.W()) === null || _a === void 0 ? void 0 : _a.asNumber()) !== null && _b !== void 0 ? _b : 1;\n        };\n        BorderStyle.prototype.setWidth = function (width) {\n            var W = this.dict.context.obj(width);\n            this.dict.set(PDFName.of('W'), W);\n        };\n        BorderStyle.fromDict = function (dict) { return new BorderStyle(dict); };\n        return BorderStyle;\n    }());\n\n    var PDFAnnotation = /** @class */ (function () {\n        function PDFAnnotation(dict) {\n            this.dict = dict;\n        }\n        // This is technically required by the PDF spec\n        PDFAnnotation.prototype.Rect = function () {\n            return this.dict.lookup(PDFName.of('Rect'), PDFArray);\n        };\n        PDFAnnotation.prototype.AP = function () {\n            return this.dict.lookupMaybe(PDFName.of('AP'), PDFDict);\n        };\n        PDFAnnotation.prototype.F = function () {\n            var numberOrRef = this.dict.lookup(PDFName.of('F'));\n            return this.dict.context.lookupMaybe(numberOrRef, PDFNumber);\n        };\n        PDFAnnotation.prototype.getRectangle = function () {\n            var _a;\n            var Rect = this.Rect();\n            return (_a = Rect === null || Rect === void 0 ? void 0 : Rect.asRectangle()) !== null && _a !== void 0 ? _a : { x: 0, y: 0, width: 0, height: 0 };\n        };\n        PDFAnnotation.prototype.setRectangle = function (rect) {\n            var x = rect.x, y = rect.y, width = rect.width, height = rect.height;\n            var Rect = this.dict.context.obj([x, y, x + width, y + height]);\n            this.dict.set(PDFName.of('Rect'), Rect);\n        };\n        PDFAnnotation.prototype.getAppearanceState = function () {\n            var AS = this.dict.lookup(PDFName.of('AS'));\n            if (AS instanceof PDFName)\n                return AS;\n            return undefined;\n        };\n        PDFAnnotation.prototype.setAppearanceState = function (state) {\n            this.dict.set(PDFName.of('AS'), state);\n        };\n        PDFAnnotation.prototype.setAppearances = function (appearances) {\n            this.dict.set(PDFName.of('AP'), appearances);\n        };\n        PDFAnnotation.prototype.ensureAP = function () {\n            var AP = this.AP();\n            if (!AP) {\n                AP = this.dict.context.obj({});\n                this.dict.set(PDFName.of('AP'), AP);\n            }\n            return AP;\n        };\n        PDFAnnotation.prototype.getNormalAppearance = function () {\n            var AP = this.ensureAP();\n            var N = AP.get(PDFName.of('N'));\n            if (N instanceof PDFRef || N instanceof PDFDict)\n                return N;\n            throw new Error(\"Unexpected N type: \" + (N === null || N === void 0 ? void 0 : N.constructor.name));\n        };\n        /** @param appearance A PDFDict or PDFStream (direct or ref) */\n        PDFAnnotation.prototype.setNormalAppearance = function (appearance) {\n            var AP = this.ensureAP();\n            AP.set(PDFName.of('N'), appearance);\n        };\n        /** @param appearance A PDFDict or PDFStream (direct or ref) */\n        PDFAnnotation.prototype.setRolloverAppearance = function (appearance) {\n            var AP = this.ensureAP();\n            AP.set(PDFName.of('R'), appearance);\n        };\n        /** @param appearance A PDFDict or PDFStream (direct or ref) */\n        PDFAnnotation.prototype.setDownAppearance = function (appearance) {\n            var AP = this.ensureAP();\n            AP.set(PDFName.of('D'), appearance);\n        };\n        PDFAnnotation.prototype.removeRolloverAppearance = function () {\n            var AP = this.AP();\n            AP === null || AP === void 0 ? void 0 : AP.delete(PDFName.of('R'));\n        };\n        PDFAnnotation.prototype.removeDownAppearance = function () {\n            var AP = this.AP();\n            AP === null || AP === void 0 ? void 0 : AP.delete(PDFName.of('D'));\n        };\n        PDFAnnotation.prototype.getAppearances = function () {\n            var AP = this.AP();\n            if (!AP)\n                return undefined;\n            var N = AP.lookup(PDFName.of('N'), PDFDict, PDFStream);\n            var R = AP.lookupMaybe(PDFName.of('R'), PDFDict, PDFStream);\n            var D = AP.lookupMaybe(PDFName.of('D'), PDFDict, PDFStream);\n            return { normal: N, rollover: R, down: D };\n        };\n        PDFAnnotation.prototype.getFlags = function () {\n            var _a, _b;\n            return (_b = (_a = this.F()) === null || _a === void 0 ? void 0 : _a.asNumber()) !== null && _b !== void 0 ? _b : 0;\n        };\n        PDFAnnotation.prototype.setFlags = function (flags) {\n            this.dict.set(PDFName.of('F'), PDFNumber.of(flags));\n        };\n        PDFAnnotation.prototype.hasFlag = function (flag) {\n            var flags = this.getFlags();\n            return (flags & flag) !== 0;\n        };\n        PDFAnnotation.prototype.setFlag = function (flag) {\n            var flags = this.getFlags();\n            this.setFlags(flags | flag);\n        };\n        PDFAnnotation.prototype.clearFlag = function (flag) {\n            var flags = this.getFlags();\n            this.setFlags(flags & ~flag);\n        };\n        PDFAnnotation.prototype.setFlagTo = function (flag, enable) {\n            if (enable)\n                this.setFlag(flag);\n            else\n                this.clearFlag(flag);\n        };\n        PDFAnnotation.fromDict = function (dict) { return new PDFAnnotation(dict); };\n        return PDFAnnotation;\n    }());\n\n    var AppearanceCharacteristics = /** @class */ (function () {\n        function AppearanceCharacteristics(dict) {\n            this.dict = dict;\n        }\n        AppearanceCharacteristics.prototype.R = function () {\n            var R = this.dict.lookup(PDFName.of('R'));\n            if (R instanceof PDFNumber)\n                return R;\n            return undefined;\n        };\n        AppearanceCharacteristics.prototype.BC = function () {\n            var BC = this.dict.lookup(PDFName.of('BC'));\n            if (BC instanceof PDFArray)\n                return BC;\n            return undefined;\n        };\n        AppearanceCharacteristics.prototype.BG = function () {\n            var BG = this.dict.lookup(PDFName.of('BG'));\n            if (BG instanceof PDFArray)\n                return BG;\n            return undefined;\n        };\n        AppearanceCharacteristics.prototype.CA = function () {\n            var CA = this.dict.lookup(PDFName.of('CA'));\n            if (CA instanceof PDFHexString || CA instanceof PDFString)\n                return CA;\n            return undefined;\n        };\n        AppearanceCharacteristics.prototype.RC = function () {\n            var RC = this.dict.lookup(PDFName.of('RC'));\n            if (RC instanceof PDFHexString || RC instanceof PDFString)\n                return RC;\n            return undefined;\n        };\n        AppearanceCharacteristics.prototype.AC = function () {\n            var AC = this.dict.lookup(PDFName.of('AC'));\n            if (AC instanceof PDFHexString || AC instanceof PDFString)\n                return AC;\n            return undefined;\n        };\n        AppearanceCharacteristics.prototype.getRotation = function () {\n            var _a;\n            return (_a = this.R()) === null || _a === void 0 ? void 0 : _a.asNumber();\n        };\n        AppearanceCharacteristics.prototype.getBorderColor = function () {\n            var BC = this.BC();\n            if (!BC)\n                return undefined;\n            var components = [];\n            for (var idx = 0, len = BC === null || BC === void 0 ? void 0 : BC.size(); idx < len; idx++) {\n                var component = BC.get(idx);\n                if (component instanceof PDFNumber)\n                    components.push(component.asNumber());\n            }\n            return components;\n        };\n        AppearanceCharacteristics.prototype.getBackgroundColor = function () {\n            var BG = this.BG();\n            if (!BG)\n                return undefined;\n            var components = [];\n            for (var idx = 0, len = BG === null || BG === void 0 ? void 0 : BG.size(); idx < len; idx++) {\n                var component = BG.get(idx);\n                if (component instanceof PDFNumber)\n                    components.push(component.asNumber());\n            }\n            return components;\n        };\n        AppearanceCharacteristics.prototype.getCaptions = function () {\n            var CA = this.CA();\n            var RC = this.RC();\n            var AC = this.AC();\n            return {\n                normal: CA === null || CA === void 0 ? void 0 : CA.decodeText(),\n                rollover: RC === null || RC === void 0 ? void 0 : RC.decodeText(),\n                down: AC === null || AC === void 0 ? void 0 : AC.decodeText(),\n            };\n        };\n        AppearanceCharacteristics.prototype.setRotation = function (rotation) {\n            var R = this.dict.context.obj(rotation);\n            this.dict.set(PDFName.of('R'), R);\n        };\n        AppearanceCharacteristics.prototype.setBorderColor = function (color) {\n            var BC = this.dict.context.obj(color);\n            this.dict.set(PDFName.of('BC'), BC);\n        };\n        AppearanceCharacteristics.prototype.setBackgroundColor = function (color) {\n            var BG = this.dict.context.obj(color);\n            this.dict.set(PDFName.of('BG'), BG);\n        };\n        AppearanceCharacteristics.prototype.setCaptions = function (captions) {\n            var CA = PDFHexString.fromText(captions.normal);\n            this.dict.set(PDFName.of('CA'), CA);\n            if (captions.rollover) {\n                var RC = PDFHexString.fromText(captions.rollover);\n                this.dict.set(PDFName.of('RC'), RC);\n            }\n            else {\n                this.dict.delete(PDFName.of('RC'));\n            }\n            if (captions.down) {\n                var AC = PDFHexString.fromText(captions.down);\n                this.dict.set(PDFName.of('AC'), AC);\n            }\n            else {\n                this.dict.delete(PDFName.of('AC'));\n            }\n        };\n        AppearanceCharacteristics.fromDict = function (dict) {\n            return new AppearanceCharacteristics(dict);\n        };\n        return AppearanceCharacteristics;\n    }());\n\n    var PDFWidgetAnnotation = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFWidgetAnnotation, _super);\n        function PDFWidgetAnnotation() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFWidgetAnnotation.prototype.MK = function () {\n            var MK = this.dict.lookup(PDFName.of('MK'));\n            if (MK instanceof PDFDict)\n                return MK;\n            return undefined;\n        };\n        PDFWidgetAnnotation.prototype.BS = function () {\n            var BS = this.dict.lookup(PDFName.of('BS'));\n            if (BS instanceof PDFDict)\n                return BS;\n            return undefined;\n        };\n        PDFWidgetAnnotation.prototype.DA = function () {\n            var da = this.dict.lookup(PDFName.of('DA'));\n            if (da instanceof PDFString || da instanceof PDFHexString)\n                return da;\n            return undefined;\n        };\n        PDFWidgetAnnotation.prototype.P = function () {\n            var P = this.dict.get(PDFName.of('P'));\n            if (P instanceof PDFRef)\n                return P;\n            return undefined;\n        };\n        PDFWidgetAnnotation.prototype.setP = function (page) {\n            this.dict.set(PDFName.of('P'), page);\n        };\n        PDFWidgetAnnotation.prototype.setDefaultAppearance = function (appearance) {\n            this.dict.set(PDFName.of('DA'), PDFString.of(appearance));\n        };\n        PDFWidgetAnnotation.prototype.getDefaultAppearance = function () {\n            var DA = this.DA();\n            if (DA instanceof PDFHexString) {\n                return DA.decodeText();\n            }\n            return DA === null || DA === void 0 ? void 0 : DA.asString();\n        };\n        PDFWidgetAnnotation.prototype.getAppearanceCharacteristics = function () {\n            var MK = this.MK();\n            if (MK)\n                return AppearanceCharacteristics.fromDict(MK);\n            return undefined;\n        };\n        PDFWidgetAnnotation.prototype.getOrCreateAppearanceCharacteristics = function () {\n            var MK = this.MK();\n            if (MK)\n                return AppearanceCharacteristics.fromDict(MK);\n            var ac = AppearanceCharacteristics.fromDict(this.dict.context.obj({}));\n            this.dict.set(PDFName.of('MK'), ac.dict);\n            return ac;\n        };\n        PDFWidgetAnnotation.prototype.getBorderStyle = function () {\n            var BS = this.BS();\n            if (BS)\n                return BorderStyle.fromDict(BS);\n            return undefined;\n        };\n        PDFWidgetAnnotation.prototype.getOrCreateBorderStyle = function () {\n            var BS = this.BS();\n            if (BS)\n                return BorderStyle.fromDict(BS);\n            var bs = BorderStyle.fromDict(this.dict.context.obj({}));\n            this.dict.set(PDFName.of('BS'), bs.dict);\n            return bs;\n        };\n        PDFWidgetAnnotation.prototype.getOnValue = function () {\n            var _a;\n            var normal = (_a = this.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n            if (normal instanceof PDFDict) {\n                var keys = normal.keys();\n                for (var idx = 0, len = keys.length; idx < len; idx++) {\n                    var key = keys[idx];\n                    if (key !== PDFName.of('Off'))\n                        return key;\n                }\n            }\n            return undefined;\n        };\n        PDFWidgetAnnotation.fromDict = function (dict) {\n            return new PDFWidgetAnnotation(dict);\n        };\n        PDFWidgetAnnotation.create = function (context, parent) {\n            var dict = context.obj({\n                Type: 'Annot',\n                Subtype: 'Widget',\n                Rect: [0, 0, 0, 0],\n                Parent: parent,\n            });\n            return new PDFWidgetAnnotation(dict);\n        };\n        return PDFWidgetAnnotation;\n    }(PDFAnnotation));\n\n    var PDFAcroTerminal = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFAcroTerminal, _super);\n        function PDFAcroTerminal() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFAcroTerminal.prototype.FT = function () {\n            var nameOrRef = this.getInheritableAttribute(PDFName.of('FT'));\n            return this.dict.context.lookup(nameOrRef, PDFName);\n        };\n        PDFAcroTerminal.prototype.getWidgets = function () {\n            var kidDicts = this.Kids();\n            // This field is itself a widget\n            if (!kidDicts)\n                return [PDFWidgetAnnotation.fromDict(this.dict)];\n            // This field's kids are its widgets\n            var widgets = new Array(kidDicts.size());\n            for (var idx = 0, len = kidDicts.size(); idx < len; idx++) {\n                var dict = kidDicts.lookup(idx, PDFDict);\n                widgets[idx] = PDFWidgetAnnotation.fromDict(dict);\n            }\n            return widgets;\n        };\n        PDFAcroTerminal.prototype.addWidget = function (ref) {\n            var Kids = this.normalizedEntries().Kids;\n            Kids.push(ref);\n        };\n        PDFAcroTerminal.prototype.removeWidget = function (idx) {\n            var kidDicts = this.Kids();\n            if (!kidDicts) {\n                // This field is itself a widget\n                if (idx !== 0)\n                    throw new IndexOutOfBoundsError(idx, 0, 0);\n                this.setKids([]);\n            }\n            else {\n                // This field's kids are its widgets\n                if (idx < 0 || idx > kidDicts.size()) {\n                    throw new IndexOutOfBoundsError(idx, 0, kidDicts.size());\n                }\n                kidDicts.remove(idx);\n            }\n        };\n        PDFAcroTerminal.prototype.normalizedEntries = function () {\n            var Kids = this.Kids();\n            // If this field is itself a widget (because it was only rendered once in\n            // the document, so the field and widget properties were merged) then we\n            // add itself to the `Kids` array. The alternative would be to try\n            // splitting apart the widget properties and creating a separate object\n            // for them.\n            if (!Kids) {\n                Kids = this.dict.context.obj([this.ref]);\n                this.dict.set(PDFName.of('Kids'), Kids);\n            }\n            return { Kids: Kids };\n        };\n        PDFAcroTerminal.fromDict = function (dict, ref) {\n            return new PDFAcroTerminal(dict, ref);\n        };\n        return PDFAcroTerminal;\n    }(PDFAcroField));\n\n    var PDFAcroButton = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFAcroButton, _super);\n        function PDFAcroButton() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFAcroButton.prototype.Opt = function () {\n            return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n        };\n        PDFAcroButton.prototype.setOpt = function (opt) {\n            this.dict.set(PDFName.of('Opt'), this.dict.context.obj(opt));\n        };\n        PDFAcroButton.prototype.getExportValues = function () {\n            var opt = this.Opt();\n            if (!opt)\n                return undefined;\n            if (opt instanceof PDFString || opt instanceof PDFHexString) {\n                return [opt];\n            }\n            var values = [];\n            for (var idx = 0, len = opt.size(); idx < len; idx++) {\n                var value = opt.lookup(idx);\n                if (value instanceof PDFString || value instanceof PDFHexString) {\n                    values.push(value);\n                }\n            }\n            return values;\n        };\n        PDFAcroButton.prototype.removeExportValue = function (idx) {\n            var opt = this.Opt();\n            if (!opt)\n                return;\n            if (opt instanceof PDFString || opt instanceof PDFHexString) {\n                if (idx !== 0)\n                    throw new IndexOutOfBoundsError(idx, 0, 0);\n                this.setOpt([]);\n            }\n            else {\n                if (idx < 0 || idx > opt.size()) {\n                    throw new IndexOutOfBoundsError(idx, 0, opt.size());\n                }\n                opt.remove(idx);\n            }\n        };\n        // Enforce use use of /Opt even if it isn't strictly necessary\n        PDFAcroButton.prototype.normalizeExportValues = function () {\n            var _a, _b, _c, _d;\n            var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n            var Opt = [];\n            var widgets = this.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                var exportVal = (_b = exportValues[idx]) !== null && _b !== void 0 ? _b : PDFHexString.fromText((_d = (_c = widget.getOnValue()) === null || _c === void 0 ? void 0 : _c.decodeText()) !== null && _d !== void 0 ? _d : '');\n                Opt.push(exportVal);\n            }\n            this.setOpt(Opt);\n        };\n        /**\n         * Reuses existing opt if one exists with the same value (assuming\n         * `useExistingIdx` is `true`). Returns index of existing (or new) opt.\n         */\n        PDFAcroButton.prototype.addOpt = function (opt, useExistingOptIdx) {\n            var _a;\n            this.normalizeExportValues();\n            var optText = opt.decodeText();\n            var existingIdx;\n            if (useExistingOptIdx) {\n                var exportValues = (_a = this.getExportValues()) !== null && _a !== void 0 ? _a : [];\n                for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n                    var exportVal = exportValues[idx];\n                    if (exportVal.decodeText() === optText)\n                        existingIdx = idx;\n                }\n            }\n            var Opt = this.Opt();\n            Opt.push(opt);\n            return existingIdx !== null && existingIdx !== void 0 ? existingIdx : Opt.size() - 1;\n        };\n        PDFAcroButton.prototype.addWidgetWithOpt = function (widget, opt, useExistingOptIdx) {\n            var optIdx = this.addOpt(opt, useExistingOptIdx);\n            var apStateValue = PDFName.of(String(optIdx));\n            this.addWidget(widget);\n            return apStateValue;\n        };\n        return PDFAcroButton;\n    }(PDFAcroTerminal));\n\n    var PDFAcroCheckBox = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFAcroCheckBox, _super);\n        function PDFAcroCheckBox() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFAcroCheckBox.prototype.setValue = function (value) {\n            var _a;\n            var onValue = (_a = this.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n            if (value !== onValue && value !== PDFName.of('Off')) {\n                throw new InvalidAcroFieldValueError();\n            }\n            this.dict.set(PDFName.of('V'), value);\n            var widgets = this.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                var state = widget.getOnValue() === value ? value : PDFName.of('Off');\n                widget.setAppearanceState(state);\n            }\n        };\n        PDFAcroCheckBox.prototype.getValue = function () {\n            var v = this.V();\n            if (v instanceof PDFName)\n                return v;\n            return PDFName.of('Off');\n        };\n        PDFAcroCheckBox.prototype.getOnValue = function () {\n            var widget = this.getWidgets()[0];\n            return widget === null || widget === void 0 ? void 0 : widget.getOnValue();\n        };\n        PDFAcroCheckBox.fromDict = function (dict, ref) {\n            return new PDFAcroCheckBox(dict, ref);\n        };\n        PDFAcroCheckBox.create = function (context) {\n            var dict = context.obj({\n                FT: 'Btn',\n                Kids: [],\n            });\n            var ref = context.register(dict);\n            return new PDFAcroCheckBox(dict, ref);\n        };\n        return PDFAcroCheckBox;\n    }(PDFAcroButton));\n\n    var flag$1 = function (bitIndex) { return 1 << bitIndex; };\n    /** From PDF spec table 221 */\n    exports.AcroFieldFlags = void 0;\n    (function (AcroFieldFlags) {\n        /**\n         * If set, the user may not change the value of the field. Any associated\n         * widget annotations will not interact with the user; that is, they will not\n         * respond to mouse clicks or change their appearance in response to mouse\n         * motions. This flag is useful for fields whose values are computed or\n         * imported from a database.\n         */\n        AcroFieldFlags[AcroFieldFlags[\"ReadOnly\"] = flag$1(1 - 1)] = \"ReadOnly\";\n        /**\n         * If set, the field shall have a value at the time it is exported by a\n         * submit-form action (see 12.7.5.2, \"Submit-Form Action\").\n         */\n        AcroFieldFlags[AcroFieldFlags[\"Required\"] = flag$1(2 - 1)] = \"Required\";\n        /**\n         * If set, the field shall not be exported by a submit-form action\n         * (see 12.7.5.2, \"Submit-Form Action\").\n         */\n        AcroFieldFlags[AcroFieldFlags[\"NoExport\"] = flag$1(3 - 1)] = \"NoExport\";\n    })(exports.AcroFieldFlags || (exports.AcroFieldFlags = {}));\n    /** From PDF spec table 226 */\n    exports.AcroButtonFlags = void 0;\n    (function (AcroButtonFlags) {\n        /**\n         * (Radio buttons only) If set, exactly one radio button shall be selected at\n         * all times; selecting the currently selected button has no effect. If clear,\n         * clicking the selected button deselects it, leaving no button selected.\n         */\n        AcroButtonFlags[AcroButtonFlags[\"NoToggleToOff\"] = flag$1(15 - 1)] = \"NoToggleToOff\";\n        /**\n         * If set, the field is a set of radio buttons; if clear, the field is a check\n         * box. This flag may be set only if the Pushbutton flag is clear.\n         */\n        AcroButtonFlags[AcroButtonFlags[\"Radio\"] = flag$1(16 - 1)] = \"Radio\";\n        /**\n         * If set, the field is a pushbutton that does not retain a permanent value.\n         */\n        AcroButtonFlags[AcroButtonFlags[\"PushButton\"] = flag$1(17 - 1)] = \"PushButton\";\n        /**\n         * If set, a group of radio buttons within a radio button field that use the\n         * same value for the on state will turn on and off in unison; that is if one\n         * is checked, they are all checked. If clear, the buttons are mutually\n         * exclusive (the same behavior as HTML radio buttons).\n         */\n        AcroButtonFlags[AcroButtonFlags[\"RadiosInUnison\"] = flag$1(26 - 1)] = \"RadiosInUnison\";\n    })(exports.AcroButtonFlags || (exports.AcroButtonFlags = {}));\n    /** From PDF spec table 228 */\n    exports.AcroTextFlags = void 0;\n    (function (AcroTextFlags) {\n        /**\n         * If set, the field may contain multiple lines of text; if clear, the field's\n         * text shall be restricted to a single line.\n         */\n        AcroTextFlags[AcroTextFlags[\"Multiline\"] = flag$1(13 - 1)] = \"Multiline\";\n        /**\n         * If set, the field is intended for entering a secure password that should\n         * not be echoed visibly to the screen. Characters typed from the keyboard\n         * shall instead be echoed in some unreadable form, such as asterisks or\n         * bullet characters.\n         * > NOTE   To protect password confidentiality, readers should never store\n         * >        the value of the text field in the PDF file if this flag is set.\n         */\n        AcroTextFlags[AcroTextFlags[\"Password\"] = flag$1(14 - 1)] = \"Password\";\n        /**\n         * If set, the text entered in the field represents the pathname of a file\n         * whose contents shall be submitted as the value of the field.\n         */\n        AcroTextFlags[AcroTextFlags[\"FileSelect\"] = flag$1(21 - 1)] = \"FileSelect\";\n        /**\n         * If set, text entered in the field shall not be spell-checked.\n         */\n        AcroTextFlags[AcroTextFlags[\"DoNotSpellCheck\"] = flag$1(23 - 1)] = \"DoNotSpellCheck\";\n        /**\n         * If set, the field shall not scroll (horizontally for single-line fields,\n         * vertically for multiple-line fields) to accommodate more text than fits\n         * within its annotation rectangle. Once the field is full, no further text\n         * shall be accepted for interactive form filling; for non-interactive form\n         * filling, the filler should take care not to add more character than will\n         * visibly fit in the defined area.\n         */\n        AcroTextFlags[AcroTextFlags[\"DoNotScroll\"] = flag$1(24 - 1)] = \"DoNotScroll\";\n        /**\n         * May be set only if the MaxLen entry is present in the text field dictionary\n         * (see Table 229) and if the Multiline, Password, and FileSelect flags are\n         * clear. If set, the field shall be automatically divided into as many\n         * equally spaced positions, or combs, as the value of MaxLen, and the text\n         * is laid out into those combs.\n         */\n        AcroTextFlags[AcroTextFlags[\"Comb\"] = flag$1(25 - 1)] = \"Comb\";\n        /**\n         * If set, the value of this field shall be a rich text string\n         * (see 12.7.3.4, \"Rich Text Strings\"). If the field has a value, the RV\n         * entry of the field dictionary (Table 222) shall specify the rich text\n         * string.\n         */\n        AcroTextFlags[AcroTextFlags[\"RichText\"] = flag$1(26 - 1)] = \"RichText\";\n    })(exports.AcroTextFlags || (exports.AcroTextFlags = {}));\n    /** From PDF spec table 230 */\n    exports.AcroChoiceFlags = void 0;\n    (function (AcroChoiceFlags) {\n        /**\n         * If set, the field is a combo box; if clear, the field is a list box.\n         */\n        AcroChoiceFlags[AcroChoiceFlags[\"Combo\"] = flag$1(18 - 1)] = \"Combo\";\n        /**\n         * If set, the combo box shall include an editable text box as well as a\n         * drop-down list; if clear, it shall include only a drop-down list. This\n         * flag shall be used only if the Combo flag is set.\n         */\n        AcroChoiceFlags[AcroChoiceFlags[\"Edit\"] = flag$1(19 - 1)] = \"Edit\";\n        /**\n         * If set, the field's option items shall be sorted alphabetically. This flag\n         * is intended for use by writers, not by readers. Conforming readers shall\n         * display the options in the order in which they occur in the Opt array\n         * (see Table 231).\n         */\n        AcroChoiceFlags[AcroChoiceFlags[\"Sort\"] = flag$1(20 - 1)] = \"Sort\";\n        /**\n         * If set, more than one of the field's option items may be selected\n         * simultaneously; if clear, at most one item shall be selected.\n         */\n        AcroChoiceFlags[AcroChoiceFlags[\"MultiSelect\"] = flag$1(22 - 1)] = \"MultiSelect\";\n        /**\n         * If set, text entered in the field shall not be spell-checked. This flag\n         * shall not be used unless the Combo and Edit flags are both set.\n         */\n        AcroChoiceFlags[AcroChoiceFlags[\"DoNotSpellCheck\"] = flag$1(23 - 1)] = \"DoNotSpellCheck\";\n        /**\n         * If set, the new value shall be committed as soon as a selection is made\n         * (commonly with the pointing device). In this case, supplying a value for\n         * a field involves three actions: selecting the field for fill-in,\n         * selecting a choice for the fill-in value, and leaving that field, which\n         * finalizes or \"commits\" the data choice and triggers any actions associated\n         * with the entry or changing of this data. If this flag is on, then\n         * processing does not wait for leaving the field action to occur, but\n         * immediately proceeds to the third step.\n         *\n         * This option enables applications to perform an action once a selection is\n         * made, without requiring the user to exit the field. If clear, the new\n         * value is not committed until the user exits the field.\n         */\n        AcroChoiceFlags[AcroChoiceFlags[\"CommitOnSelChange\"] = flag$1(27 - 1)] = \"CommitOnSelChange\";\n    })(exports.AcroChoiceFlags || (exports.AcroChoiceFlags = {}));\n\n    var PDFAcroChoice = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFAcroChoice, _super);\n        function PDFAcroChoice() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFAcroChoice.prototype.setValues = function (values) {\n            if (this.hasFlag(exports.AcroChoiceFlags.Combo) &&\n                !this.hasFlag(exports.AcroChoiceFlags.Edit) &&\n                !this.valuesAreValid(values)) {\n                throw new InvalidAcroFieldValueError();\n            }\n            if (values.length === 0) {\n                this.dict.delete(PDFName.of('V'));\n            }\n            if (values.length === 1) {\n                this.dict.set(PDFName.of('V'), values[0]);\n            }\n            if (values.length > 1) {\n                if (!this.hasFlag(exports.AcroChoiceFlags.MultiSelect)) {\n                    throw new MultiSelectValueError();\n                }\n                this.dict.set(PDFName.of('V'), this.dict.context.obj(values));\n            }\n            this.updateSelectedIndices(values);\n        };\n        PDFAcroChoice.prototype.valuesAreValid = function (values) {\n            var options = this.getOptions();\n            var _loop_1 = function (idx, len) {\n                var val = values[idx].decodeText();\n                if (!options.find(function (o) { return val === (o.display || o.value).decodeText(); })) {\n                    return { value: false };\n                }\n            };\n            for (var idx = 0, len = values.length; idx < len; idx++) {\n                var state_1 = _loop_1(idx);\n                if (typeof state_1 === \"object\")\n                    return state_1.value;\n            }\n            return true;\n        };\n        PDFAcroChoice.prototype.updateSelectedIndices = function (values) {\n            if (values.length > 1) {\n                var indices = new Array(values.length);\n                var options = this.getOptions();\n                var _loop_2 = function (idx, len) {\n                    var val = values[idx].decodeText();\n                    indices[idx] = options.findIndex(function (o) { return val === (o.display || o.value).decodeText(); });\n                };\n                for (var idx = 0, len = values.length; idx < len; idx++) {\n                    _loop_2(idx, len);\n                }\n                this.dict.set(PDFName.of('I'), this.dict.context.obj(indices.sort()));\n            }\n            else {\n                this.dict.delete(PDFName.of('I'));\n            }\n        };\n        PDFAcroChoice.prototype.getValues = function () {\n            var v = this.V();\n            if (v instanceof PDFString || v instanceof PDFHexString)\n                return [v];\n            if (v instanceof PDFArray) {\n                var values = [];\n                for (var idx = 0, len = v.size(); idx < len; idx++) {\n                    var value = v.lookup(idx);\n                    if (value instanceof PDFString || value instanceof PDFHexString) {\n                        values.push(value);\n                    }\n                }\n                return values;\n            }\n            return [];\n        };\n        PDFAcroChoice.prototype.Opt = function () {\n            return this.dict.lookupMaybe(PDFName.of('Opt'), PDFString, PDFHexString, PDFArray);\n        };\n        PDFAcroChoice.prototype.setOptions = function (options) {\n            var newOpt = new Array(options.length);\n            for (var idx = 0, len = options.length; idx < len; idx++) {\n                var _a = options[idx], value = _a.value, display = _a.display;\n                newOpt[idx] = this.dict.context.obj([value, display || value]);\n            }\n            this.dict.set(PDFName.of('Opt'), this.dict.context.obj(newOpt));\n        };\n        PDFAcroChoice.prototype.getOptions = function () {\n            var Opt = this.Opt();\n            // Not supposed to happen - Opt _should_ always be `PDFArray | undefined`\n            if (Opt instanceof PDFString || Opt instanceof PDFHexString) {\n                return [{ value: Opt, display: Opt }];\n            }\n            if (Opt instanceof PDFArray) {\n                var res = [];\n                for (var idx = 0, len = Opt.size(); idx < len; idx++) {\n                    var item = Opt.lookup(idx);\n                    // If `item` is a string, use that as both the export and text value\n                    if (item instanceof PDFString || item instanceof PDFHexString) {\n                        res.push({ value: item, display: item });\n                    }\n                    // If `item` is an array of one, treat it the same as just a string,\n                    // if it's an array of two then `item[0]` is the export value and\n                    // `item[1]` is the text value\n                    if (item instanceof PDFArray) {\n                        if (item.size() > 0) {\n                            var first = item.lookup(0, PDFString, PDFHexString);\n                            var second = item.lookupMaybe(1, PDFString, PDFHexString);\n                            res.push({ value: first, display: second || first });\n                        }\n                    }\n                }\n                return res;\n            }\n            return [];\n        };\n        return PDFAcroChoice;\n    }(PDFAcroTerminal));\n\n    var PDFAcroComboBox = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFAcroComboBox, _super);\n        function PDFAcroComboBox() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFAcroComboBox.fromDict = function (dict, ref) {\n            return new PDFAcroComboBox(dict, ref);\n        };\n        PDFAcroComboBox.create = function (context) {\n            var dict = context.obj({\n                FT: 'Ch',\n                Ff: exports.AcroChoiceFlags.Combo,\n                Kids: [],\n            });\n            var ref = context.register(dict);\n            return new PDFAcroComboBox(dict, ref);\n        };\n        return PDFAcroComboBox;\n    }(PDFAcroChoice));\n\n    var PDFAcroNonTerminal = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFAcroNonTerminal, _super);\n        function PDFAcroNonTerminal() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFAcroNonTerminal.prototype.addField = function (field) {\n            var Kids = this.normalizedEntries().Kids;\n            Kids === null || Kids === void 0 ? void 0 : Kids.push(field);\n        };\n        PDFAcroNonTerminal.prototype.normalizedEntries = function () {\n            var Kids = this.Kids();\n            if (!Kids) {\n                Kids = this.dict.context.obj([]);\n                this.dict.set(PDFName.of('Kids'), Kids);\n            }\n            return { Kids: Kids };\n        };\n        PDFAcroNonTerminal.fromDict = function (dict, ref) {\n            return new PDFAcroNonTerminal(dict, ref);\n        };\n        PDFAcroNonTerminal.create = function (context) {\n            var dict = context.obj({});\n            var ref = context.register(dict);\n            return new PDFAcroNonTerminal(dict, ref);\n        };\n        return PDFAcroNonTerminal;\n    }(PDFAcroField));\n\n    var PDFAcroSignature = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFAcroSignature, _super);\n        function PDFAcroSignature() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFAcroSignature.fromDict = function (dict, ref) {\n            return new PDFAcroSignature(dict, ref);\n        };\n        return PDFAcroSignature;\n    }(PDFAcroTerminal));\n\n    var PDFAcroText = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFAcroText, _super);\n        function PDFAcroText() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFAcroText.prototype.MaxLen = function () {\n            var maxLen = this.dict.lookup(PDFName.of('MaxLen'));\n            if (maxLen instanceof PDFNumber)\n                return maxLen;\n            return undefined;\n        };\n        PDFAcroText.prototype.Q = function () {\n            var q = this.dict.lookup(PDFName.of('Q'));\n            if (q instanceof PDFNumber)\n                return q;\n            return undefined;\n        };\n        PDFAcroText.prototype.setMaxLength = function (maxLength) {\n            this.dict.set(PDFName.of('MaxLen'), PDFNumber.of(maxLength));\n        };\n        PDFAcroText.prototype.removeMaxLength = function () {\n            this.dict.delete(PDFName.of('MaxLen'));\n        };\n        PDFAcroText.prototype.getMaxLength = function () {\n            var _a;\n            return (_a = this.MaxLen()) === null || _a === void 0 ? void 0 : _a.asNumber();\n        };\n        PDFAcroText.prototype.setQuadding = function (quadding) {\n            this.dict.set(PDFName.of('Q'), PDFNumber.of(quadding));\n        };\n        PDFAcroText.prototype.getQuadding = function () {\n            var _a;\n            return (_a = this.Q()) === null || _a === void 0 ? void 0 : _a.asNumber();\n        };\n        PDFAcroText.prototype.setValue = function (value) {\n            this.dict.set(PDFName.of('V'), value);\n            // const widgets = this.getWidgets();\n            // for (let idx = 0, len = widgets.length; idx < len; idx++) {\n            //   const widget = widgets[idx];\n            //   const state = widget.getOnValue() === value ? value : PDFName.of('Off');\n            //   widget.setAppearanceState(state);\n            // }\n        };\n        PDFAcroText.prototype.removeValue = function () {\n            this.dict.delete(PDFName.of('V'));\n        };\n        PDFAcroText.prototype.getValue = function () {\n            var v = this.V();\n            if (v instanceof PDFString || v instanceof PDFHexString)\n                return v;\n            return undefined;\n        };\n        PDFAcroText.fromDict = function (dict, ref) { return new PDFAcroText(dict, ref); };\n        PDFAcroText.create = function (context) {\n            var dict = context.obj({\n                FT: 'Tx',\n                Kids: [],\n            });\n            var ref = context.register(dict);\n            return new PDFAcroText(dict, ref);\n        };\n        return PDFAcroText;\n    }(PDFAcroTerminal));\n\n    var PDFAcroPushButton = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFAcroPushButton, _super);\n        function PDFAcroPushButton() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFAcroPushButton.fromDict = function (dict, ref) {\n            return new PDFAcroPushButton(dict, ref);\n        };\n        PDFAcroPushButton.create = function (context) {\n            var dict = context.obj({\n                FT: 'Btn',\n                Ff: exports.AcroButtonFlags.PushButton,\n                Kids: [],\n            });\n            var ref = context.register(dict);\n            return new PDFAcroPushButton(dict, ref);\n        };\n        return PDFAcroPushButton;\n    }(PDFAcroButton));\n\n    var PDFAcroRadioButton = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFAcroRadioButton, _super);\n        function PDFAcroRadioButton() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFAcroRadioButton.prototype.setValue = function (value) {\n            var onValues = this.getOnValues();\n            if (!onValues.includes(value) && value !== PDFName.of('Off')) {\n                throw new InvalidAcroFieldValueError();\n            }\n            this.dict.set(PDFName.of('V'), value);\n            var widgets = this.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                var state = widget.getOnValue() === value ? value : PDFName.of('Off');\n                widget.setAppearanceState(state);\n            }\n        };\n        PDFAcroRadioButton.prototype.getValue = function () {\n            var v = this.V();\n            if (v instanceof PDFName)\n                return v;\n            return PDFName.of('Off');\n        };\n        PDFAcroRadioButton.prototype.getOnValues = function () {\n            var widgets = this.getWidgets();\n            var onValues = [];\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var onValue = widgets[idx].getOnValue();\n                if (onValue)\n                    onValues.push(onValue);\n            }\n            return onValues;\n        };\n        PDFAcroRadioButton.fromDict = function (dict, ref) {\n            return new PDFAcroRadioButton(dict, ref);\n        };\n        PDFAcroRadioButton.create = function (context) {\n            var dict = context.obj({\n                FT: 'Btn',\n                Ff: exports.AcroButtonFlags.Radio,\n                Kids: [],\n            });\n            var ref = context.register(dict);\n            return new PDFAcroRadioButton(dict, ref);\n        };\n        return PDFAcroRadioButton;\n    }(PDFAcroButton));\n\n    var PDFAcroListBox = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFAcroListBox, _super);\n        function PDFAcroListBox() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFAcroListBox.fromDict = function (dict, ref) {\n            return new PDFAcroListBox(dict, ref);\n        };\n        PDFAcroListBox.create = function (context) {\n            var dict = context.obj({\n                FT: 'Ch',\n                Kids: [],\n            });\n            var ref = context.register(dict);\n            return new PDFAcroListBox(dict, ref);\n        };\n        return PDFAcroListBox;\n    }(PDFAcroChoice));\n\n    var createPDFAcroFields = function (kidDicts) {\n      if (!kidDicts) return [];\n      var kids = [];\n      for (var idx = 0, len = kidDicts.size(); idx < len; idx++) {\n        var ref = kidDicts.get(idx);\n        var dict = kidDicts.lookup(idx);\n        if (ref instanceof PDFRef && dict instanceof PDFDict) {\n          kids.push([createPDFAcroField(dict, ref), ref]);\n        }\n      }\n      return kids;\n    };\n    var createPDFAcroField = function (dict, ref) {\n      var isNonTerminal = isNonTerminalAcroField(dict);\n      if (isNonTerminal) return PDFAcroNonTerminal.fromDict(dict, ref);\n      return createPDFAcroTerminal(dict, ref);\n    };\n    var isNonTerminalAcroField = function (dict) {\n      var kids = dict.lookup(PDFName.of(\"Kids\"));\n      if (kids instanceof PDFArray) {\n        for (var idx = 0, len = kids.size(); idx < len; idx++) {\n          var kid = kids.lookup(idx);\n          var kidIsField = kid instanceof PDFDict && kid.has(PDFName.of(\"T\"));\n          if (kidIsField) return true;\n        }\n      }\n      return false;\n    };\n    var createPDFAcroTerminal = function (dict, ref) {\n      var ftNameOrRef = getInheritableAttribute(dict, PDFName.of(\"FT\"));\n      var type = dict.context.lookup(ftNameOrRef, PDFName);\n      if (type === PDFName.of(\"Btn\")) return createPDFAcroButton(dict, ref);\n      if (type === PDFName.of(\"Ch\")) return createPDFAcroChoice(dict, ref);\n      if (type === PDFName.of(\"Tx\")) return PDFAcroText.fromDict(dict, ref);\n      if (type === PDFName.of(\"Sig\")) return PDFAcroSignature.fromDict(dict, ref);\n      return PDFAcroTerminal.fromDict(dict, ref);\n    };\n    var createPDFAcroButton = function (dict, ref) {\n      var _a;\n      var ffNumberOrRef = getInheritableAttribute(dict, PDFName.of(\"Ff\"));\n      var ffNumber = dict.context.lookupMaybe(ffNumberOrRef, PDFNumber);\n      var flags = (_a = ffNumber === null || ffNumber === void 0 ? void 0 : ffNumber.asNumber()) !== null && _a !== void 0 ? _a : 0;\n      if (flagIsSet(flags, exports.AcroButtonFlags.PushButton)) {\n        return PDFAcroPushButton.fromDict(dict, ref);\n      } else if (flagIsSet(flags, exports.AcroButtonFlags.Radio)) {\n        return PDFAcroRadioButton.fromDict(dict, ref);\n      } else {\n        return PDFAcroCheckBox.fromDict(dict, ref);\n      }\n    };\n    var createPDFAcroChoice = function (dict, ref) {\n      var _a;\n      var ffNumberOrRef = getInheritableAttribute(dict, PDFName.of(\"Ff\"));\n      var ffNumber = dict.context.lookupMaybe(ffNumberOrRef, PDFNumber);\n      var flags = (_a = ffNumber === null || ffNumber === void 0 ? void 0 : ffNumber.asNumber()) !== null && _a !== void 0 ? _a : 0;\n      if (flagIsSet(flags, exports.AcroChoiceFlags.Combo)) {\n        return PDFAcroComboBox.fromDict(dict, ref);\n      } else {\n        return PDFAcroListBox.fromDict(dict, ref);\n      }\n    };\n    var flagIsSet = function (flags, flag) {\n      return (flags & flag) !== 0;\n    };\n    var getInheritableAttribute = function (startNode, name) {\n      var attribute;\n      ascend(startNode, function (node) {\n        if (!attribute) attribute = node.get(name);\n      });\n      return attribute;\n    };\n    var ascend = function (startNode, visitor) {\n      visitor(startNode);\n      var Parent = startNode.lookupMaybe(PDFName.of(\"Parent\"), PDFDict);\n      if (Parent) ascend(Parent, visitor);\n    };\n\n    var PDFAcroForm = /** @class */ (function () {\n        function PDFAcroForm(dict) {\n            this.dict = dict;\n        }\n        PDFAcroForm.prototype.Fields = function () {\n            var fields = this.dict.lookup(PDFName.of('Fields'));\n            if (fields instanceof PDFArray)\n                return fields;\n            return undefined;\n        };\n        PDFAcroForm.prototype.getFields = function () {\n            var Fields = this.normalizedEntries().Fields;\n            var fields = new Array(Fields.size());\n            for (var idx = 0, len = Fields.size(); idx < len; idx++) {\n                var ref = Fields.get(idx);\n                var dict = Fields.lookup(idx, PDFDict);\n                fields[idx] = [createPDFAcroField(dict, ref), ref];\n            }\n            return fields;\n        };\n        PDFAcroForm.prototype.getAllFields = function () {\n            var allFields = [];\n            var pushFields = function (fields) {\n                if (!fields)\n                    return;\n                for (var idx = 0, len = fields.length; idx < len; idx++) {\n                    var field = fields[idx];\n                    allFields.push(field);\n                    var fieldModel = field[0];\n                    if (fieldModel instanceof PDFAcroNonTerminal) {\n                        pushFields(createPDFAcroFields(fieldModel.Kids()));\n                    }\n                }\n            };\n            pushFields(this.getFields());\n            return allFields;\n        };\n        PDFAcroForm.prototype.addField = function (field) {\n            var Fields = this.normalizedEntries().Fields;\n            Fields === null || Fields === void 0 ? void 0 : Fields.push(field);\n        };\n        PDFAcroForm.prototype.removeField = function (field) {\n            var parent = field.getParent();\n            var fields = parent === undefined ? this.normalizedEntries().Fields : parent.Kids();\n            var index = fields === null || fields === void 0 ? void 0 : fields.indexOf(field.ref);\n            if (fields === undefined || index === undefined) {\n                throw new Error(\"Tried to remove inexistent field \" + field.getFullyQualifiedName());\n            }\n            fields.remove(index);\n            if (parent !== undefined && fields.size() === 0) {\n                this.removeField(parent);\n            }\n        };\n        PDFAcroForm.prototype.normalizedEntries = function () {\n            var Fields = this.Fields();\n            if (!Fields) {\n                Fields = this.dict.context.obj([]);\n                this.dict.set(PDFName.of('Fields'), Fields);\n            }\n            return { Fields: Fields };\n        };\n        PDFAcroForm.fromDict = function (dict) { return new PDFAcroForm(dict); };\n        PDFAcroForm.create = function (context) {\n            var dict = context.obj({ Fields: [] });\n            return new PDFAcroForm(dict);\n        };\n        return PDFAcroForm;\n    }());\n\n    var PDFCatalog = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFCatalog, _super);\n        function PDFCatalog() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFCatalog.prototype.Pages = function () {\n            return this.lookup(PDFName.of('Pages'), PDFDict);\n        };\n        PDFCatalog.prototype.AcroForm = function () {\n            return this.lookupMaybe(PDFName.of('AcroForm'), PDFDict);\n        };\n        PDFCatalog.prototype.getAcroForm = function () {\n            var dict = this.AcroForm();\n            if (!dict)\n                return undefined;\n            return PDFAcroForm.fromDict(dict);\n        };\n        PDFCatalog.prototype.getOrCreateAcroForm = function () {\n            var acroForm = this.getAcroForm();\n            if (!acroForm) {\n                acroForm = PDFAcroForm.create(this.context);\n                var acroFormRef = this.context.register(acroForm.dict);\n                this.set(PDFName.of('AcroForm'), acroFormRef);\n            }\n            return acroForm;\n        };\n        PDFCatalog.prototype.ViewerPreferences = function () {\n            return this.lookupMaybe(PDFName.of('ViewerPreferences'), PDFDict);\n        };\n        PDFCatalog.prototype.getViewerPreferences = function () {\n            var dict = this.ViewerPreferences();\n            if (!dict)\n                return undefined;\n            return ViewerPreferences.fromDict(dict);\n        };\n        PDFCatalog.prototype.getOrCreateViewerPreferences = function () {\n            var viewerPrefs = this.getViewerPreferences();\n            if (!viewerPrefs) {\n                viewerPrefs = ViewerPreferences.create(this.context);\n                var viewerPrefsRef = this.context.register(viewerPrefs.dict);\n                this.set(PDFName.of('ViewerPreferences'), viewerPrefsRef);\n            }\n            return viewerPrefs;\n        };\n        /**\n         * Inserts the given ref as a leaf node of this catalog's page tree at the\n         * specified index (zero-based). Also increments the `Count` of each node in\n         * the page tree hierarchy to accomodate the new page.\n         *\n         * Returns the ref of the PDFPageTree node into which `leafRef` was inserted.\n         */\n        PDFCatalog.prototype.insertLeafNode = function (leafRef, index) {\n            var pagesRef = this.get(PDFName.of('Pages'));\n            var maybeParentRef = this.Pages().insertLeafNode(leafRef, index);\n            return maybeParentRef || pagesRef;\n        };\n        PDFCatalog.prototype.removeLeafNode = function (index) {\n            this.Pages().removeLeafNode(index);\n        };\n        PDFCatalog.withContextAndPages = function (context, pages) {\n            var dict = new Map();\n            dict.set(PDFName.of('Type'), PDFName.of('Catalog'));\n            dict.set(PDFName.of('Pages'), pages);\n            return new PDFCatalog(dict, context);\n        };\n        PDFCatalog.fromMapWithContext = function (map, context) {\n            return new PDFCatalog(map, context);\n        };\n        return PDFCatalog;\n    }(PDFDict));\n\n    var PDFPageTree = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFPageTree, _super);\n        function PDFPageTree() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        PDFPageTree.prototype.Parent = function () {\n            return this.lookup(PDFName.of('Parent'));\n        };\n        PDFPageTree.prototype.Kids = function () {\n            return this.lookup(PDFName.of('Kids'), PDFArray);\n        };\n        PDFPageTree.prototype.Count = function () {\n            return this.lookup(PDFName.of('Count'), PDFNumber);\n        };\n        PDFPageTree.prototype.pushTreeNode = function (treeRef) {\n            var Kids = this.Kids();\n            Kids.push(treeRef);\n        };\n        PDFPageTree.prototype.pushLeafNode = function (leafRef) {\n            var Kids = this.Kids();\n            this.insertLeafKid(Kids.size(), leafRef);\n        };\n        /**\n         * Inserts the given ref as a leaf node of this page tree at the specified\n         * index (zero-based). Also increments the `Count` of each page tree in the\n         * hierarchy to accomodate the new page.\n         *\n         * Returns the ref of the PDFPageTree node into which `leafRef` was inserted,\n         * or `undefined` if it was inserted into the root node (the PDFPageTree upon\n         * which the method was first called).\n         */\n        PDFPageTree.prototype.insertLeafNode = function (leafRef, targetIndex) {\n            var Kids = this.Kids();\n            var Count = this.Count().asNumber();\n            if (targetIndex > Count) {\n                throw new InvalidTargetIndexError(targetIndex, Count);\n            }\n            var leafsRemainingUntilTarget = targetIndex;\n            for (var idx = 0, len = Kids.size(); idx < len; idx++) {\n                if (leafsRemainingUntilTarget === 0) {\n                    // Insert page and return\n                    this.insertLeafKid(idx, leafRef);\n                    return undefined;\n                }\n                var kidRef = Kids.get(idx);\n                var kid = this.context.lookup(kidRef);\n                if (kid instanceof PDFPageTree) {\n                    if (kid.Count().asNumber() > leafsRemainingUntilTarget) {\n                        // Dig in\n                        return (kid.insertLeafNode(leafRef, leafsRemainingUntilTarget) || kidRef);\n                    }\n                    else {\n                        // Move on\n                        leafsRemainingUntilTarget -= kid.Count().asNumber();\n                    }\n                }\n                if (kid instanceof PDFPageLeaf) {\n                    // Move on\n                    leafsRemainingUntilTarget -= 1;\n                }\n            }\n            if (leafsRemainingUntilTarget === 0) {\n                // Insert page at the end and return\n                this.insertLeafKid(Kids.size(), leafRef);\n                return undefined;\n            }\n            // Should never get here if `targetIndex` is valid\n            throw new CorruptPageTreeError(targetIndex, 'insertLeafNode');\n        };\n        /**\n         * Removes the leaf node at the specified index (zero-based) from this page\n         * tree. Also decrements the `Count` of each page tree in the hierarchy to\n         * account for the removed page.\n         *\n         * If `prune` is true, then intermediate tree nodes will be removed from the\n         * tree if they contain 0 children after the leaf node is removed.\n         */\n        PDFPageTree.prototype.removeLeafNode = function (targetIndex, prune) {\n            if (prune === void 0) { prune = true; }\n            var Kids = this.Kids();\n            var Count = this.Count().asNumber();\n            if (targetIndex >= Count) {\n                throw new InvalidTargetIndexError(targetIndex, Count);\n            }\n            var leafsRemainingUntilTarget = targetIndex;\n            for (var idx = 0, len = Kids.size(); idx < len; idx++) {\n                var kidRef = Kids.get(idx);\n                var kid = this.context.lookup(kidRef);\n                if (kid instanceof PDFPageTree) {\n                    if (kid.Count().asNumber() > leafsRemainingUntilTarget) {\n                        // Dig in\n                        kid.removeLeafNode(leafsRemainingUntilTarget, prune);\n                        if (prune && kid.Kids().size() === 0)\n                            Kids.remove(idx);\n                        return;\n                    }\n                    else {\n                        // Move on\n                        leafsRemainingUntilTarget -= kid.Count().asNumber();\n                    }\n                }\n                if (kid instanceof PDFPageLeaf) {\n                    if (leafsRemainingUntilTarget === 0) {\n                        // Remove page and return\n                        this.removeKid(idx);\n                        return;\n                    }\n                    else {\n                        // Move on\n                        leafsRemainingUntilTarget -= 1;\n                    }\n                }\n            }\n            // Should never get here if `targetIndex` is valid\n            throw new CorruptPageTreeError(targetIndex, 'removeLeafNode');\n        };\n        PDFPageTree.prototype.ascend = function (visitor) {\n            visitor(this);\n            var Parent = this.Parent();\n            if (Parent)\n                Parent.ascend(visitor);\n        };\n        /** Performs a Post-Order traversal of this page tree */\n        PDFPageTree.prototype.traverse = function (visitor) {\n            var Kids = this.Kids();\n            for (var idx = 0, len = Kids.size(); idx < len; idx++) {\n                var kidRef = Kids.get(idx);\n                var kid = this.context.lookup(kidRef);\n                if (kid instanceof PDFPageTree)\n                    kid.traverse(visitor);\n                visitor(kid, kidRef);\n            }\n        };\n        PDFPageTree.prototype.insertLeafKid = function (kidIdx, leafRef) {\n            var Kids = this.Kids();\n            this.ascend(function (node) {\n                var newCount = node.Count().asNumber() + 1;\n                node.set(PDFName.of('Count'), PDFNumber.of(newCount));\n            });\n            Kids.insert(kidIdx, leafRef);\n        };\n        PDFPageTree.prototype.removeKid = function (kidIdx) {\n            var Kids = this.Kids();\n            var kid = Kids.lookup(kidIdx);\n            if (kid instanceof PDFPageLeaf) {\n                this.ascend(function (node) {\n                    var newCount = node.Count().asNumber() - 1;\n                    node.set(PDFName.of('Count'), PDFNumber.of(newCount));\n                });\n            }\n            Kids.remove(kidIdx);\n        };\n        PDFPageTree.withContext = function (context, parent) {\n            var dict = new Map();\n            dict.set(PDFName.of('Type'), PDFName.of('Pages'));\n            dict.set(PDFName.of('Kids'), context.obj([]));\n            dict.set(PDFName.of('Count'), context.obj(0));\n            if (parent)\n                dict.set(PDFName.of('Parent'), parent);\n            return new PDFPageTree(dict, context);\n        };\n        PDFPageTree.fromMapWithContext = function (map, context) {\n            return new PDFPageTree(map, context);\n        };\n        return PDFPageTree;\n    }(PDFDict));\n\n    var IsDigit = new Uint8Array(256);\n    IsDigit[CharCodes$1.Zero] = 1;\n    IsDigit[CharCodes$1.One] = 1;\n    IsDigit[CharCodes$1.Two] = 1;\n    IsDigit[CharCodes$1.Three] = 1;\n    IsDigit[CharCodes$1.Four] = 1;\n    IsDigit[CharCodes$1.Five] = 1;\n    IsDigit[CharCodes$1.Six] = 1;\n    IsDigit[CharCodes$1.Seven] = 1;\n    IsDigit[CharCodes$1.Eight] = 1;\n    IsDigit[CharCodes$1.Nine] = 1;\n    var IsNumericPrefix = new Uint8Array(256);\n    IsNumericPrefix[CharCodes$1.Period] = 1;\n    IsNumericPrefix[CharCodes$1.Plus] = 1;\n    IsNumericPrefix[CharCodes$1.Minus] = 1;\n    var IsNumeric = new Uint8Array(256);\n    for (var idx = 0, len = 256; idx < len; idx++) {\n        IsNumeric[idx] = IsDigit[idx] || IsNumericPrefix[idx] ? 1 : 0;\n    }\n\n    var Newline$1 = CharCodes$1.Newline, CarriageReturn$1 = CharCodes$1.CarriageReturn;\n    // TODO: Throw error if eof is reached before finishing object parse...\n    var BaseParser = /** @class */ (function () {\n        function BaseParser(bytes, capNumbers) {\n            if (capNumbers === void 0) { capNumbers = false; }\n            this.bytes = bytes;\n            this.capNumbers = capNumbers;\n        }\n        BaseParser.prototype.parseRawInt = function () {\n            var value = '';\n            while (!this.bytes.done()) {\n                var byte = this.bytes.peek();\n                if (!IsDigit[byte])\n                    break;\n                value += charFromCode(this.bytes.next());\n            }\n            var numberValue = Number(value);\n            if (!value || !isFinite(numberValue)) {\n                throw new NumberParsingError(this.bytes.position(), value);\n            }\n            return numberValue;\n        };\n        // TODO: Maybe handle exponential format?\n        // TODO: Compare performance of string concatenation to charFromCode(...bytes)\n        BaseParser.prototype.parseRawNumber = function () {\n            var value = '';\n            // Parse integer-part, the leading (+ | - | . | 0-9)\n            while (!this.bytes.done()) {\n                var byte = this.bytes.peek();\n                if (!IsNumeric[byte])\n                    break;\n                value += charFromCode(this.bytes.next());\n                if (byte === CharCodes$1.Period)\n                    break;\n            }\n            // Parse decimal-part, the trailing (0-9)\n            while (!this.bytes.done()) {\n                var byte = this.bytes.peek();\n                if (!IsDigit[byte])\n                    break;\n                value += charFromCode(this.bytes.next());\n            }\n            var numberValue = Number(value);\n            if (!value || !isFinite(numberValue)) {\n                throw new NumberParsingError(this.bytes.position(), value);\n            }\n            if (numberValue > Number.MAX_SAFE_INTEGER) {\n                if (this.capNumbers) {\n                    var msg = \"Parsed number that is too large for some PDF readers: \" + value + \", using Number.MAX_SAFE_INTEGER instead.\";\n                    console.warn(msg);\n                    return Number.MAX_SAFE_INTEGER;\n                }\n                else {\n                    var msg = \"Parsed number that is too large for some PDF readers: \" + value + \", not capping.\";\n                    console.warn(msg);\n                }\n            }\n            return numberValue;\n        };\n        BaseParser.prototype.skipWhitespace = function () {\n            while (!this.bytes.done() && IsWhitespace[this.bytes.peek()]) {\n                this.bytes.next();\n            }\n        };\n        BaseParser.prototype.skipLine = function () {\n            while (!this.bytes.done()) {\n                var byte = this.bytes.peek();\n                if (byte === Newline$1 || byte === CarriageReturn$1)\n                    return;\n                this.bytes.next();\n            }\n        };\n        BaseParser.prototype.skipComment = function () {\n            if (this.bytes.peek() !== CharCodes$1.Percent)\n                return false;\n            while (!this.bytes.done()) {\n                var byte = this.bytes.peek();\n                if (byte === Newline$1 || byte === CarriageReturn$1)\n                    return true;\n                this.bytes.next();\n            }\n            return true;\n        };\n        BaseParser.prototype.skipWhitespaceAndComments = function () {\n            this.skipWhitespace();\n            while (this.skipComment())\n                this.skipWhitespace();\n        };\n        BaseParser.prototype.matchKeyword = function (keyword) {\n            var initialOffset = this.bytes.offset();\n            for (var idx = 0, len = keyword.length; idx < len; idx++) {\n                if (this.bytes.done() || this.bytes.next() !== keyword[idx]) {\n                    this.bytes.moveTo(initialOffset);\n                    return false;\n                }\n            }\n            return true;\n        };\n        return BaseParser;\n    }());\n\n    // TODO: See how line/col tracking affects performance\n    var ByteStream = /** @class */ (function () {\n        function ByteStream(bytes) {\n            this.idx = 0;\n            this.line = 0;\n            this.column = 0;\n            this.bytes = bytes;\n            this.length = this.bytes.length;\n        }\n        ByteStream.prototype.moveTo = function (offset) {\n            this.idx = offset;\n        };\n        ByteStream.prototype.next = function () {\n            var byte = this.bytes[this.idx++];\n            if (byte === CharCodes$1.Newline) {\n                this.line += 1;\n                this.column = 0;\n            }\n            else {\n                this.column += 1;\n            }\n            return byte;\n        };\n        ByteStream.prototype.assertNext = function (expected) {\n            if (this.peek() !== expected) {\n                throw new NextByteAssertionError(this.position(), expected, this.peek());\n            }\n            return this.next();\n        };\n        ByteStream.prototype.peek = function () {\n            return this.bytes[this.idx];\n        };\n        ByteStream.prototype.peekAhead = function (steps) {\n            return this.bytes[this.idx + steps];\n        };\n        ByteStream.prototype.peekAt = function (offset) {\n            return this.bytes[offset];\n        };\n        ByteStream.prototype.done = function () {\n            return this.idx >= this.length;\n        };\n        ByteStream.prototype.offset = function () {\n            return this.idx;\n        };\n        ByteStream.prototype.slice = function (start, end) {\n            return this.bytes.slice(start, end);\n        };\n        ByteStream.prototype.position = function () {\n            return { line: this.line, column: this.column, offset: this.idx };\n        };\n        ByteStream.of = function (bytes) { return new ByteStream(bytes); };\n        ByteStream.fromPDFRawStream = function (rawStream) {\n            return ByteStream.of(decodePDFRawStream(rawStream).decode());\n        };\n        return ByteStream;\n    }());\n\n    var Space = CharCodes$1.Space, CarriageReturn = CharCodes$1.CarriageReturn, Newline = CharCodes$1.Newline;\n    var stream = [\n        CharCodes$1.s,\n        CharCodes$1.t,\n        CharCodes$1.r,\n        CharCodes$1.e,\n        CharCodes$1.a,\n        CharCodes$1.m,\n    ];\n    var endstream = [\n        CharCodes$1.e,\n        CharCodes$1.n,\n        CharCodes$1.d,\n        CharCodes$1.s,\n        CharCodes$1.t,\n        CharCodes$1.r,\n        CharCodes$1.e,\n        CharCodes$1.a,\n        CharCodes$1.m,\n    ];\n    var Keywords = {\n        header: [\n            CharCodes$1.Percent,\n            CharCodes$1.P,\n            CharCodes$1.D,\n            CharCodes$1.F,\n            CharCodes$1.Dash,\n        ],\n        eof: [\n            CharCodes$1.Percent,\n            CharCodes$1.Percent,\n            CharCodes$1.E,\n            CharCodes$1.O,\n            CharCodes$1.F,\n        ],\n        obj: [CharCodes$1.o, CharCodes$1.b, CharCodes$1.j],\n        endobj: [\n            CharCodes$1.e,\n            CharCodes$1.n,\n            CharCodes$1.d,\n            CharCodes$1.o,\n            CharCodes$1.b,\n            CharCodes$1.j,\n        ],\n        xref: [CharCodes$1.x, CharCodes$1.r, CharCodes$1.e, CharCodes$1.f],\n        trailer: [\n            CharCodes$1.t,\n            CharCodes$1.r,\n            CharCodes$1.a,\n            CharCodes$1.i,\n            CharCodes$1.l,\n            CharCodes$1.e,\n            CharCodes$1.r,\n        ],\n        startxref: [\n            CharCodes$1.s,\n            CharCodes$1.t,\n            CharCodes$1.a,\n            CharCodes$1.r,\n            CharCodes$1.t,\n            CharCodes$1.x,\n            CharCodes$1.r,\n            CharCodes$1.e,\n            CharCodes$1.f,\n        ],\n        true: [CharCodes$1.t, CharCodes$1.r, CharCodes$1.u, CharCodes$1.e],\n        false: [CharCodes$1.f, CharCodes$1.a, CharCodes$1.l, CharCodes$1.s, CharCodes$1.e],\n        null: [CharCodes$1.n, CharCodes$1.u, CharCodes$1.l, CharCodes$1.l],\n        stream: stream,\n        streamEOF1: tslibExports.__spreadArrays(stream, [Space, CarriageReturn, Newline]),\n        streamEOF2: tslibExports.__spreadArrays(stream, [CarriageReturn, Newline]),\n        streamEOF3: tslibExports.__spreadArrays(stream, [CarriageReturn]),\n        streamEOF4: tslibExports.__spreadArrays(stream, [Newline]),\n        endstream: endstream,\n        EOF1endstream: tslibExports.__spreadArrays([CarriageReturn, Newline], endstream),\n        EOF2endstream: tslibExports.__spreadArrays([CarriageReturn], endstream),\n        EOF3endstream: tslibExports.__spreadArrays([Newline], endstream),\n    };\n\n    // TODO: Throw error if eof is reached before finishing object parse...\n    var PDFObjectParser = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFObjectParser, _super);\n        function PDFObjectParser(byteStream, context, capNumbers) {\n            if (capNumbers === void 0) { capNumbers = false; }\n            var _this = _super.call(this, byteStream, capNumbers) || this;\n            _this.context = context;\n            return _this;\n        }\n        // TODO: Is it possible to reduce duplicate parsing for ref lookaheads?\n        PDFObjectParser.prototype.parseObject = function () {\n            this.skipWhitespaceAndComments();\n            if (this.matchKeyword(Keywords.true))\n                return PDFBool.True;\n            if (this.matchKeyword(Keywords.false))\n                return PDFBool.False;\n            if (this.matchKeyword(Keywords.null))\n                return PDFNull$1;\n            var byte = this.bytes.peek();\n            if (byte === CharCodes$1.LessThan &&\n                this.bytes.peekAhead(1) === CharCodes$1.LessThan) {\n                return this.parseDictOrStream();\n            }\n            if (byte === CharCodes$1.LessThan)\n                return this.parseHexString();\n            if (byte === CharCodes$1.LeftParen)\n                return this.parseString();\n            if (byte === CharCodes$1.ForwardSlash)\n                return this.parseName();\n            if (byte === CharCodes$1.LeftSquareBracket)\n                return this.parseArray();\n            if (IsNumeric[byte])\n                return this.parseNumberOrRef();\n            throw new PDFObjectParsingError(this.bytes.position(), byte);\n        };\n        PDFObjectParser.prototype.parseNumberOrRef = function () {\n            var firstNum = this.parseRawNumber();\n            this.skipWhitespaceAndComments();\n            var lookaheadStart = this.bytes.offset();\n            if (IsDigit[this.bytes.peek()]) {\n                var secondNum = this.parseRawNumber();\n                this.skipWhitespaceAndComments();\n                if (this.bytes.peek() === CharCodes$1.R) {\n                    this.bytes.assertNext(CharCodes$1.R);\n                    return PDFRef.of(firstNum, secondNum);\n                }\n            }\n            this.bytes.moveTo(lookaheadStart);\n            return PDFNumber.of(firstNum);\n        };\n        // TODO: Maybe update PDFHexString.of() logic to remove whitespace and validate input?\n        PDFObjectParser.prototype.parseHexString = function () {\n            var value = '';\n            this.bytes.assertNext(CharCodes$1.LessThan);\n            while (!this.bytes.done() && this.bytes.peek() !== CharCodes$1.GreaterThan) {\n                value += charFromCode(this.bytes.next());\n            }\n            this.bytes.assertNext(CharCodes$1.GreaterThan);\n            return PDFHexString.of(value);\n        };\n        PDFObjectParser.prototype.parseString = function () {\n            var nestingLvl = 0;\n            var isEscaped = false;\n            var value = '';\n            while (!this.bytes.done()) {\n                var byte = this.bytes.next();\n                value += charFromCode(byte);\n                // Check for unescaped parenthesis\n                if (!isEscaped) {\n                    if (byte === CharCodes$1.LeftParen)\n                        nestingLvl += 1;\n                    if (byte === CharCodes$1.RightParen)\n                        nestingLvl -= 1;\n                }\n                // Track whether current character is being escaped or not\n                if (byte === CharCodes$1.BackSlash) {\n                    isEscaped = !isEscaped;\n                }\n                else if (isEscaped) {\n                    isEscaped = false;\n                }\n                // Once (if) the unescaped parenthesis balance out, return their contents\n                if (nestingLvl === 0) {\n                    // Remove the outer parens so they aren't part of the contents\n                    return PDFString.of(value.substring(1, value.length - 1));\n                }\n            }\n            throw new UnbalancedParenthesisError(this.bytes.position());\n        };\n        // TODO: Compare performance of string concatenation to charFromCode(...bytes)\n        // TODO: Maybe preallocate small Uint8Array if can use charFromCode?\n        PDFObjectParser.prototype.parseName = function () {\n            this.bytes.assertNext(CharCodes$1.ForwardSlash);\n            var name = '';\n            while (!this.bytes.done()) {\n                var byte = this.bytes.peek();\n                if (IsWhitespace[byte] || IsDelimiter[byte])\n                    break;\n                name += charFromCode(byte);\n                this.bytes.next();\n            }\n            return PDFName.of(name);\n        };\n        PDFObjectParser.prototype.parseArray = function () {\n            this.bytes.assertNext(CharCodes$1.LeftSquareBracket);\n            this.skipWhitespaceAndComments();\n            var pdfArray = PDFArray.withContext(this.context);\n            while (this.bytes.peek() !== CharCodes$1.RightSquareBracket) {\n                var element = this.parseObject();\n                pdfArray.push(element);\n                this.skipWhitespaceAndComments();\n            }\n            this.bytes.assertNext(CharCodes$1.RightSquareBracket);\n            return pdfArray;\n        };\n        PDFObjectParser.prototype.parseDict = function () {\n            this.bytes.assertNext(CharCodes$1.LessThan);\n            this.bytes.assertNext(CharCodes$1.LessThan);\n            this.skipWhitespaceAndComments();\n            var dict = new Map();\n            while (!this.bytes.done() &&\n                this.bytes.peek() !== CharCodes$1.GreaterThan &&\n                this.bytes.peekAhead(1) !== CharCodes$1.GreaterThan) {\n                var key = this.parseName();\n                var value = this.parseObject();\n                dict.set(key, value);\n                this.skipWhitespaceAndComments();\n            }\n            this.skipWhitespaceAndComments();\n            this.bytes.assertNext(CharCodes$1.GreaterThan);\n            this.bytes.assertNext(CharCodes$1.GreaterThan);\n            var Type = dict.get(PDFName.of('Type'));\n            if (Type === PDFName.of('Catalog')) {\n                return PDFCatalog.fromMapWithContext(dict, this.context);\n            }\n            else if (Type === PDFName.of('Pages')) {\n                return PDFPageTree.fromMapWithContext(dict, this.context);\n            }\n            else if (Type === PDFName.of('Page')) {\n                return PDFPageLeaf.fromMapWithContext(dict, this.context);\n            }\n            else {\n                return PDFDict.fromMapWithContext(dict, this.context);\n            }\n        };\n        PDFObjectParser.prototype.parseDictOrStream = function () {\n            var startPos = this.bytes.position();\n            var dict = this.parseDict();\n            this.skipWhitespaceAndComments();\n            if (!this.matchKeyword(Keywords.streamEOF1) &&\n                !this.matchKeyword(Keywords.streamEOF2) &&\n                !this.matchKeyword(Keywords.streamEOF3) &&\n                !this.matchKeyword(Keywords.streamEOF4) &&\n                !this.matchKeyword(Keywords.stream)) {\n                return dict;\n            }\n            var start = this.bytes.offset();\n            var end;\n            var Length = dict.get(PDFName.of('Length'));\n            if (Length instanceof PDFNumber) {\n                end = start + Length.asNumber();\n                this.bytes.moveTo(end);\n                this.skipWhitespaceAndComments();\n                if (!this.matchKeyword(Keywords.endstream)) {\n                    this.bytes.moveTo(start);\n                    end = this.findEndOfStreamFallback(startPos);\n                }\n            }\n            else {\n                end = this.findEndOfStreamFallback(startPos);\n            }\n            var contents = this.bytes.slice(start, end);\n            return PDFRawStream.of(dict, contents);\n        };\n        PDFObjectParser.prototype.findEndOfStreamFallback = function (startPos) {\n            // Move to end of stream, while handling nested streams\n            var nestingLvl = 1;\n            var end = this.bytes.offset();\n            while (!this.bytes.done()) {\n                end = this.bytes.offset();\n                if (this.matchKeyword(Keywords.stream)) {\n                    nestingLvl += 1;\n                }\n                else if (this.matchKeyword(Keywords.EOF1endstream) ||\n                    this.matchKeyword(Keywords.EOF2endstream) ||\n                    this.matchKeyword(Keywords.EOF3endstream) ||\n                    this.matchKeyword(Keywords.endstream)) {\n                    nestingLvl -= 1;\n                }\n                else {\n                    this.bytes.next();\n                }\n                if (nestingLvl === 0)\n                    break;\n            }\n            if (nestingLvl !== 0)\n                throw new PDFStreamParsingError(startPos);\n            return end;\n        };\n        PDFObjectParser.forBytes = function (bytes, context, capNumbers) { return new PDFObjectParser(ByteStream.of(bytes), context, capNumbers); };\n        PDFObjectParser.forByteStream = function (byteStream, context, capNumbers) {\n            if (capNumbers === void 0) { capNumbers = false; }\n            return new PDFObjectParser(byteStream, context, capNumbers);\n        };\n        return PDFObjectParser;\n    }(BaseParser));\n\n    var PDFObjectStreamParser = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFObjectStreamParser, _super);\n        function PDFObjectStreamParser(rawStream, shouldWaitForTick) {\n            var _this = _super.call(this, ByteStream.fromPDFRawStream(rawStream), rawStream.dict.context) || this;\n            var dict = rawStream.dict;\n            _this.alreadyParsed = false;\n            _this.shouldWaitForTick = shouldWaitForTick || (function () { return false; });\n            _this.firstOffset = dict.lookup(PDFName.of('First'), PDFNumber).asNumber();\n            _this.objectCount = dict.lookup(PDFName.of('N'), PDFNumber).asNumber();\n            return _this;\n        }\n        PDFObjectStreamParser.prototype.parseIntoContext = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var offsetsAndObjectNumbers, idx, len, _a, objectNumber, offset, object, ref;\n                return tslibExports.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            if (this.alreadyParsed) {\n                                throw new ReparseError('PDFObjectStreamParser', 'parseIntoContext');\n                            }\n                            this.alreadyParsed = true;\n                            offsetsAndObjectNumbers = this.parseOffsetsAndObjectNumbers();\n                            idx = 0, len = offsetsAndObjectNumbers.length;\n                            _b.label = 1;\n                        case 1:\n                            if (!(idx < len)) return [3 /*break*/, 4];\n                            _a = offsetsAndObjectNumbers[idx], objectNumber = _a.objectNumber, offset = _a.offset;\n                            this.bytes.moveTo(this.firstOffset + offset);\n                            object = this.parseObject();\n                            ref = PDFRef.of(objectNumber, 0);\n                            this.context.assign(ref, object);\n                            if (!this.shouldWaitForTick()) return [3 /*break*/, 3];\n                            return [4 /*yield*/, waitForTick()];\n                        case 2:\n                            _b.sent();\n                            _b.label = 3;\n                        case 3:\n                            idx++;\n                            return [3 /*break*/, 1];\n                        case 4: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        PDFObjectStreamParser.prototype.parseOffsetsAndObjectNumbers = function () {\n            var offsetsAndObjectNumbers = [];\n            for (var idx = 0, len = this.objectCount; idx < len; idx++) {\n                this.skipWhitespaceAndComments();\n                var objectNumber = this.parseRawInt();\n                this.skipWhitespaceAndComments();\n                var offset = this.parseRawInt();\n                offsetsAndObjectNumbers.push({ objectNumber: objectNumber, offset: offset });\n            }\n            return offsetsAndObjectNumbers;\n        };\n        PDFObjectStreamParser.forStream = function (rawStream, shouldWaitForTick) { return new PDFObjectStreamParser(rawStream, shouldWaitForTick); };\n        return PDFObjectStreamParser;\n    }(PDFObjectParser));\n\n    var PDFXRefStreamParser = /** @class */ (function () {\n        function PDFXRefStreamParser(rawStream) {\n            this.alreadyParsed = false;\n            this.dict = rawStream.dict;\n            this.bytes = ByteStream.fromPDFRawStream(rawStream);\n            this.context = this.dict.context;\n            var Size = this.dict.lookup(PDFName.of('Size'), PDFNumber);\n            var Index = this.dict.lookup(PDFName.of('Index'));\n            if (Index instanceof PDFArray) {\n                this.subsections = [];\n                for (var idx = 0, len = Index.size(); idx < len; idx += 2) {\n                    var firstObjectNumber = Index.lookup(idx + 0, PDFNumber).asNumber();\n                    var length_1 = Index.lookup(idx + 1, PDFNumber).asNumber();\n                    this.subsections.push({ firstObjectNumber: firstObjectNumber, length: length_1 });\n                }\n            }\n            else {\n                this.subsections = [{ firstObjectNumber: 0, length: Size.asNumber() }];\n            }\n            var W = this.dict.lookup(PDFName.of('W'), PDFArray);\n            this.byteWidths = [-1, -1, -1];\n            for (var idx = 0, len = W.size(); idx < len; idx++) {\n                this.byteWidths[idx] = W.lookup(idx, PDFNumber).asNumber();\n            }\n        }\n        PDFXRefStreamParser.prototype.parseIntoContext = function () {\n            if (this.alreadyParsed) {\n                throw new ReparseError('PDFXRefStreamParser', 'parseIntoContext');\n            }\n            this.alreadyParsed = true;\n            this.context.trailerInfo = {\n                Root: this.dict.get(PDFName.of('Root')),\n                Encrypt: this.dict.get(PDFName.of('Encrypt')),\n                Info: this.dict.get(PDFName.of('Info')),\n                ID: this.dict.get(PDFName.of('ID')),\n            };\n            var entries = this.parseEntries();\n            // for (let idx = 0, len = entries.length; idx < len; idx++) {\n            // const entry = entries[idx];\n            // if (entry.deleted) this.context.delete(entry.ref);\n            // }\n            return entries;\n        };\n        PDFXRefStreamParser.prototype.parseEntries = function () {\n            var entries = [];\n            var _a = this.byteWidths, typeFieldWidth = _a[0], offsetFieldWidth = _a[1], genFieldWidth = _a[2];\n            for (var subsectionIdx = 0, subsectionLen = this.subsections.length; subsectionIdx < subsectionLen; subsectionIdx++) {\n                var _b = this.subsections[subsectionIdx], firstObjectNumber = _b.firstObjectNumber, length_2 = _b.length;\n                for (var objIdx = 0; objIdx < length_2; objIdx++) {\n                    var type = 0;\n                    for (var idx = 0, len = typeFieldWidth; idx < len; idx++) {\n                        type = (type << 8) | this.bytes.next();\n                    }\n                    var offset = 0;\n                    for (var idx = 0, len = offsetFieldWidth; idx < len; idx++) {\n                        offset = (offset << 8) | this.bytes.next();\n                    }\n                    var generationNumber = 0;\n                    for (var idx = 0, len = genFieldWidth; idx < len; idx++) {\n                        generationNumber = (generationNumber << 8) | this.bytes.next();\n                    }\n                    // When the `type` field is absent, it defaults to 1\n                    if (typeFieldWidth === 0)\n                        type = 1;\n                    var objectNumber = firstObjectNumber + objIdx;\n                    var entry = {\n                        ref: PDFRef.of(objectNumber, generationNumber),\n                        offset: offset,\n                        deleted: type === 0,\n                        inObjectStream: type === 2,\n                    };\n                    entries.push(entry);\n                }\n            }\n            return entries;\n        };\n        PDFXRefStreamParser.forStream = function (rawStream) {\n            return new PDFXRefStreamParser(rawStream);\n        };\n        return PDFXRefStreamParser;\n    }());\n\n    var PDFParser = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFParser, _super);\n        function PDFParser(pdfBytes, objectsPerTick, throwOnInvalidObject, capNumbers) {\n            if (objectsPerTick === void 0) { objectsPerTick = Infinity; }\n            if (throwOnInvalidObject === void 0) { throwOnInvalidObject = false; }\n            if (capNumbers === void 0) { capNumbers = false; }\n            var _this = _super.call(this, ByteStream.of(pdfBytes), PDFContext.create(), capNumbers) || this;\n            _this.alreadyParsed = false;\n            _this.parsedObjects = 0;\n            _this.shouldWaitForTick = function () {\n                _this.parsedObjects += 1;\n                return _this.parsedObjects % _this.objectsPerTick === 0;\n            };\n            _this.objectsPerTick = objectsPerTick;\n            _this.throwOnInvalidObject = throwOnInvalidObject;\n            return _this;\n        }\n        PDFParser.prototype.parseDocument = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var prevOffset, offset;\n                return tslibExports.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (this.alreadyParsed) {\n                                throw new ReparseError('PDFParser', 'parseDocument');\n                            }\n                            this.alreadyParsed = true;\n                            this.context.header = this.parseHeader();\n                            _a.label = 1;\n                        case 1:\n                            if (!!this.bytes.done()) return [3 /*break*/, 3];\n                            return [4 /*yield*/, this.parseDocumentSection()];\n                        case 2:\n                            _a.sent();\n                            offset = this.bytes.offset();\n                            if (offset === prevOffset) {\n                                throw new StalledParserError(this.bytes.position());\n                            }\n                            prevOffset = offset;\n                            return [3 /*break*/, 1];\n                        case 3:\n                            this.maybeRecoverRoot();\n                            if (this.context.lookup(PDFRef.of(0))) {\n                                console.warn('Removing parsed object: 0 0 R');\n                                this.context.delete(PDFRef.of(0));\n                            }\n                            return [2 /*return*/, this.context];\n                    }\n                });\n            });\n        };\n        PDFParser.prototype.maybeRecoverRoot = function () {\n            var isValidCatalog = function (obj) {\n                return obj instanceof PDFDict &&\n                    obj.lookup(PDFName.of('Type')) === PDFName.of('Catalog');\n            };\n            var catalog = this.context.lookup(this.context.trailerInfo.Root);\n            if (!isValidCatalog(catalog)) {\n                var indirectObjects = this.context.enumerateIndirectObjects();\n                for (var idx = 0, len = indirectObjects.length; idx < len; idx++) {\n                    var _a = indirectObjects[idx], ref = _a[0], object = _a[1];\n                    if (isValidCatalog(object)) {\n                        this.context.trailerInfo.Root = ref;\n                    }\n                }\n            }\n        };\n        PDFParser.prototype.parseHeader = function () {\n            while (!this.bytes.done()) {\n                if (this.matchKeyword(Keywords.header)) {\n                    var major = this.parseRawInt();\n                    this.bytes.assertNext(CharCodes$1.Period);\n                    var minor = this.parseRawInt();\n                    var header = PDFHeader.forVersion(major, minor);\n                    this.skipBinaryHeaderComment();\n                    return header;\n                }\n                this.bytes.next();\n            }\n            throw new MissingPDFHeaderError(this.bytes.position());\n        };\n        PDFParser.prototype.parseIndirectObjectHeader = function () {\n            this.skipWhitespaceAndComments();\n            var objectNumber = this.parseRawInt();\n            this.skipWhitespaceAndComments();\n            var generationNumber = this.parseRawInt();\n            this.skipWhitespaceAndComments();\n            if (!this.matchKeyword(Keywords.obj)) {\n                throw new MissingKeywordError(this.bytes.position(), Keywords.obj);\n            }\n            return PDFRef.of(objectNumber, generationNumber);\n        };\n        PDFParser.prototype.matchIndirectObjectHeader = function () {\n            var initialOffset = this.bytes.offset();\n            try {\n                this.parseIndirectObjectHeader();\n                return true;\n            }\n            catch (e) {\n                this.bytes.moveTo(initialOffset);\n                return false;\n            }\n        };\n        PDFParser.prototype.parseIndirectObject = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var ref, object;\n                return tslibExports.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            ref = this.parseIndirectObjectHeader();\n                            this.skipWhitespaceAndComments();\n                            object = this.parseObject();\n                            this.skipWhitespaceAndComments();\n                            // if (!this.matchKeyword(Keywords.endobj)) {\n                            // throw new MissingKeywordError(this.bytes.position(), Keywords.endobj);\n                            // }\n                            // TODO: Log a warning if this fails...\n                            this.matchKeyword(Keywords.endobj);\n                            if (!(object instanceof PDFRawStream &&\n                                object.dict.lookup(PDFName.of('Type')) === PDFName.of('ObjStm'))) return [3 /*break*/, 2];\n                            return [4 /*yield*/, PDFObjectStreamParser.forStream(object, this.shouldWaitForTick).parseIntoContext()];\n                        case 1:\n                            _a.sent();\n                            return [3 /*break*/, 3];\n                        case 2:\n                            if (object instanceof PDFRawStream &&\n                                object.dict.lookup(PDFName.of('Type')) === PDFName.of('XRef')) {\n                                PDFXRefStreamParser.forStream(object).parseIntoContext();\n                            }\n                            else {\n                                this.context.assign(ref, object);\n                            }\n                            _a.label = 3;\n                        case 3: return [2 /*return*/, ref];\n                    }\n                });\n            });\n        };\n        // TODO: Improve and clean this up\n        PDFParser.prototype.tryToParseInvalidIndirectObject = function () {\n            var startPos = this.bytes.position();\n            var msg = \"Trying to parse invalid object: \" + JSON.stringify(startPos) + \")\";\n            if (this.throwOnInvalidObject)\n                throw new Error(msg);\n            console.warn(msg);\n            var ref = this.parseIndirectObjectHeader();\n            console.warn(\"Invalid object ref: \" + ref);\n            this.skipWhitespaceAndComments();\n            var start = this.bytes.offset();\n            var failed = true;\n            while (!this.bytes.done()) {\n                if (this.matchKeyword(Keywords.endobj)) {\n                    failed = false;\n                }\n                if (!failed)\n                    break;\n                this.bytes.next();\n            }\n            if (failed)\n                throw new PDFInvalidObjectParsingError(startPos);\n            var end = this.bytes.offset() - Keywords.endobj.length;\n            var object = PDFInvalidObject.of(this.bytes.slice(start, end));\n            this.context.assign(ref, object);\n            return ref;\n        };\n        PDFParser.prototype.parseIndirectObjects = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var initialOffset;\n                return tslibExports.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            this.skipWhitespaceAndComments();\n                            _a.label = 1;\n                        case 1:\n                            if (!(!this.bytes.done() && IsDigit[this.bytes.peek()])) return [3 /*break*/, 8];\n                            initialOffset = this.bytes.offset();\n                            _a.label = 2;\n                        case 2:\n                            _a.trys.push([2, 4, , 5]);\n                            return [4 /*yield*/, this.parseIndirectObject()];\n                        case 3:\n                            _a.sent();\n                            return [3 /*break*/, 5];\n                        case 4:\n                            _a.sent();\n                            // TODO: Add tracing/logging mechanism to track when this happens!\n                            this.bytes.moveTo(initialOffset);\n                            this.tryToParseInvalidIndirectObject();\n                            return [3 /*break*/, 5];\n                        case 5:\n                            this.skipWhitespaceAndComments();\n                            // TODO: Can this be done only when needed, to avoid harming performance?\n                            this.skipJibberish();\n                            if (!this.shouldWaitForTick()) return [3 /*break*/, 7];\n                            return [4 /*yield*/, waitForTick()];\n                        case 6:\n                            _a.sent();\n                            _a.label = 7;\n                        case 7: return [3 /*break*/, 1];\n                        case 8: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        PDFParser.prototype.maybeParseCrossRefSection = function () {\n            this.skipWhitespaceAndComments();\n            if (!this.matchKeyword(Keywords.xref))\n                return;\n            this.skipWhitespaceAndComments();\n            var objectNumber = -1;\n            var xref = PDFCrossRefSection.createEmpty();\n            while (!this.bytes.done() && IsDigit[this.bytes.peek()]) {\n                var firstInt = this.parseRawInt();\n                this.skipWhitespaceAndComments();\n                var secondInt = this.parseRawInt();\n                this.skipWhitespaceAndComments();\n                var byte = this.bytes.peek();\n                if (byte === CharCodes$1.n || byte === CharCodes$1.f) {\n                    var ref = PDFRef.of(objectNumber, secondInt);\n                    if (this.bytes.next() === CharCodes$1.n) {\n                        xref.addEntry(ref, firstInt);\n                    }\n                    else {\n                        // this.context.delete(ref);\n                        xref.addDeletedEntry(ref, firstInt);\n                    }\n                    objectNumber += 1;\n                }\n                else {\n                    objectNumber = firstInt;\n                }\n                this.skipWhitespaceAndComments();\n            }\n            return xref;\n        };\n        PDFParser.prototype.maybeParseTrailerDict = function () {\n            this.skipWhitespaceAndComments();\n            if (!this.matchKeyword(Keywords.trailer))\n                return;\n            this.skipWhitespaceAndComments();\n            var dict = this.parseDict();\n            var context = this.context;\n            context.trailerInfo = {\n                Root: dict.get(PDFName.of('Root')) || context.trailerInfo.Root,\n                Encrypt: dict.get(PDFName.of('Encrypt')) || context.trailerInfo.Encrypt,\n                Info: dict.get(PDFName.of('Info')) || context.trailerInfo.Info,\n                ID: dict.get(PDFName.of('ID')) || context.trailerInfo.ID,\n            };\n        };\n        PDFParser.prototype.maybeParseTrailer = function () {\n            this.skipWhitespaceAndComments();\n            if (!this.matchKeyword(Keywords.startxref))\n                return;\n            this.skipWhitespaceAndComments();\n            var offset = this.parseRawInt();\n            this.skipWhitespace();\n            this.matchKeyword(Keywords.eof);\n            this.skipWhitespaceAndComments();\n            this.matchKeyword(Keywords.eof);\n            this.skipWhitespaceAndComments();\n            return PDFTrailer.forLastCrossRefSectionOffset(offset);\n        };\n        PDFParser.prototype.parseDocumentSection = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                return tslibExports.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.parseIndirectObjects()];\n                        case 1:\n                            _a.sent();\n                            this.maybeParseCrossRefSection();\n                            this.maybeParseTrailerDict();\n                            this.maybeParseTrailer();\n                            // TODO: Can this be done only when needed, to avoid harming performance?\n                            this.skipJibberish();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * This operation is not necessary for valid PDF files. But some invalid PDFs\n         * contain jibberish in between indirect objects. This method is designed to\n         * skip past that jibberish, should it exist, until it reaches the next\n         * indirect object header, an xref table section, or the file trailer.\n         */\n        PDFParser.prototype.skipJibberish = function () {\n            this.skipWhitespaceAndComments();\n            while (!this.bytes.done()) {\n                var initialOffset = this.bytes.offset();\n                var byte = this.bytes.peek();\n                var isAlphaNumeric = byte >= CharCodes$1.Space && byte <= CharCodes$1.Tilde;\n                if (isAlphaNumeric) {\n                    if (this.matchKeyword(Keywords.xref) ||\n                        this.matchKeyword(Keywords.trailer) ||\n                        this.matchKeyword(Keywords.startxref) ||\n                        this.matchIndirectObjectHeader()) {\n                        this.bytes.moveTo(initialOffset);\n                        break;\n                    }\n                }\n                this.bytes.next();\n            }\n        };\n        /**\n         * Skips the binary comment following a PDF header. The specification\n         * defines this binary comment (section 7.5.2 File Header) as a sequence of 4\n         * or more bytes that are 128 or greater, and which are preceded by a \"%\".\n         *\n         * This would imply that to strip out this binary comment, we could check for\n         * a sequence of bytes starting with \"%\", and remove all subsequent bytes that\n         * are 128 or greater. This works for many documents that properly comply with\n         * the spec. But in the wild, there are PDFs that omit the leading \"%\", and\n         * include bytes that are less than 128 (e.g. 0 or 1). So in order to parse\n         * these headers correctly, we just throw out all bytes leading up to the\n         * first indirect object header.\n         */\n        PDFParser.prototype.skipBinaryHeaderComment = function () {\n            this.skipWhitespaceAndComments();\n            try {\n                var initialOffset = this.bytes.offset();\n                this.parseIndirectObjectHeader();\n                this.bytes.moveTo(initialOffset);\n            }\n            catch (e) {\n                this.bytes.next();\n                this.skipWhitespaceAndComments();\n            }\n        };\n        PDFParser.forBytesWithOptions = function (pdfBytes, objectsPerTick, throwOnInvalidObject, capNumbers) {\n            return new PDFParser(pdfBytes, objectsPerTick, throwOnInvalidObject, capNumbers);\n        };\n        return PDFParser;\n    }(PDFObjectParser));\n\n    var flag = function (bitIndex) { return 1 << bitIndex; };\n    /** From PDF spec table 165 */\n    exports.AnnotationFlags = void 0;\n    (function (AnnotationFlags) {\n        /**\n         * If set, do not display the annotation if it does not belong to one of the\n         * standard annotation types and no annotation handler is available. If clear,\n         * display such an unknown annotation using an appearance stream specified by\n         * its appearance dictionary, if any.\n         */\n        AnnotationFlags[AnnotationFlags[\"Invisible\"] = flag(1 - 1)] = \"Invisible\";\n        /**\n         * If set, do not display or print the annotation or allow it to interact with\n         * the user, regardless of its annotation type or whether an annotation\n         * handler is available.\n         *\n         * In cases where screen space is limited, the ability to hide and show\n         * annotations selectively can be used in combination with appearance streams\n         * to display auxiliary pop-up information similar in function to online help\n         * systems.\n         */\n        AnnotationFlags[AnnotationFlags[\"Hidden\"] = flag(2 - 1)] = \"Hidden\";\n        /**\n         * If set, print the annotation when the page is printed. If clear, never\n         * print the annotation, regardless of whether it is displayed on the screen.\n         *\n         * This can be useful for annotations representing interactive pushbuttons,\n         * which would serve no meaningful purpose on the printed page.\n         */\n        AnnotationFlags[AnnotationFlags[\"Print\"] = flag(3 - 1)] = \"Print\";\n        /**\n         * If set, do not scale the annotation’s appearance to match the magnification\n         * of the page. The location of the annotation on the page (defined by the\n         * upper-left corner of its annotation rectangle) shall remain fixed,\n         * regardless of the page magnification.\n         */\n        AnnotationFlags[AnnotationFlags[\"NoZoom\"] = flag(4 - 1)] = \"NoZoom\";\n        /**\n         * If set, do not rotate the annotation’s appearance to match the rotation of\n         * the page. The upper-left corner of the annotation rectangle shall remain in\n         * a fixed location on the page, regardless of the page rotation.\n         */\n        AnnotationFlags[AnnotationFlags[\"NoRotate\"] = flag(5 - 1)] = \"NoRotate\";\n        /**\n         * If set, do not display the annotation on the screen or allow it to interact\n         * with the user. The annotation may be printed (depending on the setting of\n         * the Print flag) but should be considered hidden for purposes of on-screen\n         * display and user interaction.\n         */\n        AnnotationFlags[AnnotationFlags[\"NoView\"] = flag(6 - 1)] = \"NoView\";\n        /**\n         * If set, do not allow the annotation to interact with the user. The\n         * annotation may be displayed or printed (depending on the settings of the\n         * NoView and Print flags) but should not respond to mouse clicks or change\n         * its appearance in response to mouse motions.\n         *\n         * This flag shall be ignored for widget annotations; its function is\n         * subsumed by the ReadOnly flag of the associated form field.\n         */\n        AnnotationFlags[AnnotationFlags[\"ReadOnly\"] = flag(7 - 1)] = \"ReadOnly\";\n        /**\n         * If set, do not allow the annotation to be deleted or its properties\n         * (including position and size) to be modified by the user. However, this\n         * flag does not restrict changes to the annotation’s contents, such as the\n         * value of a form field.\n         */\n        AnnotationFlags[AnnotationFlags[\"Locked\"] = flag(8 - 1)] = \"Locked\";\n        /**\n         * If set, invert the interpretation of the NoView flag for certain events.\n         *\n         * A typical use is to have an annotation that appears only when a mouse\n         * cursor is held over it.\n         */\n        AnnotationFlags[AnnotationFlags[\"ToggleNoView\"] = flag(9 - 1)] = \"ToggleNoView\";\n        /**\n         * If set, do not allow the contents of the annotation to be modified by the\n         * user. This flag does not restrict deletion of the annotation or changes to\n         * other annotation properties, such as position and size.\n         */\n        AnnotationFlags[AnnotationFlags[\"LockedContents\"] = flag(10 - 1)] = \"LockedContents\";\n    })(exports.AnnotationFlags || (exports.AnnotationFlags = {}));\n\n    var asPDFName = function (name) {\n        return name instanceof PDFName ? name : PDFName.of(name);\n    };\n    var asPDFNumber = function (num) {\n        return num instanceof PDFNumber ? num : PDFNumber.of(num);\n    };\n    var asNumber = function (num) {\n        return num instanceof PDFNumber ? num.asNumber() : num;\n    };\n\n    exports.RotationTypes = void 0;\n    (function (RotationTypes) {\n        RotationTypes[\"Degrees\"] = \"degrees\";\n        RotationTypes[\"Radians\"] = \"radians\";\n    })(exports.RotationTypes || (exports.RotationTypes = {}));\n    var radians = function (radianAngle) {\n        assertIs(radianAngle, 'radianAngle', ['number']);\n        return { type: exports.RotationTypes.Radians, angle: radianAngle };\n    };\n    var degrees = function (degreeAngle) {\n        assertIs(degreeAngle, 'degreeAngle', ['number']);\n        return { type: exports.RotationTypes.Degrees, angle: degreeAngle };\n    };\n    var Radians = exports.RotationTypes.Radians, Degrees = exports.RotationTypes.Degrees;\n    var degreesToRadians = function (degree) { return (degree * Math.PI) / 180; };\n    var radiansToDegrees = function (radian) { return (radian * 180) / Math.PI; };\n    // prettier-ignore\n    var toRadians = function (rotation) {\n        return rotation.type === Radians ? rotation.angle\n            : rotation.type === Degrees ? degreesToRadians(rotation.angle)\n                : error(\"Invalid rotation: \" + JSON.stringify(rotation));\n    };\n    // prettier-ignore\n    var toDegrees = function (rotation) {\n        return rotation.type === Radians ? radiansToDegrees(rotation.angle)\n            : rotation.type === Degrees ? rotation.angle\n                : error(\"Invalid rotation: \" + JSON.stringify(rotation));\n    };\n    var reduceRotation = function (degreeAngle) {\n        if (degreeAngle === void 0) { degreeAngle = 0; }\n        var quadrants = (degreeAngle / 90) % 4;\n        if (quadrants === 0)\n            return 0;\n        if (quadrants === 1)\n            return 90;\n        if (quadrants === 2)\n            return 180;\n        if (quadrants === 3)\n            return 270;\n        return 0; // `degreeAngle` is not a multiple of 90\n    };\n    var adjustDimsForRotation = function (dims, degreeAngle) {\n        if (degreeAngle === void 0) { degreeAngle = 0; }\n        var rotation = reduceRotation(degreeAngle);\n        return rotation === 90 || rotation === 270\n            ? { width: dims.height, height: dims.width }\n            : { width: dims.width, height: dims.height };\n    };\n    var rotateRectangle = function (rectangle, borderWidth, degreeAngle) {\n        if (borderWidth === void 0) { borderWidth = 0; }\n        if (degreeAngle === void 0) { degreeAngle = 0; }\n        var x = rectangle.x, y = rectangle.y, w = rectangle.width, h = rectangle.height;\n        var r = reduceRotation(degreeAngle);\n        var b = borderWidth / 2;\n        // prettier-ignore\n        if (r === 0)\n            return { x: x - b, y: y - b, width: w, height: h };\n        else if (r === 90)\n            return { x: x - h + b, y: y - b, width: h, height: w };\n        else if (r === 180)\n            return { x: x - w + b, y: y - h + b, width: w, height: h };\n        else if (r === 270)\n            return { x: x - b, y: y - w + b, width: h, height: w };\n        else\n            return { x: x - b, y: y - b, width: w, height: h };\n    };\n\n    /* ==================== Clipping Path Operators ==================== */\n    var clip = function () { return PDFOperator.of(Ops.ClipNonZero); };\n    var clipEvenOdd = function () { return PDFOperator.of(Ops.ClipEvenOdd); };\n    /* ==================== Graphics State Operators ==================== */\n    var cos = Math.cos, sin = Math.sin, tan = Math.tan;\n    var concatTransformationMatrix = function (a, b, c, d, e, f) {\n        return PDFOperator.of(Ops.ConcatTransformationMatrix, [\n            asPDFNumber(a),\n            asPDFNumber(b),\n            asPDFNumber(c),\n            asPDFNumber(d),\n            asPDFNumber(e),\n            asPDFNumber(f),\n        ]);\n    };\n    var translate = function (xPos, yPos) {\n        return concatTransformationMatrix(1, 0, 0, 1, xPos, yPos);\n    };\n    var scale = function (xPos, yPos) {\n        return concatTransformationMatrix(xPos, 0, 0, yPos, 0, 0);\n    };\n    var rotateRadians = function (angle) {\n        return concatTransformationMatrix(cos(asNumber(angle)), sin(asNumber(angle)), -sin(asNumber(angle)), cos(asNumber(angle)), 0, 0);\n    };\n    var rotateDegrees = function (angle) {\n        return rotateRadians(degreesToRadians(asNumber(angle)));\n    };\n    var skewRadians = function (xSkewAngle, ySkewAngle) {\n        return concatTransformationMatrix(1, tan(asNumber(xSkewAngle)), tan(asNumber(ySkewAngle)), 1, 0, 0);\n    };\n    var skewDegrees = function (xSkewAngle, ySkewAngle) {\n        return skewRadians(degreesToRadians(asNumber(xSkewAngle)), degreesToRadians(asNumber(ySkewAngle)));\n    };\n    var setDashPattern = function (dashArray, dashPhase) {\n        return PDFOperator.of(Ops.SetLineDashPattern, [\n            \"[\" + dashArray.map(asPDFNumber).join(' ') + \"]\",\n            asPDFNumber(dashPhase),\n        ]);\n    };\n    var restoreDashPattern = function () { return setDashPattern([], 0); };\n    exports.LineCapStyle = void 0;\n    (function (LineCapStyle) {\n        LineCapStyle[LineCapStyle[\"Butt\"] = 0] = \"Butt\";\n        LineCapStyle[LineCapStyle[\"Round\"] = 1] = \"Round\";\n        LineCapStyle[LineCapStyle[\"Projecting\"] = 2] = \"Projecting\";\n    })(exports.LineCapStyle || (exports.LineCapStyle = {}));\n    var setLineCap = function (style) {\n        return PDFOperator.of(Ops.SetLineCapStyle, [asPDFNumber(style)]);\n    };\n    exports.LineJoinStyle = void 0;\n    (function (LineJoinStyle) {\n        LineJoinStyle[LineJoinStyle[\"Miter\"] = 0] = \"Miter\";\n        LineJoinStyle[LineJoinStyle[\"Round\"] = 1] = \"Round\";\n        LineJoinStyle[LineJoinStyle[\"Bevel\"] = 2] = \"Bevel\";\n    })(exports.LineJoinStyle || (exports.LineJoinStyle = {}));\n    var setLineJoin = function (style) {\n        return PDFOperator.of(Ops.SetLineJoinStyle, [asPDFNumber(style)]);\n    };\n    var setGraphicsState = function (state) {\n        return PDFOperator.of(Ops.SetGraphicsStateParams, [asPDFName(state)]);\n    };\n    var pushGraphicsState = function () { return PDFOperator.of(Ops.PushGraphicsState); };\n    var popGraphicsState = function () { return PDFOperator.of(Ops.PopGraphicsState); };\n    var setLineWidth = function (width) {\n        return PDFOperator.of(Ops.SetLineWidth, [asPDFNumber(width)]);\n    };\n    /* ==================== Path Construction Operators ==================== */\n    var appendBezierCurve = function (x1, y1, x2, y2, x3, y3) {\n        return PDFOperator.of(Ops.AppendBezierCurve, [\n            asPDFNumber(x1),\n            asPDFNumber(y1),\n            asPDFNumber(x2),\n            asPDFNumber(y2),\n            asPDFNumber(x3),\n            asPDFNumber(y3),\n        ]);\n    };\n    var appendQuadraticCurve = function (x1, y1, x2, y2) {\n        return PDFOperator.of(Ops.CurveToReplicateInitialPoint, [\n            asPDFNumber(x1),\n            asPDFNumber(y1),\n            asPDFNumber(x2),\n            asPDFNumber(y2),\n        ]);\n    };\n    var closePath = function () { return PDFOperator.of(Ops.ClosePath); };\n    var moveTo = function (xPos, yPos) {\n        return PDFOperator.of(Ops.MoveTo, [asPDFNumber(xPos), asPDFNumber(yPos)]);\n    };\n    var lineTo = function (xPos, yPos) {\n        return PDFOperator.of(Ops.LineTo, [asPDFNumber(xPos), asPDFNumber(yPos)]);\n    };\n    /**\n     * @param xPos x coordinate for the lower left corner of the rectangle\n     * @param yPos y coordinate for the lower left corner of the rectangle\n     * @param width width of the rectangle\n     * @param height height of the rectangle\n     */\n    var rectangle = function (xPos, yPos, width, height) {\n        return PDFOperator.of(Ops.AppendRectangle, [\n            asPDFNumber(xPos),\n            asPDFNumber(yPos),\n            asPDFNumber(width),\n            asPDFNumber(height),\n        ]);\n    };\n    /**\n     * @param xPos x coordinate for the lower left corner of the square\n     * @param yPos y coordinate for the lower left corner of the square\n     * @param size width and height of the square\n     */\n    var square = function (xPos, yPos, size) {\n        return rectangle(xPos, yPos, size, size);\n    };\n    /* ==================== Path Painting Operators ==================== */\n    var stroke = function () { return PDFOperator.of(Ops.StrokePath); };\n    var fill = function () { return PDFOperator.of(Ops.FillNonZero); };\n    var fillAndStroke = function () { return PDFOperator.of(Ops.FillNonZeroAndStroke); };\n    var endPath = function () { return PDFOperator.of(Ops.EndPath); };\n    /* ==================== Text Positioning Operators ==================== */\n    var nextLine = function () { return PDFOperator.of(Ops.NextLine); };\n    var moveText = function (x, y) {\n        return PDFOperator.of(Ops.MoveText, [asPDFNumber(x), asPDFNumber(y)]);\n    };\n    /* ==================== Text Showing Operators ==================== */\n    var showText = function (text) {\n        return PDFOperator.of(Ops.ShowText, [text]);\n    };\n    /* ==================== Text State Operators ==================== */\n    var beginText = function () { return PDFOperator.of(Ops.BeginText); };\n    var endText = function () { return PDFOperator.of(Ops.EndText); };\n    var setFontAndSize = function (name, size) { return PDFOperator.of(Ops.SetFontAndSize, [asPDFName(name), asPDFNumber(size)]); };\n    var setCharacterSpacing = function (spacing) {\n        return PDFOperator.of(Ops.SetCharacterSpacing, [asPDFNumber(spacing)]);\n    };\n    var setWordSpacing = function (spacing) {\n        return PDFOperator.of(Ops.SetWordSpacing, [asPDFNumber(spacing)]);\n    };\n    /** @param squeeze horizontal character spacing */\n    var setCharacterSqueeze = function (squeeze) {\n        return PDFOperator.of(Ops.SetTextHorizontalScaling, [asPDFNumber(squeeze)]);\n    };\n    var setLineHeight = function (lineHeight) {\n        return PDFOperator.of(Ops.SetTextLineHeight, [asPDFNumber(lineHeight)]);\n    };\n    var setTextRise = function (rise) {\n        return PDFOperator.of(Ops.SetTextRise, [asPDFNumber(rise)]);\n    };\n    exports.TextRenderingMode = void 0;\n    (function (TextRenderingMode) {\n        TextRenderingMode[TextRenderingMode[\"Fill\"] = 0] = \"Fill\";\n        TextRenderingMode[TextRenderingMode[\"Outline\"] = 1] = \"Outline\";\n        TextRenderingMode[TextRenderingMode[\"FillAndOutline\"] = 2] = \"FillAndOutline\";\n        TextRenderingMode[TextRenderingMode[\"Invisible\"] = 3] = \"Invisible\";\n        TextRenderingMode[TextRenderingMode[\"FillAndClip\"] = 4] = \"FillAndClip\";\n        TextRenderingMode[TextRenderingMode[\"OutlineAndClip\"] = 5] = \"OutlineAndClip\";\n        TextRenderingMode[TextRenderingMode[\"FillAndOutlineAndClip\"] = 6] = \"FillAndOutlineAndClip\";\n        TextRenderingMode[TextRenderingMode[\"Clip\"] = 7] = \"Clip\";\n    })(exports.TextRenderingMode || (exports.TextRenderingMode = {}));\n    var setTextRenderingMode = function (mode) {\n        return PDFOperator.of(Ops.SetTextRenderingMode, [asPDFNumber(mode)]);\n    };\n    var setTextMatrix = function (a, b, c, d, e, f) {\n        return PDFOperator.of(Ops.SetTextMatrix, [\n            asPDFNumber(a),\n            asPDFNumber(b),\n            asPDFNumber(c),\n            asPDFNumber(d),\n            asPDFNumber(e),\n            asPDFNumber(f),\n        ]);\n    };\n    var rotateAndSkewTextRadiansAndTranslate = function (rotationAngle, xSkewAngle, ySkewAngle, x, y) {\n        return setTextMatrix(cos(asNumber(rotationAngle)), sin(asNumber(rotationAngle)) + tan(asNumber(xSkewAngle)), -sin(asNumber(rotationAngle)) + tan(asNumber(ySkewAngle)), cos(asNumber(rotationAngle)), x, y);\n    };\n    var rotateAndSkewTextDegreesAndTranslate = function (rotationAngle, xSkewAngle, ySkewAngle, x, y) {\n        return rotateAndSkewTextRadiansAndTranslate(degreesToRadians(asNumber(rotationAngle)), degreesToRadians(asNumber(xSkewAngle)), degreesToRadians(asNumber(ySkewAngle)), x, y);\n    };\n    /* ==================== XObject Operator ==================== */\n    var drawObject = function (name) {\n        return PDFOperator.of(Ops.DrawObject, [asPDFName(name)]);\n    };\n    /* ==================== Color Operators ==================== */\n    var setFillingGrayscaleColor = function (gray) {\n        return PDFOperator.of(Ops.NonStrokingColorGray, [asPDFNumber(gray)]);\n    };\n    var setStrokingGrayscaleColor = function (gray) {\n        return PDFOperator.of(Ops.StrokingColorGray, [asPDFNumber(gray)]);\n    };\n    var setFillingRgbColor = function (red, green, blue) {\n        return PDFOperator.of(Ops.NonStrokingColorRgb, [\n            asPDFNumber(red),\n            asPDFNumber(green),\n            asPDFNumber(blue),\n        ]);\n    };\n    var setStrokingRgbColor = function (red, green, blue) {\n        return PDFOperator.of(Ops.StrokingColorRgb, [\n            asPDFNumber(red),\n            asPDFNumber(green),\n            asPDFNumber(blue),\n        ]);\n    };\n    var setFillingCmykColor = function (cyan, magenta, yellow, key) {\n        return PDFOperator.of(Ops.NonStrokingColorCmyk, [\n            asPDFNumber(cyan),\n            asPDFNumber(magenta),\n            asPDFNumber(yellow),\n            asPDFNumber(key),\n        ]);\n    };\n    var setStrokingCmykColor = function (cyan, magenta, yellow, key) {\n        return PDFOperator.of(Ops.StrokingColorCmyk, [\n            asPDFNumber(cyan),\n            asPDFNumber(magenta),\n            asPDFNumber(yellow),\n            asPDFNumber(key),\n        ]);\n    };\n    /* ==================== Marked Content Operators ==================== */\n    var beginMarkedContent = function (tag) {\n        return PDFOperator.of(Ops.BeginMarkedContent, [asPDFName(tag)]);\n    };\n    var endMarkedContent = function () { return PDFOperator.of(Ops.EndMarkedContent); };\n\n    exports.ColorTypes = void 0;\n    (function (ColorTypes) {\n        ColorTypes[\"Grayscale\"] = \"Grayscale\";\n        ColorTypes[\"RGB\"] = \"RGB\";\n        ColorTypes[\"CMYK\"] = \"CMYK\";\n    })(exports.ColorTypes || (exports.ColorTypes = {}));\n    var grayscale = function (gray) {\n        assertRange(gray, 'gray', 0.0, 1.0);\n        return { type: exports.ColorTypes.Grayscale, gray: gray };\n    };\n    var rgb = function (red, green, blue) {\n        assertRange(red, 'red', 0, 1);\n        assertRange(green, 'green', 0, 1);\n        assertRange(blue, 'blue', 0, 1);\n        return { type: exports.ColorTypes.RGB, red: red, green: green, blue: blue };\n    };\n    var cmyk = function (cyan, magenta, yellow, key) {\n        assertRange(cyan, 'cyan', 0, 1);\n        assertRange(magenta, 'magenta', 0, 1);\n        assertRange(yellow, 'yellow', 0, 1);\n        assertRange(key, 'key', 0, 1);\n        return { type: exports.ColorTypes.CMYK, cyan: cyan, magenta: magenta, yellow: yellow, key: key };\n    };\n    var Grayscale = exports.ColorTypes.Grayscale, RGB = exports.ColorTypes.RGB, CMYK = exports.ColorTypes.CMYK;\n    // prettier-ignore\n    var setFillingColor = function (color) {\n        return color.type === Grayscale ? setFillingGrayscaleColor(color.gray)\n            : color.type === RGB ? setFillingRgbColor(color.red, color.green, color.blue)\n                : color.type === CMYK ? setFillingCmykColor(color.cyan, color.magenta, color.yellow, color.key)\n                    : error(\"Invalid color: \" + JSON.stringify(color));\n    };\n    // prettier-ignore\n    var setStrokingColor = function (color) {\n        return color.type === Grayscale ? setStrokingGrayscaleColor(color.gray)\n            : color.type === RGB ? setStrokingRgbColor(color.red, color.green, color.blue)\n                : color.type === CMYK ? setStrokingCmykColor(color.cyan, color.magenta, color.yellow, color.key)\n                    : error(\"Invalid color: \" + JSON.stringify(color));\n    };\n    // prettier-ignore\n    var componentsToColor = function (comps, scale) {\n        if (scale === void 0) { scale = 1; }\n        return ((comps === null || comps === void 0 ? void 0 : comps.length) === 1 ? grayscale(comps[0] * scale)\n            : (comps === null || comps === void 0 ? void 0 : comps.length) === 3 ? rgb(comps[0] * scale, comps[1] * scale, comps[2] * scale)\n                : (comps === null || comps === void 0 ? void 0 : comps.length) === 4 ? cmyk(comps[0] * scale, comps[1] * scale, comps[2] * scale, comps[3] * scale)\n                    : undefined);\n    };\n    // prettier-ignore\n    var colorToComponents = function (color) {\n        return color.type === Grayscale ? [color.gray]\n            : color.type === RGB ? [color.red, color.green, color.blue]\n                : color.type === CMYK ? [color.cyan, color.magenta, color.yellow, color.key]\n                    : error(\"Invalid color: \" + JSON.stringify(color));\n    };\n\n    // Originated from pdfkit Copyright (c) 2014 Devon Govett\n    // https://github.com/foliojs/pdfkit/blob/1e62e6ffe24b378eb890df507a47610f4c4a7b24/lib/path.js\n    // MIT LICENSE\n    // Updated for pdf-lib & TypeScript by Jeremy Messenger\n    var cx = 0;\n    var cy = 0;\n    var px = 0;\n    var py = 0;\n    var sx = 0;\n    var sy = 0;\n    var parameters = new Map([\n        ['A', 7],\n        ['a', 7],\n        ['C', 6],\n        ['c', 6],\n        ['H', 1],\n        ['h', 1],\n        ['L', 2],\n        ['l', 2],\n        ['M', 2],\n        ['m', 2],\n        ['Q', 4],\n        ['q', 4],\n        ['S', 4],\n        ['s', 4],\n        ['T', 2],\n        ['t', 2],\n        ['V', 1],\n        ['v', 1],\n        ['Z', 0],\n        ['z', 0],\n    ]);\n    var parse = function (path) {\n        var cmd;\n        var ret = [];\n        var args = [];\n        var curArg = '';\n        var foundDecimal = false;\n        var params = 0;\n        for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n            var c = path_1[_i];\n            if (parameters.has(c)) {\n                params = parameters.get(c);\n                if (cmd) {\n                    // save existing command\n                    if (curArg.length > 0) {\n                        args[args.length] = +curArg;\n                    }\n                    ret[ret.length] = { cmd: cmd, args: args };\n                    args = [];\n                    curArg = '';\n                    foundDecimal = false;\n                }\n                cmd = c;\n            }\n            else if ([' ', ','].includes(c) ||\n                (c === '-' && curArg.length > 0 && curArg[curArg.length - 1] !== 'e') ||\n                (c === '.' && foundDecimal)) {\n                if (curArg.length === 0) {\n                    continue;\n                }\n                if (args.length === params) {\n                    // handle reused commands\n                    ret[ret.length] = { cmd: cmd, args: args };\n                    args = [+curArg];\n                    // handle assumed commands\n                    if (cmd === 'M') {\n                        cmd = 'L';\n                    }\n                    if (cmd === 'm') {\n                        cmd = 'l';\n                    }\n                }\n                else {\n                    args[args.length] = +curArg;\n                }\n                foundDecimal = c === '.';\n                // fix for negative numbers or repeated decimals with no delimeter between commands\n                curArg = ['-', '.'].includes(c) ? c : '';\n            }\n            else {\n                curArg += c;\n                if (c === '.') {\n                    foundDecimal = true;\n                }\n            }\n        }\n        // add the last command\n        if (curArg.length > 0) {\n            if (args.length === params) {\n                // handle reused commands\n                ret[ret.length] = { cmd: cmd, args: args };\n                args = [+curArg];\n                // handle assumed commands\n                if (cmd === 'M') {\n                    cmd = 'L';\n                }\n                if (cmd === 'm') {\n                    cmd = 'l';\n                }\n            }\n            else {\n                args[args.length] = +curArg;\n            }\n        }\n        ret[ret.length] = { cmd: cmd, args: args };\n        return ret;\n    };\n    var apply = function (commands) {\n        // current point, control point, and subpath starting point\n        cx = cy = px = py = sx = sy = 0;\n        // run the commands\n        var cmds = [];\n        for (var i = 0; i < commands.length; i++) {\n            var c = commands[i];\n            if (c.cmd && typeof runners[c.cmd] === 'function') {\n                var cmd = runners[c.cmd](c.args);\n                if (Array.isArray(cmd)) {\n                    cmds = cmds.concat(cmd);\n                }\n                else {\n                    cmds.push(cmd);\n                }\n            }\n        }\n        return cmds;\n    };\n    var runners = {\n        M: function (a) {\n            cx = a[0];\n            cy = a[1];\n            px = py = null;\n            sx = cx;\n            sy = cy;\n            return moveTo(cx, cy);\n        },\n        m: function (a) {\n            cx += a[0];\n            cy += a[1];\n            px = py = null;\n            sx = cx;\n            sy = cy;\n            return moveTo(cx, cy);\n        },\n        C: function (a) {\n            cx = a[4];\n            cy = a[5];\n            px = a[2];\n            py = a[3];\n            return appendBezierCurve(a[0], a[1], a[2], a[3], a[4], a[5]);\n        },\n        c: function (a) {\n            var cmd = appendBezierCurve(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy, a[4] + cx, a[5] + cy);\n            px = cx + a[2];\n            py = cy + a[3];\n            cx += a[4];\n            cy += a[5];\n            return cmd;\n        },\n        S: function (a) {\n            if (px === null || py === null) {\n                px = cx;\n                py = cy;\n            }\n            var cmd = appendBezierCurve(cx - (px - cx), cy - (py - cy), a[0], a[1], a[2], a[3]);\n            px = a[0];\n            py = a[1];\n            cx = a[2];\n            cy = a[3];\n            return cmd;\n        },\n        s: function (a) {\n            if (px === null || py === null) {\n                px = cx;\n                py = cy;\n            }\n            var cmd = appendBezierCurve(cx - (px - cx), cy - (py - cy), cx + a[0], cy + a[1], cx + a[2], cy + a[3]);\n            px = cx + a[0];\n            py = cy + a[1];\n            cx += a[2];\n            cy += a[3];\n            return cmd;\n        },\n        Q: function (a) {\n            px = a[0];\n            py = a[1];\n            cx = a[2];\n            cy = a[3];\n            return appendQuadraticCurve(a[0], a[1], cx, cy);\n        },\n        q: function (a) {\n            var cmd = appendQuadraticCurve(a[0] + cx, a[1] + cy, a[2] + cx, a[3] + cy);\n            px = cx + a[0];\n            py = cy + a[1];\n            cx += a[2];\n            cy += a[3];\n            return cmd;\n        },\n        T: function (a) {\n            if (px === null || py === null) {\n                px = cx;\n                py = cy;\n            }\n            else {\n                px = cx - (px - cx);\n                py = cy - (py - cy);\n            }\n            var cmd = appendQuadraticCurve(px, py, a[0], a[1]);\n            px = cx - (px - cx);\n            py = cy - (py - cy);\n            cx = a[0];\n            cy = a[1];\n            return cmd;\n        },\n        t: function (a) {\n            if (px === null || py === null) {\n                px = cx;\n                py = cy;\n            }\n            else {\n                px = cx - (px - cx);\n                py = cy - (py - cy);\n            }\n            var cmd = appendQuadraticCurve(px, py, cx + a[0], cy + a[1]);\n            cx += a[0];\n            cy += a[1];\n            return cmd;\n        },\n        A: function (a) {\n            var cmds = solveArc(cx, cy, a);\n            cx = a[5];\n            cy = a[6];\n            return cmds;\n        },\n        a: function (a) {\n            a[5] += cx;\n            a[6] += cy;\n            var cmds = solveArc(cx, cy, a);\n            cx = a[5];\n            cy = a[6];\n            return cmds;\n        },\n        L: function (a) {\n            cx = a[0];\n            cy = a[1];\n            px = py = null;\n            return lineTo(cx, cy);\n        },\n        l: function (a) {\n            cx += a[0];\n            cy += a[1];\n            px = py = null;\n            return lineTo(cx, cy);\n        },\n        H: function (a) {\n            cx = a[0];\n            px = py = null;\n            return lineTo(cx, cy);\n        },\n        h: function (a) {\n            cx += a[0];\n            px = py = null;\n            return lineTo(cx, cy);\n        },\n        V: function (a) {\n            cy = a[0];\n            px = py = null;\n            return lineTo(cx, cy);\n        },\n        v: function (a) {\n            cy += a[0];\n            px = py = null;\n            return lineTo(cx, cy);\n        },\n        Z: function () {\n            var cmd = closePath();\n            cx = sx;\n            cy = sy;\n            return cmd;\n        },\n        z: function () {\n            var cmd = closePath();\n            cx = sx;\n            cy = sy;\n            return cmd;\n        },\n    };\n    var solveArc = function (x, y, coords) {\n        var rx = coords[0], ry = coords[1], rot = coords[2], large = coords[3], sweep = coords[4], ex = coords[5], ey = coords[6];\n        var segs = arcToSegments(ex, ey, rx, ry, large, sweep, rot, x, y);\n        var cmds = [];\n        for (var _i = 0, segs_1 = segs; _i < segs_1.length; _i++) {\n            var seg = segs_1[_i];\n            var bez = segmentToBezier.apply(void 0, seg);\n            cmds.push(appendBezierCurve.apply(void 0, bez));\n        }\n        return cmds;\n    };\n    // from Inkscape svgtopdf, thanks!\n    var arcToSegments = function (x, y, rx, ry, large, sweep, rotateX, ox, oy) {\n        var th = rotateX * (Math.PI / 180);\n        var sinTh = Math.sin(th);\n        var cosTh = Math.cos(th);\n        rx = Math.abs(rx);\n        ry = Math.abs(ry);\n        px = cosTh * (ox - x) * 0.5 + sinTh * (oy - y) * 0.5;\n        py = cosTh * (oy - y) * 0.5 - sinTh * (ox - x) * 0.5;\n        var pl = (px * px) / (rx * rx) + (py * py) / (ry * ry);\n        if (pl > 1) {\n            pl = Math.sqrt(pl);\n            rx *= pl;\n            ry *= pl;\n        }\n        var a00 = cosTh / rx;\n        var a01 = sinTh / rx;\n        var a10 = -sinTh / ry;\n        var a11 = cosTh / ry;\n        var x0 = a00 * ox + a01 * oy;\n        var y0 = a10 * ox + a11 * oy;\n        var x1 = a00 * x + a01 * y;\n        var y1 = a10 * x + a11 * y;\n        var d = (x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0);\n        var sfactorSq = 1 / d - 0.25;\n        if (sfactorSq < 0) {\n            sfactorSq = 0;\n        }\n        var sfactor = Math.sqrt(sfactorSq);\n        if (sweep === large) {\n            sfactor = -sfactor;\n        }\n        var xc = 0.5 * (x0 + x1) - sfactor * (y1 - y0);\n        var yc = 0.5 * (y0 + y1) + sfactor * (x1 - x0);\n        var th0 = Math.atan2(y0 - yc, x0 - xc);\n        var th1 = Math.atan2(y1 - yc, x1 - xc);\n        var thArc = th1 - th0;\n        if (thArc < 0 && sweep === 1) {\n            thArc += 2 * Math.PI;\n        }\n        else if (thArc > 0 && sweep === 0) {\n            thArc -= 2 * Math.PI;\n        }\n        var segments = Math.ceil(Math.abs(thArc / (Math.PI * 0.5 + 0.001)));\n        var result = [];\n        for (var i = 0; i < segments; i++) {\n            var th2 = th0 + (i * thArc) / segments;\n            var th3 = th0 + ((i + 1) * thArc) / segments;\n            result[i] = [xc, yc, th2, th3, rx, ry, sinTh, cosTh];\n        }\n        return result;\n    };\n    var segmentToBezier = function (cx1, cy1, th0, th1, rx, ry, sinTh, cosTh) {\n        var a00 = cosTh * rx;\n        var a01 = -sinTh * ry;\n        var a10 = sinTh * rx;\n        var a11 = cosTh * ry;\n        var thHalf = 0.5 * (th1 - th0);\n        var t = ((8 / 3) * Math.sin(thHalf * 0.5) * Math.sin(thHalf * 0.5)) /\n            Math.sin(thHalf);\n        var x1 = cx1 + Math.cos(th0) - t * Math.sin(th0);\n        var y1 = cy1 + Math.sin(th0) + t * Math.cos(th0);\n        var x3 = cx1 + Math.cos(th1);\n        var y3 = cy1 + Math.sin(th1);\n        var x2 = x3 + t * Math.sin(th1);\n        var y2 = y3 - t * Math.cos(th1);\n        var result = [\n            a00 * x1 + a01 * y1,\n            a10 * x1 + a11 * y1,\n            a00 * x2 + a01 * y2,\n            a10 * x2 + a11 * y2,\n            a00 * x3 + a01 * y3,\n            a10 * x3 + a11 * y3,\n        ];\n        return result;\n    };\n    var svgPathToOperators = function (path) { return apply(parse(path)); };\n\n    var drawText = function (line, options) {\n      return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), beginText(), setFillingColor(options.color), setFontAndSize(options.font, options.size), rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), options.x, options.y), showText(line), endText(), popGraphicsState()].filter(Boolean);\n    };\n    var drawLinesOfText = function (lines, options) {\n      var operators = [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), beginText(), setFillingColor(options.color), setFontAndSize(options.font, options.size), setLineHeight(options.lineHeight), rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), options.x, options.y)].filter(Boolean);\n      for (var idx = 0, len = lines.length; idx < len; idx++) {\n        operators.push(showText(lines[idx]), nextLine());\n      }\n      operators.push(endText(), popGraphicsState());\n      return operators;\n    };\n    var drawImage = function (name, options) {\n      return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), translate(options.x, options.y), rotateRadians(toRadians(options.rotate)), scale(options.width, options.height), skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)), drawObject(name), popGraphicsState()].filter(Boolean);\n    };\n    var drawPage = function (name, options) {\n      return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), translate(options.x, options.y), rotateRadians(toRadians(options.rotate)), scale(options.xScale, options.yScale), skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)), drawObject(name), popGraphicsState()].filter(Boolean);\n    };\n    var drawLine = function (options) {\n      var _a, _b;\n      return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), options.color && setStrokingColor(options.color), setLineWidth(options.thickness), setDashPattern((_a = options.dashArray) !== null && _a !== void 0 ? _a : [], (_b = options.dashPhase) !== null && _b !== void 0 ? _b : 0), moveTo(options.start.x, options.start.y), options.lineCap && setLineCap(options.lineCap), moveTo(options.start.x, options.start.y), lineTo(options.end.x, options.end.y), stroke(), popGraphicsState()].filter(Boolean);\n    };\n    var drawRectangle = function (options) {\n      var _a, _b;\n      return [pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), options.color && setFillingColor(options.color), options.borderColor && setStrokingColor(options.borderColor), setLineWidth(options.borderWidth), options.borderLineCap && setLineCap(options.borderLineCap), setDashPattern((_a = options.borderDashArray) !== null && _a !== void 0 ? _a : [], (_b = options.borderDashPhase) !== null && _b !== void 0 ? _b : 0), translate(options.x, options.y), rotateRadians(toRadians(options.rotate)), skewRadians(toRadians(options.xSkew), toRadians(options.ySkew)), moveTo(0, 0), lineTo(0, options.height), lineTo(options.width, options.height), lineTo(options.width, 0), closePath(), options.color && options.borderWidth ? fillAndStroke() : options.color ? fill() : options.borderColor ? stroke() : closePath(), popGraphicsState()].filter(Boolean);\n    };\n    var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);\n    var drawEllipsePath = function (config) {\n      var x = asNumber(config.x);\n      var y = asNumber(config.y);\n      var xScale = asNumber(config.xScale);\n      var yScale = asNumber(config.yScale);\n      x -= xScale;\n      y -= yScale;\n      var ox = xScale * KAPPA;\n      var oy = yScale * KAPPA;\n      var xe = x + xScale * 2;\n      var ye = y + yScale * 2;\n      var xm = x + xScale;\n      var ym = y + yScale;\n      return [pushGraphicsState(), moveTo(x, ym), appendBezierCurve(x, ym - oy, xm - ox, y, xm, y), appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym), appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye), appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym), popGraphicsState()];\n    };\n    var drawEllipseCurves = function (config) {\n      var centerX = asNumber(config.x);\n      var centerY = asNumber(config.y);\n      var xScale = asNumber(config.xScale);\n      var yScale = asNumber(config.yScale);\n      var x = -xScale;\n      var y = -yScale;\n      var ox = xScale * KAPPA;\n      var oy = yScale * KAPPA;\n      var xe = x + xScale * 2;\n      var ye = y + yScale * 2;\n      var xm = x + xScale;\n      var ym = y + yScale;\n      return [translate(centerX, centerY), rotateRadians(toRadians(config.rotate)), moveTo(x, ym), appendBezierCurve(x, ym - oy, xm - ox, y, xm, y), appendBezierCurve(xm + ox, y, xe, ym - oy, xe, ym), appendBezierCurve(xe, ym + oy, xm + ox, ye, xm, ye), appendBezierCurve(xm - ox, ye, x, ym + oy, x, ym)];\n    };\n    var drawEllipse = function (options) {\n      var _a, _b, _c;\n      return tslibExports.__spreadArrays([pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), options.color && setFillingColor(options.color), options.borderColor && setStrokingColor(options.borderColor), setLineWidth(options.borderWidth), options.borderLineCap && setLineCap(options.borderLineCap), setDashPattern((_a = options.borderDashArray) !== null && _a !== void 0 ? _a : [], (_b = options.borderDashPhase) !== null && _b !== void 0 ? _b : 0)], options.rotate === undefined ? drawEllipsePath({\n        x: options.x,\n        y: options.y,\n        xScale: options.xScale,\n        yScale: options.yScale\n      }) : drawEllipseCurves({\n        x: options.x,\n        y: options.y,\n        xScale: options.xScale,\n        yScale: options.yScale,\n        rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0)\n      }), [options.color && options.borderWidth ? fillAndStroke() : options.color ? fill() : options.borderColor ? stroke() : closePath(), popGraphicsState()]).filter(Boolean);\n    };\n    var drawSvgPath = function (path, options) {\n      var _a, _b, _c;\n      return tslibExports.__spreadArrays([pushGraphicsState(), options.graphicsState && setGraphicsState(options.graphicsState), translate(options.x, options.y), rotateRadians(toRadians((_a = options.rotate) !== null && _a !== void 0 ? _a : degrees(0))), options.scale ? scale(options.scale, -options.scale) : scale(1, -1), options.color && setFillingColor(options.color), options.borderColor && setStrokingColor(options.borderColor), options.borderWidth && setLineWidth(options.borderWidth), options.borderLineCap && setLineCap(options.borderLineCap), setDashPattern((_b = options.borderDashArray) !== null && _b !== void 0 ? _b : [], (_c = options.borderDashPhase) !== null && _c !== void 0 ? _c : 0)], svgPathToOperators(path), [options.color && options.borderWidth ? fillAndStroke() : options.color ? fill() : options.borderColor ? stroke() : closePath(), popGraphicsState()]).filter(Boolean);\n    };\n    var drawCheckMark = function (options) {\n      var size = asNumber(options.size);\n      var p2x = -1 + 0.75;\n      var p2y = -1 + 0.51;\n      var p3y = 1 - 0.525;\n      var p3x = 1 - 0.31;\n      var p1x = -1 + 0.325;\n      var p1y = -((p1x - p2x) * (p3x - p2x)) / (p3y - p2y) + p2y;\n      return [pushGraphicsState(), options.color && setStrokingColor(options.color), setLineWidth(options.thickness), translate(options.x, options.y), moveTo(p1x * size, p1y * size), lineTo(p2x * size, p2y * size), lineTo(p3x * size, p3y * size), stroke(), popGraphicsState()].filter(Boolean);\n    };\n    var rotateInPlace = function (options) {\n      return options.rotation === 0 ? [translate(0, 0), rotateDegrees(0)] : options.rotation === 90 ? [translate(options.width, 0), rotateDegrees(90)] : options.rotation === 180 ? [translate(options.width, options.height), rotateDegrees(180)] : options.rotation === 270 ? [translate(0, options.height), rotateDegrees(270)] : [];\n    };\n    var drawCheckBox = function (options) {\n      var outline = drawRectangle({\n        x: options.x,\n        y: options.y,\n        width: options.width,\n        height: options.height,\n        borderWidth: options.borderWidth,\n        color: options.color,\n        borderColor: options.borderColor,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0)\n      });\n      if (!options.filled) return outline;\n      var width = asNumber(options.width);\n      var height = asNumber(options.height);\n      var checkMarkSize = Math.min(width, height) / 2;\n      var checkMark = drawCheckMark({\n        x: width / 2,\n        y: height / 2,\n        size: checkMarkSize,\n        thickness: options.thickness,\n        color: options.markColor\n      });\n      return tslibExports.__spreadArrays([pushGraphicsState()], outline, checkMark, [popGraphicsState()]);\n    };\n    var drawRadioButton = function (options) {\n      var width = asNumber(options.width);\n      var height = asNumber(options.height);\n      var outlineScale = Math.min(width, height) / 2;\n      var outline = drawEllipse({\n        x: options.x,\n        y: options.y,\n        xScale: outlineScale,\n        yScale: outlineScale,\n        color: options.color,\n        borderColor: options.borderColor,\n        borderWidth: options.borderWidth\n      });\n      if (!options.filled) return outline;\n      var dot = drawEllipse({\n        x: options.x,\n        y: options.y,\n        xScale: outlineScale * 0.45,\n        yScale: outlineScale * 0.45,\n        color: options.dotColor,\n        borderColor: undefined,\n        borderWidth: 0\n      });\n      return tslibExports.__spreadArrays([pushGraphicsState()], outline, dot, [popGraphicsState()]);\n    };\n    var drawButton = function (options) {\n      var x = asNumber(options.x);\n      var y = asNumber(options.y);\n      var width = asNumber(options.width);\n      var height = asNumber(options.height);\n      var background = drawRectangle({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        borderWidth: options.borderWidth,\n        color: options.color,\n        borderColor: options.borderColor,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0)\n      });\n      var lines = drawTextLines(options.textLines, {\n        color: options.textColor,\n        font: options.font,\n        size: options.fontSize,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0)\n      });\n      return tslibExports.__spreadArrays([pushGraphicsState()], background, lines, [popGraphicsState()]);\n    };\n    var drawTextLines = function (lines, options) {\n      var operators = [beginText(), setFillingColor(options.color), setFontAndSize(options.font, options.size)];\n      for (var idx = 0, len = lines.length; idx < len; idx++) {\n        var _a = lines[idx], encoded = _a.encoded, x = _a.x, y = _a.y;\n        operators.push(rotateAndSkewTextRadiansAndTranslate(toRadians(options.rotate), toRadians(options.xSkew), toRadians(options.ySkew), x, y), showText(encoded));\n      }\n      operators.push(endText());\n      return operators;\n    };\n    var drawTextField = function (options) {\n      var x = asNumber(options.x);\n      var y = asNumber(options.y);\n      var width = asNumber(options.width);\n      var height = asNumber(options.height);\n      var borderWidth = asNumber(options.borderWidth);\n      var padding = asNumber(options.padding);\n      var clipX = x + borderWidth / 2 + padding;\n      var clipY = y + borderWidth / 2 + padding;\n      var clipWidth = width - (borderWidth / 2 + padding) * 2;\n      var clipHeight = height - (borderWidth / 2 + padding) * 2;\n      var clippingArea = [moveTo(clipX, clipY), lineTo(clipX, clipY + clipHeight), lineTo(clipX + clipWidth, clipY + clipHeight), lineTo(clipX + clipWidth, clipY), closePath(), clip(), endPath()];\n      var background = drawRectangle({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        borderWidth: options.borderWidth,\n        color: options.color,\n        borderColor: options.borderColor,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0)\n      });\n      var lines = drawTextLines(options.textLines, {\n        color: options.textColor,\n        font: options.font,\n        size: options.fontSize,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0)\n      });\n      var markedContent = tslibExports.__spreadArrays([beginMarkedContent(\"Tx\"), pushGraphicsState()], lines, [popGraphicsState(), endMarkedContent()]);\n      return tslibExports.__spreadArrays([pushGraphicsState()], background, clippingArea, markedContent, [popGraphicsState()]);\n    };\n    var drawOptionList = function (options) {\n      var x = asNumber(options.x);\n      var y = asNumber(options.y);\n      var width = asNumber(options.width);\n      var height = asNumber(options.height);\n      var lineHeight = asNumber(options.lineHeight);\n      var borderWidth = asNumber(options.borderWidth);\n      var padding = asNumber(options.padding);\n      var clipX = x + borderWidth / 2 + padding;\n      var clipY = y + borderWidth / 2 + padding;\n      var clipWidth = width - (borderWidth / 2 + padding) * 2;\n      var clipHeight = height - (borderWidth / 2 + padding) * 2;\n      var clippingArea = [moveTo(clipX, clipY), lineTo(clipX, clipY + clipHeight), lineTo(clipX + clipWidth, clipY + clipHeight), lineTo(clipX + clipWidth, clipY), closePath(), clip(), endPath()];\n      var background = drawRectangle({\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        borderWidth: options.borderWidth,\n        color: options.color,\n        borderColor: options.borderColor,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0)\n      });\n      var highlights = [];\n      for (var idx = 0, len = options.selectedLines.length; idx < len; idx++) {\n        var line = options.textLines[options.selectedLines[idx]];\n        highlights.push.apply(highlights, drawRectangle({\n          x: line.x - padding,\n          y: line.y - (lineHeight - line.height) / 2,\n          width: width - borderWidth,\n          height: line.height + (lineHeight - line.height) / 2,\n          borderWidth: 0,\n          color: options.selectedColor,\n          borderColor: undefined,\n          rotate: degrees(0),\n          xSkew: degrees(0),\n          ySkew: degrees(0)\n        }));\n      }\n      var lines = drawTextLines(options.textLines, {\n        color: options.textColor,\n        font: options.font,\n        size: options.fontSize,\n        rotate: degrees(0),\n        xSkew: degrees(0),\n        ySkew: degrees(0)\n      });\n      var markedContent = tslibExports.__spreadArrays([beginMarkedContent(\"Tx\"), pushGraphicsState()], lines, [popGraphicsState(), endMarkedContent()]);\n      return tslibExports.__spreadArrays([pushGraphicsState()], background, highlights, clippingArea, markedContent, [popGraphicsState()]);\n    };\n\n    // tslint:disable: max-classes-per-file\n    // TODO: Include link to documentation with example\n    var EncryptedPDFError = /** @class */ (function (_super) {\n        tslibExports.__extends(EncryptedPDFError, _super);\n        function EncryptedPDFError() {\n            var _this = this;\n            var msg = 'Input document to `PDFDocument.load` is encrypted. You can use `PDFDocument.load(..., { ignoreEncryption: true })` if you wish to load the document anyways.';\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return EncryptedPDFError;\n    }(Error));\n    // TODO: Include link to documentation with example\n    var FontkitNotRegisteredError = /** @class */ (function (_super) {\n        tslibExports.__extends(FontkitNotRegisteredError, _super);\n        function FontkitNotRegisteredError() {\n            var _this = this;\n            var msg = 'Input to `PDFDocument.embedFont` was a custom font, but no `fontkit` instance was found. You must register a `fontkit` instance with `PDFDocument.registerFontkit(...)` before embedding custom fonts.';\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return FontkitNotRegisteredError;\n    }(Error));\n    // TODO: Include link to documentation with example\n    var ForeignPageError = /** @class */ (function (_super) {\n        tslibExports.__extends(ForeignPageError, _super);\n        function ForeignPageError() {\n            var _this = this;\n            var msg = 'A `page` passed to `PDFDocument.addPage` or `PDFDocument.insertPage` was from a different (foreign) PDF document. If you want to copy pages from one PDFDocument to another, you must use `PDFDocument.copyPages(...)` to copy the pages before adding or inserting them.';\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return ForeignPageError;\n    }(Error));\n    // TODO: Include link to documentation with example\n    var RemovePageFromEmptyDocumentError = /** @class */ (function (_super) {\n        tslibExports.__extends(RemovePageFromEmptyDocumentError, _super);\n        function RemovePageFromEmptyDocumentError() {\n            var _this = this;\n            var msg = 'PDFDocument has no pages so `PDFDocument.removePage` cannot be called';\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return RemovePageFromEmptyDocumentError;\n    }(Error));\n    var NoSuchFieldError = /** @class */ (function (_super) {\n        tslibExports.__extends(NoSuchFieldError, _super);\n        function NoSuchFieldError(name) {\n            var _this = this;\n            var msg = \"PDFDocument has no form field with the name \\\"\" + name + \"\\\"\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return NoSuchFieldError;\n    }(Error));\n    var UnexpectedFieldTypeError = /** @class */ (function (_super) {\n        tslibExports.__extends(UnexpectedFieldTypeError, _super);\n        function UnexpectedFieldTypeError(name, expected, actual) {\n            var _a, _b;\n            var _this = this;\n            var expectedType = expected === null || expected === void 0 ? void 0 : expected.name;\n            var actualType = (_b = (_a = actual === null || actual === void 0 ? void 0 : actual.constructor) === null || _a === void 0 ? void 0 : _a.name) !== null && _b !== void 0 ? _b : actual;\n            var msg = \"Expected field \\\"\" + name + \"\\\" to be of type \" + expectedType + \", \" +\n                (\"but it is actually of type \" + actualType);\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return UnexpectedFieldTypeError;\n    }(Error));\n    var MissingOnValueCheckError = /** @class */ (function (_super) {\n        tslibExports.__extends(MissingOnValueCheckError, _super);\n        function MissingOnValueCheckError(onValue) {\n            var _this = this;\n            var msg = \"Failed to select check box due to missing onValue: \\\"\" + onValue + \"\\\"\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return MissingOnValueCheckError;\n    }(Error));\n    var FieldAlreadyExistsError = /** @class */ (function (_super) {\n        tslibExports.__extends(FieldAlreadyExistsError, _super);\n        function FieldAlreadyExistsError(name) {\n            var _this = this;\n            var msg = \"A field already exists with the specified name: \\\"\" + name + \"\\\"\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return FieldAlreadyExistsError;\n    }(Error));\n    var InvalidFieldNamePartError = /** @class */ (function (_super) {\n        tslibExports.__extends(InvalidFieldNamePartError, _super);\n        function InvalidFieldNamePartError(namePart) {\n            var _this = this;\n            var msg = \"Field name contains invalid component: \\\"\" + namePart + \"\\\"\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return InvalidFieldNamePartError;\n    }(Error));\n    var FieldExistsAsNonTerminalError = /** @class */ (function (_super) {\n        tslibExports.__extends(FieldExistsAsNonTerminalError, _super);\n        function FieldExistsAsNonTerminalError(name) {\n            var _this = this;\n            var msg = \"A non-terminal field already exists with the specified name: \\\"\" + name + \"\\\"\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return FieldExistsAsNonTerminalError;\n    }(Error));\n    var RichTextFieldReadError = /** @class */ (function (_super) {\n        tslibExports.__extends(RichTextFieldReadError, _super);\n        function RichTextFieldReadError(fieldName) {\n            var _this = this;\n            var msg = \"Reading rich text fields is not supported: Attempted to read rich text field: \" + fieldName;\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return RichTextFieldReadError;\n    }(Error));\n    var CombedTextLayoutError = /** @class */ (function (_super) {\n        tslibExports.__extends(CombedTextLayoutError, _super);\n        function CombedTextLayoutError(lineLength, cellCount) {\n            var _this = this;\n            var msg = \"Failed to layout combed text as lineLength=\" + lineLength + \" is greater than cellCount=\" + cellCount;\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return CombedTextLayoutError;\n    }(Error));\n    var ExceededMaxLengthError = /** @class */ (function (_super) {\n        tslibExports.__extends(ExceededMaxLengthError, _super);\n        function ExceededMaxLengthError(textLength, maxLength, name) {\n            var _this = this;\n            var msg = \"Attempted to set text with length=\" + textLength + \" for TextField with maxLength=\" + maxLength + \" and name=\" + name;\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return ExceededMaxLengthError;\n    }(Error));\n    var InvalidMaxLengthError = /** @class */ (function (_super) {\n        tslibExports.__extends(InvalidMaxLengthError, _super);\n        function InvalidMaxLengthError(textLength, maxLength, name) {\n            var _this = this;\n            var msg = \"Attempted to set maxLength=\" + maxLength + \", which is less than \" + textLength + \", the length of this field's current value (name=\" + name + \")\";\n            _this = _super.call(this, msg) || this;\n            return _this;\n        }\n        return InvalidMaxLengthError;\n    }(Error));\n\n    exports.TextAlignment = void 0;\n    (function (TextAlignment) {\n        TextAlignment[TextAlignment[\"Left\"] = 0] = \"Left\";\n        TextAlignment[TextAlignment[\"Center\"] = 1] = \"Center\";\n        TextAlignment[TextAlignment[\"Right\"] = 2] = \"Right\";\n    })(exports.TextAlignment || (exports.TextAlignment = {}));\n\n    var MIN_FONT_SIZE = 4;\n    var MAX_FONT_SIZE = 500;\n    var computeFontSize = function (lines, font, bounds, multiline) {\n        if (multiline === void 0) { multiline = false; }\n        var fontSize = MIN_FONT_SIZE;\n        while (fontSize < MAX_FONT_SIZE) {\n            var linesUsed = 0;\n            for (var lineIdx = 0, lineLen = lines.length; lineIdx < lineLen; lineIdx++) {\n                linesUsed += 1;\n                var line = lines[lineIdx];\n                var words = line.split(' ');\n                // Layout the words using the current `fontSize`, line wrapping\n                // whenever we reach the end of the current line.\n                var spaceInLineRemaining = bounds.width;\n                for (var idx = 0, len = words.length; idx < len; idx++) {\n                    var isLastWord = idx === len - 1;\n                    var word = isLastWord ? words[idx] : words[idx] + ' ';\n                    var widthOfWord = font.widthOfTextAtSize(word, fontSize);\n                    spaceInLineRemaining -= widthOfWord;\n                    if (spaceInLineRemaining <= 0) {\n                        linesUsed += 1;\n                        spaceInLineRemaining = bounds.width - widthOfWord;\n                    }\n                }\n            }\n            // Return if we exceeded the allowed width\n            if (!multiline && linesUsed > lines.length)\n                return fontSize - 1;\n            var height = font.heightAtSize(fontSize);\n            var lineHeight = height + height * 0.2;\n            var totalHeight = lineHeight * linesUsed;\n            // Return if we exceeded the allowed height\n            if (totalHeight > Math.abs(bounds.height))\n                return fontSize - 1;\n            fontSize += 1;\n        }\n        return fontSize;\n    };\n    var computeCombedFontSize = function (line, font, bounds, cellCount) {\n        var cellWidth = bounds.width / cellCount;\n        var cellHeight = bounds.height;\n        var fontSize = MIN_FONT_SIZE;\n        var chars = charSplit(line);\n        while (fontSize < MAX_FONT_SIZE) {\n            for (var idx = 0, len = chars.length; idx < len; idx++) {\n                var c = chars[idx];\n                var tooLong = font.widthOfTextAtSize(c, fontSize) > cellWidth * 0.75;\n                if (tooLong)\n                    return fontSize - 1;\n            }\n            var height = font.heightAtSize(fontSize, { descender: false });\n            if (height > cellHeight)\n                return fontSize - 1;\n            fontSize += 1;\n        }\n        return fontSize;\n    };\n    var lastIndexOfWhitespace = function (line) {\n        for (var idx = line.length; idx > 0; idx--) {\n            if (/\\s/.test(line[idx]))\n                return idx;\n        }\n        return undefined;\n    };\n    var splitOutLines = function (input, maxWidth, font, fontSize) {\n        var _a;\n        var lastWhitespaceIdx = input.length;\n        while (lastWhitespaceIdx > 0) {\n            var line = input.substring(0, lastWhitespaceIdx);\n            var encoded = font.encodeText(line);\n            var width = font.widthOfTextAtSize(line, fontSize);\n            if (width < maxWidth) {\n                var remainder = input.substring(lastWhitespaceIdx) || undefined;\n                return { line: line, encoded: encoded, width: width, remainder: remainder };\n            }\n            lastWhitespaceIdx = (_a = lastIndexOfWhitespace(line)) !== null && _a !== void 0 ? _a : 0;\n        }\n        // We were unable to split the input enough to get a chunk that would fit\n        // within the specified `maxWidth` so we'll just return everything\n        return {\n            line: input,\n            encoded: font.encodeText(input),\n            width: font.widthOfTextAtSize(input, fontSize),\n            remainder: undefined,\n        };\n    };\n    var layoutMultilineText = function (text, _a) {\n        var alignment = _a.alignment, fontSize = _a.fontSize, font = _a.font, bounds = _a.bounds;\n        var lines = lineSplit(cleanText(text));\n        if (fontSize === undefined || fontSize === 0) {\n            fontSize = computeFontSize(lines, font, bounds, true);\n        }\n        var height = font.heightAtSize(fontSize);\n        var lineHeight = height + height * 0.2;\n        var textLines = [];\n        var minX = bounds.x;\n        var minY = bounds.y;\n        var maxX = bounds.x + bounds.width;\n        var maxY = bounds.y + bounds.height;\n        var y = bounds.y + bounds.height;\n        for (var idx = 0, len = lines.length; idx < len; idx++) {\n            var prevRemainder = lines[idx];\n            while (prevRemainder !== undefined) {\n                var _b = splitOutLines(prevRemainder, bounds.width, font, fontSize), line = _b.line, encoded = _b.encoded, width = _b.width, remainder = _b.remainder;\n                // prettier-ignore\n                var x = (alignment === exports.TextAlignment.Left ? bounds.x\n                    : alignment === exports.TextAlignment.Center ? bounds.x + (bounds.width / 2) - (width / 2)\n                        : alignment === exports.TextAlignment.Right ? bounds.x + bounds.width - width\n                            : bounds.x);\n                y -= lineHeight;\n                if (x < minX)\n                    minX = x;\n                if (y < minY)\n                    minY = y;\n                if (x + width > maxX)\n                    maxX = x + width;\n                if (y + height > maxY)\n                    maxY = y + height;\n                textLines.push({ text: line, encoded: encoded, width: width, height: height, x: x, y: y });\n                // Only trim lines that we had to split ourselves. So we won't trim lines\n                // that the user provided themselves with whitespace.\n                prevRemainder = remainder === null || remainder === void 0 ? void 0 : remainder.trim();\n            }\n        }\n        return {\n            fontSize: fontSize,\n            lineHeight: lineHeight,\n            lines: textLines,\n            bounds: {\n                x: minX,\n                y: minY,\n                width: maxX - minX,\n                height: maxY - minY,\n            },\n        };\n    };\n    var layoutCombedText = function (text, _a) {\n        var fontSize = _a.fontSize, font = _a.font, bounds = _a.bounds, cellCount = _a.cellCount;\n        var line = mergeLines(cleanText(text));\n        if (line.length > cellCount) {\n            throw new CombedTextLayoutError(line.length, cellCount);\n        }\n        if (fontSize === undefined || fontSize === 0) {\n            fontSize = computeCombedFontSize(line, font, bounds, cellCount);\n        }\n        var cellWidth = bounds.width / cellCount;\n        var height = font.heightAtSize(fontSize, { descender: false });\n        var y = bounds.y + (bounds.height / 2 - height / 2);\n        var cells = [];\n        var minX = bounds.x;\n        var minY = bounds.y;\n        var maxX = bounds.x + bounds.width;\n        var maxY = bounds.y + bounds.height;\n        var cellOffset = 0;\n        var charOffset = 0;\n        while (cellOffset < cellCount) {\n            var _b = charAtIndex(line, charOffset), char = _b[0], charLength = _b[1];\n            var encoded = font.encodeText(char);\n            var width = font.widthOfTextAtSize(char, fontSize);\n            var cellCenter = bounds.x + (cellWidth * cellOffset + cellWidth / 2);\n            var x = cellCenter - width / 2;\n            if (x < minX)\n                minX = x;\n            if (y < minY)\n                minY = y;\n            if (x + width > maxX)\n                maxX = x + width;\n            if (y + height > maxY)\n                maxY = y + height;\n            cells.push({ text: line, encoded: encoded, width: width, height: height, x: x, y: y });\n            cellOffset += 1;\n            charOffset += charLength;\n        }\n        return {\n            fontSize: fontSize,\n            cells: cells,\n            bounds: {\n                x: minX,\n                y: minY,\n                width: maxX - minX,\n                height: maxY - minY,\n            },\n        };\n    };\n    var layoutSinglelineText = function (text, _a) {\n        var alignment = _a.alignment, fontSize = _a.fontSize, font = _a.font, bounds = _a.bounds;\n        var line = mergeLines(cleanText(text));\n        if (fontSize === undefined || fontSize === 0) {\n            fontSize = computeFontSize([line], font, bounds);\n        }\n        var encoded = font.encodeText(line);\n        var width = font.widthOfTextAtSize(line, fontSize);\n        var height = font.heightAtSize(fontSize, { descender: false });\n        // prettier-ignore\n        var x = (alignment === exports.TextAlignment.Left ? bounds.x\n            : alignment === exports.TextAlignment.Center ? bounds.x + (bounds.width / 2) - (width / 2)\n                : alignment === exports.TextAlignment.Right ? bounds.x + bounds.width - width\n                    : bounds.x);\n        var y = bounds.y + (bounds.height / 2 - height / 2);\n        return {\n            fontSize: fontSize,\n            line: { text: line, encoded: encoded, width: width, height: height, x: x, y: y },\n            bounds: { x: x, y: y, width: width, height: height },\n        };\n    };\n\n    /********************* Appearance Provider Functions **************************/\n    var normalizeAppearance = function (appearance) {\n        if ('normal' in appearance)\n            return appearance;\n        return { normal: appearance };\n    };\n    // Examples:\n    //   `/Helv 12 Tf` -> ['/Helv 12 Tf', 'Helv', '12']\n    //   `/HeBo 8.00 Tf` -> ['/HeBo 8 Tf', 'HeBo', '8.00']\n    var tfRegex = /\\/([^\\0\\t\\n\\f\\r\\ ]+)[\\0\\t\\n\\f\\r\\ ]+(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]+Tf/;\n    var getDefaultFontSize = function (field) {\n        var _a, _b;\n        var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n        var daMatch = (_b = findLastMatch(da, tfRegex).match) !== null && _b !== void 0 ? _b : [];\n        var defaultFontSize = Number(daMatch[2]);\n        return isFinite(defaultFontSize) ? defaultFontSize : undefined;\n    };\n    // Examples:\n    //   `0.3 g` -> ['0.3', 'g']\n    //   `0.3 1 .3 rg` -> ['0.3', '1', '.3', 'rg']\n    //   `0.3 1 .3 0 k` -> ['0.3', '1', '.3', '0', 'k']\n    var colorRegex = /(\\d*\\.\\d+|\\d+)[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]*(\\d*\\.\\d+|\\d+)?[\\0\\t\\n\\f\\r\\ ]+(g|rg|k)/;\n    var getDefaultColor = function (field) {\n        var _a;\n        var da = (_a = field.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n        var daMatch = findLastMatch(da, colorRegex).match;\n        var _b = daMatch !== null && daMatch !== void 0 ? daMatch : [], c1 = _b[1], c2 = _b[2], c3 = _b[3], c4 = _b[4], colorSpace = _b[5];\n        if (colorSpace === 'g' && c1) {\n            return grayscale(Number(c1));\n        }\n        if (colorSpace === 'rg' && c1 && c2 && c3) {\n            return rgb(Number(c1), Number(c2), Number(c3));\n        }\n        if (colorSpace === 'k' && c1 && c2 && c3 && c4) {\n            return cmyk(Number(c1), Number(c2), Number(c3), Number(c4));\n        }\n        return undefined;\n    };\n    var updateDefaultAppearance = function (field, color, font, fontSize) {\n        var _a;\n        if (fontSize === void 0) { fontSize = 0; }\n        var da = [\n            setFillingColor(color).toString(),\n            setFontAndSize((_a = font === null || font === void 0 ? void 0 : font.name) !== null && _a !== void 0 ? _a : 'dummy__noop', fontSize).toString(),\n        ].join('\\n');\n        field.setDefaultAppearance(da);\n    };\n    var defaultCheckBoxAppearanceProvider = function (checkBox, widget) {\n        var _a, _b, _c;\n        // The `/DA` entry can be at the widget or field level - so we handle both\n        var widgetColor = getDefaultColor(widget);\n        var fieldColor = getDefaultColor(checkBox.acroField);\n        var rectangle = widget.getRectangle();\n        var ap = widget.getAppearanceCharacteristics();\n        var bs = widget.getBorderStyle();\n        var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n        var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n        var _d = adjustDimsForRotation(rectangle, rotation), width = _d.width, height = _d.height;\n        var rotate = rotateInPlace(tslibExports.__assign(tslibExports.__assign({}, rectangle), { rotation: rotation }));\n        var black = rgb(0, 0, 0);\n        var borderColor = (_b = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n        var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n        var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n        // Update color\n        var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n        if (widgetColor) {\n            updateDefaultAppearance(widget, textColor);\n        }\n        else {\n            updateDefaultAppearance(checkBox.acroField, textColor);\n        }\n        var options = {\n            x: 0 + borderWidth / 2,\n            y: 0 + borderWidth / 2,\n            width: width - borderWidth,\n            height: height - borderWidth,\n            thickness: 1.5,\n            borderWidth: borderWidth,\n            borderColor: borderColor,\n            markColor: textColor,\n        };\n        return {\n            normal: {\n                on: tslibExports.__spreadArrays(rotate, drawCheckBox(tslibExports.__assign(tslibExports.__assign({}, options), { color: normalBackgroundColor, filled: true }))),\n                off: tslibExports.__spreadArrays(rotate, drawCheckBox(tslibExports.__assign(tslibExports.__assign({}, options), { color: normalBackgroundColor, filled: false }))),\n            },\n            down: {\n                on: tslibExports.__spreadArrays(rotate, drawCheckBox(tslibExports.__assign(tslibExports.__assign({}, options), { color: downBackgroundColor, filled: true }))),\n                off: tslibExports.__spreadArrays(rotate, drawCheckBox(tslibExports.__assign(tslibExports.__assign({}, options), { color: downBackgroundColor, filled: false }))),\n            },\n        };\n    };\n    var defaultRadioGroupAppearanceProvider = function (radioGroup, widget) {\n        var _a, _b, _c;\n        // The `/DA` entry can be at the widget or field level - so we handle both\n        var widgetColor = getDefaultColor(widget);\n        var fieldColor = getDefaultColor(radioGroup.acroField);\n        var rectangle = widget.getRectangle();\n        var ap = widget.getAppearanceCharacteristics();\n        var bs = widget.getBorderStyle();\n        var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n        var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n        var _d = adjustDimsForRotation(rectangle, rotation), width = _d.width, height = _d.height;\n        var rotate = rotateInPlace(tslibExports.__assign(tslibExports.__assign({}, rectangle), { rotation: rotation }));\n        var black = rgb(0, 0, 0);\n        var borderColor = (_b = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor())) !== null && _b !== void 0 ? _b : black;\n        var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n        var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n        // Update color\n        var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n        if (widgetColor) {\n            updateDefaultAppearance(widget, textColor);\n        }\n        else {\n            updateDefaultAppearance(radioGroup.acroField, textColor);\n        }\n        var options = {\n            x: width / 2,\n            y: height / 2,\n            width: width - borderWidth,\n            height: height - borderWidth,\n            borderWidth: borderWidth,\n            borderColor: borderColor,\n            dotColor: textColor,\n        };\n        return {\n            normal: {\n                on: tslibExports.__spreadArrays(rotate, drawRadioButton(tslibExports.__assign(tslibExports.__assign({}, options), { color: normalBackgroundColor, filled: true }))),\n                off: tslibExports.__spreadArrays(rotate, drawRadioButton(tslibExports.__assign(tslibExports.__assign({}, options), { color: normalBackgroundColor, filled: false }))),\n            },\n            down: {\n                on: tslibExports.__spreadArrays(rotate, drawRadioButton(tslibExports.__assign(tslibExports.__assign({}, options), { color: downBackgroundColor, filled: true }))),\n                off: tslibExports.__spreadArrays(rotate, drawRadioButton(tslibExports.__assign(tslibExports.__assign({}, options), { color: downBackgroundColor, filled: false }))),\n            },\n        };\n    };\n    var defaultButtonAppearanceProvider = function (button, widget, font) {\n        var _a, _b, _c, _d, _e;\n        // The `/DA` entry can be at the widget or field level - so we handle both\n        var widgetColor = getDefaultColor(widget);\n        var fieldColor = getDefaultColor(button.acroField);\n        var widgetFontSize = getDefaultFontSize(widget);\n        var fieldFontSize = getDefaultFontSize(button.acroField);\n        var rectangle = widget.getRectangle();\n        var ap = widget.getAppearanceCharacteristics();\n        var bs = widget.getBorderStyle();\n        var captions = ap === null || ap === void 0 ? void 0 : ap.getCaptions();\n        var normalText = (_a = captions === null || captions === void 0 ? void 0 : captions.normal) !== null && _a !== void 0 ? _a : '';\n        var downText = (_c = (_b = captions === null || captions === void 0 ? void 0 : captions.down) !== null && _b !== void 0 ? _b : normalText) !== null && _c !== void 0 ? _c : '';\n        var borderWidth = (_d = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _d !== void 0 ? _d : 0;\n        var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n        var _f = adjustDimsForRotation(rectangle, rotation), width = _f.width, height = _f.height;\n        var rotate = rotateInPlace(tslibExports.__assign(tslibExports.__assign({}, rectangle), { rotation: rotation }));\n        var black = rgb(0, 0, 0);\n        var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n        var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n        var downBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor(), 0.8);\n        var bounds = {\n            x: borderWidth,\n            y: borderWidth,\n            width: width - borderWidth * 2,\n            height: height - borderWidth * 2,\n        };\n        var normalLayout = layoutSinglelineText(normalText, {\n            alignment: exports.TextAlignment.Center,\n            fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n            font: font,\n            bounds: bounds,\n        });\n        var downLayout = layoutSinglelineText(downText, {\n            alignment: exports.TextAlignment.Center,\n            fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n            font: font,\n            bounds: bounds,\n        });\n        // Update font size and color\n        var fontSize = Math.min(normalLayout.fontSize, downLayout.fontSize);\n        var textColor = (_e = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _e !== void 0 ? _e : black;\n        if (widgetColor || widgetFontSize !== undefined) {\n            updateDefaultAppearance(widget, textColor, font, fontSize);\n        }\n        else {\n            updateDefaultAppearance(button.acroField, textColor, font, fontSize);\n        }\n        var options = {\n            x: 0 + borderWidth / 2,\n            y: 0 + borderWidth / 2,\n            width: width - borderWidth,\n            height: height - borderWidth,\n            borderWidth: borderWidth,\n            borderColor: borderColor,\n            textColor: textColor,\n            font: font.name,\n            fontSize: fontSize,\n        };\n        return {\n            normal: tslibExports.__spreadArrays(rotate, drawButton(tslibExports.__assign(tslibExports.__assign({}, options), { color: normalBackgroundColor, textLines: [normalLayout.line] }))),\n            down: tslibExports.__spreadArrays(rotate, drawButton(tslibExports.__assign(tslibExports.__assign({}, options), { color: downBackgroundColor, textLines: [downLayout.line] }))),\n        };\n    };\n    var defaultTextFieldAppearanceProvider = function (textField, widget, font) {\n        var _a, _b, _c, _d;\n        // The `/DA` entry can be at the widget or field level - so we handle both\n        var widgetColor = getDefaultColor(widget);\n        var fieldColor = getDefaultColor(textField.acroField);\n        var widgetFontSize = getDefaultFontSize(widget);\n        var fieldFontSize = getDefaultFontSize(textField.acroField);\n        var rectangle = widget.getRectangle();\n        var ap = widget.getAppearanceCharacteristics();\n        var bs = widget.getBorderStyle();\n        var text = (_a = textField.getText()) !== null && _a !== void 0 ? _a : '';\n        var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n        var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n        var _e = adjustDimsForRotation(rectangle, rotation), width = _e.width, height = _e.height;\n        var rotate = rotateInPlace(tslibExports.__assign(tslibExports.__assign({}, rectangle), { rotation: rotation }));\n        var black = rgb(0, 0, 0);\n        var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n        var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n        var textLines;\n        var fontSize;\n        var padding = textField.isCombed() ? 0 : 1;\n        var bounds = {\n            x: borderWidth + padding,\n            y: borderWidth + padding,\n            width: width - (borderWidth + padding) * 2,\n            height: height - (borderWidth + padding) * 2,\n        };\n        if (textField.isMultiline()) {\n            var layout = layoutMultilineText(text, {\n                alignment: textField.getAlignment(),\n                fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n                font: font,\n                bounds: bounds,\n            });\n            textLines = layout.lines;\n            fontSize = layout.fontSize;\n        }\n        else if (textField.isCombed()) {\n            var layout = layoutCombedText(text, {\n                fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n                font: font,\n                bounds: bounds,\n                cellCount: (_c = textField.getMaxLength()) !== null && _c !== void 0 ? _c : 0,\n            });\n            textLines = layout.cells;\n            fontSize = layout.fontSize;\n        }\n        else {\n            var layout = layoutSinglelineText(text, {\n                alignment: textField.getAlignment(),\n                fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n                font: font,\n                bounds: bounds,\n            });\n            textLines = [layout.line];\n            fontSize = layout.fontSize;\n        }\n        // Update font size and color\n        var textColor = (_d = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _d !== void 0 ? _d : black;\n        if (widgetColor || widgetFontSize !== undefined) {\n            updateDefaultAppearance(widget, textColor, font, fontSize);\n        }\n        else {\n            updateDefaultAppearance(textField.acroField, textColor, font, fontSize);\n        }\n        var options = {\n            x: 0 + borderWidth / 2,\n            y: 0 + borderWidth / 2,\n            width: width - borderWidth,\n            height: height - borderWidth,\n            borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n            borderColor: borderColor,\n            textColor: textColor,\n            font: font.name,\n            fontSize: fontSize,\n            color: normalBackgroundColor,\n            textLines: textLines,\n            padding: padding,\n        };\n        return tslibExports.__spreadArrays(rotate, drawTextField(options));\n    };\n    var defaultDropdownAppearanceProvider = function (dropdown, widget, font) {\n        var _a, _b, _c;\n        // The `/DA` entry can be at the widget or field level - so we handle both\n        var widgetColor = getDefaultColor(widget);\n        var fieldColor = getDefaultColor(dropdown.acroField);\n        var widgetFontSize = getDefaultFontSize(widget);\n        var fieldFontSize = getDefaultFontSize(dropdown.acroField);\n        var rectangle = widget.getRectangle();\n        var ap = widget.getAppearanceCharacteristics();\n        var bs = widget.getBorderStyle();\n        var text = (_a = dropdown.getSelected()[0]) !== null && _a !== void 0 ? _a : '';\n        var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n        var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n        var _d = adjustDimsForRotation(rectangle, rotation), width = _d.width, height = _d.height;\n        var rotate = rotateInPlace(tslibExports.__assign(tslibExports.__assign({}, rectangle), { rotation: rotation }));\n        var black = rgb(0, 0, 0);\n        var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n        var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n        var padding = 1;\n        var bounds = {\n            x: borderWidth + padding,\n            y: borderWidth + padding,\n            width: width - (borderWidth + padding) * 2,\n            height: height - (borderWidth + padding) * 2,\n        };\n        var _e = layoutSinglelineText(text, {\n            alignment: exports.TextAlignment.Left,\n            fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n            font: font,\n            bounds: bounds,\n        }), line = _e.line, fontSize = _e.fontSize;\n        // Update font size and color\n        var textColor = (_c = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _c !== void 0 ? _c : black;\n        if (widgetColor || widgetFontSize !== undefined) {\n            updateDefaultAppearance(widget, textColor, font, fontSize);\n        }\n        else {\n            updateDefaultAppearance(dropdown.acroField, textColor, font, fontSize);\n        }\n        var options = {\n            x: 0 + borderWidth / 2,\n            y: 0 + borderWidth / 2,\n            width: width - borderWidth,\n            height: height - borderWidth,\n            borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n            borderColor: borderColor,\n            textColor: textColor,\n            font: font.name,\n            fontSize: fontSize,\n            color: normalBackgroundColor,\n            textLines: [line],\n            padding: padding,\n        };\n        return tslibExports.__spreadArrays(rotate, drawTextField(options));\n    };\n    var defaultOptionListAppearanceProvider = function (optionList, widget, font) {\n        var _a, _b;\n        // The `/DA` entry can be at the widget or field level - so we handle both\n        var widgetColor = getDefaultColor(widget);\n        var fieldColor = getDefaultColor(optionList.acroField);\n        var widgetFontSize = getDefaultFontSize(widget);\n        var fieldFontSize = getDefaultFontSize(optionList.acroField);\n        var rectangle = widget.getRectangle();\n        var ap = widget.getAppearanceCharacteristics();\n        var bs = widget.getBorderStyle();\n        var borderWidth = (_a = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _a !== void 0 ? _a : 0;\n        var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n        var _c = adjustDimsForRotation(rectangle, rotation), width = _c.width, height = _c.height;\n        var rotate = rotateInPlace(tslibExports.__assign(tslibExports.__assign({}, rectangle), { rotation: rotation }));\n        var black = rgb(0, 0, 0);\n        var borderColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBorderColor());\n        var normalBackgroundColor = componentsToColor(ap === null || ap === void 0 ? void 0 : ap.getBackgroundColor());\n        var options = optionList.getOptions();\n        var selected = optionList.getSelected();\n        if (optionList.isSorted())\n            options.sort();\n        var text = '';\n        for (var idx = 0, len = options.length; idx < len; idx++) {\n            text += options[idx];\n            if (idx < len - 1)\n                text += '\\n';\n        }\n        var padding = 1;\n        var bounds = {\n            x: borderWidth + padding,\n            y: borderWidth + padding,\n            width: width - (borderWidth + padding) * 2,\n            height: height - (borderWidth + padding) * 2,\n        };\n        var _d = layoutMultilineText(text, {\n            alignment: exports.TextAlignment.Left,\n            fontSize: widgetFontSize !== null && widgetFontSize !== void 0 ? widgetFontSize : fieldFontSize,\n            font: font,\n            bounds: bounds,\n        }), lines = _d.lines, fontSize = _d.fontSize, lineHeight = _d.lineHeight;\n        var selectedLines = [];\n        for (var idx = 0, len = lines.length; idx < len; idx++) {\n            var line = lines[idx];\n            if (selected.includes(line.text))\n                selectedLines.push(idx);\n        }\n        var blue = rgb(153 / 255, 193 / 255, 218 / 255);\n        // Update font size and color\n        var textColor = (_b = widgetColor !== null && widgetColor !== void 0 ? widgetColor : fieldColor) !== null && _b !== void 0 ? _b : black;\n        if (widgetColor || widgetFontSize !== undefined) {\n            updateDefaultAppearance(widget, textColor, font, fontSize);\n        }\n        else {\n            updateDefaultAppearance(optionList.acroField, textColor, font, fontSize);\n        }\n        return tslibExports.__spreadArrays(rotate, drawOptionList({\n            x: 0 + borderWidth / 2,\n            y: 0 + borderWidth / 2,\n            width: width - borderWidth,\n            height: height - borderWidth,\n            borderWidth: borderWidth !== null && borderWidth !== void 0 ? borderWidth : 0,\n            borderColor: borderColor,\n            textColor: textColor,\n            font: font.name,\n            fontSize: fontSize,\n            color: normalBackgroundColor,\n            textLines: lines,\n            lineHeight: lineHeight,\n            selectedColor: blue,\n            selectedLines: selectedLines,\n            padding: padding,\n        }));\n    };\n\n    /**\n     * Represents a PDF page that has been embedded in a [[PDFDocument]].\n     */\n    var PDFEmbeddedPage = /** @class */ (function () {\n        function PDFEmbeddedPage(ref, doc, embedder) {\n            this.alreadyEmbedded = false;\n            assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n            assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n            assertIs(embedder, 'embedder', [[PDFPageEmbedder, 'PDFPageEmbedder']]);\n            this.ref = ref;\n            this.doc = doc;\n            this.width = embedder.width;\n            this.height = embedder.height;\n            this.embedder = embedder;\n        }\n        /**\n         * Compute the width and height of this page after being scaled by the\n         * given `factor`. For example:\n         * ```js\n         * embeddedPage.width  // => 500\n         * embeddedPage.height // => 250\n         *\n         * const scaled = embeddedPage.scale(0.5)\n         * scaled.width  // => 250\n         * scaled.height // => 125\n         * ```\n         * This operation is often useful before drawing a page with\n         * [[PDFPage.drawPage]] to compute the `width` and `height` options.\n         * @param factor The factor by which this page should be scaled.\n         * @returns The width and height of the page after being scaled.\n         */\n        PDFEmbeddedPage.prototype.scale = function (factor) {\n            assertIs(factor, 'factor', ['number']);\n            return { width: this.width * factor, height: this.height * factor };\n        };\n        /**\n         * Get the width and height of this page. For example:\n         * ```js\n         * const { width, height } = embeddedPage.size()\n         * ```\n         * @returns The width and height of the page.\n         */\n        PDFEmbeddedPage.prototype.size = function () {\n            return this.scale(1);\n        };\n        /**\n         * > **NOTE:** You probably don't need to call this method directly. The\n         * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n         * > automatically ensure all embeddable pages get embedded.\n         *\n         * Embed this embeddable page in its document.\n         *\n         * @returns Resolves when the embedding is complete.\n         */\n        PDFEmbeddedPage.prototype.embed = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                return tslibExports.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n                            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n                        case 1:\n                            _a.sent();\n                            this.alreadyEmbedded = true;\n                            _a.label = 2;\n                        case 2: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFDocument.embedPdf]] and\n         * > [[PDFDocument.embedPage]] methods, which will create instances of\n         * > [[PDFEmbeddedPage]] for you.\n         *\n         * Create an instance of [[PDFEmbeddedPage]] from an existing ref and embedder\n         *\n         * @param ref The unique reference for this embedded page.\n         * @param doc The document to which the embedded page will belong.\n         * @param embedder The embedder that will be used to embed the page.\n         */\n        PDFEmbeddedPage.of = function (ref, doc, embedder) {\n            return new PDFEmbeddedPage(ref, doc, embedder);\n        };\n        return PDFEmbeddedPage;\n    }());\n\n    /**\n     * Represents a font that has been embedded in a [[PDFDocument]].\n     */\n    var PDFFont = /** @class */ (function () {\n        function PDFFont(ref, doc, embedder) {\n            this.modified = true;\n            assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n            assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n            assertIs(embedder, 'embedder', [\n                [CustomFontEmbedder, 'CustomFontEmbedder'],\n                [StandardFontEmbedder, 'StandardFontEmbedder'],\n            ]);\n            this.ref = ref;\n            this.doc = doc;\n            this.name = embedder.fontName;\n            this.embedder = embedder;\n        }\n        /**\n         * > **NOTE:** You probably don't need to call this method directly. The\n         * > [[PDFPage.drawText]] method will automatically encode the text it is\n         * > given.\n         *\n         * Encodes a string of text in this font.\n         *\n         * @param text The text to be encoded.\n         * @returns The encoded text as a hex string.\n         */\n        PDFFont.prototype.encodeText = function (text) {\n            assertIs(text, 'text', ['string']);\n            this.modified = true;\n            return this.embedder.encodeText(text);\n        };\n        /**\n         * Measure the width of a string of text drawn in this font at a given size.\n         * For example:\n         * ```js\n         * const width = font.widthOfTextAtSize('Foo Bar Qux Baz', 36)\n         * ```\n         * @param text The string of text to be measured.\n         * @param size The font size to be used for this measurement.\n         * @returns The width of the string of text when drawn in this font at the\n         *          given size.\n         */\n        PDFFont.prototype.widthOfTextAtSize = function (text, size) {\n            assertIs(text, 'text', ['string']);\n            assertIs(size, 'size', ['number']);\n            return this.embedder.widthOfTextAtSize(text, size);\n        };\n        /**\n         * Measure the height of this font at a given size. For example:\n         * ```js\n         * const height = font.heightAtSize(24)\n         * ```\n         *\n         * The `options.descender` value controls whether or not the font's\n         * descender is included in the height calculation.\n         *\n         * @param size The font size to be used for this measurement.\n         * @param options The options to be used when computing this measurement.\n         * @returns The height of this font at the given size.\n         */\n        PDFFont.prototype.heightAtSize = function (size, options) {\n            var _a;\n            assertIs(size, 'size', ['number']);\n            assertOrUndefined(options === null || options === void 0 ? void 0 : options.descender, 'options.descender', ['boolean']);\n            return this.embedder.heightOfFontAtSize(size, {\n                descender: (_a = options === null || options === void 0 ? void 0 : options.descender) !== null && _a !== void 0 ? _a : true,\n            });\n        };\n        /**\n         * Compute the font size at which this font is a given height. For example:\n         * ```js\n         * const fontSize = font.sizeAtHeight(12)\n         * ```\n         * @param height The height to be used for this calculation.\n         * @returns The font size at which this font is the given height.\n         */\n        PDFFont.prototype.sizeAtHeight = function (height) {\n            assertIs(height, 'height', ['number']);\n            return this.embedder.sizeOfFontAtHeight(height);\n        };\n        /**\n         * Get the set of unicode code points that can be represented by this font.\n         * @returns The set of unicode code points supported by this font.\n         */\n        PDFFont.prototype.getCharacterSet = function () {\n            if (this.embedder instanceof StandardFontEmbedder) {\n                return this.embedder.encoding.supportedCodePoints;\n            }\n            else {\n                return this.embedder.font.characterSet;\n            }\n        };\n        /**\n         * > **NOTE:** You probably don't need to call this method directly. The\n         * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n         * > automatically ensure all fonts get embedded.\n         *\n         * Embed this font in its document.\n         *\n         * @returns Resolves when the embedding is complete.\n         */\n        PDFFont.prototype.embed = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                return tslibExports.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!this.modified) return [3 /*break*/, 2];\n                            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n                        case 1:\n                            _a.sent();\n                            this.modified = false;\n                            _a.label = 2;\n                        case 2: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFDocument.embedFont]] and\n         * > [[PDFDocument.embedStandardFont]] methods, which will create instances\n         * > of [[PDFFont]] for you.\n         *\n         * Create an instance of [[PDFFont]] from an existing ref and embedder\n         *\n         * @param ref The unique reference for this font.\n         * @param doc The document to which the font will belong.\n         * @param embedder The embedder that will be used to embed the font.\n         */\n        PDFFont.of = function (ref, doc, embedder) {\n            return new PDFFont(ref, doc, embedder);\n        };\n        return PDFFont;\n    }());\n\n    /**\n     * Represents an image that has been embedded in a [[PDFDocument]].\n     */\n    var PDFImage = /** @class */ (function () {\n        function PDFImage(ref, doc, embedder) {\n            assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n            assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n            assertIs(embedder, 'embedder', [\n                [JpegEmbedder, 'JpegEmbedder'],\n                [PngEmbedder, 'PngEmbedder'],\n            ]);\n            this.ref = ref;\n            this.doc = doc;\n            this.width = embedder.width;\n            this.height = embedder.height;\n            this.embedder = embedder;\n        }\n        /**\n         * Compute the width and height of this image after being scaled by the\n         * given `factor`. For example:\n         * ```js\n         * image.width  // => 500\n         * image.height // => 250\n         *\n         * const scaled = image.scale(0.5)\n         * scaled.width  // => 250\n         * scaled.height // => 125\n         * ```\n         * This operation is often useful before drawing an image with\n         * [[PDFPage.drawImage]] to compute the `width` and `height` options.\n         * @param factor The factor by which this image should be scaled.\n         * @returns The width and height of the image after being scaled.\n         */\n        PDFImage.prototype.scale = function (factor) {\n            assertIs(factor, 'factor', ['number']);\n            return { width: this.width * factor, height: this.height * factor };\n        };\n        /**\n         * Get the width and height of this image after scaling it as large as\n         * possible while maintaining its aspect ratio and not exceeding the\n         * specified `width` and `height`. For example:\n         * ```\n         * image.width  // => 500\n         * image.height // => 250\n         *\n         * const scaled = image.scaleToFit(750, 1000)\n         * scaled.width  // => 750\n         * scaled.height // => 375\n         * ```\n         * The `width` and `height` parameters can also be thought of as the width\n         * and height of a box that the scaled image must fit within.\n         * @param width The bounding box's width.\n         * @param height The bounding box's height.\n         * @returns The width and height of the image after being scaled.\n         */\n        PDFImage.prototype.scaleToFit = function (width, height) {\n            assertIs(width, 'width', ['number']);\n            assertIs(height, 'height', ['number']);\n            var imgWidthScale = width / this.width;\n            var imgHeightScale = height / this.height;\n            var scale = Math.min(imgWidthScale, imgHeightScale);\n            return this.scale(scale);\n        };\n        /**\n         * Get the width and height of this image. For example:\n         * ```js\n         * const { width, height } = image.size()\n         * ```\n         * @returns The width and height of the image.\n         */\n        PDFImage.prototype.size = function () {\n            return this.scale(1);\n        };\n        /**\n         * > **NOTE:** You probably don't need to call this method directly. The\n         * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n         * > automatically ensure all images get embedded.\n         *\n         * Embed this image in its document.\n         *\n         * @returns Resolves when the embedding is complete.\n         */\n        PDFImage.prototype.embed = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var _a, doc, ref;\n                return tslibExports.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            if (!this.embedder)\n                                return [2 /*return*/];\n                            // The image should only be embedded once. If there's a pending embed\n                            // operation then wait on it. Otherwise we need to start the embed.\n                            if (!this.embedTask) {\n                                _a = this, doc = _a.doc, ref = _a.ref;\n                                this.embedTask = this.embedder.embedIntoContext(doc.context, ref);\n                            }\n                            return [4 /*yield*/, this.embedTask];\n                        case 1:\n                            _b.sent();\n                            // We clear `this.embedder` so that the indirectly referenced image data\n                            // can be garbage collected, thus avoiding a memory leak.\n                            // See https://github.com/Hopding/pdf-lib/pull/1032/files.\n                            this.embedder = undefined;\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFDocument.embedPng]] and [[PDFDocument.embedJpg]]\n         * > methods, which will create instances of [[PDFImage]] for you.\n         *\n         * Create an instance of [[PDFImage]] from an existing ref and embedder\n         *\n         * @param ref The unique reference for this image.\n         * @param doc The document to which the image will belong.\n         * @param embedder The embedder that will be used to embed the image.\n         */\n        PDFImage.of = function (ref, doc, embedder) {\n            return new PDFImage(ref, doc, embedder);\n        };\n        return PDFImage;\n    }());\n\n    exports.ImageAlignment = void 0;\n    (function (ImageAlignment) {\n        ImageAlignment[ImageAlignment[\"Left\"] = 0] = \"Left\";\n        ImageAlignment[ImageAlignment[\"Center\"] = 1] = \"Center\";\n        ImageAlignment[ImageAlignment[\"Right\"] = 2] = \"Right\";\n    })(exports.ImageAlignment || (exports.ImageAlignment = {}));\n\n    var assertFieldAppearanceOptions = function (options) {\n        assertOrUndefined(options === null || options === void 0 ? void 0 : options.x, 'options.x', ['number']);\n        assertOrUndefined(options === null || options === void 0 ? void 0 : options.y, 'options.y', ['number']);\n        assertOrUndefined(options === null || options === void 0 ? void 0 : options.width, 'options.width', ['number']);\n        assertOrUndefined(options === null || options === void 0 ? void 0 : options.height, 'options.height', ['number']);\n        assertOrUndefined(options === null || options === void 0 ? void 0 : options.textColor, 'options.textColor', [\n            [Object, 'Color'],\n        ]);\n        assertOrUndefined(options === null || options === void 0 ? void 0 : options.backgroundColor, 'options.backgroundColor', [\n            [Object, 'Color'],\n        ]);\n        assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderColor, 'options.borderColor', [\n            [Object, 'Color'],\n        ]);\n        assertOrUndefined(options === null || options === void 0 ? void 0 : options.borderWidth, 'options.borderWidth', ['number']);\n        assertOrUndefined(options === null || options === void 0 ? void 0 : options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n    };\n    /**\n     * Represents a field of a [[PDFForm]].\n     *\n     * This class is effectively abstract. All fields in a [[PDFForm]] will\n     * actually be an instance of a subclass of this class.\n     *\n     * Note that each field in a PDF is represented by a single field object.\n     * However, a given field object may be rendered at multiple locations within\n     * the document (across one or more pages). The rendering of a field is\n     * controlled by its widgets. Each widget causes its field to be displayed at a\n     * particular location in the document.\n     *\n     * Most of the time each field in a PDF has only a single widget, and thus is\n     * only rendered once. However, if a field is rendered multiple times, it will\n     * have multiple widgets - one for each location it is rendered.\n     *\n     * This abstraction of field objects and widgets is defined in the PDF\n     * specification and dictates how PDF files store fields and where they are\n     * to be rendered.\n     */\n    var PDFField = /** @class */ (function () {\n        function PDFField(acroField, ref, doc) {\n            assertIs(acroField, 'acroField', [[PDFAcroTerminal, 'PDFAcroTerminal']]);\n            assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n            assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n            this.acroField = acroField;\n            this.ref = ref;\n            this.doc = doc;\n        }\n        /**\n         * Get the fully qualified name of this field. For example:\n         * ```js\n         * const fields = form.getFields()\n         * fields.forEach(field => {\n         *   const name = field.getName()\n         *   console.log('Field name:', name)\n         * })\n         * ```\n         * Note that PDF fields are structured as a tree. Each field is the\n         * descendent of a series of ancestor nodes all the way up to the form node,\n         * which is always the root of the tree. Each node in the tree (except for\n         * the form node) has a partial name. Partial names can be composed of any\n         * unicode characters except a period (`.`). The fully qualified name of a\n         * field is composed of the partial names of all its ancestors joined\n         * with periods. This means that splitting the fully qualified name on\n         * periods and taking the last element of the resulting array will give you\n         * the partial name of a specific field.\n         * @returns The fully qualified name of this field.\n         */\n        PDFField.prototype.getName = function () {\n            var _a;\n            return (_a = this.acroField.getFullyQualifiedName()) !== null && _a !== void 0 ? _a : '';\n        };\n        /**\n         * Returns `true` if this field is read only. This means that PDF readers\n         * will not allow users to interact with the field or change its value. See\n         * [[PDFField.enableReadOnly]] and [[PDFField.disableReadOnly]].\n         * For example:\n         * ```js\n         * const field = form.getField('some.field')\n         * if (field.isReadOnly()) console.log('Read only is enabled')\n         * ```\n         * @returns Whether or not this is a read only field.\n         */\n        PDFField.prototype.isReadOnly = function () {\n            return this.acroField.hasFlag(exports.AcroFieldFlags.ReadOnly);\n        };\n        /**\n         * Prevent PDF readers from allowing users to interact with this field or\n         * change its value. The field will not respond to mouse or keyboard input.\n         * For example:\n         * ```js\n         * const field = form.getField('some.field')\n         * field.enableReadOnly()\n         * ```\n         * Useful for fields whose values are computed, imported from a database, or\n         * prefilled by software before being displayed to the user.\n         */\n        PDFField.prototype.enableReadOnly = function () {\n            this.acroField.setFlagTo(exports.AcroFieldFlags.ReadOnly, true);\n        };\n        /**\n         * Allow users to interact with this field and change its value in PDF\n         * readers via mouse and keyboard input. For example:\n         * ```js\n         * const field = form.getField('some.field')\n         * field.disableReadOnly()\n         * ```\n         */\n        PDFField.prototype.disableReadOnly = function () {\n            this.acroField.setFlagTo(exports.AcroFieldFlags.ReadOnly, false);\n        };\n        /**\n         * Returns `true` if this field must have a value when the form is submitted.\n         * See [[PDFField.enableRequired]] and [[PDFField.disableRequired]].\n         * For example:\n         * ```js\n         * const field = form.getField('some.field')\n         * if (field.isRequired()) console.log('Field is required')\n         * ```\n         * @returns Whether or not this field is required.\n         */\n        PDFField.prototype.isRequired = function () {\n            return this.acroField.hasFlag(exports.AcroFieldFlags.Required);\n        };\n        /**\n         * Require this field to have a value when the form is submitted.\n         * For example:\n         * ```js\n         * const field = form.getField('some.field')\n         * field.enableRequired()\n         * ```\n         */\n        PDFField.prototype.enableRequired = function () {\n            this.acroField.setFlagTo(exports.AcroFieldFlags.Required, true);\n        };\n        /**\n         * Do not require this field to have a value when the form is submitted.\n         * For example:\n         * ```js\n         * const field = form.getField('some.field')\n         * field.disableRequired()\n         * ```\n         */\n        PDFField.prototype.disableRequired = function () {\n            this.acroField.setFlagTo(exports.AcroFieldFlags.Required, false);\n        };\n        /**\n         * Returns `true` if this field's value should be exported when the form is\n         * submitted. See [[PDFField.enableExporting]] and\n         * [[PDFField.disableExporting]].\n         * For example:\n         * ```js\n         * const field = form.getField('some.field')\n         * if (field.isExported()) console.log('Exporting is enabled')\n         * ```\n         * @returns Whether or not this field's value should be exported.\n         */\n        PDFField.prototype.isExported = function () {\n            return !this.acroField.hasFlag(exports.AcroFieldFlags.NoExport);\n        };\n        /**\n         * Indicate that this field's value should be exported when the form is\n         * submitted in a PDF reader. For example:\n         * ```js\n         * const field = form.getField('some.field')\n         * field.enableExporting()\n         * ```\n         */\n        PDFField.prototype.enableExporting = function () {\n            this.acroField.setFlagTo(exports.AcroFieldFlags.NoExport, false);\n        };\n        /**\n         * Indicate that this field's value should **not** be exported when the form\n         * is submitted in a PDF reader. For example:\n         * ```js\n         * const field = form.getField('some.field')\n         * field.disableExporting()\n         * ```\n         */\n        PDFField.prototype.disableExporting = function () {\n            this.acroField.setFlagTo(exports.AcroFieldFlags.NoExport, true);\n        };\n        /** @ignore */\n        PDFField.prototype.needsAppearancesUpdate = function () {\n            throw new MethodNotImplementedError(this.constructor.name, 'needsAppearancesUpdate');\n        };\n        /** @ignore */\n        PDFField.prototype.defaultUpdateAppearances = function (_font) {\n            throw new MethodNotImplementedError(this.constructor.name, 'defaultUpdateAppearances');\n        };\n        PDFField.prototype.markAsDirty = function () {\n            this.doc.getForm().markFieldAsDirty(this.ref);\n        };\n        PDFField.prototype.markAsClean = function () {\n            this.doc.getForm().markFieldAsClean(this.ref);\n        };\n        PDFField.prototype.isDirty = function () {\n            return this.doc.getForm().fieldIsDirty(this.ref);\n        };\n        PDFField.prototype.createWidget = function (options) {\n            var _a;\n            var textColor = options.textColor;\n            var backgroundColor = options.backgroundColor;\n            var borderColor = options.borderColor;\n            var borderWidth = options.borderWidth;\n            var degreesAngle = toDegrees(options.rotate);\n            var caption = options.caption;\n            var x = options.x;\n            var y = options.y;\n            var width = options.width + borderWidth;\n            var height = options.height + borderWidth;\n            var hidden = Boolean(options.hidden);\n            var pageRef = options.page;\n            assertMultiple(degreesAngle, 'degreesAngle', 90);\n            // Create a widget for this field\n            var widget = PDFWidgetAnnotation.create(this.doc.context, this.ref);\n            // Set widget properties\n            var rect = rotateRectangle({ x: x, y: y, width: width, height: height }, borderWidth, degreesAngle);\n            widget.setRectangle(rect);\n            if (pageRef)\n                widget.setP(pageRef);\n            var ac = widget.getOrCreateAppearanceCharacteristics();\n            if (backgroundColor) {\n                ac.setBackgroundColor(colorToComponents(backgroundColor));\n            }\n            ac.setRotation(degreesAngle);\n            if (caption)\n                ac.setCaptions({ normal: caption });\n            if (borderColor)\n                ac.setBorderColor(colorToComponents(borderColor));\n            var bs = widget.getOrCreateBorderStyle();\n            if (borderWidth !== undefined)\n                bs.setWidth(borderWidth);\n            widget.setFlagTo(exports.AnnotationFlags.Print, true);\n            widget.setFlagTo(exports.AnnotationFlags.Hidden, hidden);\n            widget.setFlagTo(exports.AnnotationFlags.Invisible, false);\n            // Set acrofield properties\n            if (textColor) {\n                var da = (_a = this.acroField.getDefaultAppearance()) !== null && _a !== void 0 ? _a : '';\n                var newDa = da + '\\n' + setFillingColor(textColor).toString();\n                this.acroField.setDefaultAppearance(newDa);\n            }\n            return widget;\n        };\n        PDFField.prototype.updateWidgetAppearanceWithFont = function (widget, font, _a) {\n            var normal = _a.normal, rollover = _a.rollover, down = _a.down;\n            this.updateWidgetAppearances(widget, {\n                normal: this.createAppearanceStream(widget, normal, font),\n                rollover: rollover && this.createAppearanceStream(widget, rollover, font),\n                down: down && this.createAppearanceStream(widget, down, font),\n            });\n        };\n        PDFField.prototype.updateOnOffWidgetAppearance = function (widget, onValue, _a) {\n            var normal = _a.normal, rollover = _a.rollover, down = _a.down;\n            this.updateWidgetAppearances(widget, {\n                normal: this.createAppearanceDict(widget, normal, onValue),\n                rollover: rollover && this.createAppearanceDict(widget, rollover, onValue),\n                down: down && this.createAppearanceDict(widget, down, onValue),\n            });\n        };\n        PDFField.prototype.updateWidgetAppearances = function (widget, _a) {\n            var normal = _a.normal, rollover = _a.rollover, down = _a.down;\n            widget.setNormalAppearance(normal);\n            if (rollover) {\n                widget.setRolloverAppearance(rollover);\n            }\n            else {\n                widget.removeRolloverAppearance();\n            }\n            if (down) {\n                widget.setDownAppearance(down);\n            }\n            else {\n                widget.removeDownAppearance();\n            }\n        };\n        // // TODO: Do we need to do this...?\n        // private foo(font: PDFFont, dict: PDFDict) {\n        //   if (!dict.lookup(PDFName.of('DR'))) {\n        //     dict.set(PDFName.of('DR'), dict.context.obj({}));\n        //   }\n        //   const DR = dict.lookup(PDFName.of('DR'), PDFDict);\n        //   if (!DR.lookup(PDFName.of('Font'))) {\n        //     DR.set(PDFName.of('Font'), dict.context.obj({}));\n        //   }\n        //   const Font = DR.lookup(PDFName.of('Font'), PDFDict);\n        //   Font.set(PDFName.of(font.name), font.ref);\n        // }\n        PDFField.prototype.createAppearanceStream = function (widget, appearance, font) {\n            var _a;\n            var context = this.acroField.dict.context;\n            var _b = widget.getRectangle(), width = _b.width, height = _b.height;\n            // TODO: Do we need to do this...?\n            // if (font) {\n            //   this.foo(font, widget.dict);\n            //   this.foo(font, this.doc.getForm().acroForm.dict);\n            // }\n            // END TODO\n            var Resources = font && { Font: (_a = {}, _a[font.name] = font.ref, _a) };\n            var stream = context.formXObject(appearance, {\n                Resources: Resources,\n                BBox: context.obj([0, 0, width, height]),\n                Matrix: context.obj([1, 0, 0, 1, 0, 0]),\n            });\n            var streamRef = context.register(stream);\n            return streamRef;\n        };\n        /**\n         * Create a FormXObject of the supplied image and add it to context.\n         * The FormXObject size is calculated based on the widget (including\n         * the alignment).\n         * @param widget The widget that should display the image.\n         * @param alignment The alignment of the image.\n         * @param image The image that should be displayed.\n         * @returns The ref for the FormXObject that was added to the context.\n         */\n        PDFField.prototype.createImageAppearanceStream = function (widget, image, alignment) {\n            // NOTE: This implementation doesn't handle image borders.\n            // NOTE: Acrobat seems to resize the image (maybe even skewing its aspect\n            //       ratio) to fit perfectly within the widget's rectangle. This method\n            //       does not currently do that. Should there be an option for that?\n            var _a;\n            var _b;\n            var context = this.acroField.dict.context;\n            var rectangle = widget.getRectangle();\n            var ap = widget.getAppearanceCharacteristics();\n            var bs = widget.getBorderStyle();\n            var borderWidth = (_b = bs === null || bs === void 0 ? void 0 : bs.getWidth()) !== null && _b !== void 0 ? _b : 0;\n            var rotation = reduceRotation(ap === null || ap === void 0 ? void 0 : ap.getRotation());\n            var rotate = rotateInPlace(tslibExports.__assign(tslibExports.__assign({}, rectangle), { rotation: rotation }));\n            var adj = adjustDimsForRotation(rectangle, rotation);\n            var imageDims = image.scaleToFit(adj.width - borderWidth * 2, adj.height - borderWidth * 2);\n            // Support borders on images and maybe other properties\n            var options = {\n                x: borderWidth,\n                y: borderWidth,\n                width: imageDims.width,\n                height: imageDims.height,\n                //\n                rotate: degrees(0),\n                xSkew: degrees(0),\n                ySkew: degrees(0),\n            };\n            if (alignment === exports.ImageAlignment.Center) {\n                options.x += (adj.width - borderWidth * 2) / 2 - imageDims.width / 2;\n                options.y += (adj.height - borderWidth * 2) / 2 - imageDims.height / 2;\n            }\n            else if (alignment === exports.ImageAlignment.Right) {\n                options.x = adj.width - borderWidth - imageDims.width;\n                options.y = adj.height - borderWidth - imageDims.height;\n            }\n            var imageName = this.doc.context.addRandomSuffix('Image', 10);\n            var appearance = tslibExports.__spreadArrays(rotate, drawImage(imageName, options));\n            ////////////\n            var Resources = { XObject: (_a = {}, _a[imageName] = image.ref, _a) };\n            var stream = context.formXObject(appearance, {\n                Resources: Resources,\n                BBox: context.obj([0, 0, rectangle.width, rectangle.height]),\n                Matrix: context.obj([1, 0, 0, 1, 0, 0]),\n            });\n            return context.register(stream);\n        };\n        PDFField.prototype.createAppearanceDict = function (widget, appearance, onValue) {\n            var context = this.acroField.dict.context;\n            var onStreamRef = this.createAppearanceStream(widget, appearance.on);\n            var offStreamRef = this.createAppearanceStream(widget, appearance.off);\n            var appearanceDict = context.obj({});\n            appearanceDict.set(onValue, onStreamRef);\n            appearanceDict.set(PDFName.of('Off'), offStreamRef);\n            return appearanceDict;\n        };\n        return PDFField;\n    }());\n\n    /**\n     * Represents a check box field of a [[PDFForm]].\n     *\n     * [[PDFCheckBox]] fields are interactive boxes that users can click with their\n     * mouse. This type of [[PDFField]] has two states: `on` and `off`. The purpose\n     * of a check box is to enable users to select from one or more options, where\n     * each option is represented by a single check box. Check boxes are typically\n     * square in shape and display a check mark when they are in the `on` state.\n     */\n    var PDFCheckBox = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFCheckBox, _super);\n        function PDFCheckBox(acroCheckBox, ref, doc) {\n            var _this = _super.call(this, acroCheckBox, ref, doc) || this;\n            assertIs(acroCheckBox, 'acroCheckBox', [\n                [PDFAcroCheckBox, 'PDFAcroCheckBox'],\n            ]);\n            _this.acroField = acroCheckBox;\n            return _this;\n        }\n        /**\n         * Mark this check box. This operation is analogous to a human user clicking\n         * a check box to fill it in a PDF reader. This method will update the\n         * underlying state of the check box field to indicate it has been selected.\n         * PDF libraries and readers will be able to extract this value from the\n         * saved document and determine that it was selected.\n         *\n         * For example:\n         * ```js\n         * const checkBox = form.getCheckBox('some.checkBox.field')\n         * checkBox.check()\n         * ```\n         *\n         * This method will mark this check box as dirty, causing its appearance\n         * streams to be updated when either [[PDFDocument.save]] or\n         * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\n         * streams will display a check mark inside the widgets of this check box\n         * field.\n         */\n        PDFCheckBox.prototype.check = function () {\n            var _a;\n            var onValue = (_a = this.acroField.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n            this.markAsDirty();\n            this.acroField.setValue(onValue);\n        };\n        /**\n         * Clears this check box. This operation is analogous to a human user clicking\n         * a check box to unmark it in a PDF reader. This method will update the\n         * underlying state of the check box field to indicate it has been deselected.\n         * PDF libraries and readers will be able to extract this value from the\n         * saved document and determine that it was not selected.\n         *\n         * For example:\n         * ```js\n         * const checkBox = form.getCheckBox('some.checkBox.field')\n         * checkBox.uncheck()\n         * ```\n         *\n         * This method will mark this check box as dirty. See [[PDFCheckBox.check]]\n         * for more details about what this means.\n         */\n        PDFCheckBox.prototype.uncheck = function () {\n            this.markAsDirty();\n            this.acroField.setValue(PDFName.of('Off'));\n        };\n        /**\n         * Returns `true` if this check box is selected (either by a human user via\n         * a PDF reader, or else programmatically via software). For example:\n         * ```js\n         * const checkBox = form.getCheckBox('some.checkBox.field')\n         * if (checkBox.isChecked()) console.log('check box is selected')\n         * ```\n         * @returns Whether or not this check box is selected.\n         */\n        PDFCheckBox.prototype.isChecked = function () {\n            var onValue = this.acroField.getOnValue();\n            return !!onValue && onValue === this.acroField.getValue();\n        };\n        /**\n         * Show this check box on the specified page. For example:\n         * ```js\n         * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const page = pdfDoc.addPage()\n         *\n         * const form = pdfDoc.getForm()\n         * const checkBox = form.createCheckBox('some.checkBox.field')\n         *\n         * checkBox.addToPage(page, {\n         *   x: 50,\n         *   y: 75,\n         *   width: 25,\n         *   height: 25,\n         *   textColor: rgb(1, 0, 0),\n         *   backgroundColor: rgb(0, 1, 0),\n         *   borderColor: rgb(0, 0, 1),\n         *   borderWidth: 2,\n         *   rotate: degrees(90),\n         * })\n         * ```\n         * This will create a new widget for this check box field.\n         * @param page The page to which this check box widget should be added.\n         * @param options The options to be used when adding this check box widget.\n         */\n        PDFCheckBox.prototype.addToPage = function (page, options) {\n            var _a, _b, _c, _d, _e, _f;\n            assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n            assertFieldAppearanceOptions(options);\n            if (!options)\n                options = {};\n            if (!('textColor' in options))\n                options.textColor = rgb(0, 0, 0);\n            if (!('backgroundColor' in options))\n                options.backgroundColor = rgb(1, 1, 1);\n            if (!('borderColor' in options))\n                options.borderColor = rgb(0, 0, 0);\n            if (!('borderWidth' in options))\n                options.borderWidth = 1;\n            // Create a widget for this check box\n            var widget = this.createWidget({\n                x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n                y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n                width: (_c = options.width) !== null && _c !== void 0 ? _c : 50,\n                height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n                textColor: options.textColor,\n                backgroundColor: options.backgroundColor,\n                borderColor: options.borderColor,\n                borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n                rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n                hidden: options.hidden,\n                page: page.ref,\n            });\n            var widgetRef = this.doc.context.register(widget.dict);\n            // Add widget to this field\n            this.acroField.addWidget(widgetRef);\n            // Set appearance streams for widget\n            widget.setAppearanceState(PDFName.of('Off'));\n            this.updateWidgetAppearance(widget, PDFName.of('Yes'));\n            // Add widget to the given page\n            page.node.addAnnot(widgetRef);\n        };\n        /**\n         * Returns `true` if any of this check box's widgets do not have an\n         * appearance stream for its current state. For example:\n         * ```js\n         * const checkBox = form.getCheckBox('some.checkBox.field')\n         * if (checkBox.needsAppearancesUpdate()) console.log('Needs update')\n         * ```\n         * @returns Whether or not this check box needs an appearance update.\n         */\n        PDFCheckBox.prototype.needsAppearancesUpdate = function () {\n            var _a;\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                var state = widget.getAppearanceState();\n                var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n                if (!(normal instanceof PDFDict))\n                    return true;\n                if (state && !normal.has(state))\n                    return true;\n            }\n            return false;\n        };\n        /**\n         * Update the appearance streams for each of this check box's widgets using\n         * the default appearance provider for check boxes. For example:\n         * ```js\n         * const checkBox = form.getCheckBox('some.checkBox.field')\n         * checkBox.defaultUpdateAppearances()\n         * ```\n         */\n        PDFCheckBox.prototype.defaultUpdateAppearances = function () {\n            this.updateAppearances();\n        };\n        /**\n         * Update the appearance streams for each of this check box's widgets using\n         * the given appearance provider. If no `provider` is passed, the default\n         * appearance provider for check boxs will be used. For example:\n         * ```js\n         * const checkBox = form.getCheckBox('some.checkBox.field')\n         * checkBox.updateAppearances((field, widget) => {\n         *   ...\n         *   return {\n         *     normal: { on: drawCheckBox(...), off: drawCheckBox(...) },\n         *     down: { on: drawCheckBox(...), off: drawCheckBox(...) },\n         *   }\n         * })\n         * ```\n         * @param provider Optionally, the appearance provider to be used for\n         *                 generating the contents of the appearance streams.\n         */\n        PDFCheckBox.prototype.updateAppearances = function (provider) {\n            var _a;\n            assertOrUndefined(provider, 'provider', [Function]);\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                var onValue = (_a = widget.getOnValue()) !== null && _a !== void 0 ? _a : PDFName.of('Yes');\n                if (!onValue)\n                    continue;\n                this.updateWidgetAppearance(widget, onValue, provider);\n            }\n            this.markAsClean();\n        };\n        PDFCheckBox.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n            var apProvider = provider !== null && provider !== void 0 ? provider : defaultCheckBoxAppearanceProvider;\n            var appearances = normalizeAppearance(apProvider(this, widget));\n            this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFForm.getCheckBox]] method, which will create an\n         * > instance of [[PDFCheckBox]] for you.\n         *\n         * Create an instance of [[PDFCheckBox]] from an existing acroCheckBox and ref\n         *\n         * @param acroCheckBox The underlying `PDFAcroCheckBox` for this check box.\n         * @param ref The unique reference for this check box.\n         * @param doc The document to which this check box will belong.\n         */\n        PDFCheckBox.of = function (acroCheckBox, ref, doc) {\n            return new PDFCheckBox(acroCheckBox, ref, doc);\n        };\n        return PDFCheckBox;\n    }(PDFField));\n\n    /**\n     * Represents a dropdown field of a [[PDFForm]].\n     *\n     * [[PDFDropdown]] fields are interactive text boxes that display a single\n     * element (the currently selected value). The purpose of a dropdown is to\n     * enable users to select a single option from a set of possible options. Users\n     * can click on a dropdown to view the full list of options it provides.\n     * Clicking on an option in the list will cause it to be selected and displayed\n     * in the dropdown's text box. Some dropdowns allow users to enter text\n     * directly into the box from their keyboard, rather than only being allowed to\n     * choose an option from the list (see [[PDFDropdown.isEditable]]).\n     */\n    var PDFDropdown = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFDropdown, _super);\n        function PDFDropdown(acroComboBox, ref, doc) {\n            var _this = _super.call(this, acroComboBox, ref, doc) || this;\n            assertIs(acroComboBox, 'acroComboBox', [\n                [PDFAcroComboBox, 'PDFAcroComboBox'],\n            ]);\n            _this.acroField = acroComboBox;\n            return _this;\n        }\n        /**\n         * Get the list of available options for this dropdown. These options will be\n         * displayed to users who click on this dropdown in a PDF reader.\n         * For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * const options = dropdown.getOptions()\n         * console.log('Dropdown options:', options)\n         * ```\n         * @returns The options for this dropdown.\n         */\n        PDFDropdown.prototype.getOptions = function () {\n            var rawOptions = this.acroField.getOptions();\n            var options = new Array(rawOptions.length);\n            for (var idx = 0, len = options.length; idx < len; idx++) {\n                var _a = rawOptions[idx], display = _a.display, value = _a.value;\n                options[idx] = (display !== null && display !== void 0 ? display : value).decodeText();\n            }\n            return options;\n        };\n        /**\n         * Get the selected options for this dropdown. These are the values that were\n         * selected by a human user via a PDF reader, or programatically via\n         * software.\n         * For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * const selections = dropdown.getSelected()\n         * console.log('Dropdown selections:', selections)\n         * ```\n         * > **NOTE:** Note that PDF readers only display one selected option when\n         * > rendering dropdowns. However, the PDF specification does allow for\n         * > multiple values to be selected in a dropdown. As such, the `pdf-lib`\n         * > API supports this. However, in most cases the array returned by this\n         * > method will contain only a single element (or no elements).\n         * @returns The selected options in this dropdown.\n         */\n        PDFDropdown.prototype.getSelected = function () {\n            var values = this.acroField.getValues();\n            var selected = new Array(values.length);\n            for (var idx = 0, len = values.length; idx < len; idx++) {\n                selected[idx] = values[idx].decodeText();\n            }\n            return selected;\n        };\n        /**\n         * Set the list of options that are available for this dropdown. These are\n         * the values that will be available for users to select when they view this\n         * dropdown in a PDF reader. Note that preexisting options for this dropdown\n         * will be removed. Only the values passed as `options` will be available to\n         * select.\n         * For example:\n         * ```js\n         * const dropdown = form.getDropdown('planets.dropdown')\n         * dropdown.setOptions(['Earth', 'Mars', 'Pluto', 'Venus'])\n         * ```\n         * @param options The options that should be available in this dropdown.\n         */\n        PDFDropdown.prototype.setOptions = function (options) {\n            assertIs(options, 'options', [Array]);\n            var optionObjects = new Array(options.length);\n            for (var idx = 0, len = options.length; idx < len; idx++) {\n                optionObjects[idx] = { value: PDFHexString.fromText(options[idx]) };\n            }\n            this.acroField.setOptions(optionObjects);\n        };\n        /**\n         * Add to the list of options that are available for this dropdown. Users\n         * will be able to select these values in a PDF reader. In addition to the\n         * values passed as `options`, any preexisting options for this dropdown will\n         * still be available for users to select.\n         * For example:\n         * ```js\n         * const dropdown = form.getDropdown('rockets.dropdown')\n         * dropdown.addOptions(['Saturn IV', 'Falcon Heavy'])\n         * ```\n         * @param options New options that should be available in this dropdown.\n         */\n        PDFDropdown.prototype.addOptions = function (options) {\n            assertIs(options, 'options', ['string', Array]);\n            var optionsArr = Array.isArray(options) ? options : [options];\n            var existingOptions = this.acroField.getOptions();\n            var newOptions = new Array(optionsArr.length);\n            for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n                newOptions[idx] = { value: PDFHexString.fromText(optionsArr[idx]) };\n            }\n            this.acroField.setOptions(existingOptions.concat(newOptions));\n        };\n        /**\n         * Select one or more values for this dropdown. This operation is analogous\n         * to a human user opening the dropdown in a PDF reader and clicking on a\n         * value to select it. This method will update the underlying state of the\n         * dropdown to indicate which values have been selected. PDF libraries and\n         * readers will be able to extract these values from the saved document and\n         * determine which values were selected.\n         *\n         * For example:\n         * ```js\n         * const dropdown = form.getDropdown('best.superhero.dropdown')\n         * dropdown.select('One Punch Man')\n         * ```\n         *\n         * This method will mark this dropdown as dirty, causing its appearance\n         * streams to be updated when either [[PDFDocument.save]] or\n         * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\n         * display the selected option inside the widgets of this dropdown.\n         *\n         * **IMPORTANT:** The default font used to update appearance streams is\n         * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n         * that encoding errors will be thrown if the selected option for this field\n         * contains characters outside the WinAnsi character set (the latin alphabet).\n         *\n         * Embedding a custom font and passing it to\n         * [[PDFForm.updateFieldAppearances]] or [[PDFDropdown.updateAppearances]]\n         * allows you to generate appearance streams with characters outside the\n         * latin alphabet (assuming the custom font supports them).\n         *\n         * Selecting an option that does not exist in this dropdown's option list\n         * (see [[PDFDropdown.getOptions]]) will enable editing on this dropdown\n         * (see [[PDFDropdown.enableEditing]]).\n         *\n         * > **NOTE:** PDF readers only display one selected option when rendering\n         * > dropdowns. However, the PDF specification does allow for multiple values\n         * > to be selected in a dropdown. As such, the `pdf-lib` API supports this.\n         * > However, it is not recommended to select more than one value with this\n         * > method, as only one will be visible. [[PDFOptionList]] fields are better\n         * > suited for displaying multiple selected values.\n         *\n         * @param options The options to be selected.\n         * @param merge Whether or not existing selections should be preserved.\n         */\n        PDFDropdown.prototype.select = function (options, merge) {\n            if (merge === void 0) { merge = false; }\n            assertIs(options, 'options', ['string', Array]);\n            assertIs(merge, 'merge', ['boolean']);\n            var optionsArr = Array.isArray(options) ? options : [options];\n            var validOptions = this.getOptions();\n            var hasCustomOption = optionsArr.find(function (option) { return !validOptions.includes(option); });\n            if (hasCustomOption)\n                this.enableEditing();\n            this.markAsDirty();\n            if (optionsArr.length > 1 || (optionsArr.length === 1 && merge)) {\n                this.enableMultiselect();\n            }\n            var values = new Array(optionsArr.length);\n            for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n                values[idx] = PDFHexString.fromText(optionsArr[idx]);\n            }\n            if (merge) {\n                var existingValues = this.acroField.getValues();\n                this.acroField.setValues(existingValues.concat(values));\n            }\n            else {\n                this.acroField.setValues(values);\n            }\n        };\n        /**\n         * Clear all selected values for this dropdown. This operation is equivalent\n         * to selecting an empty list. This method will update the underlying state\n         * of the dropdown to indicate that no values have been selected.\n         * For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.clear()\n         * ```\n         * This method will mark this text field as dirty. See [[PDFDropdown.select]]\n         * for more details about what this means.\n         */\n        PDFDropdown.prototype.clear = function () {\n            this.markAsDirty();\n            this.acroField.setValues([]);\n        };\n        /**\n         * Set the font size for this field. Larger font sizes will result in larger\n         * text being displayed when PDF readers render this dropdown. Font sizes may\n         * be integer or floating point numbers. Supplying a negative font size will\n         * cause this method to throw an error.\n         *\n         * For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.setFontSize(4)\n         * dropdown.setFontSize(15.7)\n         * ```\n         *\n         * > This method depends upon the existence of a default appearance\n         * > (`/DA`) string. If this field does not have a default appearance string,\n         * > or that string does not contain a font size (via the `Tf` operator),\n         * > then this method will throw an error.\n         *\n         * @param fontSize The font size to be used when rendering text in this field.\n         */\n        PDFDropdown.prototype.setFontSize = function (fontSize) {\n            assertPositive(fontSize, 'fontSize');\n            this.acroField.setFontSize(fontSize);\n            this.markAsDirty();\n        };\n        /**\n         * Returns `true` if users are allowed to edit the selected value of this\n         * dropdown directly and are not constrained by the list of available\n         * options. See [[PDFDropdown.enableEditing]] and\n         * [[PDFDropdown.disableEditing]]. For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * if (dropdown.isEditable()) console.log('Editing is enabled')\n         * ```\n         * @returns Whether or not this dropdown is editable.\n         */\n        PDFDropdown.prototype.isEditable = function () {\n            return this.acroField.hasFlag(exports.AcroChoiceFlags.Edit);\n        };\n        /**\n         * Allow users to edit the selected value of this dropdown in PDF readers\n         * with their keyboard. This means that the selected value of this dropdown\n         * will not be constrained by the list of available options. However, if this\n         * dropdown has any available options, users will still be allowed to select\n         * from that list.\n         * For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.enableEditing()\n         * ```\n         */\n        PDFDropdown.prototype.enableEditing = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.Edit, true);\n        };\n        /**\n         * Do not allow users to edit the selected value of this dropdown in PDF\n         * readers with their keyboard. This will constrain the selected value of\n         * this dropdown to the list of available options. Users will only be able\n         * to select an option from that list.\n         * For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.disableEditing()\n         * ```\n         */\n        PDFDropdown.prototype.disableEditing = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.Edit, false);\n        };\n        /**\n         * Returns `true` if the option list of this dropdown is always displayed\n         * in alphabetical order, irrespective of the order in which the options\n         * were added to the dropdown. See [[PDFDropdown.enableSorting]] and\n         * [[PDFDropdown.disableSorting]]. For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * if (dropdown.isSorted()) console.log('Sorting is enabled')\n         * ```\n         * @returns Whether or not this dropdown's options are sorted.\n         */\n        PDFDropdown.prototype.isSorted = function () {\n            return this.acroField.hasFlag(exports.AcroChoiceFlags.Sort);\n        };\n        /**\n         * Always display the option list of this dropdown in alphabetical order,\n         * irrespective of the order in which the options were added to this dropdown.\n         * For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.enableSorting()\n         * ```\n         */\n        PDFDropdown.prototype.enableSorting = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.Sort, true);\n        };\n        /**\n         * Do not always display the option list of this dropdown in alphabetical\n         * order. Instead, display the options in whichever order they were added\n         * to the list. For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.disableSorting()\n         * ```\n         */\n        PDFDropdown.prototype.disableSorting = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.Sort, false);\n        };\n        /**\n         * Returns `true` if multiple options can be selected from this dropdown's\n         * option list. See [[PDFDropdown.enableMultiselect]] and\n         * [[PDFDropdown.disableMultiselect]]. For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * if (dropdown.isMultiselect()) console.log('Multiselect is enabled')\n         * ```\n         * @returns Whether or not multiple options can be selected.\n         */\n        PDFDropdown.prototype.isMultiselect = function () {\n            return this.acroField.hasFlag(exports.AcroChoiceFlags.MultiSelect);\n        };\n        /**\n         * Allow users to select more than one option from this dropdown's option\n         * list. For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.enableMultiselect()\n         * ```\n         */\n        PDFDropdown.prototype.enableMultiselect = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.MultiSelect, true);\n        };\n        /**\n         * Do not allow users to select more than one option from this dropdown's\n         * option list. For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.disableMultiselect()\n         * ```\n         */\n        PDFDropdown.prototype.disableMultiselect = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.MultiSelect, false);\n        };\n        /**\n         * Returns `true` if the selected option should be spell checked by PDF\n         * readers. Spell checking will only be performed if this dropdown allows\n         * editing (see [[PDFDropdown.isEditable]]). See\n         * [[PDFDropdown.enableSpellChecking]] and\n         * [[PDFDropdown.disableSpellChecking]]. For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * if (dropdown.isSpellChecked()) console.log('Spell checking is enabled')\n         * ```\n         * @returns Whether or not this dropdown can be spell checked.\n         */\n        PDFDropdown.prototype.isSpellChecked = function () {\n            return !this.acroField.hasFlag(exports.AcroChoiceFlags.DoNotSpellCheck);\n        };\n        /**\n         * Allow PDF readers to spell check the selected option of this dropdown.\n         * For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.enableSpellChecking()\n         * ```\n         */\n        PDFDropdown.prototype.enableSpellChecking = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.DoNotSpellCheck, false);\n        };\n        /**\n         * Do not allow PDF readers to spell check the selected option of this\n         * dropdown. For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.disableSpellChecking()\n         * ```\n         */\n        PDFDropdown.prototype.disableSpellChecking = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.DoNotSpellCheck, true);\n        };\n        /**\n         * Returns `true` if the option selected by a user is stored, or \"committed\",\n         * when the user clicks the option. The alternative is that the user's\n         * selection is stored when the user leaves this dropdown field (by clicking\n         * outside of it - on another field, for example). See\n         * [[PDFDropdown.enableSelectOnClick]] and\n         * [[PDFDropdown.disableSelectOnClick]]. For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * if (dropdown.isSelectOnClick()) console.log('Select on click is enabled')\n         * ```\n         * @returns Whether or not options are selected immediately after they are\n         *          clicked.\n         */\n        PDFDropdown.prototype.isSelectOnClick = function () {\n            return this.acroField.hasFlag(exports.AcroChoiceFlags.CommitOnSelChange);\n        };\n        /**\n         * Store the option selected by a user immediately after the user clicks the\n         * option. Do not wait for the user to leave this dropdown field (by clicking\n         * outside of it - on another field, for example). For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.enableSelectOnClick()\n         * ```\n         */\n        PDFDropdown.prototype.enableSelectOnClick = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.CommitOnSelChange, true);\n        };\n        /**\n         * Wait to store the option selected by a user until they leave this dropdown\n         * field (by clicking outside of it - on another field, for example).\n         * For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.disableSelectOnClick()\n         * ```\n         */\n        PDFDropdown.prototype.disableSelectOnClick = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.CommitOnSelChange, false);\n        };\n        /**\n         * Show this dropdown on the specified page. For example:\n         * ```js\n         * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n         * const page = pdfDoc.addPage()\n         *\n         * const form = pdfDoc.getForm()\n         * const dropdown = form.createDropdown('best.gundam')\n         * dropdown.setOptions(['Exia', 'Dynames'])\n         * dropdown.select('Exia')\n         *\n         * dropdown.addToPage(page, {\n         *   x: 50,\n         *   y: 75,\n         *   width: 200,\n         *   height: 100,\n         *   textColor: rgb(1, 0, 0),\n         *   backgroundColor: rgb(0, 1, 0),\n         *   borderColor: rgb(0, 0, 1),\n         *   borderWidth: 2,\n         *   rotate: degrees(90),\n         *   font: ubuntuFont,\n         * })\n         * ```\n         * This will create a new widget for this dropdown field.\n         * @param page The page to which this dropdown widget should be added.\n         * @param options The options to be used when adding this dropdown widget.\n         */\n        PDFDropdown.prototype.addToPage = function (page, options) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n            assertFieldAppearanceOptions(options);\n            if (!options)\n                options = {};\n            if (!('textColor' in options))\n                options.textColor = rgb(0, 0, 0);\n            if (!('backgroundColor' in options))\n                options.backgroundColor = rgb(1, 1, 1);\n            if (!('borderColor' in options))\n                options.borderColor = rgb(0, 0, 0);\n            if (!('borderWidth' in options))\n                options.borderWidth = 1;\n            // Create a widget for this dropdown\n            var widget = this.createWidget({\n                x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n                y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n                width: (_c = options.width) !== null && _c !== void 0 ? _c : 200,\n                height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n                textColor: options.textColor,\n                backgroundColor: options.backgroundColor,\n                borderColor: options.borderColor,\n                borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n                rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n                hidden: options.hidden,\n                page: page.ref,\n            });\n            var widgetRef = this.doc.context.register(widget.dict);\n            // Add widget to this field\n            this.acroField.addWidget(widgetRef);\n            // Set appearance streams for widget\n            var font = (_g = options.font) !== null && _g !== void 0 ? _g : this.doc.getForm().getDefaultFont();\n            this.updateWidgetAppearance(widget, font);\n            // Add widget to the given page\n            page.node.addAnnot(widgetRef);\n        };\n        /**\n         * Returns `true` if this dropdown has been marked as dirty, or if any of\n         * this dropdown's widgets do not have an appearance stream. For example:\n         * ```js\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * if (dropdown.needsAppearancesUpdate()) console.log('Needs update')\n         * ```\n         * @returns Whether or not this dropdown needs an appearance update.\n         */\n        PDFDropdown.prototype.needsAppearancesUpdate = function () {\n            var _a;\n            if (this.isDirty())\n                return true;\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n                if (!hasAppearances)\n                    return true;\n            }\n            return false;\n        };\n        /**\n         * Update the appearance streams for each of this dropdown's widgets using\n         * the default appearance provider for dropdowns. For example:\n         * ```js\n         * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.defaultUpdateAppearances(helvetica)\n         * ```\n         * @param font The font to be used for creating the appearance streams.\n         */\n        PDFDropdown.prototype.defaultUpdateAppearances = function (font) {\n            assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n            this.updateAppearances(font);\n        };\n        /**\n         * Update the appearance streams for each of this dropdown's widgets using\n         * the given appearance provider. If no `provider` is passed, the default\n         * appearance provider for dropdowns will be used. For example:\n         * ```js\n         * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const dropdown = form.getDropdown('some.dropdown.field')\n         * dropdown.updateAppearances(helvetica, (field, widget, font) => {\n         *   ...\n         *   return drawTextField(...)\n         * })\n         * ```\n         * @param font The font to be used for creating the appearance streams.\n         * @param provider Optionally, the appearance provider to be used for\n         *                 generating the contents of the appearance streams.\n         */\n        PDFDropdown.prototype.updateAppearances = function (font, provider) {\n            assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n            assertOrUndefined(provider, 'provider', [Function]);\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                this.updateWidgetAppearance(widget, font, provider);\n            }\n            this.markAsClean();\n        };\n        // getOption(index: number): string {}\n        // getSelectedIndices(): number[] {}\n        // removeOptions(option: string | string[]) {}\n        // removeIndices(option: number[]) {}\n        // deselect(options: string | string[]) {}\n        // deselectIndices(optionIndices: number[]) {}\n        PDFDropdown.prototype.updateWidgetAppearance = function (widget, font, provider) {\n            var apProvider = provider !== null && provider !== void 0 ? provider : defaultDropdownAppearanceProvider;\n            var appearances = normalizeAppearance(apProvider(this, widget, font));\n            this.updateWidgetAppearanceWithFont(widget, font, appearances);\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFForm.getDropdown]] method, which will create an\n         * > instance of [[PDFDropdown]] for you.\n         *\n         * Create an instance of [[PDFDropdown]] from an existing acroComboBox and ref\n         *\n         * @param acroComboBox The underlying `PDFAcroComboBox` for this dropdown.\n         * @param ref The unique reference for this dropdown.\n         * @param doc The document to which this dropdown will belong.\n         */\n        PDFDropdown.of = function (acroComboBox, ref, doc) {\n            return new PDFDropdown(acroComboBox, ref, doc);\n        };\n        return PDFDropdown;\n    }(PDFField));\n\n    /**\n     * Represents an option list field of a [[PDFForm]].\n     *\n     * [[PDFOptionList]] fields are interactive lists of options. The purpose of an\n     * option list is to enable users to select one or more options from a set of\n     * possible options. Users are able to see the full set of options without\n     * first having to click on the field (though scrolling may be necessary).\n     * Clicking an option in the list will cause it to be selected and displayed\n     * with a highlighted background. Some option lists allow users to select\n     * more than one option (see [[PDFOptionList.isMultiselect]]).\n     */\n    var PDFOptionList = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFOptionList, _super);\n        function PDFOptionList(acroListBox, ref, doc) {\n            var _this = _super.call(this, acroListBox, ref, doc) || this;\n            assertIs(acroListBox, 'acroListBox', [[PDFAcroListBox, 'PDFAcroListBox']]);\n            _this.acroField = acroListBox;\n            return _this;\n        }\n        /**\n         * Get the list of available options for this option list. These options will\n         * be displayed to users who view this option list in a PDF reader.\n         * For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * const options = optionList.getOptions()\n         * console.log('Option List options:', options)\n         * ```\n         * @returns The options for this option list.\n         */\n        PDFOptionList.prototype.getOptions = function () {\n            var rawOptions = this.acroField.getOptions();\n            var options = new Array(rawOptions.length);\n            for (var idx = 0, len = options.length; idx < len; idx++) {\n                var _a = rawOptions[idx], display = _a.display, value = _a.value;\n                options[idx] = (display !== null && display !== void 0 ? display : value).decodeText();\n            }\n            return options;\n        };\n        /**\n         * Get the selected options for this option list. These are the values that\n         * were selected by a human user via a PDF reader, or programatically via\n         * software.\n         * For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * const selections = optionList.getSelected()\n         * console.log('Option List selections:', selections)\n         * ```\n         * @returns The selected options for this option list.\n         */\n        PDFOptionList.prototype.getSelected = function () {\n            var values = this.acroField.getValues();\n            var selected = new Array(values.length);\n            for (var idx = 0, len = values.length; idx < len; idx++) {\n                selected[idx] = values[idx].decodeText();\n            }\n            return selected;\n        };\n        /**\n         * Set the list of options that are available for this option list. These are\n         * the values that will be available for users to select when they view this\n         * option list in a PDF reader. Note that preexisting options for this\n         * option list will be removed. Only the values passed as `options` will be\n         * available to select.\n         *\n         * For example:\n         * ```js\n         * const optionList = form.getOptionList('planets.optionList')\n         * optionList.setOptions(['Earth', 'Mars', 'Pluto', 'Venus'])\n         * ```\n         *\n         * This method will mark this option list as dirty, causing its appearance\n         * streams to be updated when either [[PDFDocument.save]] or\n         * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\n         * display the options this field contains inside the widgets of this text\n         * field (with selected options highlighted).\n         *\n         * **IMPORTANT:** The default font used to update appearance streams is\n         * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n         * that encoding errors will be thrown if this field contains any options\n         * with characters outside the WinAnsi character set (the latin alphabet).\n         *\n         * Embedding a custom font and passing it to\n         * [[PDFForm.updateFieldAppearances]] or [[PDFOptionList.updateAppearances]]\n         * allows you to generate appearance streams with characters outside the\n         * latin alphabet (assuming the custom font supports them).\n         *\n         * @param options The options that should be available in this option list.\n         */\n        PDFOptionList.prototype.setOptions = function (options) {\n            assertIs(options, 'options', [Array]);\n            this.markAsDirty();\n            var optionObjects = new Array(options.length);\n            for (var idx = 0, len = options.length; idx < len; idx++) {\n                optionObjects[idx] = { value: PDFHexString.fromText(options[idx]) };\n            }\n            this.acroField.setOptions(optionObjects);\n        };\n        /**\n         * Add to the list of options that are available for this option list. Users\n         * will be able to select these values in a PDF reader. In addition to the\n         * values passed as `options`, any preexisting options for this option list\n         * will still be available for users to select.\n         * For example:\n         * ```js\n         * const optionList = form.getOptionList('rockets.optionList')\n         * optionList.addOptions(['Saturn IV', 'Falcon Heavy'])\n         * ```\n         * This method will mark this option list as dirty. See\n         * [[PDFOptionList.setOptions]] for more details about what this means.\n         * @param options New options that should be available in this option list.\n         */\n        PDFOptionList.prototype.addOptions = function (options) {\n            assertIs(options, 'options', ['string', Array]);\n            this.markAsDirty();\n            var optionsArr = Array.isArray(options) ? options : [options];\n            var existingOptions = this.acroField.getOptions();\n            var newOptions = new Array(optionsArr.length);\n            for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n                newOptions[idx] = { value: PDFHexString.fromText(optionsArr[idx]) };\n            }\n            this.acroField.setOptions(existingOptions.concat(newOptions));\n        };\n        /**\n         * Select one or more values for this option list. This operation is analogous\n         * to a human user opening the option list in a PDF reader and clicking on one\n         * or more values to select them. This method will update the underlying state\n         * of the option list to indicate which values have been selected. PDF\n         * libraries and readers will be able to extract these values from the saved\n         * document and determine which values were selected.\n         * For example:\n         * ```js\n         * const optionList = form.getOptionList('best.superheroes.optionList')\n         * optionList.select(['One Punch Man', 'Iron Man'])\n         * ```\n         * This method will mark this option list as dirty. See\n         * [[PDFOptionList.setOptions]] for more details about what this means.\n         * @param options The options to be selected.\n         * @param merge Whether or not existing selections should be preserved.\n         */\n        PDFOptionList.prototype.select = function (options, merge) {\n            if (merge === void 0) { merge = false; }\n            assertIs(options, 'options', ['string', Array]);\n            assertIs(merge, 'merge', ['boolean']);\n            var optionsArr = Array.isArray(options) ? options : [options];\n            var validOptions = this.getOptions();\n            assertIsSubset(optionsArr, 'option', validOptions);\n            this.markAsDirty();\n            if (optionsArr.length > 1 || (optionsArr.length === 1 && merge)) {\n                this.enableMultiselect();\n            }\n            var values = new Array(optionsArr.length);\n            for (var idx = 0, len = optionsArr.length; idx < len; idx++) {\n                values[idx] = PDFHexString.fromText(optionsArr[idx]);\n            }\n            if (merge) {\n                var existingValues = this.acroField.getValues();\n                this.acroField.setValues(existingValues.concat(values));\n            }\n            else {\n                this.acroField.setValues(values);\n            }\n        };\n        /**\n         * Clear all selected values for this option list. This operation is\n         * equivalent to selecting an empty list. This method will update the\n         * underlying state of the option list to indicate that no values have been\n         * selected.\n         * For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * optionList.clear()\n         * ```\n         * This method will mark this option list as dirty. See\n         * [[PDFOptionList.setOptions]] for more details about what this means.\n         */\n        PDFOptionList.prototype.clear = function () {\n            this.markAsDirty();\n            this.acroField.setValues([]);\n        };\n        /**\n         * Set the font size for the text in this field. There needs to be a\n         * default appearance string (DA) set with a font value specified\n         * for this to work. For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * optionList.setFontSize(4);\n         * ```\n         * @param fontSize The font size to set the font to.\n         */\n        /**\n         * Set the font size for this field. Larger font sizes will result in larger\n         * text being displayed when PDF readers render this option list. Font sizes\n         * may be integer or floating point numbers. Supplying a negative font size\n         * will cause this method to throw an error.\n         *\n         * For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * optionList.setFontSize(4)\n         * optionList.setFontSize(15.7)\n         * ```\n         *\n         * > This method depends upon the existence of a default appearance\n         * > (`/DA`) string. If this field does not have a default appearance string,\n         * > or that string does not contain a font size (via the `Tf` operator),\n         * > then this method will throw an error.\n         *\n         * @param fontSize The font size to be used when rendering text in this field.\n         */\n        PDFOptionList.prototype.setFontSize = function (fontSize) {\n            assertPositive(fontSize, 'fontSize');\n            this.acroField.setFontSize(fontSize);\n            this.markAsDirty();\n        };\n        /**\n         * Returns `true` if the options of this option list are always displayed\n         * in alphabetical order, irrespective of the order in which the options\n         * were added to the option list. See [[PDFOptionList.enableSorting]] and\n         * [[PDFOptionList.disableSorting]]. For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * if (optionList.isSorted()) console.log('Sorting is enabled')\n         * ```\n         * @returns Whether or not this option list is sorted.\n         */\n        PDFOptionList.prototype.isSorted = function () {\n            return this.acroField.hasFlag(exports.AcroChoiceFlags.Sort);\n        };\n        /**\n         * Always display the options of this option list in alphabetical order,\n         * irrespective of the order in which the options were added to this option\n         * list.\n         * For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * optionList.enableSorting()\n         * ```\n         */\n        PDFOptionList.prototype.enableSorting = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.Sort, true);\n        };\n        /**\n         * Do not always display the options of this option list in alphabetical\n         * order. Instead, display the options in whichever order they were added\n         * to this option list. For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * optionList.disableSorting()\n         * ```\n         */\n        PDFOptionList.prototype.disableSorting = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.Sort, false);\n        };\n        /**\n         * Returns `true` if multiple options can be selected from this option list.\n         * See [[PDFOptionList.enableMultiselect]] and\n         * [[PDFOptionList.disableMultiselect]]. For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * if (optionList.isMultiselect()) console.log('Multiselect is enabled')\n         * ```\n         * @returns Whether or not multiple options can be selected.\n         */\n        PDFOptionList.prototype.isMultiselect = function () {\n            return this.acroField.hasFlag(exports.AcroChoiceFlags.MultiSelect);\n        };\n        /**\n         * Allow users to select more than one option from this option list.\n         * For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * optionList.enableMultiselect()\n         * ```\n         */\n        PDFOptionList.prototype.enableMultiselect = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.MultiSelect, true);\n        };\n        /**\n         * Do not allow users to select more than one option from this option list.\n         * For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * optionList.disableMultiselect()\n         * ```\n         */\n        PDFOptionList.prototype.disableMultiselect = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.MultiSelect, false);\n        };\n        /**\n         * Returns `true` if the option selected by a user is stored, or \"committed\",\n         * when the user clicks the option. The alternative is that the user's\n         * selection is stored when the user leaves this option list field (by\n         * clicking outside of it - on another field, for example). See\n         * [[PDFOptionList.enableSelectOnClick]] and\n         * [[PDFOptionList.disableSelectOnClick]]. For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * if (optionList.isSelectOnClick()) console.log('Select on click is enabled')\n         * ```\n         * @returns Whether or not options are selected immediately after they are\n         *          clicked.\n         */\n        PDFOptionList.prototype.isSelectOnClick = function () {\n            return this.acroField.hasFlag(exports.AcroChoiceFlags.CommitOnSelChange);\n        };\n        /**\n         * Store the option selected by a user immediately after the user clicks the\n         * option. Do not wait for the user to leave this option list field (by\n         * clicking outside of it - on another field, for example). For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * optionList.enableSelectOnClick()\n         * ```\n         */\n        PDFOptionList.prototype.enableSelectOnClick = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.CommitOnSelChange, true);\n        };\n        /**\n         * Wait to store the option selected by a user until they leave this option\n         * list field (by clicking outside of it - on another field, for example).\n         * For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * optionList.disableSelectOnClick()\n         * ```\n         */\n        PDFOptionList.prototype.disableSelectOnClick = function () {\n            this.acroField.setFlagTo(exports.AcroChoiceFlags.CommitOnSelChange, false);\n        };\n        /**\n         * Show this option list on the specified page. For example:\n         * ```js\n         * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n         * const page = pdfDoc.addPage()\n         *\n         * const form = pdfDoc.getForm()\n         * const optionList = form.createOptionList('best.gundams')\n         * optionList.setOptions(['Exia', 'Dynames', 'Kyrios', 'Virtue'])\n         * optionList.select(['Exia', 'Virtue'])\n         *\n         * optionList.addToPage(page, {\n         *   x: 50,\n         *   y: 75,\n         *   width: 200,\n         *   height: 100,\n         *   textColor: rgb(1, 0, 0),\n         *   backgroundColor: rgb(0, 1, 0),\n         *   borderColor: rgb(0, 0, 1),\n         *   borderWidth: 2,\n         *   rotate: degrees(90),\n         *   font: ubuntuFont,\n         * })\n         * ```\n         * This will create a new widget for this option list field.\n         * @param page The page to which this option list widget should be added.\n         * @param options The options to be used when adding this option list widget.\n         */\n        PDFOptionList.prototype.addToPage = function (page, options) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n            assertFieldAppearanceOptions(options);\n            if (!options)\n                options = {};\n            if (!('textColor' in options))\n                options.textColor = rgb(0, 0, 0);\n            if (!('backgroundColor' in options))\n                options.backgroundColor = rgb(1, 1, 1);\n            if (!('borderColor' in options))\n                options.borderColor = rgb(0, 0, 0);\n            if (!('borderWidth' in options))\n                options.borderWidth = 1;\n            // Create a widget for this option list\n            var widget = this.createWidget({\n                x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n                y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n                width: (_c = options.width) !== null && _c !== void 0 ? _c : 200,\n                height: (_d = options.height) !== null && _d !== void 0 ? _d : 100,\n                textColor: options.textColor,\n                backgroundColor: options.backgroundColor,\n                borderColor: options.borderColor,\n                borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n                rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n                hidden: options.hidden,\n                page: page.ref,\n            });\n            var widgetRef = this.doc.context.register(widget.dict);\n            // Add widget to this field\n            this.acroField.addWidget(widgetRef);\n            // Set appearance streams for widget\n            var font = (_g = options.font) !== null && _g !== void 0 ? _g : this.doc.getForm().getDefaultFont();\n            this.updateWidgetAppearance(widget, font);\n            // Add widget to the given page\n            page.node.addAnnot(widgetRef);\n        };\n        /**\n         * Returns `true` if this option list has been marked as dirty, or if any of\n         * this option list's widgets do not have an appearance stream. For example:\n         * ```js\n         * const optionList = form.getOptionList('some.optionList.field')\n         * if (optionList.needsAppearancesUpdate()) console.log('Needs update')\n         * ```\n         * @returns Whether or not this option list needs an appearance update.\n         */\n        PDFOptionList.prototype.needsAppearancesUpdate = function () {\n            var _a;\n            if (this.isDirty())\n                return true;\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n                if (!hasAppearances)\n                    return true;\n            }\n            return false;\n        };\n        /**\n         * Update the appearance streams for each of this option list's widgets using\n         * the default appearance provider for option lists. For example:\n         * ```js\n         * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const optionList = form.getOptionList('some.optionList.field')\n         * optionList.defaultUpdateAppearances(helvetica)\n         * ```\n         * @param font The font to be used for creating the appearance streams.\n         */\n        PDFOptionList.prototype.defaultUpdateAppearances = function (font) {\n            assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n            this.updateAppearances(font);\n        };\n        /**\n         * Update the appearance streams for each of this option list's widgets using\n         * the given appearance provider. If no `provider` is passed, the default\n         * appearance provider for option lists will be used. For example:\n         * ```js\n         * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const optionList = form.getOptionList('some.optionList.field')\n         * optionList.updateAppearances(helvetica, (field, widget, font) => {\n         *   ...\n         *   return drawOptionList(...)\n         * })\n         * ```\n         * @param font The font to be used for creating the appearance streams.\n         * @param provider Optionally, the appearance provider to be used for\n         *                 generating the contents of the appearance streams.\n         */\n        PDFOptionList.prototype.updateAppearances = function (font, provider) {\n            assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n            assertOrUndefined(provider, 'provider', [Function]);\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                this.updateWidgetAppearance(widget, font, provider);\n            }\n            this.markAsClean();\n        };\n        // getOption(index: number): string {}\n        // getSelectedIndices(): number[] {}\n        // removeOptions(option: string | string[]) {}\n        // removeIndices(option: number[]) {}\n        // deselect(options: string | string[]) {}\n        // deselectIndices(optionIndices: number[]) {}\n        PDFOptionList.prototype.updateWidgetAppearance = function (widget, font, provider) {\n            var apProvider = provider !== null && provider !== void 0 ? provider : defaultOptionListAppearanceProvider;\n            var appearances = normalizeAppearance(apProvider(this, widget, font));\n            this.updateWidgetAppearanceWithFont(widget, font, appearances);\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFForm.getOptionList]] method, which will create\n         * > an instance of [[PDFOptionList]] for you.\n         *\n         * Create an instance of [[PDFOptionList]] from an existing acroListBox and\n         * ref\n         *\n         * @param acroComboBox The underlying `PDFAcroListBox` for this option list.\n         * @param ref The unique reference for this option list.\n         * @param doc The document to which this option list will belong.\n         */\n        PDFOptionList.of = function (acroListBox, ref, doc) {\n            return new PDFOptionList(acroListBox, ref, doc);\n        };\n        return PDFOptionList;\n    }(PDFField));\n\n    /**\n     * Represents a radio group field of a [[PDFForm]].\n     *\n     * [[PDFRadioGroup]] fields are collections of radio buttons. The purpose of a\n     * radio group is to enable users to select one option from a set of mutually\n     * exclusive choices. Each choice in a radio group is represented by a radio\n     * button. Radio buttons each have two states: `on` and `off`. At most one\n     * radio button in a group may be in the `on` state at any time. Users can\n     * click on a radio button to select it (and thereby automatically deselect any\n     * other radio button that might have already been selected). Some radio\n     * groups allow users to toggle a selected radio button `off` by clicking on\n     * it (see [[PDFRadioGroup.isOffToggleable]]).\n     *\n     * Note that some radio groups allow multiple radio buttons to be in the `on`\n     * state at the same type **if** they represent the same underlying value (see\n     * [[PDFRadioGroup.isMutuallyExclusive]]).\n     */\n    var PDFRadioGroup = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFRadioGroup, _super);\n        function PDFRadioGroup(acroRadioButton, ref, doc) {\n            var _this = _super.call(this, acroRadioButton, ref, doc) || this;\n            assertIs(acroRadioButton, 'acroRadioButton', [\n                [PDFAcroRadioButton, 'PDFAcroRadioButton'],\n            ]);\n            _this.acroField = acroRadioButton;\n            return _this;\n        }\n        /**\n         * Get the list of available options for this radio group. Each option is\n         * represented by a radio button. These radio buttons are displayed at\n         * various locations in the document, potentially on different pages (though\n         * typically they are stacked horizontally or vertically on the same page).\n         * For example:\n         * ```js\n         * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n         * const options = radioGroup.getOptions()\n         * console.log('Radio Group options:', options)\n         * ```\n         * @returns The options for this radio group.\n         */\n        PDFRadioGroup.prototype.getOptions = function () {\n            var exportValues = this.acroField.getExportValues();\n            if (exportValues) {\n                var exportOptions = new Array(exportValues.length);\n                for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n                    exportOptions[idx] = exportValues[idx].decodeText();\n                }\n                return exportOptions;\n            }\n            var onValues = this.acroField.getOnValues();\n            var onOptions = new Array(onValues.length);\n            for (var idx = 0, len = onOptions.length; idx < len; idx++) {\n                onOptions[idx] = onValues[idx].decodeText();\n            }\n            return onOptions;\n        };\n        /**\n         * Get the selected option for this radio group. The selected option is\n         * represented by the radio button in this group that is turned on. At most\n         * one radio button in a group can be selected. If no buttons in this group\n         * are selected, `undefined` is returned.\n         * For example:\n         * ```js\n         * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n         * const selected = radioGroup.getSelected()\n         * console.log('Selected radio button:', selected)\n         * ```\n         * @returns The selected option for this radio group.\n         */\n        PDFRadioGroup.prototype.getSelected = function () {\n            var value = this.acroField.getValue();\n            if (value === PDFName.of('Off'))\n                return undefined;\n            var exportValues = this.acroField.getExportValues();\n            if (exportValues) {\n                var onValues = this.acroField.getOnValues();\n                for (var idx = 0, len = onValues.length; idx < len; idx++) {\n                    if (onValues[idx] === value)\n                        return exportValues[idx].decodeText();\n                }\n            }\n            return value.decodeText();\n        };\n        // // TODO: Figure out why this seems to crash Acrobat. Maybe it's because we\n        // //       aren't removing the widget reference from the page's Annots?\n        // removeOption(option: string) {\n        //   assertIs(option, 'option', ['string']);\n        //   // TODO: Assert is valid `option`!\n        //   const onValues = this.acroField.getOnValues();\n        //   const exportValues = this.acroField.getExportValues();\n        //   if (exportValues) {\n        //     for (let idx = 0, len = exportValues.length; idx < len; idx++) {\n        //       if (exportValues[idx].decodeText() === option) {\n        //         this.acroField.removeWidget(idx);\n        //         this.acroField.removeExportValue(idx);\n        //       }\n        //     }\n        //   } else {\n        //     for (let idx = 0, len = onValues.length; idx < len; idx++) {\n        //       const value = onValues[idx];\n        //       if (value.decodeText() === option) {\n        //         this.acroField.removeWidget(idx);\n        //         this.acroField.removeExportValue(idx);\n        //       }\n        //     }\n        //   }\n        // }\n        /**\n         * Select an option for this radio group. This operation is analogous to a\n         * human user clicking one of the radio buttons in this group via a PDF\n         * reader to toggle it on. This method will update the underlying state of\n         * the radio group to indicate which option has been selected. PDF libraries\n         * and readers will be able to extract this value from the saved document and\n         * determine which option was selected.\n         *\n         * For example:\n         * ```js\n         * const radioGroup = form.getRadioGroup('best.superhero.radioGroup')\n         * radioGroup.select('One Punch Man')\n         * ```\n         *\n         * This method will mark this radio group as dirty, causing its appearance\n         * streams to be updated when either [[PDFDocument.save]] or\n         * [[PDFForm.updateFieldAppearances]] is called. The updated appearance\n         * streams will display a dot inside the widget of this check box field\n         * that represents the selected option.\n         *\n         * @param option The option to be selected.\n         */\n        PDFRadioGroup.prototype.select = function (option) {\n            assertIs(option, 'option', ['string']);\n            var validOptions = this.getOptions();\n            assertIsOneOf(option, 'option', validOptions);\n            this.markAsDirty();\n            var onValues = this.acroField.getOnValues();\n            var exportValues = this.acroField.getExportValues();\n            if (exportValues) {\n                for (var idx = 0, len = exportValues.length; idx < len; idx++) {\n                    if (exportValues[idx].decodeText() === option) {\n                        this.acroField.setValue(onValues[idx]);\n                    }\n                }\n            }\n            else {\n                for (var idx = 0, len = onValues.length; idx < len; idx++) {\n                    var value = onValues[idx];\n                    if (value.decodeText() === option)\n                        this.acroField.setValue(value);\n                }\n            }\n        };\n        /**\n         * Clear any selected option for this dropdown. This will result in all\n         * radio buttons in this group being toggled off. This method will update\n         * the underlying state of the dropdown to indicate that no radio buttons\n         * have been selected.\n         * For example:\n         * ```js\n         * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n         * radioGroup.clear()\n         * ```\n         * This method will mark this radio group as dirty. See\n         * [[PDFRadioGroup.select]] for more details about what this means.\n         */\n        PDFRadioGroup.prototype.clear = function () {\n            this.markAsDirty();\n            this.acroField.setValue(PDFName.of('Off'));\n        };\n        /**\n         * Returns `true` if users can click on radio buttons in this group to toggle\n         * them off. The alternative is that once a user clicks on a radio button\n         * to select it, the only way to deselect it is by selecting on another radio\n         * button in the group. See [[PDFRadioGroup.enableOffToggling]] and\n         * [[PDFRadioGroup.disableOffToggling]]. For example:\n         * ```js\n         * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n         * if (radioGroup.isOffToggleable()) console.log('Off toggling is enabled')\n         * ```\n         */\n        PDFRadioGroup.prototype.isOffToggleable = function () {\n            return !this.acroField.hasFlag(exports.AcroButtonFlags.NoToggleToOff);\n        };\n        /**\n         * Allow users to click on selected radio buttons in this group to toggle\n         * them off. For example:\n         * ```js\n         * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n         * radioGroup.enableOffToggling()\n         * ```\n         * > **NOTE:** This feature is documented in the PDF specification\n         * > (Table 226). However, most PDF readers do not respect this option and\n         * > prevent users from toggling radio buttons off even when it is enabled.\n         * > At the time of this writing (9/6/2020) Mac's Preview software did\n         * > respect the option. Adobe Acrobat, Foxit Reader, and Google Chrome did\n         * > not.\n         */\n        PDFRadioGroup.prototype.enableOffToggling = function () {\n            this.acroField.setFlagTo(exports.AcroButtonFlags.NoToggleToOff, false);\n        };\n        /**\n         * Prevent users from clicking on selected radio buttons in this group to\n         * toggle them off. Clicking on a selected radio button will have no effect.\n         * The only way to deselect a selected radio button is to click on a\n         * different radio button in the group. For example:\n         * ```js\n         * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n         * radioGroup.disableOffToggling()\n         * ```\n         */\n        PDFRadioGroup.prototype.disableOffToggling = function () {\n            this.acroField.setFlagTo(exports.AcroButtonFlags.NoToggleToOff, true);\n        };\n        /**\n         * Returns `true` if the radio buttons in this group are mutually exclusive.\n         * This means that when the user selects a radio button, only that specific\n         * button will be turned on. Even if other radio buttons in the group\n         * represent the same value, they will not be enabled. The alternative to\n         * this is that clicking a radio button will select that button along with\n         * any other radio buttons in the group that share the same value. See\n         * [[PDFRadioGroup.enableMutualExclusion]] and\n         * [[PDFRadioGroup.disableMutualExclusion]].\n         * For example:\n         * ```js\n         * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n         * if (radioGroup.isMutuallyExclusive()) console.log('Mutual exclusion is enabled')\n         * ```\n         */\n        PDFRadioGroup.prototype.isMutuallyExclusive = function () {\n            return !this.acroField.hasFlag(exports.AcroButtonFlags.RadiosInUnison);\n        };\n        /**\n         * When the user clicks a radio button in this group it will be selected. In\n         * addition, any other radio buttons in this group that share the same\n         * underlying value will also be selected. For example:\n         * ```js\n         * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n         * radioGroup.enableMutualExclusion()\n         * ```\n         * Note that this option must be enabled prior to adding options to the\n         * radio group. It does not currently apply retroactively to existing\n         * radio buttons in the group.\n         */\n        PDFRadioGroup.prototype.enableMutualExclusion = function () {\n            this.acroField.setFlagTo(exports.AcroButtonFlags.RadiosInUnison, false);\n        };\n        /**\n         * When the user clicks a radio button in this group only it will be selected.\n         * No other radio buttons in the group will be selected, even if they share\n         * the same underlying value. For example:\n         * ```js\n         * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n         * radioGroup.disableMutualExclusion()\n         * ```\n         * Note that this option must be disabled prior to adding options to the\n         * radio group. It does not currently apply retroactively to existing\n         * radio buttons in the group.\n         */\n        PDFRadioGroup.prototype.disableMutualExclusion = function () {\n            this.acroField.setFlagTo(exports.AcroButtonFlags.RadiosInUnison, true);\n        };\n        /**\n         * Add a new radio button to this group on the specified page. For example:\n         * ```js\n         * const page = pdfDoc.addPage()\n         *\n         * const form = pdfDoc.getForm()\n         * const radioGroup = form.createRadioGroup('best.gundam')\n         *\n         * const options = {\n         *   x: 50,\n         *   width: 25,\n         *   height: 25,\n         *   textColor: rgb(1, 0, 0),\n         *   backgroundColor: rgb(0, 1, 0),\n         *   borderColor: rgb(0, 0, 1),\n         *   borderWidth: 2,\n         *   rotate: degrees(90),\n         * }\n         *\n         * radioGroup.addOptionToPage('Exia', page, { ...options, y: 50 })\n         * radioGroup.addOptionToPage('Dynames', page, { ...options, y: 110 })\n         * ```\n         * This will create a new radio button widget for this radio group field.\n         * @param option The option that the radio button widget represents.\n         * @param page The page to which the radio button widget should be added.\n         * @param options The options to be used when adding the radio button widget.\n         */\n        PDFRadioGroup.prototype.addOptionToPage = function (option, page, options) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n            assertIs(option, 'option', ['string']);\n            assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n            assertFieldAppearanceOptions(options);\n            // Create a widget for this radio button\n            var widget = this.createWidget({\n                x: (_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0,\n                y: (_b = options === null || options === void 0 ? void 0 : options.y) !== null && _b !== void 0 ? _b : 0,\n                width: (_c = options === null || options === void 0 ? void 0 : options.width) !== null && _c !== void 0 ? _c : 50,\n                height: (_d = options === null || options === void 0 ? void 0 : options.height) !== null && _d !== void 0 ? _d : 50,\n                textColor: (_e = options === null || options === void 0 ? void 0 : options.textColor) !== null && _e !== void 0 ? _e : rgb(0, 0, 0),\n                backgroundColor: (_f = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _f !== void 0 ? _f : rgb(1, 1, 1),\n                borderColor: (_g = options === null || options === void 0 ? void 0 : options.borderColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n                borderWidth: (_h = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _h !== void 0 ? _h : 1,\n                rotate: (_j = options === null || options === void 0 ? void 0 : options.rotate) !== null && _j !== void 0 ? _j : degrees(0),\n                hidden: options === null || options === void 0 ? void 0 : options.hidden,\n                page: page.ref,\n            });\n            var widgetRef = this.doc.context.register(widget.dict);\n            // Add widget to this field\n            var apStateValue = this.acroField.addWidgetWithOpt(widgetRef, PDFHexString.fromText(option), !this.isMutuallyExclusive());\n            // Set appearance streams for widget\n            widget.setAppearanceState(PDFName.of('Off'));\n            this.updateWidgetAppearance(widget, apStateValue);\n            // Add widget to the given page\n            page.node.addAnnot(widgetRef);\n        };\n        /**\n         * Returns `true` if any of this group's radio button widgets do not have an\n         * appearance stream for their current state. For example:\n         * ```js\n         * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n         * if (radioGroup.needsAppearancesUpdate()) console.log('Needs update')\n         * ```\n         * @returns Whether or not this radio group needs an appearance update.\n         */\n        PDFRadioGroup.prototype.needsAppearancesUpdate = function () {\n            var _a;\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                var state = widget.getAppearanceState();\n                var normal = (_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal;\n                if (!(normal instanceof PDFDict))\n                    return true;\n                if (state && !normal.has(state))\n                    return true;\n            }\n            return false;\n        };\n        /**\n         * Update the appearance streams for each of this group's radio button widgets\n         * using the default appearance provider for radio groups. For example:\n         * ```js\n         * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n         * radioGroup.defaultUpdateAppearances()\n         * ```\n         */\n        PDFRadioGroup.prototype.defaultUpdateAppearances = function () {\n            this.updateAppearances();\n        };\n        // rg.updateAppearances((field: any, widget: any) => {\n        //   assert(field === rg);\n        //   assert(widget instanceof PDFWidgetAnnotation);\n        //   return { on: [...rectangle, ...circle], off: [...rectangle, ...circle] };\n        // });\n        /**\n         * Update the appearance streams for each of this group's radio button widgets\n         * using the given appearance provider. If no `provider` is passed, the\n         * default appearance provider for radio groups will be used. For example:\n         * ```js\n         * const radioGroup = form.getRadioGroup('some.radioGroup.field')\n         * radioGroup.updateAppearances((field, widget) => {\n         *   ...\n         *   return {\n         *     normal: { on: drawRadioButton(...), off: drawRadioButton(...) },\n         *     down: { on: drawRadioButton(...), off: drawRadioButton(...) },\n         *   }\n         * })\n         * ```\n         * @param provider Optionally, the appearance provider to be used for\n         *                 generating the contents of the appearance streams.\n         */\n        PDFRadioGroup.prototype.updateAppearances = function (provider) {\n            assertOrUndefined(provider, 'provider', [Function]);\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                var onValue = widget.getOnValue();\n                if (!onValue)\n                    continue;\n                this.updateWidgetAppearance(widget, onValue, provider);\n            }\n        };\n        PDFRadioGroup.prototype.updateWidgetAppearance = function (widget, onValue, provider) {\n            var apProvider = provider !== null && provider !== void 0 ? provider : defaultRadioGroupAppearanceProvider;\n            var appearances = normalizeAppearance(apProvider(this, widget));\n            this.updateOnOffWidgetAppearance(widget, onValue, appearances);\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFForm.getOptionList]] method, which will create an\n         * > instance of [[PDFOptionList]] for you.\n         *\n         * Create an instance of [[PDFOptionList]] from an existing acroRadioButton\n         * and ref\n         *\n         * @param acroRadioButton The underlying `PDFAcroRadioButton` for this\n         *                        radio group.\n         * @param ref The unique reference for this radio group.\n         * @param doc The document to which this radio group will belong.\n         */\n        PDFRadioGroup.of = function (acroRadioButton, ref, doc) { return new PDFRadioGroup(acroRadioButton, ref, doc); };\n        return PDFRadioGroup;\n    }(PDFField));\n\n    /**\n     * Represents a signature field of a [[PDFForm]].\n     *\n     * [[PDFSignature]] fields are digital signatures. `pdf-lib` does not\n     * currently provide any specialized APIs for creating digital signatures or\n     * reading the contents of existing digital signatures.\n     */\n    var PDFSignature = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFSignature, _super);\n        function PDFSignature(acroSignature, ref, doc) {\n            var _this = _super.call(this, acroSignature, ref, doc) || this;\n            assertIs(acroSignature, 'acroSignature', [\n                [PDFAcroSignature, 'PDFAcroSignature'],\n            ]);\n            _this.acroField = acroSignature;\n            return _this;\n        }\n        PDFSignature.prototype.needsAppearancesUpdate = function () {\n            return false;\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFForm.getSignature]] method, which will create an\n         * > instance of [[PDFSignature]] for you.\n         *\n         * Create an instance of [[PDFSignature]] from an existing acroSignature and\n         * ref\n         *\n         * @param acroSignature The underlying `PDFAcroSignature` for this signature.\n         * @param ref The unique reference for this signature.\n         * @param doc The document to which this signature will belong.\n         */\n        PDFSignature.of = function (acroSignature, ref, doc) { return new PDFSignature(acroSignature, ref, doc); };\n        return PDFSignature;\n    }(PDFField));\n\n    /**\n     * Represents a text field of a [[PDFForm]].\n     *\n     * [[PDFTextField]] fields are boxes that display text entered by the user. The\n     * purpose of a text field is to enable users to enter text or view text values\n     * in the document prefilled by software. Users can click on a text field and\n     * input text via their keyboard. Some text fields allow multiple lines of text\n     * to be entered (see [[PDFTextField.isMultiline]]).\n     */\n    var PDFTextField = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFTextField, _super);\n        function PDFTextField(acroText, ref, doc) {\n            var _this = _super.call(this, acroText, ref, doc) || this;\n            assertIs(acroText, 'acroText', [[PDFAcroText, 'PDFAcroText']]);\n            _this.acroField = acroText;\n            return _this;\n        }\n        /**\n         * Get the text that this field contains. This text is visible to users who\n         * view this field in a PDF reader.\n         *\n         * For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * const text = textField.getText()\n         * console.log('Text field contents:', text)\n         * ```\n         *\n         * Note that if this text field contains no underlying value, `undefined`\n         * will be returned. Text fields may also contain an underlying value that\n         * is simply an empty string (`''`). This detail is largely irrelevant for\n         * most applications. In general, you'll want to treat both cases the same\n         * way and simply consider the text field to be empty. In either case, the\n         * text field will appear empty to users when viewed in a PDF reader.\n         *\n         * An error will be thrown if this is a rich text field. `pdf-lib` does not\n         * support reading rich text fields. Nor do most PDF readers and writers.\n         * Rich text fields are based on XFA (XML Forms Architecture). Relatively few\n         * PDFs use rich text fields or XFA. Unlike PDF itself, XFA is not an ISO\n         * standard. XFA has been deprecated in PDF 2.0:\n         * * https://en.wikipedia.org/wiki/XFA\n         * * http://blog.pdfshareforms.com/pdf-2-0-release-bid-farewell-xfa-forms/\n         *\n         * @returns The text contained in this text field.\n         */\n        PDFTextField.prototype.getText = function () {\n            var value = this.acroField.getValue();\n            if (!value && this.isRichFormatted()) {\n                throw new RichTextFieldReadError(this.getName());\n            }\n            return value === null || value === void 0 ? void 0 : value.decodeText();\n        };\n        /**\n         * Set the text for this field. This operation is analogous to a human user\n         * clicking on the text field in a PDF reader and typing in text via their\n         * keyboard. This method will update the underlying state of the text field\n         * to indicate what text has been set. PDF libraries and readers will be able\n         * to extract these values from the saved document and determine what text\n         * was set.\n         *\n         * For example:\n         * ```js\n         * const textField = form.getTextField('best.superhero.text.field')\n         * textField.setText('One Punch Man')\n         * ```\n         *\n         * This method will mark this text field as dirty, causing its appearance\n         * streams to be updated when either [[PDFDocument.save]] or\n         * [[PDFForm.updateFieldAppearances]] is called. The updated streams will\n         * display the text this field contains inside the widgets of this text\n         * field.\n         *\n         * **IMPORTANT:** The default font used to update appearance streams is\n         * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n         * that encoding errors will be thrown if this field contains text outside\n         * the WinAnsi character set (the latin alphabet).\n         *\n         * Embedding a custom font and passing it to\n         * [[PDFForm.updateFieldAppearances]] or [[PDFTextField.updateAppearances]]\n         * allows you to generate appearance streams with characters outside the\n         * latin alphabet (assuming the custom font supports them).\n         *\n         * If this is a rich text field, it will be converted to a standard text\n         * field in order to set the text. `pdf-lib` does not support writing rich\n         * text strings. Nor do most PDF readers and writers. See\n         * [[PDFTextField.getText]] for more information about rich text fields and\n         * their deprecation in PDF 2.0.\n         *\n         * @param text The text this field should contain.\n         */\n        PDFTextField.prototype.setText = function (text) {\n            assertOrUndefined(text, 'text', ['string']);\n            var maxLength = this.getMaxLength();\n            if (maxLength !== undefined && text && text.length > maxLength) {\n                throw new ExceededMaxLengthError(text.length, maxLength, this.getName());\n            }\n            this.markAsDirty();\n            this.disableRichFormatting();\n            if (text) {\n                this.acroField.setValue(PDFHexString.fromText(text));\n            }\n            else {\n                this.acroField.removeValue();\n            }\n        };\n        /**\n         * Get the alignment for this text field. This value represents the\n         * justification of the text when it is displayed to the user in PDF readers.\n         * There are three possible alignments: left, center, and right. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * const alignment = textField.getAlignment()\n         * if (alignment === TextAlignment.Left) console.log('Text is left justified')\n         * if (alignment === TextAlignment.Center) console.log('Text is centered')\n         * if (alignment === TextAlignment.Right) console.log('Text is right justified')\n         * ```\n         * @returns The alignment of this text field.\n         */\n        PDFTextField.prototype.getAlignment = function () {\n            var quadding = this.acroField.getQuadding();\n            // prettier-ignore\n            return (quadding === 0 ? exports.TextAlignment.Left\n                : quadding === 1 ? exports.TextAlignment.Center\n                    : quadding === 2 ? exports.TextAlignment.Right\n                        : exports.TextAlignment.Left);\n        };\n        /**\n         * Set the alignment for this text field. This will determine the\n         * justification of the text when it is displayed to the user in PDF readers.\n         * There are three possible alignments: left, center, and right. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         *\n         * // Text will be left justified when displayed\n         * textField.setAlignment(TextAlignment.Left)\n         *\n         * // Text will be centered when displayed\n         * textField.setAlignment(TextAlignment.Center)\n         *\n         * // Text will be right justified when displayed\n         * textField.setAlignment(TextAlignment.Right)\n         * ```\n         * This method will mark this text field as dirty. See\n         * [[PDFTextField.setText]] for more details about what this means.\n         * @param alignment The alignment for this text field.\n         */\n        PDFTextField.prototype.setAlignment = function (alignment) {\n            assertIsOneOf(alignment, 'alignment', exports.TextAlignment);\n            this.markAsDirty();\n            this.acroField.setQuadding(alignment);\n        };\n        /**\n         * Get the maximum length of this field. This value represents the maximum\n         * number of characters that can be typed into this field by the user. If\n         * this field does not have a maximum length, `undefined` is returned.\n         * For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * const maxLength = textField.getMaxLength()\n         * if (maxLength === undefined) console.log('No max length')\n         * else console.log(`Max length is ${maxLength}`)\n         * ```\n         * @returns The maximum number of characters allowed in this field, or\n         *          `undefined` if no limit exists.\n         */\n        PDFTextField.prototype.getMaxLength = function () {\n            return this.acroField.getMaxLength();\n        };\n        /**\n         * Set the maximum length of this field. This limits the number of characters\n         * that can be typed into this field by the user. This also limits the length\n         * of the string that can be passed to [[PDFTextField.setText]]. This limit\n         * can be removed by passing `undefined` as `maxLength`. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         *\n         * // Allow between 0 and 5 characters to be entered\n         * textField.setMaxLength(5)\n         *\n         * // Allow any number of characters to be entered\n         * textField.setMaxLength(undefined)\n         * ```\n         * This method will mark this text field as dirty. See\n         * [[PDFTextField.setText]] for more details about what this means.\n         * @param maxLength The maximum number of characters allowed in this field, or\n         *                  `undefined` to remove the limit.\n         */\n        PDFTextField.prototype.setMaxLength = function (maxLength) {\n            assertRangeOrUndefined(maxLength, 'maxLength', 0, Number.MAX_SAFE_INTEGER);\n            this.markAsDirty();\n            if (maxLength === undefined) {\n                this.acroField.removeMaxLength();\n            }\n            else {\n                var text = this.getText();\n                if (text && text.length > maxLength) {\n                    throw new InvalidMaxLengthError(text.length, maxLength, this.getName());\n                }\n                this.acroField.setMaxLength(maxLength);\n            }\n        };\n        /**\n         * Remove the maximum length for this text field. This allows any number of\n         * characters to be typed into this field by the user. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.removeMaxLength()\n         * ```\n         * Calling this method is equivalent to passing `undefined` to\n         * [[PDFTextField.setMaxLength]].\n         */\n        PDFTextField.prototype.removeMaxLength = function () {\n            this.markAsDirty();\n            this.acroField.removeMaxLength();\n        };\n        /**\n         * Display an image inside the bounds of this text field's widgets. For example:\n         * ```js\n         * const pngImage = await pdfDoc.embedPng(...)\n         * const textField = form.getTextField('some.text.field')\n         * textField.setImage(pngImage)\n         * ```\n         * This will update the appearances streams for each of this text field's widgets.\n         * @param image The image that should be displayed.\n         */\n        PDFTextField.prototype.setImage = function (image) {\n            var fieldAlignment = this.getAlignment();\n            // prettier-ignore\n            var alignment = fieldAlignment === exports.TextAlignment.Center ? exports.ImageAlignment.Center\n                : fieldAlignment === exports.TextAlignment.Right ? exports.ImageAlignment.Right\n                    : exports.ImageAlignment.Left;\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                var streamRef = this.createImageAppearanceStream(widget, image, alignment);\n                this.updateWidgetAppearances(widget, { normal: streamRef });\n            }\n            this.markAsClean();\n        };\n        /**\n         * Set the font size for this field. Larger font sizes will result in larger\n         * text being displayed when PDF readers render this text field. Font sizes\n         * may be integer or floating point numbers. Supplying a negative font size\n         * will cause this method to throw an error.\n         *\n         * For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.setFontSize(4)\n         * textField.setFontSize(15.7)\n         * ```\n         *\n         * > This method depends upon the existence of a default appearance\n         * > (`/DA`) string. If this field does not have a default appearance string,\n         * > or that string does not contain a font size (via the `Tf` operator),\n         * > then this method will throw an error.\n         *\n         * @param fontSize The font size to be used when rendering text in this field.\n         */\n        PDFTextField.prototype.setFontSize = function (fontSize) {\n            assertPositive(fontSize, 'fontSize');\n            this.acroField.setFontSize(fontSize);\n            this.markAsDirty();\n        };\n        /**\n         * Returns `true` if each line of text is shown on a new line when this\n         * field is displayed in a PDF reader. The alternative is that all lines of\n         * text are merged onto a single line when displayed. See\n         * [[PDFTextField.enableMultiline]] and [[PDFTextField.disableMultiline]].\n         * For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * if (textField.isMultiline()) console.log('Multiline is enabled')\n         * ```\n         * @returns Whether or not this is a multiline text field.\n         */\n        PDFTextField.prototype.isMultiline = function () {\n            return this.acroField.hasFlag(exports.AcroTextFlags.Multiline);\n        };\n        /**\n         * Display each line of text on a new line when this field is displayed in a\n         * PDF reader. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.enableMultiline()\n         * ```\n         * This method will mark this text field as dirty. See\n         * [[PDFTextField.setText]] for more details about what this means.\n         */\n        PDFTextField.prototype.enableMultiline = function () {\n            this.markAsDirty();\n            this.acroField.setFlagTo(exports.AcroTextFlags.Multiline, true);\n        };\n        /**\n         * Display each line of text on the same line when this field is displayed\n         * in a PDF reader. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.disableMultiline()\n         * ```\n         * This method will mark this text field as dirty. See\n         * [[PDFTextField.setText]] for more details about what this means.\n         */\n        PDFTextField.prototype.disableMultiline = function () {\n            this.markAsDirty();\n            this.acroField.setFlagTo(exports.AcroTextFlags.Multiline, false);\n        };\n        /**\n         * Returns `true` if this is a password text field. This means that the field\n         * is intended for storing a secure password. See\n         * [[PDFTextField.enablePassword]] and [[PDFTextField.disablePassword]].\n         * For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * if (textField.isPassword()) console.log('Password is enabled')\n         * ```\n         * @returns Whether or not this is a password text field.\n         */\n        PDFTextField.prototype.isPassword = function () {\n            return this.acroField.hasFlag(exports.AcroTextFlags.Password);\n        };\n        /**\n         * Indicate that this text field is intended for storing a secure password.\n         * For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.enablePassword()\n         * ```\n         * Values entered into password text fields should not be displayed on the\n         * screen by PDF readers. Most PDF readers will display the value as\n         * asterisks or bullets. PDF readers should never store values entered by the\n         * user into password text fields. Similarly, applications should not\n         * write data to a password text field.\n         *\n         * **Please note that this method does not cause entered values to be\n         * encrypted or secured in any way! It simply sets a flag that PDF software\n         * and readers can access to determine the _purpose_ of this field.**\n         */\n        PDFTextField.prototype.enablePassword = function () {\n            this.acroField.setFlagTo(exports.AcroTextFlags.Password, true);\n        };\n        /**\n         * Indicate that this text field is **not** intended for storing a secure\n         * password. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.disablePassword()\n         * ```\n         */\n        PDFTextField.prototype.disablePassword = function () {\n            this.acroField.setFlagTo(exports.AcroTextFlags.Password, false);\n        };\n        /**\n         * Returns `true` if the contents of this text field represent a file path.\n         * See [[PDFTextField.enableFileSelection]] and\n         * [[PDFTextField.disableFileSelection]]. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * if (textField.isFileSelector()) console.log('Is a file selector')\n         * ```\n         * @returns Whether or not this field should contain file paths.\n         */\n        PDFTextField.prototype.isFileSelector = function () {\n            return this.acroField.hasFlag(exports.AcroTextFlags.FileSelect);\n        };\n        /**\n         * Indicate that this text field is intended to store a file path. The\n         * contents of the file stored at that path should be submitted as the value\n         * of the field. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.enableFileSelection()\n         * ```\n         */\n        PDFTextField.prototype.enableFileSelection = function () {\n            this.acroField.setFlagTo(exports.AcroTextFlags.FileSelect, true);\n        };\n        /**\n         * Indicate that this text field is **not** intended to store a file path.\n         * For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.disableFileSelection()\n         * ```\n         */\n        PDFTextField.prototype.disableFileSelection = function () {\n            this.acroField.setFlagTo(exports.AcroTextFlags.FileSelect, false);\n        };\n        /**\n         * Returns `true` if the text entered in this field should be spell checked\n         * by PDF readers. See [[PDFTextField.enableSpellChecking]] and\n         * [[PDFTextField.disableSpellChecking]]. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * if (textField.isSpellChecked()) console.log('Spell checking is enabled')\n         * ```\n         * @returns Whether or not this field should be spell checked.\n         */\n        PDFTextField.prototype.isSpellChecked = function () {\n            return !this.acroField.hasFlag(exports.AcroTextFlags.DoNotSpellCheck);\n        };\n        /**\n         * Allow PDF readers to spell check the text entered in this field.\n         * For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.enableSpellChecking()\n         * ```\n         */\n        PDFTextField.prototype.enableSpellChecking = function () {\n            this.acroField.setFlagTo(exports.AcroTextFlags.DoNotSpellCheck, false);\n        };\n        /**\n         * Do not allow PDF readers to spell check the text entered in this field.\n         * For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.disableSpellChecking()\n         * ```\n         */\n        PDFTextField.prototype.disableSpellChecking = function () {\n            this.acroField.setFlagTo(exports.AcroTextFlags.DoNotSpellCheck, true);\n        };\n        /**\n         * Returns `true` if PDF readers should allow the user to scroll the text\n         * field when its contents do not fit within the field's view bounds. See\n         * [[PDFTextField.enableScrolling]] and [[PDFTextField.disableScrolling]].\n         * For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * if (textField.isScrollable()) console.log('Scrolling is enabled')\n         * ```\n         * @returns Whether or not the field is scrollable in PDF readers.\n         */\n        PDFTextField.prototype.isScrollable = function () {\n            return !this.acroField.hasFlag(exports.AcroTextFlags.DoNotScroll);\n        };\n        /**\n         * Allow PDF readers to present a scroll bar to the user when the contents\n         * of this text field do not fit within its view bounds. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.enableScrolling()\n         * ```\n         * A horizontal scroll bar should be shown for singleline fields. A vertical\n         * scroll bar should be shown for multiline fields.\n         */\n        PDFTextField.prototype.enableScrolling = function () {\n            this.acroField.setFlagTo(exports.AcroTextFlags.DoNotScroll, false);\n        };\n        /**\n         * Do not allow PDF readers to present a scroll bar to the user when the\n         * contents of this text field do not fit within its view bounds. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.disableScrolling()\n         * ```\n         */\n        PDFTextField.prototype.disableScrolling = function () {\n            this.acroField.setFlagTo(exports.AcroTextFlags.DoNotScroll, true);\n        };\n        /**\n         * Returns `true` if this is a combed text field. This means that the field\n         * is split into `n` equal size cells with one character in each (where `n`\n         * is equal to the max length of the text field). The result is that all\n         * characters in this field are displayed an equal distance apart from one\n         * another. See [[PDFTextField.enableCombing]] and\n         * [[PDFTextField.disableCombing]]. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * if (textField.isCombed()) console.log('Combing is enabled')\n         * ```\n         * Note that in order for a text field to be combed, the following must be\n         * true (in addition to enabling combing):\n         * * It must not be a multiline field (see [[PDFTextField.isMultiline]])\n         * * It must not be a password field (see [[PDFTextField.isPassword]])\n         * * It must not be a file selector field (see [[PDFTextField.isFileSelector]])\n         * * It must have a max length defined (see [[PDFTextField.setMaxLength]])\n         * @returns Whether or not this field is combed.\n         */\n        PDFTextField.prototype.isCombed = function () {\n            return (this.acroField.hasFlag(exports.AcroTextFlags.Comb) &&\n                !this.isMultiline() &&\n                !this.isPassword() &&\n                !this.isFileSelector() &&\n                this.getMaxLength() !== undefined);\n        };\n        /**\n         * Split this field into `n` equal size cells with one character in each\n         * (where `n` is equal to the max length of the text field). This will cause\n         * all characters in the field to be displayed an equal distance apart from\n         * one another. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.enableCombing()\n         * ```\n         *\n         * In addition to calling this method, text fields must have a max length\n         * defined in order to be combed (see [[PDFTextField.setMaxLength]]).\n         *\n         * This method will also call the following three methods internally:\n         * * [[PDFTextField.disableMultiline]]\n         * * [[PDFTextField.disablePassword]]\n         * * [[PDFTextField.disableFileSelection]]\n         *\n         * This method will mark this text field as dirty. See\n         * [[PDFTextField.setText]] for more details about what this means.\n         */\n        PDFTextField.prototype.enableCombing = function () {\n            if (this.getMaxLength() === undefined) {\n                var msg = \"PDFTextFields must have a max length in order to be combed\";\n                console.warn(msg);\n            }\n            this.markAsDirty();\n            this.disableMultiline();\n            this.disablePassword();\n            this.disableFileSelection();\n            this.acroField.setFlagTo(exports.AcroTextFlags.Comb, true);\n        };\n        /**\n         * Turn off combing for this text field. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.disableCombing()\n         * ```\n         * See [[PDFTextField.isCombed]] and [[PDFTextField.enableCombing]] for more\n         * information about what combing is.\n         *\n         * This method will mark this text field as dirty. See\n         * [[PDFTextField.setText]] for more details about what this means.\n         */\n        PDFTextField.prototype.disableCombing = function () {\n            this.markAsDirty();\n            this.acroField.setFlagTo(exports.AcroTextFlags.Comb, false);\n        };\n        /**\n         * Returns `true` if this text field contains rich text. See\n         * [[PDFTextField.enableRichFormatting]] and\n         * [[PDFTextField.disableRichFormatting]]. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * if (textField.isRichFormatted()) console.log('Rich formatting enabled')\n         * ```\n         * @returns Whether or not this field contains rich text.\n         */\n        PDFTextField.prototype.isRichFormatted = function () {\n            return this.acroField.hasFlag(exports.AcroTextFlags.RichText);\n        };\n        /**\n         * Indicate that this field contains XFA data - or rich text. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.enableRichFormatting()\n         * ```\n         * Note that `pdf-lib` does not support reading or writing rich text fields.\n         * Nor do most PDF readers and writers. Rich text fields are based on XFA\n         * (XML Forms Architecture). Relatively few PDFs use rich text fields or XFA.\n         * Unlike PDF itself, XFA is not an ISO standard. XFA has been deprecated in\n         * PDF 2.0:\n         * * https://en.wikipedia.org/wiki/XFA\n         * * http://blog.pdfshareforms.com/pdf-2-0-release-bid-farewell-xfa-forms/\n         */\n        PDFTextField.prototype.enableRichFormatting = function () {\n            this.acroField.setFlagTo(exports.AcroTextFlags.RichText, true);\n        };\n        /**\n         * Indicate that this is a standard text field that does not XFA data (rich\n         * text). For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * textField.disableRichFormatting()\n         * ```\n         */\n        PDFTextField.prototype.disableRichFormatting = function () {\n            this.acroField.setFlagTo(exports.AcroTextFlags.RichText, false);\n        };\n        /**\n         * Show this text field on the specified page. For example:\n         * ```js\n         * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n         * const page = pdfDoc.addPage()\n         *\n         * const form = pdfDoc.getForm()\n         * const textField = form.createTextField('best.gundam')\n         * textField.setText('Exia')\n         *\n         * textField.addToPage(page, {\n         *   x: 50,\n         *   y: 75,\n         *   width: 200,\n         *   height: 100,\n         *   textColor: rgb(1, 0, 0),\n         *   backgroundColor: rgb(0, 1, 0),\n         *   borderColor: rgb(0, 0, 1),\n         *   borderWidth: 2,\n         *   rotate: degrees(90),\n         *   font: ubuntuFont,\n         * })\n         * ```\n         * This will create a new widget for this text field.\n         * @param page The page to which this text field widget should be added.\n         * @param options The options to be used when adding this text field widget.\n         */\n        PDFTextField.prototype.addToPage = function (page, options) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            assertIs(page, 'page', [[PDFPage, 'PDFPage']]);\n            assertFieldAppearanceOptions(options);\n            if (!options)\n                options = {};\n            if (!('textColor' in options))\n                options.textColor = rgb(0, 0, 0);\n            if (!('backgroundColor' in options))\n                options.backgroundColor = rgb(1, 1, 1);\n            if (!('borderColor' in options))\n                options.borderColor = rgb(0, 0, 0);\n            if (!('borderWidth' in options))\n                options.borderWidth = 1;\n            // Create a widget for this text field\n            var widget = this.createWidget({\n                x: (_a = options.x) !== null && _a !== void 0 ? _a : 0,\n                y: (_b = options.y) !== null && _b !== void 0 ? _b : 0,\n                width: (_c = options.width) !== null && _c !== void 0 ? _c : 200,\n                height: (_d = options.height) !== null && _d !== void 0 ? _d : 50,\n                textColor: options.textColor,\n                backgroundColor: options.backgroundColor,\n                borderColor: options.borderColor,\n                borderWidth: (_e = options.borderWidth) !== null && _e !== void 0 ? _e : 0,\n                rotate: (_f = options.rotate) !== null && _f !== void 0 ? _f : degrees(0),\n                hidden: options.hidden,\n                page: page.ref,\n            });\n            var widgetRef = this.doc.context.register(widget.dict);\n            // Add widget to this field\n            this.acroField.addWidget(widgetRef);\n            // Set appearance streams for widget\n            var font = (_g = options.font) !== null && _g !== void 0 ? _g : this.doc.getForm().getDefaultFont();\n            this.updateWidgetAppearance(widget, font);\n            // Add widget to the given page\n            page.node.addAnnot(widgetRef);\n        };\n        /**\n         * Returns `true` if this text field has been marked as dirty, or if any of\n         * this text field's widgets do not have an appearance stream. For example:\n         * ```js\n         * const textField = form.getTextField('some.text.field')\n         * if (textField.needsAppearancesUpdate()) console.log('Needs update')\n         * ```\n         * @returns Whether or not this text field needs an appearance update.\n         */\n        PDFTextField.prototype.needsAppearancesUpdate = function () {\n            var _a;\n            if (this.isDirty())\n                return true;\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n                if (!hasAppearances)\n                    return true;\n            }\n            return false;\n        };\n        /**\n         * Update the appearance streams for each of this text field's widgets using\n         * the default appearance provider for text fields. For example:\n         * ```js\n         * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const textField = form.getTextField('some.text.field')\n         * textField.defaultUpdateAppearances(helvetica)\n         * ```\n         * @param font The font to be used for creating the appearance streams.\n         */\n        PDFTextField.prototype.defaultUpdateAppearances = function (font) {\n            assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n            this.updateAppearances(font);\n        };\n        /**\n         * Update the appearance streams for each of this text field's widgets using\n         * the given appearance provider. If no `provider` is passed, the default\n         * appearance provider for text fields will be used. For example:\n         * ```js\n         * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const textField = form.getTextField('some.text.field')\n         * textField.updateAppearances(helvetica, (field, widget, font) => {\n         *   ...\n         *   return drawTextField(...)\n         * })\n         * ```\n         * @param font The font to be used for creating the appearance streams.\n         * @param provider Optionally, the appearance provider to be used for\n         *                 generating the contents of the appearance streams.\n         */\n        PDFTextField.prototype.updateAppearances = function (font, provider) {\n            assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n            assertOrUndefined(provider, 'provider', [Function]);\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                this.updateWidgetAppearance(widget, font, provider);\n            }\n            this.markAsClean();\n        };\n        PDFTextField.prototype.updateWidgetAppearance = function (widget, font, provider) {\n            var apProvider = provider !== null && provider !== void 0 ? provider : defaultTextFieldAppearanceProvider;\n            var appearances = normalizeAppearance(apProvider(this, widget, font));\n            this.updateWidgetAppearanceWithFont(widget, font, appearances);\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFForm.getTextField]] method, which will create an\n         * > instance of [[PDFTextField]] for you.\n         *\n         * Create an instance of [[PDFTextField]] from an existing acroText and ref\n         *\n         * @param acroText The underlying `PDFAcroText` for this text field.\n         * @param ref The unique reference for this text field.\n         * @param doc The document to which this text field will belong.\n         */\n        PDFTextField.of = function (acroText, ref, doc) {\n            return new PDFTextField(acroText, ref, doc);\n        };\n        return PDFTextField;\n    }(PDFField));\n\n    exports.StandardFonts = void 0;\n    (function (StandardFonts) {\n        StandardFonts[\"Courier\"] = \"Courier\";\n        StandardFonts[\"CourierBold\"] = \"Courier-Bold\";\n        StandardFonts[\"CourierOblique\"] = \"Courier-Oblique\";\n        StandardFonts[\"CourierBoldOblique\"] = \"Courier-BoldOblique\";\n        StandardFonts[\"Helvetica\"] = \"Helvetica\";\n        StandardFonts[\"HelveticaBold\"] = \"Helvetica-Bold\";\n        StandardFonts[\"HelveticaOblique\"] = \"Helvetica-Oblique\";\n        StandardFonts[\"HelveticaBoldOblique\"] = \"Helvetica-BoldOblique\";\n        StandardFonts[\"TimesRoman\"] = \"Times-Roman\";\n        StandardFonts[\"TimesRomanBold\"] = \"Times-Bold\";\n        StandardFonts[\"TimesRomanItalic\"] = \"Times-Italic\";\n        StandardFonts[\"TimesRomanBoldItalic\"] = \"Times-BoldItalic\";\n        StandardFonts[\"Symbol\"] = \"Symbol\";\n        StandardFonts[\"ZapfDingbats\"] = \"ZapfDingbats\";\n    })(exports.StandardFonts || (exports.StandardFonts = {}));\n\n    /**\n     * Represents the interactive form of a [[PDFDocument]].\n     *\n     * Interactive forms (sometimes called _AcroForms_) are collections of fields\n     * designed to gather information from a user. A PDF document may contains any\n     * number of fields that appear on various pages, all of which make up a single,\n     * global interactive form spanning the entire document. This means that\n     * instances of [[PDFDocument]] shall contain at most one [[PDFForm]].\n     *\n     * The fields of an interactive form are represented by [[PDFField]] instances.\n     */\n    var PDFForm = /** @class */ (function () {\n        function PDFForm(acroForm, doc) {\n            var _this = this;\n            this.embedDefaultFont = function () {\n                return _this.doc.embedStandardFont(exports.StandardFonts.Helvetica);\n            };\n            assertIs(acroForm, 'acroForm', [[PDFAcroForm, 'PDFAcroForm']]);\n            assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n            this.acroForm = acroForm;\n            this.doc = doc;\n            this.dirtyFields = new Set();\n            this.defaultFontCache = Cache.populatedBy(this.embedDefaultFont);\n        }\n        /**\n         * Returns `true` if this [[PDFForm]] has XFA data. Most PDFs with form\n         * fields do not use XFA as it is not widely supported by PDF readers.\n         *\n         * > `pdf-lib` does not support creation, modification, or reading of XFA\n         * > fields.\n         *\n         * For example:\n         * ```js\n         * const form = pdfDoc.getForm()\n         * if (form.hasXFA()) console.log('PDF has XFA data')\n         * ```\n         * @returns Whether or not this form has XFA data.\n         */\n        PDFForm.prototype.hasXFA = function () {\n            return this.acroForm.dict.has(PDFName.of('XFA'));\n        };\n        /**\n         * Disconnect the XFA data from this [[PDFForm]] (if any exists). This will\n         * force readers to fallback to standard fields if the [[PDFDocument]]\n         * contains any. For example:\n         *\n         * For example:\n         * ```js\n         * const form = pdfDoc.getForm()\n         * form.deleteXFA()\n         * ```\n         */\n        PDFForm.prototype.deleteXFA = function () {\n            this.acroForm.dict.delete(PDFName.of('XFA'));\n        };\n        /**\n         * Get all fields contained in this [[PDFForm]]. For example:\n         * ```js\n         * const form = pdfDoc.getForm()\n         * const fields = form.getFields()\n         * fields.forEach(field => {\n         *   const type = field.constructor.name\n         *   const name = field.getName()\n         *   console.log(`${type}: ${name}`)\n         * })\n         * ```\n         * @returns An array of all fields in this form.\n         */\n        PDFForm.prototype.getFields = function () {\n            var allFields = this.acroForm.getAllFields();\n            var fields = [];\n            for (var idx = 0, len = allFields.length; idx < len; idx++) {\n                var _a = allFields[idx], acroField = _a[0], ref = _a[1];\n                var field = convertToPDFField(acroField, ref, this.doc);\n                if (field)\n                    fields.push(field);\n            }\n            return fields;\n        };\n        /**\n         * Get the field in this [[PDFForm]] with the given name. For example:\n         * ```js\n         * const form = pdfDoc.getForm()\n         * const field = form.getFieldMaybe('Page1.Foo.Bar[0]')\n         * if (field) console.log('Field exists!')\n         * ```\n         * @param name A fully qualified field name.\n         * @returns The field with the specified name, if one exists.\n         */\n        PDFForm.prototype.getFieldMaybe = function (name) {\n            assertIs(name, 'name', ['string']);\n            var fields = this.getFields();\n            for (var idx = 0, len = fields.length; idx < len; idx++) {\n                var field = fields[idx];\n                if (field.getName() === name)\n                    return field;\n            }\n            return undefined;\n        };\n        /**\n         * Get the field in this [[PDFForm]] with the given name. For example:\n         * ```js\n         * const form = pdfDoc.getForm()\n         * const field = form.getField('Page1.Foo.Bar[0]')\n         * ```\n         * If no field exists with the provided name, an error will be thrown.\n         * @param name A fully qualified field name.\n         * @returns The field with the specified name.\n         */\n        PDFForm.prototype.getField = function (name) {\n            assertIs(name, 'name', ['string']);\n            var field = this.getFieldMaybe(name);\n            if (field)\n                return field;\n            throw new NoSuchFieldError(name);\n        };\n        /**\n         * Get the button field in this [[PDFForm]] with the given name. For example:\n         * ```js\n         * const form = pdfDoc.getForm()\n         * const button = form.getButton('Page1.Foo.Button[0]')\n         * ```\n         * An error will be thrown if no field exists with the provided name, or if\n         * the field exists but is not a button.\n         * @param name A fully qualified button name.\n         * @returns The button with the specified name.\n         */\n        PDFForm.prototype.getButton = function (name) {\n            assertIs(name, 'name', ['string']);\n            var field = this.getField(name);\n            if (field instanceof PDFButton)\n                return field;\n            throw new UnexpectedFieldTypeError(name, PDFButton, field);\n        };\n        /**\n         * Get the check box field in this [[PDFForm]] with the given name.\n         * For example:\n         * ```js\n         * const form = pdfDoc.getForm()\n         * const checkBox = form.getCheckBox('Page1.Foo.CheckBox[0]')\n         * checkBox.check()\n         * ```\n         * An error will be thrown if no field exists with the provided name, or if\n         * the field exists but is not a check box.\n         * @param name A fully qualified check box name.\n         * @returns The check box with the specified name.\n         */\n        PDFForm.prototype.getCheckBox = function (name) {\n            assertIs(name, 'name', ['string']);\n            var field = this.getField(name);\n            if (field instanceof PDFCheckBox)\n                return field;\n            throw new UnexpectedFieldTypeError(name, PDFCheckBox, field);\n        };\n        /**\n         * Get the dropdown field in this [[PDFForm]] with the given name.\n         * For example:\n         * ```js\n         * const form = pdfDoc.getForm()\n         * const dropdown = form.getDropdown('Page1.Foo.Dropdown[0]')\n         * const options = dropdown.getOptions()\n         * dropdown.select(options[0])\n         * ```\n         * An error will be thrown if no field exists with the provided name, or if\n         * the field exists but is not a dropdown.\n         * @param name A fully qualified dropdown name.\n         * @returns The dropdown with the specified name.\n         */\n        PDFForm.prototype.getDropdown = function (name) {\n            assertIs(name, 'name', ['string']);\n            var field = this.getField(name);\n            if (field instanceof PDFDropdown)\n                return field;\n            throw new UnexpectedFieldTypeError(name, PDFDropdown, field);\n        };\n        /**\n         * Get the option list field in this [[PDFForm]] with the given name.\n         * For example:\n         * ```js\n         * const form = pdfDoc.getForm()\n         * const optionList = form.getOptionList('Page1.Foo.OptionList[0]')\n         * const options = optionList.getOptions()\n         * optionList.select(options[0])\n         * ```\n         * An error will be thrown if no field exists with the provided name, or if\n         * the field exists but is not an option list.\n         * @param name A fully qualified option list name.\n         * @returns The option list with the specified name.\n         */\n        PDFForm.prototype.getOptionList = function (name) {\n            assertIs(name, 'name', ['string']);\n            var field = this.getField(name);\n            if (field instanceof PDFOptionList)\n                return field;\n            throw new UnexpectedFieldTypeError(name, PDFOptionList, field);\n        };\n        /**\n         * Get the radio group field in this [[PDFForm]] with the given name.\n         * For example:\n         * ```js\n         * const form = pdfDoc.getForm()\n         * const radioGroup = form.getRadioGroup('Page1.Foo.RadioGroup[0]')\n         * const options = radioGroup.getOptions()\n         * radioGroup.select(options[0])\n         * ```\n         * An error will be thrown if no field exists with the provided name, or if\n         * the field exists but is not a radio group.\n         * @param name A fully qualified radio group name.\n         * @returns The radio group with the specified name.\n         */\n        PDFForm.prototype.getRadioGroup = function (name) {\n            assertIs(name, 'name', ['string']);\n            var field = this.getField(name);\n            if (field instanceof PDFRadioGroup)\n                return field;\n            throw new UnexpectedFieldTypeError(name, PDFRadioGroup, field);\n        };\n        /**\n         * Get the signature field in this [[PDFForm]] with the given name.\n         * For example:\n         * ```js\n         * const form = pdfDoc.getForm()\n         * const signature = form.getSignature('Page1.Foo.Signature[0]')\n         * ```\n         * An error will be thrown if no field exists with the provided name, or if\n         * the field exists but is not a signature.\n         * @param name A fully qualified signature name.\n         * @returns The signature with the specified name.\n         */\n        PDFForm.prototype.getSignature = function (name) {\n            assertIs(name, 'name', ['string']);\n            var field = this.getField(name);\n            if (field instanceof PDFSignature)\n                return field;\n            throw new UnexpectedFieldTypeError(name, PDFSignature, field);\n        };\n        /**\n         * Get the text field in this [[PDFForm]] with the given name.\n         * For example:\n         * ```js\n         * const form = pdfDoc.getForm()\n         * const textField = form.getTextField('Page1.Foo.TextField[0]')\n         * textField.setText('Are you designed to act or to be acted upon?')\n         * ```\n         * An error will be thrown if no field exists with the provided name, or if\n         * the field exists but is not a text field.\n         * @param name A fully qualified text field name.\n         * @returns The text field with the specified name.\n         */\n        PDFForm.prototype.getTextField = function (name) {\n            assertIs(name, 'name', ['string']);\n            var field = this.getField(name);\n            if (field instanceof PDFTextField)\n                return field;\n            throw new UnexpectedFieldTypeError(name, PDFTextField, field);\n        };\n        /**\n         * Create a new button field in this [[PDFForm]] with the given name.\n         * For example:\n         * ```js\n         * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const page = pdfDoc.addPage()\n         *\n         * const form = pdfDoc.getForm()\n         * const button = form.createButton('cool.new.button')\n         *\n         * button.addToPage('Do Stuff', font, page)\n         * ```\n         * An error will be thrown if a field already exists with the provided name.\n         * @param name The fully qualified name for the new button.\n         * @returns The new button field.\n         */\n        PDFForm.prototype.createButton = function (name) {\n            assertIs(name, 'name', ['string']);\n            var nameParts = splitFieldName(name);\n            var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n            var button = PDFAcroPushButton.create(this.doc.context);\n            button.setPartialName(nameParts.terminal);\n            addFieldToParent(parent, [button, button.ref], nameParts.terminal);\n            return PDFButton.of(button, button.ref, this.doc);\n        };\n        /**\n         * Create a new check box field in this [[PDFForm]] with the given name.\n         * For example:\n         * ```js\n         * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const page = pdfDoc.addPage()\n         *\n         * const form = pdfDoc.getForm()\n         * const checkBox = form.createCheckBox('cool.new.checkBox')\n         *\n         * checkBox.addToPage(page)\n         * ```\n         * An error will be thrown if a field already exists with the provided name.\n         * @param name The fully qualified name for the new check box.\n         * @returns The new check box field.\n         */\n        PDFForm.prototype.createCheckBox = function (name) {\n            assertIs(name, 'name', ['string']);\n            var nameParts = splitFieldName(name);\n            var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n            var checkBox = PDFAcroCheckBox.create(this.doc.context);\n            checkBox.setPartialName(nameParts.terminal);\n            addFieldToParent(parent, [checkBox, checkBox.ref], nameParts.terminal);\n            return PDFCheckBox.of(checkBox, checkBox.ref, this.doc);\n        };\n        /**\n         * Create a new dropdown field in this [[PDFForm]] with the given name.\n         * For example:\n         * ```js\n         * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const page = pdfDoc.addPage()\n         *\n         * const form = pdfDoc.getForm()\n         * const dropdown = form.createDropdown('cool.new.dropdown')\n         *\n         * dropdown.addToPage(font, page)\n         * ```\n         * An error will be thrown if a field already exists with the provided name.\n         * @param name The fully qualified name for the new dropdown.\n         * @returns The new dropdown field.\n         */\n        PDFForm.prototype.createDropdown = function (name) {\n            assertIs(name, 'name', ['string']);\n            var nameParts = splitFieldName(name);\n            var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n            var comboBox = PDFAcroComboBox.create(this.doc.context);\n            comboBox.setPartialName(nameParts.terminal);\n            addFieldToParent(parent, [comboBox, comboBox.ref], nameParts.terminal);\n            return PDFDropdown.of(comboBox, comboBox.ref, this.doc);\n        };\n        /**\n         * Create a new option list field in this [[PDFForm]] with the given name.\n         * For example:\n         * ```js\n         * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const page = pdfDoc.addPage()\n         *\n         * const form = pdfDoc.getForm()\n         * const optionList = form.createOptionList('cool.new.optionList')\n         *\n         * optionList.addToPage(font, page)\n         * ```\n         * An error will be thrown if a field already exists with the provided name.\n         * @param name The fully qualified name for the new option list.\n         * @returns The new option list field.\n         */\n        PDFForm.prototype.createOptionList = function (name) {\n            assertIs(name, 'name', ['string']);\n            var nameParts = splitFieldName(name);\n            var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n            var listBox = PDFAcroListBox.create(this.doc.context);\n            listBox.setPartialName(nameParts.terminal);\n            addFieldToParent(parent, [listBox, listBox.ref], nameParts.terminal);\n            return PDFOptionList.of(listBox, listBox.ref, this.doc);\n        };\n        /**\n         * Create a new radio group field in this [[PDFForm]] with the given name.\n         * For example:\n         * ```js\n         * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const page = pdfDoc.addPage()\n         *\n         * const form = pdfDoc.getForm()\n         * const radioGroup = form.createRadioGroup('cool.new.radioGroup')\n         *\n         * radioGroup.addOptionToPage('is-dog', page, { y: 0 })\n         * radioGroup.addOptionToPage('is-cat', page, { y: 75 })\n         * ```\n         * An error will be thrown if a field already exists with the provided name.\n         * @param name The fully qualified name for the new radio group.\n         * @returns The new radio group field.\n         */\n        PDFForm.prototype.createRadioGroup = function (name) {\n            assertIs(name, 'name', ['string']);\n            var nameParts = splitFieldName(name);\n            var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n            var radioButton = PDFAcroRadioButton.create(this.doc.context);\n            radioButton.setPartialName(nameParts.terminal);\n            addFieldToParent(parent, [radioButton, radioButton.ref], nameParts.terminal);\n            return PDFRadioGroup.of(radioButton, radioButton.ref, this.doc);\n        };\n        /**\n         * Create a new text field in this [[PDFForm]] with the given name.\n         * For example:\n         * ```js\n         * const font = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const page = pdfDoc.addPage()\n         *\n         * const form = pdfDoc.getForm()\n         * const textField = form.createTextField('cool.new.textField')\n         *\n         * textField.addToPage(font, page)\n         * ```\n         * An error will be thrown if a field already exists with the provided name.\n         * @param name The fully qualified name for the new radio group.\n         * @returns The new radio group field.\n         */\n        PDFForm.prototype.createTextField = function (name) {\n            assertIs(name, 'name', ['string']);\n            var nameParts = splitFieldName(name);\n            var parent = this.findOrCreateNonTerminals(nameParts.nonTerminal);\n            var text = PDFAcroText.create(this.doc.context);\n            text.setPartialName(nameParts.terminal);\n            addFieldToParent(parent, [text, text.ref], nameParts.terminal);\n            return PDFTextField.of(text, text.ref, this.doc);\n        };\n        /**\n         * Flatten all fields in this [[PDFForm]].\n         *\n         * Flattening a form field will take the current appearance for each of that\n         * field's widgets and make them part of their page's content stream. All form\n         * fields and annotations associated are then removed. Note that once a form\n         * has been flattened its fields can no longer be accessed or edited.\n         *\n         * This operation is often used after filling form fields to ensure a\n         * consistent appearance across different PDF readers and/or printers.\n         * Another common use case is to copy a template document with form fields\n         * into another document. In this scenario you would load the template\n         * document, fill its fields, flatten it, and then copy its pages into the\n         * recipient document - the filled fields will be copied over.\n         *\n         * For example:\n         * ```js\n         * const form = pdfDoc.getForm();\n         * form.flatten();\n         * ```\n         */\n        PDFForm.prototype.flatten = function (options) {\n            if (options === void 0) { options = { updateFieldAppearances: true }; }\n            if (options.updateFieldAppearances) {\n                this.updateFieldAppearances();\n            }\n            var fields = this.getFields();\n            for (var i = 0, lenFields = fields.length; i < lenFields; i++) {\n                var field = fields[i];\n                var widgets = field.acroField.getWidgets();\n                for (var j = 0, lenWidgets = widgets.length; j < lenWidgets; j++) {\n                    var widget = widgets[j];\n                    var page = this.findWidgetPage(widget);\n                    var widgetRef = this.findWidgetAppearanceRef(field, widget);\n                    var xObjectKey = page.node.newXObject('FlatWidget', widgetRef);\n                    var rectangle = widget.getRectangle();\n                    var operators = tslibExports.__spreadArrays([\n                        pushGraphicsState(),\n                        translate(rectangle.x, rectangle.y)\n                    ], rotateInPlace(tslibExports.__assign(tslibExports.__assign({}, rectangle), { rotation: 0 })), [\n                        drawObject(xObjectKey),\n                        popGraphicsState(),\n                    ]).filter(Boolean);\n                    page.pushOperators.apply(page, operators);\n                }\n                this.removeField(field);\n            }\n        };\n        /**\n         * Remove a field from this [[PDFForm]].\n         *\n         * For example:\n         * ```js\n         * const form = pdfDoc.getForm();\n         * const ageField = form.getFields().find(x => x.getName() === 'Age');\n         * form.removeField(ageField);\n         * ```\n         */\n        PDFForm.prototype.removeField = function (field) {\n            var widgets = field.acroField.getWidgets();\n            var pages = new Set();\n            for (var i = 0, len = widgets.length; i < len; i++) {\n                var widget = widgets[i];\n                var widgetRef = this.findWidgetAppearanceRef(field, widget);\n                var page = this.findWidgetPage(widget);\n                pages.add(page);\n                page.node.removeAnnot(widgetRef);\n            }\n            pages.forEach(function (page) { return page.node.removeAnnot(field.ref); });\n            this.acroForm.removeField(field.acroField);\n            var fieldKids = field.acroField.normalizedEntries().Kids;\n            var kidsCount = fieldKids.size();\n            for (var childIndex = 0; childIndex < kidsCount; childIndex++) {\n                var child = fieldKids.get(childIndex);\n                if (child instanceof PDFRef) {\n                    this.doc.context.delete(child);\n                }\n            }\n            this.doc.context.delete(field.ref);\n        };\n        /**\n         * Update the appearance streams for all widgets of all fields in this\n         * [[PDFForm]]. Appearance streams will only be created for a widget if it\n         * does not have any existing appearance streams, or the field's value has\n         * changed (e.g. by calling [[PDFTextField.setText]] or\n         * [[PDFDropdown.select]]).\n         *\n         * For example:\n         * ```js\n         * const courier = await pdfDoc.embedFont(StandardFonts.Courier)\n         * const form = pdfDoc.getForm()\n         * form.updateFieldAppearances(courier)\n         * ```\n         *\n         * **IMPORTANT:** The default value for the `font` parameter is\n         * [[StandardFonts.Helvetica]]. Note that this is a WinAnsi font. This means\n         * that encoding errors will be thrown if any fields contain text with\n         * characters outside the WinAnsi character set (the latin alphabet).\n         *\n         * Embedding a custom font and passing that as the `font`\n         * parameter allows you to generate appearance streams with non WinAnsi\n         * characters (assuming your custom font supports them).\n         *\n         * > **NOTE:** The [[PDFDocument.save]] method will call this method to\n         * > update appearances automatically if a form was accessed via the\n         * > [[PDFDocument.getForm]] method prior to saving.\n         *\n         * @param font Optionally, the font to use when creating new appearances.\n         */\n        PDFForm.prototype.updateFieldAppearances = function (font) {\n            assertOrUndefined(font, 'font', [[PDFFont, 'PDFFont']]);\n            font = font !== null && font !== void 0 ? font : this.getDefaultFont();\n            var fields = this.getFields();\n            for (var idx = 0, len = fields.length; idx < len; idx++) {\n                var field = fields[idx];\n                if (field.needsAppearancesUpdate()) {\n                    field.defaultUpdateAppearances(font);\n                }\n            }\n        };\n        /**\n         * Mark a field as dirty. This will cause its appearance streams to be\n         * updated by [[PDFForm.updateFieldAppearances]].\n         * ```js\n         * const form = pdfDoc.getForm()\n         * const field = form.getField('foo.bar')\n         * form.markFieldAsDirty(field.ref)\n         * ```\n         * @param fieldRef The reference to the field that should be marked.\n         */\n        PDFForm.prototype.markFieldAsDirty = function (fieldRef) {\n            assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n            this.dirtyFields.add(fieldRef);\n        };\n        /**\n         * Mark a field as dirty. This will cause its appearance streams to not be\n         * updated by [[PDFForm.updateFieldAppearances]].\n         * ```js\n         * const form = pdfDoc.getForm()\n         * const field = form.getField('foo.bar')\n         * form.markFieldAsClean(field.ref)\n         * ```\n         * @param fieldRef The reference to the field that should be marked.\n         */\n        PDFForm.prototype.markFieldAsClean = function (fieldRef) {\n            assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n            this.dirtyFields.delete(fieldRef);\n        };\n        /**\n         * Returns `true` is the specified field has been marked as dirty.\n         * ```js\n         * const form = pdfDoc.getForm()\n         * const field = form.getField('foo.bar')\n         * if (form.fieldIsDirty(field.ref)) console.log('Field is dirty')\n         * ```\n         * @param fieldRef The reference to the field that should be checked.\n         * @returns Whether or not the specified field is dirty.\n         */\n        PDFForm.prototype.fieldIsDirty = function (fieldRef) {\n            assertOrUndefined(fieldRef, 'fieldRef', [[PDFRef, 'PDFRef']]);\n            return this.dirtyFields.has(fieldRef);\n        };\n        PDFForm.prototype.getDefaultFont = function () {\n            return this.defaultFontCache.access();\n        };\n        PDFForm.prototype.findWidgetPage = function (widget) {\n            var pageRef = widget.P();\n            var page = this.doc.getPages().find(function (x) { return x.ref === pageRef; });\n            if (page === undefined) {\n                var widgetRef = this.doc.context.getObjectRef(widget.dict);\n                if (widgetRef === undefined) {\n                    throw new Error('Could not find PDFRef for PDFObject');\n                }\n                page = this.doc.findPageForAnnotationRef(widgetRef);\n                if (page === undefined) {\n                    throw new Error(\"Could not find page for PDFRef \" + widgetRef);\n                }\n            }\n            return page;\n        };\n        PDFForm.prototype.findWidgetAppearanceRef = function (field, widget) {\n            var _a;\n            var refOrDict = widget.getNormalAppearance();\n            if (refOrDict instanceof PDFDict &&\n                (field instanceof PDFCheckBox || field instanceof PDFRadioGroup)) {\n                var value = field.acroField.getValue();\n                var ref = (_a = refOrDict.get(value)) !== null && _a !== void 0 ? _a : refOrDict.get(PDFName.of('Off'));\n                if (ref instanceof PDFRef) {\n                    refOrDict = ref;\n                }\n            }\n            if (!(refOrDict instanceof PDFRef)) {\n                var name_1 = field.getName();\n                throw new Error(\"Failed to extract appearance ref for: \" + name_1);\n            }\n            return refOrDict;\n        };\n        PDFForm.prototype.findOrCreateNonTerminals = function (partialNames) {\n            var nonTerminal = [\n                this.acroForm,\n            ];\n            for (var idx = 0, len = partialNames.length; idx < len; idx++) {\n                var namePart = partialNames[idx];\n                if (!namePart)\n                    throw new InvalidFieldNamePartError(namePart);\n                var parent_1 = nonTerminal[0], parentRef = nonTerminal[1];\n                var res = this.findNonTerminal(namePart, parent_1);\n                if (res) {\n                    nonTerminal = res;\n                }\n                else {\n                    var node = PDFAcroNonTerminal.create(this.doc.context);\n                    node.setPartialName(namePart);\n                    node.setParent(parentRef);\n                    var nodeRef = this.doc.context.register(node.dict);\n                    parent_1.addField(nodeRef);\n                    nonTerminal = [node, nodeRef];\n                }\n            }\n            return nonTerminal;\n        };\n        PDFForm.prototype.findNonTerminal = function (partialName, parent) {\n            var fields = parent instanceof PDFAcroForm\n                ? this.acroForm.getFields()\n                : createPDFAcroFields(parent.Kids());\n            for (var idx = 0, len = fields.length; idx < len; idx++) {\n                var _a = fields[idx], field = _a[0], ref = _a[1];\n                if (field.getPartialName() === partialName) {\n                    if (field instanceof PDFAcroNonTerminal)\n                        return [field, ref];\n                    throw new FieldAlreadyExistsError(partialName);\n                }\n            }\n            return undefined;\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFDocument.getForm]] method, which will create an\n         * > instance of [[PDFForm]] for you.\n         *\n         * Create an instance of [[PDFForm]] from an existing acroForm and embedder\n         *\n         * @param acroForm The underlying `PDFAcroForm` for this form.\n         * @param doc The document to which the form will belong.\n         */\n        PDFForm.of = function (acroForm, doc) {\n            return new PDFForm(acroForm, doc);\n        };\n        return PDFForm;\n    }());\n    var convertToPDFField = function (field, ref, doc) {\n        if (field instanceof PDFAcroPushButton)\n            return PDFButton.of(field, ref, doc);\n        if (field instanceof PDFAcroCheckBox)\n            return PDFCheckBox.of(field, ref, doc);\n        if (field instanceof PDFAcroComboBox)\n            return PDFDropdown.of(field, ref, doc);\n        if (field instanceof PDFAcroListBox)\n            return PDFOptionList.of(field, ref, doc);\n        if (field instanceof PDFAcroText)\n            return PDFTextField.of(field, ref, doc);\n        if (field instanceof PDFAcroRadioButton) {\n            return PDFRadioGroup.of(field, ref, doc);\n        }\n        if (field instanceof PDFAcroSignature) {\n            return PDFSignature.of(field, ref, doc);\n        }\n        return undefined;\n    };\n    var splitFieldName = function (fullyQualifiedName) {\n        if (fullyQualifiedName.length === 0) {\n            throw new Error('PDF field names must not be empty strings');\n        }\n        var parts = fullyQualifiedName.split('.');\n        for (var idx = 0, len = parts.length; idx < len; idx++) {\n            if (parts[idx] === '') {\n                throw new Error(\"Periods in PDF field names must be separated by at least one character: \\\"\" + fullyQualifiedName + \"\\\"\");\n            }\n        }\n        if (parts.length === 1)\n            return { nonTerminal: [], terminal: parts[0] };\n        return {\n            nonTerminal: parts.slice(0, parts.length - 1),\n            terminal: parts[parts.length - 1],\n        };\n    };\n    var addFieldToParent = function (_a, _b, partialName) {\n        var parent = _a[0], parentRef = _a[1];\n        var field = _b[0], fieldRef = _b[1];\n        var entries = parent.normalizedEntries();\n        var fields = createPDFAcroFields('Kids' in entries ? entries.Kids : entries.Fields);\n        for (var idx = 0, len = fields.length; idx < len; idx++) {\n            if (fields[idx][0].getPartialName() === partialName) {\n                throw new FieldAlreadyExistsError(partialName);\n            }\n        }\n        parent.addField(fieldRef);\n        field.setParent(parentRef);\n    };\n\n    var PageSizes = {\n        '4A0': [4767.87, 6740.79],\n        '2A0': [3370.39, 4767.87],\n        A0: [2383.94, 3370.39],\n        A1: [1683.78, 2383.94],\n        A2: [1190.55, 1683.78],\n        A3: [841.89, 1190.55],\n        A4: [595.28, 841.89],\n        A5: [419.53, 595.28],\n        A6: [297.64, 419.53],\n        A7: [209.76, 297.64],\n        A8: [147.4, 209.76],\n        A9: [104.88, 147.4],\n        A10: [73.7, 104.88],\n        B0: [2834.65, 4008.19],\n        B1: [2004.09, 2834.65],\n        B2: [1417.32, 2004.09],\n        B3: [1000.63, 1417.32],\n        B4: [708.66, 1000.63],\n        B5: [498.9, 708.66],\n        B6: [354.33, 498.9],\n        B7: [249.45, 354.33],\n        B8: [175.75, 249.45],\n        B9: [124.72, 175.75],\n        B10: [87.87, 124.72],\n        C0: [2599.37, 3676.54],\n        C1: [1836.85, 2599.37],\n        C2: [1298.27, 1836.85],\n        C3: [918.43, 1298.27],\n        C4: [649.13, 918.43],\n        C5: [459.21, 649.13],\n        C6: [323.15, 459.21],\n        C7: [229.61, 323.15],\n        C8: [161.57, 229.61],\n        C9: [113.39, 161.57],\n        C10: [79.37, 113.39],\n        RA0: [2437.8, 3458.27],\n        RA1: [1729.13, 2437.8],\n        RA2: [1218.9, 1729.13],\n        RA3: [864.57, 1218.9],\n        RA4: [609.45, 864.57],\n        SRA0: [2551.18, 3628.35],\n        SRA1: [1814.17, 2551.18],\n        SRA2: [1275.59, 1814.17],\n        SRA3: [907.09, 1275.59],\n        SRA4: [637.8, 907.09],\n        Executive: [521.86, 756.0],\n        Folio: [612.0, 936.0],\n        Legal: [612.0, 1008.0],\n        Letter: [612.0, 792.0],\n        Tabloid: [792.0, 1224.0],\n    };\n\n    exports.ParseSpeeds = void 0;\n    (function (ParseSpeeds) {\n        ParseSpeeds[ParseSpeeds[\"Fastest\"] = Infinity] = \"Fastest\";\n        ParseSpeeds[ParseSpeeds[\"Fast\"] = 1500] = \"Fast\";\n        ParseSpeeds[ParseSpeeds[\"Medium\"] = 500] = \"Medium\";\n        ParseSpeeds[ParseSpeeds[\"Slow\"] = 100] = \"Slow\";\n    })(exports.ParseSpeeds || (exports.ParseSpeeds = {}));\n\n    /**\n     * Represents a file that has been embedded in a [[PDFDocument]].\n     */\n    var PDFEmbeddedFile = /** @class */ (function () {\n        function PDFEmbeddedFile(ref, doc, embedder) {\n            this.alreadyEmbedded = false;\n            this.ref = ref;\n            this.doc = doc;\n            this.embedder = embedder;\n        }\n        /**\n         * > **NOTE:** You probably don't need to call this method directly. The\n         * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n         * > automatically ensure all embeddable files get embedded.\n         *\n         * Embed this embeddable file in its document.\n         *\n         * @returns Resolves when the embedding is complete.\n         */\n        PDFEmbeddedFile.prototype.embed = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var ref, Names, EmbeddedFiles, EFNames, AF;\n                return tslibExports.__generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n                            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n                        case 1:\n                            ref = _a.sent();\n                            if (!this.doc.catalog.has(PDFName.of('Names'))) {\n                                this.doc.catalog.set(PDFName.of('Names'), this.doc.context.obj({}));\n                            }\n                            Names = this.doc.catalog.lookup(PDFName.of('Names'), PDFDict);\n                            if (!Names.has(PDFName.of('EmbeddedFiles'))) {\n                                Names.set(PDFName.of('EmbeddedFiles'), this.doc.context.obj({}));\n                            }\n                            EmbeddedFiles = Names.lookup(PDFName.of('EmbeddedFiles'), PDFDict);\n                            if (!EmbeddedFiles.has(PDFName.of('Names'))) {\n                                EmbeddedFiles.set(PDFName.of('Names'), this.doc.context.obj([]));\n                            }\n                            EFNames = EmbeddedFiles.lookup(PDFName.of('Names'), PDFArray);\n                            EFNames.push(PDFHexString.fromText(this.embedder.fileName));\n                            EFNames.push(ref);\n                            /**\n                             * The AF-Tag is needed to achieve PDF-A3 compliance for embedded files\n                             *\n                             * The following document outlines the uses cases of the associated files (AF) tag.\n                             * See:\n                             * https://www.pdfa.org/wp-content/uploads/2018/10/PDF20_AN002-AF.pdf\n                             */\n                            if (!this.doc.catalog.has(PDFName.of('AF'))) {\n                                this.doc.catalog.set(PDFName.of('AF'), this.doc.context.obj([]));\n                            }\n                            AF = this.doc.catalog.lookup(PDFName.of('AF'), PDFArray);\n                            AF.push(ref);\n                            this.alreadyEmbedded = true;\n                            _a.label = 2;\n                        case 2: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFDocument.attach]] method, which will create\n         * instances of [[PDFEmbeddedFile]] for you.\n         *\n         * Create an instance of [[PDFEmbeddedFile]] from an existing ref and embedder\n         *\n         * @param ref The unique reference for this file.\n         * @param doc The document to which the file will belong.\n         * @param embedder The embedder that will be used to embed the file.\n         */\n        PDFEmbeddedFile.of = function (ref, doc, embedder) {\n            return new PDFEmbeddedFile(ref, doc, embedder);\n        };\n        return PDFEmbeddedFile;\n    }());\n\n    /**\n     * Represents JavaScript that has been embedded in a [[PDFDocument]].\n     */\n    var PDFJavaScript = /** @class */ (function () {\n        function PDFJavaScript(ref, doc, embedder) {\n            this.alreadyEmbedded = false;\n            this.ref = ref;\n            this.doc = doc;\n            this.embedder = embedder;\n        }\n        /**\n         * > **NOTE:** You probably don't need to call this method directly. The\n         * > [[PDFDocument.save]] and [[PDFDocument.saveAsBase64]] methods will\n         * > automatically ensure all JavaScripts get embedded.\n         *\n         * Embed this JavaScript in its document.\n         *\n         * @returns Resolves when the embedding is complete.\n         */\n        PDFJavaScript.prototype.embed = function () {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var _a, catalog, context, ref, Names, Javascript, JSNames;\n                return tslibExports.__generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            if (!!this.alreadyEmbedded) return [3 /*break*/, 2];\n                            _a = this.doc, catalog = _a.catalog, context = _a.context;\n                            return [4 /*yield*/, this.embedder.embedIntoContext(this.doc.context, this.ref)];\n                        case 1:\n                            ref = _b.sent();\n                            if (!catalog.has(PDFName.of('Names'))) {\n                                catalog.set(PDFName.of('Names'), context.obj({}));\n                            }\n                            Names = catalog.lookup(PDFName.of('Names'), PDFDict);\n                            if (!Names.has(PDFName.of('JavaScript'))) {\n                                Names.set(PDFName.of('JavaScript'), context.obj({}));\n                            }\n                            Javascript = Names.lookup(PDFName.of('JavaScript'), PDFDict);\n                            if (!Javascript.has(PDFName.of('Names'))) {\n                                Javascript.set(PDFName.of('Names'), context.obj([]));\n                            }\n                            JSNames = Javascript.lookup(PDFName.of('Names'), PDFArray);\n                            JSNames.push(PDFHexString.fromText(this.embedder.scriptName));\n                            JSNames.push(ref);\n                            this.alreadyEmbedded = true;\n                            _b.label = 2;\n                        case 2: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFDocument.addJavaScript]] method, which will\n         * create instances of [[PDFJavaScript]] for you.\n         *\n         * Create an instance of [[PDFJavaScript]] from an existing ref and script\n         *\n         * @param ref The unique reference for this script.\n         * @param doc The document to which the script will belong.\n         * @param embedder The embedder that will be used to embed the script.\n         */\n        PDFJavaScript.of = function (ref, doc, embedder) {\n            return new PDFJavaScript(ref, doc, embedder);\n        };\n        return PDFJavaScript;\n    }());\n\n    var JavaScriptEmbedder = /** @class */ (function () {\n        function JavaScriptEmbedder(script, scriptName) {\n            this.script = script;\n            this.scriptName = scriptName;\n        }\n        JavaScriptEmbedder.for = function (script, scriptName) {\n            return new JavaScriptEmbedder(script, scriptName);\n        };\n        JavaScriptEmbedder.prototype.embedIntoContext = function (context, ref) {\n            return tslibExports.__awaiter(this, void 0, void 0, function () {\n                var jsActionDict;\n                return tslibExports.__generator(this, function (_a) {\n                    jsActionDict = context.obj({\n                        Type: 'Action',\n                        S: 'JavaScript',\n                        JS: PDFHexString.fromText(this.script),\n                    });\n                    if (ref) {\n                        context.assign(ref, jsActionDict);\n                        return [2 /*return*/, ref];\n                    }\n                    else {\n                        return [2 /*return*/, context.register(jsActionDict)];\n                    }\n                });\n            });\n        };\n        return JavaScriptEmbedder;\n    }());\n\n    var PDFDocument = (function () {\n      function PDFDocument(context, ignoreEncryption, updateMetadata) {\n        var _this = this;\n        this.defaultWordBreaks = [\" \"];\n        this.computePages = function () {\n          var pages = [];\n          _this.catalog.Pages().traverse(function (node, ref) {\n            if (node instanceof PDFPageLeaf) {\n              var page = _this.pageMap.get(node);\n              if (!page) {\n                page = PDFPage.of(node, ref, _this);\n                _this.pageMap.set(node, page);\n              }\n              pages.push(page);\n            }\n          });\n          return pages;\n        };\n        this.getOrCreateForm = function () {\n          var acroForm = _this.catalog.getOrCreateAcroForm();\n          return PDFForm.of(acroForm, _this);\n        };\n        assertIs(context, \"context\", [[PDFContext, \"PDFContext\"]]);\n        assertIs(ignoreEncryption, \"ignoreEncryption\", [\"boolean\"]);\n        this.context = context;\n        this.catalog = context.lookup(context.trailerInfo.Root);\n        this.isEncrypted = !!context.lookup(context.trailerInfo.Encrypt);\n        this.pageCache = Cache.populatedBy(this.computePages);\n        this.pageMap = new Map();\n        this.formCache = Cache.populatedBy(this.getOrCreateForm);\n        this.fonts = [];\n        this.images = [];\n        this.embeddedPages = [];\n        this.embeddedFiles = [];\n        this.javaScripts = [];\n        if (!ignoreEncryption && this.isEncrypted) throw new EncryptedPDFError();\n        if (updateMetadata) this.updateInfoDict();\n      }\n      PDFDocument.load = function (pdf, options) {\n        if (options === void 0) {\n          options = {};\n        }\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var _a, ignoreEncryption, _b, parseSpeed, _c, throwOnInvalidObject, _d, updateMetadata, _e, capNumbers, bytes, context;\n          return tslibExports.__generator(this, function (_f) {\n            switch (_f.label) {\n              case 0:\n                (_a = options.ignoreEncryption, ignoreEncryption = _a === void 0 ? false : _a, _b = options.parseSpeed, parseSpeed = _b === void 0 ? exports.ParseSpeeds.Slow : _b, _c = options.throwOnInvalidObject, throwOnInvalidObject = _c === void 0 ? false : _c, _d = options.updateMetadata, updateMetadata = _d === void 0 ? true : _d, _e = options.capNumbers, capNumbers = _e === void 0 ? false : _e);\n                assertIs(pdf, \"pdf\", [\"string\", Uint8Array, ArrayBuffer]);\n                assertIs(ignoreEncryption, \"ignoreEncryption\", [\"boolean\"]);\n                assertIs(parseSpeed, \"parseSpeed\", [\"number\"]);\n                assertIs(throwOnInvalidObject, \"throwOnInvalidObject\", [\"boolean\"]);\n                bytes = toUint8Array(pdf);\n                return [4, PDFParser.forBytesWithOptions(bytes, parseSpeed, throwOnInvalidObject, capNumbers).parseDocument()];\n              case 1:\n                context = _f.sent();\n                return [2, new PDFDocument(context, ignoreEncryption, updateMetadata)];\n            }\n          });\n        });\n      };\n      PDFDocument.create = function (options) {\n        if (options === void 0) {\n          options = {};\n        }\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var _a, updateMetadata, context, pageTree, pageTreeRef, catalog;\n          return tslibExports.__generator(this, function (_b) {\n            (_a = options.updateMetadata, updateMetadata = _a === void 0 ? true : _a);\n            context = PDFContext.create();\n            pageTree = PDFPageTree.withContext(context);\n            pageTreeRef = context.register(pageTree);\n            catalog = PDFCatalog.withContextAndPages(context, pageTreeRef);\n            context.trailerInfo.Root = context.register(catalog);\n            return [2, new PDFDocument(context, false, updateMetadata)];\n          });\n        });\n      };\n      PDFDocument.prototype.registerFontkit = function (fontkit) {\n        this.fontkit = fontkit;\n      };\n      PDFDocument.prototype.getForm = function () {\n        var form = this.formCache.access();\n        if (form.hasXFA()) {\n          console.warn(\"Removing XFA form data as pdf-lib does not support reading or writing XFA\");\n          form.deleteXFA();\n        }\n        return form;\n      };\n      PDFDocument.prototype.getTitle = function () {\n        var title = this.getInfoDict().lookup(PDFName.Title);\n        if (!title) return undefined;\n        assertIsLiteralOrHexString(title);\n        return title.decodeText();\n      };\n      PDFDocument.prototype.getAuthor = function () {\n        var author = this.getInfoDict().lookup(PDFName.Author);\n        if (!author) return undefined;\n        assertIsLiteralOrHexString(author);\n        return author.decodeText();\n      };\n      PDFDocument.prototype.getSubject = function () {\n        var subject = this.getInfoDict().lookup(PDFName.Subject);\n        if (!subject) return undefined;\n        assertIsLiteralOrHexString(subject);\n        return subject.decodeText();\n      };\n      PDFDocument.prototype.getKeywords = function () {\n        var keywords = this.getInfoDict().lookup(PDFName.Keywords);\n        if (!keywords) return undefined;\n        assertIsLiteralOrHexString(keywords);\n        return keywords.decodeText();\n      };\n      PDFDocument.prototype.getCreator = function () {\n        var creator = this.getInfoDict().lookup(PDFName.Creator);\n        if (!creator) return undefined;\n        assertIsLiteralOrHexString(creator);\n        return creator.decodeText();\n      };\n      PDFDocument.prototype.getProducer = function () {\n        var producer = this.getInfoDict().lookup(PDFName.Producer);\n        if (!producer) return undefined;\n        assertIsLiteralOrHexString(producer);\n        return producer.decodeText();\n      };\n      PDFDocument.prototype.getCreationDate = function () {\n        var creationDate = this.getInfoDict().lookup(PDFName.CreationDate);\n        if (!creationDate) return undefined;\n        assertIsLiteralOrHexString(creationDate);\n        return creationDate.decodeDate();\n      };\n      PDFDocument.prototype.getModificationDate = function () {\n        var modificationDate = this.getInfoDict().lookup(PDFName.ModDate);\n        if (!modificationDate) return undefined;\n        assertIsLiteralOrHexString(modificationDate);\n        return modificationDate.decodeDate();\n      };\n      PDFDocument.prototype.setTitle = function (title, options) {\n        assertIs(title, \"title\", [\"string\"]);\n        var key = PDFName.of(\"Title\");\n        this.getInfoDict().set(key, PDFHexString.fromText(title));\n        if (options === null || options === void 0 ? void 0 : options.showInWindowTitleBar) {\n          var prefs = this.catalog.getOrCreateViewerPreferences();\n          prefs.setDisplayDocTitle(true);\n        }\n      };\n      PDFDocument.prototype.setAuthor = function (author) {\n        assertIs(author, \"author\", [\"string\"]);\n        var key = PDFName.of(\"Author\");\n        this.getInfoDict().set(key, PDFHexString.fromText(author));\n      };\n      PDFDocument.prototype.setSubject = function (subject) {\n        assertIs(subject, \"author\", [\"string\"]);\n        var key = PDFName.of(\"Subject\");\n        this.getInfoDict().set(key, PDFHexString.fromText(subject));\n      };\n      PDFDocument.prototype.setKeywords = function (keywords) {\n        assertIs(keywords, \"keywords\", [Array]);\n        var key = PDFName.of(\"Keywords\");\n        this.getInfoDict().set(key, PDFHexString.fromText(keywords.join(\" \")));\n      };\n      PDFDocument.prototype.setCreator = function (creator) {\n        assertIs(creator, \"creator\", [\"string\"]);\n        var key = PDFName.of(\"Creator\");\n        this.getInfoDict().set(key, PDFHexString.fromText(creator));\n      };\n      PDFDocument.prototype.setProducer = function (producer) {\n        assertIs(producer, \"creator\", [\"string\"]);\n        var key = PDFName.of(\"Producer\");\n        this.getInfoDict().set(key, PDFHexString.fromText(producer));\n      };\n      PDFDocument.prototype.setLanguage = function (language) {\n        assertIs(language, \"language\", [\"string\"]);\n        var key = PDFName.of(\"Lang\");\n        this.catalog.set(key, PDFString.of(language));\n      };\n      PDFDocument.prototype.setCreationDate = function (creationDate) {\n        assertIs(creationDate, \"creationDate\", [[Date, \"Date\"]]);\n        var key = PDFName.of(\"CreationDate\");\n        this.getInfoDict().set(key, PDFString.fromDate(creationDate));\n      };\n      PDFDocument.prototype.setModificationDate = function (modificationDate) {\n        assertIs(modificationDate, \"modificationDate\", [[Date, \"Date\"]]);\n        var key = PDFName.of(\"ModDate\");\n        this.getInfoDict().set(key, PDFString.fromDate(modificationDate));\n      };\n      PDFDocument.prototype.getPageCount = function () {\n        if (this.pageCount === undefined) this.pageCount = this.getPages().length;\n        return this.pageCount;\n      };\n      PDFDocument.prototype.getPages = function () {\n        return this.pageCache.access();\n      };\n      PDFDocument.prototype.getPage = function (index) {\n        var pages = this.getPages();\n        assertRange(index, \"index\", 0, pages.length - 1);\n        return pages[index];\n      };\n      PDFDocument.prototype.getPageIndices = function () {\n        return range(0, this.getPageCount());\n      };\n      PDFDocument.prototype.removePage = function (index) {\n        var pageCount = this.getPageCount();\n        if (this.pageCount === 0) throw new RemovePageFromEmptyDocumentError();\n        assertRange(index, \"index\", 0, pageCount - 1);\n        this.catalog.removeLeafNode(index);\n        this.pageCount = pageCount - 1;\n      };\n      PDFDocument.prototype.addPage = function (page) {\n        assertIs(page, \"page\", [\"undefined\", [PDFPage, \"PDFPage\"], Array]);\n        return this.insertPage(this.getPageCount(), page);\n      };\n      PDFDocument.prototype.insertPage = function (index, page) {\n        var pageCount = this.getPageCount();\n        assertRange(index, \"index\", 0, pageCount);\n        assertIs(page, \"page\", [\"undefined\", [PDFPage, \"PDFPage\"], Array]);\n        if (!page || Array.isArray(page)) {\n          var dims = Array.isArray(page) ? page : PageSizes.A4;\n          page = PDFPage.create(this);\n          page.setSize.apply(page, dims);\n        } else if (page.doc !== this) {\n          throw new ForeignPageError();\n        }\n        var parentRef = this.catalog.insertLeafNode(page.ref, index);\n        page.node.setParent(parentRef);\n        this.pageMap.set(page.node, page);\n        this.pageCache.invalidate();\n        this.pageCount = pageCount + 1;\n        return page;\n      };\n      PDFDocument.prototype.copyPages = function (srcDoc, indices) {\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var copier, srcPages, copiedPages, idx, len, srcPage, copiedPage, ref;\n          return tslibExports.__generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                assertIs(srcDoc, \"srcDoc\", [[PDFDocument, \"PDFDocument\"]]);\n                assertIs(indices, \"indices\", [Array]);\n                return [4, srcDoc.flush()];\n              case 1:\n                _a.sent();\n                copier = PDFObjectCopier.for(srcDoc.context, this.context);\n                srcPages = srcDoc.getPages();\n                copiedPages = new Array(indices.length);\n                for ((idx = 0, len = indices.length); idx < len; idx++) {\n                  srcPage = srcPages[indices[idx]];\n                  copiedPage = copier.copy(srcPage.node);\n                  ref = this.context.register(copiedPage);\n                  copiedPages[idx] = PDFPage.of(copiedPage, ref, this);\n                }\n                return [2, copiedPages];\n            }\n          });\n        });\n      };\n      PDFDocument.prototype.copy = function () {\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var pdfCopy, contentPages, idx, len;\n          return tslibExports.__generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4, PDFDocument.create()];\n              case 1:\n                pdfCopy = _a.sent();\n                return [4, pdfCopy.copyPages(this, this.getPageIndices())];\n              case 2:\n                contentPages = _a.sent();\n                for ((idx = 0, len = contentPages.length); idx < len; idx++) {\n                  pdfCopy.addPage(contentPages[idx]);\n                }\n                if (this.getAuthor() !== undefined) {\n                  pdfCopy.setAuthor(this.getAuthor());\n                }\n                if (this.getCreationDate() !== undefined) {\n                  pdfCopy.setCreationDate(this.getCreationDate());\n                }\n                if (this.getCreator() !== undefined) {\n                  pdfCopy.setCreator(this.getCreator());\n                }\n                if (this.getModificationDate() !== undefined) {\n                  pdfCopy.setModificationDate(this.getModificationDate());\n                }\n                if (this.getProducer() !== undefined) {\n                  pdfCopy.setProducer(this.getProducer());\n                }\n                if (this.getSubject() !== undefined) {\n                  pdfCopy.setSubject(this.getSubject());\n                }\n                if (this.getTitle() !== undefined) {\n                  pdfCopy.setTitle(this.getTitle());\n                }\n                pdfCopy.defaultWordBreaks = this.defaultWordBreaks;\n                return [2, pdfCopy];\n            }\n          });\n        });\n      };\n      PDFDocument.prototype.addJavaScript = function (name, script) {\n        assertIs(name, \"name\", [\"string\"]);\n        assertIs(script, \"script\", [\"string\"]);\n        var embedder = JavaScriptEmbedder.for(script, name);\n        var ref = this.context.nextRef();\n        var javaScript = PDFJavaScript.of(ref, this, embedder);\n        this.javaScripts.push(javaScript);\n      };\n      PDFDocument.prototype.attach = function (attachment, name, options) {\n        if (options === void 0) {\n          options = {};\n        }\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var bytes, embedder, ref, embeddedFile;\n          return tslibExports.__generator(this, function (_a) {\n            assertIs(attachment, \"attachment\", [\"string\", Uint8Array, ArrayBuffer]);\n            assertIs(name, \"name\", [\"string\"]);\n            assertOrUndefined(options.mimeType, \"mimeType\", [\"string\"]);\n            assertOrUndefined(options.description, \"description\", [\"string\"]);\n            assertOrUndefined(options.creationDate, \"options.creationDate\", [Date]);\n            assertOrUndefined(options.modificationDate, \"options.modificationDate\", [Date]);\n            assertIsOneOfOrUndefined(options.afRelationship, \"options.afRelationship\", exports.AFRelationship);\n            bytes = toUint8Array(attachment);\n            embedder = FileEmbedder.for(bytes, name, options);\n            ref = this.context.nextRef();\n            embeddedFile = PDFEmbeddedFile.of(ref, this, embedder);\n            this.embeddedFiles.push(embeddedFile);\n            return [2];\n          });\n        });\n      };\n      PDFDocument.prototype.embedFont = function (font, options) {\n        if (options === void 0) {\n          options = {};\n        }\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var _a, subset, customName, features, embedder, bytes, fontkit, _b, ref, pdfFont;\n          return tslibExports.__generator(this, function (_c) {\n            switch (_c.label) {\n              case 0:\n                (_a = options.subset, subset = _a === void 0 ? false : _a, customName = options.customName, features = options.features);\n                assertIs(font, \"font\", [\"string\", Uint8Array, ArrayBuffer]);\n                assertIs(subset, \"subset\", [\"boolean\"]);\n                if (!isStandardFont(font)) return [3, 1];\n                embedder = StandardFontEmbedder.for(font, customName);\n                return [3, 7];\n              case 1:\n                if (!canBeConvertedToUint8Array(font)) return [3, 6];\n                bytes = toUint8Array(font);\n                fontkit = this.assertFontkit();\n                if (!subset) return [3, 3];\n                return [4, CustomFontSubsetEmbedder.for(fontkit, bytes, customName, features)];\n              case 2:\n                _b = _c.sent();\n                return [3, 5];\n              case 3:\n                return [4, CustomFontEmbedder.for(fontkit, bytes, customName, features)];\n              case 4:\n                _b = _c.sent();\n                _c.label = 5;\n              case 5:\n                embedder = _b;\n                return [3, 7];\n              case 6:\n                throw new TypeError(\"`font` must be one of `StandardFonts | string | Uint8Array | ArrayBuffer`\");\n              case 7:\n                ref = this.context.nextRef();\n                pdfFont = PDFFont.of(ref, this, embedder);\n                this.fonts.push(pdfFont);\n                return [2, pdfFont];\n            }\n          });\n        });\n      };\n      PDFDocument.prototype.embedStandardFont = function (font, customName) {\n        assertIs(font, \"font\", [\"string\"]);\n        if (!isStandardFont(font)) {\n          throw new TypeError(\"`font` must be one of type `StandardFonts`\");\n        }\n        var embedder = StandardFontEmbedder.for(font, customName);\n        var ref = this.context.nextRef();\n        var pdfFont = PDFFont.of(ref, this, embedder);\n        this.fonts.push(pdfFont);\n        return pdfFont;\n      };\n      PDFDocument.prototype.embedJpg = function (jpg) {\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var bytes, embedder, ref, pdfImage;\n          return tslibExports.__generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                assertIs(jpg, \"jpg\", [\"string\", Uint8Array, ArrayBuffer]);\n                bytes = toUint8Array(jpg);\n                return [4, JpegEmbedder.for(bytes)];\n              case 1:\n                embedder = _a.sent();\n                ref = this.context.nextRef();\n                pdfImage = PDFImage.of(ref, this, embedder);\n                this.images.push(pdfImage);\n                return [2, pdfImage];\n            }\n          });\n        });\n      };\n      PDFDocument.prototype.embedPng = function (png) {\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var bytes, embedder, ref, pdfImage;\n          return tslibExports.__generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                assertIs(png, \"png\", [\"string\", Uint8Array, ArrayBuffer]);\n                bytes = toUint8Array(png);\n                return [4, PngEmbedder.for(bytes)];\n              case 1:\n                embedder = _a.sent();\n                ref = this.context.nextRef();\n                pdfImage = PDFImage.of(ref, this, embedder);\n                this.images.push(pdfImage);\n                return [2, pdfImage];\n            }\n          });\n        });\n      };\n      PDFDocument.prototype.embedPdf = function (pdf, indices) {\n        if (indices === void 0) {\n          indices = [0];\n        }\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var srcDoc, _a, srcPages;\n          return tslibExports.__generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                assertIs(pdf, \"pdf\", [\"string\", Uint8Array, ArrayBuffer, [PDFDocument, \"PDFDocument\"]]);\n                assertIs(indices, \"indices\", [Array]);\n                if (!(pdf instanceof PDFDocument)) return [3, 1];\n                _a = pdf;\n                return [3, 3];\n              case 1:\n                return [4, PDFDocument.load(pdf)];\n              case 2:\n                _a = _b.sent();\n                _b.label = 3;\n              case 3:\n                srcDoc = _a;\n                srcPages = pluckIndices(srcDoc.getPages(), indices);\n                return [2, this.embedPages(srcPages)];\n            }\n          });\n        });\n      };\n      PDFDocument.prototype.embedPage = function (page, boundingBox, transformationMatrix) {\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var embeddedPage;\n          return tslibExports.__generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                assertIs(page, \"page\", [[PDFPage, \"PDFPage\"]]);\n                return [4, this.embedPages([page], [boundingBox], [transformationMatrix])];\n              case 1:\n                embeddedPage = _a.sent()[0];\n                return [2, embeddedPage];\n            }\n          });\n        });\n      };\n      PDFDocument.prototype.embedPages = function (pages, boundingBoxes, transformationMatrices) {\n        if (boundingBoxes === void 0) {\n          boundingBoxes = [];\n        }\n        if (transformationMatrices === void 0) {\n          transformationMatrices = [];\n        }\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var idx, len, currPage, nextPage, context, maybeCopyPage, embeddedPages, idx, len, page, box, matrix, embedder, ref;\n          var _a;\n          return tslibExports.__generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                if (pages.length === 0) return [2, []];\n                for ((idx = 0, len = pages.length - 1); idx < len; idx++) {\n                  currPage = pages[idx];\n                  nextPage = pages[idx + 1];\n                  if (currPage.node.context !== nextPage.node.context) {\n                    throw new PageEmbeddingMismatchedContextError();\n                  }\n                }\n                context = pages[0].node.context;\n                maybeCopyPage = context === this.context ? function (p) {\n                  return p;\n                } : PDFObjectCopier.for(context, this.context).copy;\n                embeddedPages = new Array(pages.length);\n                (idx = 0, len = pages.length);\n                _b.label = 1;\n              case 1:\n                if (!(idx < len)) return [3, 4];\n                page = maybeCopyPage(pages[idx].node);\n                box = boundingBoxes[idx];\n                matrix = transformationMatrices[idx];\n                return [4, PDFPageEmbedder.for(page, box, matrix)];\n              case 2:\n                embedder = _b.sent();\n                ref = this.context.nextRef();\n                embeddedPages[idx] = PDFEmbeddedPage.of(ref, this, embedder);\n                _b.label = 3;\n              case 3:\n                idx++;\n                return [3, 1];\n              case 4:\n                (_a = this.embeddedPages).push.apply(_a, embeddedPages);\n                return [2, embeddedPages];\n            }\n          });\n        });\n      };\n      PDFDocument.prototype.flush = function () {\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          return tslibExports.__generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4, this.embedAll(this.fonts)];\n              case 1:\n                _a.sent();\n                return [4, this.embedAll(this.images)];\n              case 2:\n                _a.sent();\n                return [4, this.embedAll(this.embeddedPages)];\n              case 3:\n                _a.sent();\n                return [4, this.embedAll(this.embeddedFiles)];\n              case 4:\n                _a.sent();\n                return [4, this.embedAll(this.javaScripts)];\n              case 5:\n                _a.sent();\n                return [2];\n            }\n          });\n        });\n      };\n      PDFDocument.prototype.save = function (options) {\n        if (options === void 0) {\n          options = {};\n        }\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var _a, useObjectStreams, _b, addDefaultPage, _c, objectsPerTick, _d, updateFieldAppearances, form, Writer;\n          return tslibExports.__generator(this, function (_e) {\n            switch (_e.label) {\n              case 0:\n                (_a = options.useObjectStreams, useObjectStreams = _a === void 0 ? true : _a, _b = options.addDefaultPage, addDefaultPage = _b === void 0 ? true : _b, _c = options.objectsPerTick, objectsPerTick = _c === void 0 ? 50 : _c, _d = options.updateFieldAppearances, updateFieldAppearances = _d === void 0 ? true : _d);\n                assertIs(useObjectStreams, \"useObjectStreams\", [\"boolean\"]);\n                assertIs(addDefaultPage, \"addDefaultPage\", [\"boolean\"]);\n                assertIs(objectsPerTick, \"objectsPerTick\", [\"number\"]);\n                assertIs(updateFieldAppearances, \"updateFieldAppearances\", [\"boolean\"]);\n                if (addDefaultPage && this.getPageCount() === 0) this.addPage();\n                if (updateFieldAppearances) {\n                  form = this.formCache.getValue();\n                  if (form) form.updateFieldAppearances();\n                }\n                return [4, this.flush()];\n              case 1:\n                _e.sent();\n                Writer = useObjectStreams ? PDFStreamWriter : PDFWriter;\n                return [2, Writer.forContext(this.context, objectsPerTick).serializeToBuffer()];\n            }\n          });\n        });\n      };\n      PDFDocument.prototype.saveAsBase64 = function (options) {\n        if (options === void 0) {\n          options = {};\n        }\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var _a, dataUri, otherOptions, bytes, base64;\n          return tslibExports.__generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                (_a = options.dataUri, dataUri = _a === void 0 ? false : _a, otherOptions = tslibExports.__rest(options, [\"dataUri\"]));\n                assertIs(dataUri, \"dataUri\", [\"boolean\"]);\n                return [4, this.save(otherOptions)];\n              case 1:\n                bytes = _b.sent();\n                base64 = encodeToBase64(bytes);\n                return [2, dataUri ? \"data:application/pdf;base64,\" + base64 : base64];\n            }\n          });\n        });\n      };\n      PDFDocument.prototype.findPageForAnnotationRef = function (ref) {\n        var pages = this.getPages();\n        for (var idx = 0, len = pages.length; idx < len; idx++) {\n          var page = pages[idx];\n          var annotations = page.node.Annots();\n          if ((annotations === null || annotations === void 0 ? void 0 : annotations.indexOf(ref)) !== undefined) {\n            return page;\n          }\n        }\n        return undefined;\n      };\n      PDFDocument.prototype.embedAll = function (embeddables) {\n        return tslibExports.__awaiter(this, void 0, void 0, function () {\n          var idx, len;\n          return tslibExports.__generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                (idx = 0, len = embeddables.length);\n                _a.label = 1;\n              case 1:\n                if (!(idx < len)) return [3, 4];\n                return [4, embeddables[idx].embed()];\n              case 2:\n                _a.sent();\n                _a.label = 3;\n              case 3:\n                idx++;\n                return [3, 1];\n              case 4:\n                return [2];\n            }\n          });\n        });\n      };\n      PDFDocument.prototype.updateInfoDict = function () {\n        var pdfLib = \"pdf-lib (https://github.com/Hopding/pdf-lib)\";\n        var now = new Date();\n        var info = this.getInfoDict();\n        this.setProducer(pdfLib);\n        this.setModificationDate(now);\n        if (!info.get(PDFName.of(\"Creator\"))) this.setCreator(pdfLib);\n        if (!info.get(PDFName.of(\"CreationDate\"))) this.setCreationDate(now);\n      };\n      PDFDocument.prototype.getInfoDict = function () {\n        var existingInfo = this.context.lookup(this.context.trailerInfo.Info);\n        if (existingInfo instanceof PDFDict) return existingInfo;\n        var newInfo = this.context.obj({});\n        this.context.trailerInfo.Info = this.context.register(newInfo);\n        return newInfo;\n      };\n      PDFDocument.prototype.assertFontkit = function () {\n        if (!this.fontkit) throw new FontkitNotRegisteredError();\n        return this.fontkit;\n      };\n      return PDFDocument;\n    })();\n    function assertIsLiteralOrHexString(pdfObject) {\n      if (!(pdfObject instanceof PDFHexString) && !(pdfObject instanceof PDFString)) {\n        throw new UnexpectedObjectTypeError([PDFHexString, PDFString], pdfObject);\n      }\n    }\n\n    exports.BlendMode = void 0;\n    (function (BlendMode) {\n        BlendMode[\"Normal\"] = \"Normal\";\n        BlendMode[\"Multiply\"] = \"Multiply\";\n        BlendMode[\"Screen\"] = \"Screen\";\n        BlendMode[\"Overlay\"] = \"Overlay\";\n        BlendMode[\"Darken\"] = \"Darken\";\n        BlendMode[\"Lighten\"] = \"Lighten\";\n        BlendMode[\"ColorDodge\"] = \"ColorDodge\";\n        BlendMode[\"ColorBurn\"] = \"ColorBurn\";\n        BlendMode[\"HardLight\"] = \"HardLight\";\n        BlendMode[\"SoftLight\"] = \"SoftLight\";\n        BlendMode[\"Difference\"] = \"Difference\";\n        BlendMode[\"Exclusion\"] = \"Exclusion\";\n    })(exports.BlendMode || (exports.BlendMode = {}));\n\n    /**\n     * Represents a single page of a [[PDFDocument]].\n     */\n    var PDFPage = /** @class */ (function () {\n        function PDFPage(leafNode, ref, doc) {\n            this.fontSize = 24;\n            this.fontColor = rgb(0, 0, 0);\n            this.lineHeight = 24;\n            this.x = 0;\n            this.y = 0;\n            assertIs(leafNode, 'leafNode', [[PDFPageLeaf, 'PDFPageLeaf']]);\n            assertIs(ref, 'ref', [[PDFRef, 'PDFRef']]);\n            assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n            this.node = leafNode;\n            this.ref = ref;\n            this.doc = doc;\n        }\n        /**\n         * Rotate this page by a multiple of 90 degrees. For example:\n         * ```js\n         * import { degrees } from 'pdf-lib'\n         *\n         * page.setRotation(degrees(-90))\n         * page.setRotation(degrees(0))\n         * page.setRotation(degrees(90))\n         * page.setRotation(degrees(180))\n         * page.setRotation(degrees(270))\n         * ```\n         * @param angle The angle to rotate this page.\n         */\n        PDFPage.prototype.setRotation = function (angle) {\n            var degreesAngle = toDegrees(angle);\n            assertMultiple(degreesAngle, 'degreesAngle', 90);\n            this.node.set(PDFName.of('Rotate'), this.doc.context.obj(degreesAngle));\n        };\n        /**\n         * Get this page's rotation angle in degrees. For example:\n         * ```js\n         * const rotationAngle = page.getRotation().angle;\n         * ```\n         * @returns The rotation angle of the page in degrees (always a multiple of\n         *          90 degrees).\n         */\n        PDFPage.prototype.getRotation = function () {\n            var Rotate = this.node.Rotate();\n            return degrees(Rotate ? Rotate.asNumber() : 0);\n        };\n        /**\n         * Resize this page by increasing or decreasing its width and height. For\n         * example:\n         * ```js\n         * page.setSize(250, 500)\n         * page.setSize(page.getWidth() + 50, page.getHeight() + 100)\n         * page.setSize(page.getWidth() - 50, page.getHeight() - 100)\n         * ```\n         *\n         * Note that the PDF specification does not allow for pages to have explicit\n         * widths and heights. Instead it defines the \"size\" of a page in terms of\n         * five rectangles: the MediaBox, CropBox, BleedBox, TrimBox, and ArtBox. As a\n         * result, this method cannot directly change the width and height of a page.\n         * Instead, it works by adjusting these five boxes.\n         *\n         * This method performs the following steps:\n         *   1. Set width & height of MediaBox.\n         *   2. Set width & height of CropBox, if it has same dimensions as MediaBox.\n         *   3. Set width & height of BleedBox, if it has same dimensions as MediaBox.\n         *   4. Set width & height of TrimBox, if it has same dimensions as MediaBox.\n         *   5. Set width & height of ArtBox, if it has same dimensions as MediaBox.\n         *\n         * This approach works well for most PDF documents as all PDF pages must\n         * have a MediaBox, but relatively few have a CropBox, BleedBox, TrimBox, or\n         * ArtBox. And when they do have these additional boxes, they often have the\n         * same dimensions as the MediaBox. However, if you find this method does not\n         * work for your document, consider setting the boxes directly:\n         *   * [[PDFPage.setMediaBox]]\n         *   * [[PDFPage.setCropBox]]\n         *   * [[PDFPage.setBleedBox]]\n         *   * [[PDFPage.setTrimBox]]\n         *   * [[PDFPage.setArtBox]]\n         *\n         * @param width The new width of the page.\n         * @param height The new height of the page.\n         */\n        PDFPage.prototype.setSize = function (width, height) {\n            assertIs(width, 'width', ['number']);\n            assertIs(height, 'height', ['number']);\n            var mediaBox = this.getMediaBox();\n            this.setMediaBox(mediaBox.x, mediaBox.y, width, height);\n            var cropBox = this.getCropBox();\n            var bleedBox = this.getBleedBox();\n            var trimBox = this.getTrimBox();\n            var artBox = this.getArtBox();\n            var hasCropBox = this.node.CropBox();\n            var hasBleedBox = this.node.BleedBox();\n            var hasTrimBox = this.node.TrimBox();\n            var hasArtBox = this.node.ArtBox();\n            if (hasCropBox && rectanglesAreEqual(cropBox, mediaBox)) {\n                this.setCropBox(mediaBox.x, mediaBox.y, width, height);\n            }\n            if (hasBleedBox && rectanglesAreEqual(bleedBox, mediaBox)) {\n                this.setBleedBox(mediaBox.x, mediaBox.y, width, height);\n            }\n            if (hasTrimBox && rectanglesAreEqual(trimBox, mediaBox)) {\n                this.setTrimBox(mediaBox.x, mediaBox.y, width, height);\n            }\n            if (hasArtBox && rectanglesAreEqual(artBox, mediaBox)) {\n                this.setArtBox(mediaBox.x, mediaBox.y, width, height);\n            }\n        };\n        /**\n         * Resize this page by increasing or decreasing its width. For example:\n         * ```js\n         * page.setWidth(250)\n         * page.setWidth(page.getWidth() + 50)\n         * page.setWidth(page.getWidth() - 50)\n         * ```\n         *\n         * This method uses [[PDFPage.setSize]] to set the page's width.\n         *\n         * @param width The new width of the page.\n         */\n        PDFPage.prototype.setWidth = function (width) {\n            assertIs(width, 'width', ['number']);\n            this.setSize(width, this.getSize().height);\n        };\n        /**\n         * Resize this page by increasing or decreasing its height. For example:\n         * ```js\n         * page.setHeight(500)\n         * page.setHeight(page.getWidth() + 100)\n         * page.setHeight(page.getWidth() - 100)\n         * ```\n         *\n         * This method uses [[PDFPage.setSize]] to set the page's height.\n         *\n         * @param height The new height of the page.\n         */\n        PDFPage.prototype.setHeight = function (height) {\n            assertIs(height, 'height', ['number']);\n            this.setSize(this.getSize().width, height);\n        };\n        /**\n         * Set the MediaBox of this page. For example:\n         * ```js\n         * const mediaBox = page.getMediaBox()\n         *\n         * page.setMediaBox(0, 0, 250, 500)\n         * page.setMediaBox(mediaBox.x, mediaBox.y, 50, 100)\n         * page.setMediaBox(15, 5, mediaBox.width - 50, mediaBox.height - 100)\n         * ```\n         *\n         * See [[PDFPage.getMediaBox]] for details about what the MediaBox represents.\n         *\n         * @param x The x coordinate of the lower left corner of the new MediaBox.\n         * @param y The y coordinate of the lower left corner of the new MediaBox.\n         * @param width The width of the new MediaBox.\n         * @param height The height of the new MediaBox.\n         */\n        PDFPage.prototype.setMediaBox = function (x, y, width, height) {\n            assertIs(x, 'x', ['number']);\n            assertIs(y, 'y', ['number']);\n            assertIs(width, 'width', ['number']);\n            assertIs(height, 'height', ['number']);\n            var mediaBox = this.doc.context.obj([x, y, x + width, y + height]);\n            this.node.set(PDFName.MediaBox, mediaBox);\n        };\n        /**\n         * Set the CropBox of this page. For example:\n         * ```js\n         * const cropBox = page.getCropBox()\n         *\n         * page.setCropBox(0, 0, 250, 500)\n         * page.setCropBox(cropBox.x, cropBox.y, 50, 100)\n         * page.setCropBox(15, 5, cropBox.width - 50, cropBox.height - 100)\n         * ```\n         *\n         * See [[PDFPage.getCropBox]] for details about what the CropBox represents.\n         *\n         * @param x The x coordinate of the lower left corner of the new CropBox.\n         * @param y The y coordinate of the lower left corner of the new CropBox.\n         * @param width The width of the new CropBox.\n         * @param height The height of the new CropBox.\n         */\n        PDFPage.prototype.setCropBox = function (x, y, width, height) {\n            assertIs(x, 'x', ['number']);\n            assertIs(y, 'y', ['number']);\n            assertIs(width, 'width', ['number']);\n            assertIs(height, 'height', ['number']);\n            var cropBox = this.doc.context.obj([x, y, x + width, y + height]);\n            this.node.set(PDFName.CropBox, cropBox);\n        };\n        /**\n         * Set the BleedBox of this page. For example:\n         * ```js\n         * const bleedBox = page.getBleedBox()\n         *\n         * page.setBleedBox(0, 0, 250, 500)\n         * page.setBleedBox(bleedBox.x, bleedBox.y, 50, 100)\n         * page.setBleedBox(15, 5, bleedBox.width - 50, bleedBox.height - 100)\n         * ```\n         *\n         * See [[PDFPage.getBleedBox]] for details about what the BleedBox represents.\n         *\n         * @param x The x coordinate of the lower left corner of the new BleedBox.\n         * @param y The y coordinate of the lower left corner of the new BleedBox.\n         * @param width The width of the new BleedBox.\n         * @param height The height of the new BleedBox.\n         */\n        PDFPage.prototype.setBleedBox = function (x, y, width, height) {\n            assertIs(x, 'x', ['number']);\n            assertIs(y, 'y', ['number']);\n            assertIs(width, 'width', ['number']);\n            assertIs(height, 'height', ['number']);\n            var bleedBox = this.doc.context.obj([x, y, x + width, y + height]);\n            this.node.set(PDFName.BleedBox, bleedBox);\n        };\n        /**\n         * Set the TrimBox of this page. For example:\n         * ```js\n         * const trimBox = page.getTrimBox()\n         *\n         * page.setTrimBox(0, 0, 250, 500)\n         * page.setTrimBox(trimBox.x, trimBox.y, 50, 100)\n         * page.setTrimBox(15, 5, trimBox.width - 50, trimBox.height - 100)\n         * ```\n         *\n         * See [[PDFPage.getTrimBox]] for details about what the TrimBox represents.\n         *\n         * @param x The x coordinate of the lower left corner of the new TrimBox.\n         * @param y The y coordinate of the lower left corner of the new TrimBox.\n         * @param width The width of the new TrimBox.\n         * @param height The height of the new TrimBox.\n         */\n        PDFPage.prototype.setTrimBox = function (x, y, width, height) {\n            assertIs(x, 'x', ['number']);\n            assertIs(y, 'y', ['number']);\n            assertIs(width, 'width', ['number']);\n            assertIs(height, 'height', ['number']);\n            var trimBox = this.doc.context.obj([x, y, x + width, y + height]);\n            this.node.set(PDFName.TrimBox, trimBox);\n        };\n        /**\n         * Set the ArtBox of this page. For example:\n         * ```js\n         * const artBox = page.getArtBox()\n         *\n         * page.setArtBox(0, 0, 250, 500)\n         * page.setArtBox(artBox.x, artBox.y, 50, 100)\n         * page.setArtBox(15, 5, artBox.width - 50, artBox.height - 100)\n         * ```\n         *\n         * See [[PDFPage.getArtBox]] for details about what the ArtBox represents.\n         *\n         * @param x The x coordinate of the lower left corner of the new ArtBox.\n         * @param y The y coordinate of the lower left corner of the new ArtBox.\n         * @param width The width of the new ArtBox.\n         * @param height The height of the new ArtBox.\n         */\n        PDFPage.prototype.setArtBox = function (x, y, width, height) {\n            assertIs(x, 'x', ['number']);\n            assertIs(y, 'y', ['number']);\n            assertIs(width, 'width', ['number']);\n            assertIs(height, 'height', ['number']);\n            var artBox = this.doc.context.obj([x, y, x + width, y + height]);\n            this.node.set(PDFName.ArtBox, artBox);\n        };\n        /**\n         * Get this page's width and height. For example:\n         * ```js\n         * const { width, height } = page.getSize()\n         * ```\n         *\n         * This method uses [[PDFPage.getMediaBox]] to obtain the page's\n         * width and height.\n         *\n         * @returns The width and height of the page.\n         */\n        PDFPage.prototype.getSize = function () {\n            var _a = this.getMediaBox(), width = _a.width, height = _a.height;\n            return { width: width, height: height };\n        };\n        /**\n         * Get this page's width. For example:\n         * ```js\n         * const width = page.getWidth()\n         * ```\n         *\n         * This method uses [[PDFPage.getSize]] to obtain the page's size.\n         *\n         * @returns The width of the page.\n         */\n        PDFPage.prototype.getWidth = function () {\n            return this.getSize().width;\n        };\n        /**\n         * Get this page's height. For example:\n         * ```js\n         * const height = page.getHeight()\n         * ```\n         *\n         * This method uses [[PDFPage.getSize]] to obtain the page's size.\n         *\n         * @returns The height of the page.\n         */\n        PDFPage.prototype.getHeight = function () {\n            return this.getSize().height;\n        };\n        /**\n         * Get the rectangle defining this page's MediaBox. For example:\n         * ```js\n         * const { x, y, width, height } = page.getMediaBox()\n         * ```\n         *\n         * The MediaBox of a page defines the boundaries of the physical medium on\n         * which the page is to be displayed/printed. It may include extended area\n         * surrounding the page content for bleed marks, printing marks, etc...\n         * It may also include areas close to the edges of the medium that cannot be\n         * marked because of physical limitations of the output device. Content\n         * falling outside this boundary may safely be discarded without affecting\n         * the meaning of the PDF file.\n         *\n         * @returns An object defining the lower left corner of the MediaBox and its\n         *          width & height.\n         */\n        PDFPage.prototype.getMediaBox = function () {\n            var mediaBox = this.node.MediaBox();\n            return mediaBox.asRectangle();\n        };\n        /**\n         * Get the rectangle defining this page's CropBox. For example:\n         * ```js\n         * const { x, y, width, height } = page.getCropBox()\n         * ```\n         *\n         * The CropBox of a page defines the region to which the contents of the page\n         * shall be clipped when displayed or printed. Unlike the other boxes, the\n         * CropBox does not necessarily represent the physical page geometry. It\n         * merely imposes clipping on the page contents.\n         *\n         * The CropBox's default value is the page's MediaBox.\n         *\n         * @returns An object defining the lower left corner of the CropBox and its\n         *          width & height.\n         */\n        PDFPage.prototype.getCropBox = function () {\n            var _a;\n            var cropBox = this.node.CropBox();\n            return (_a = cropBox === null || cropBox === void 0 ? void 0 : cropBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getMediaBox();\n        };\n        /**\n         * Get the rectangle defining this page's BleedBox. For example:\n         * ```js\n         * const { x, y, width, height } = page.getBleedBox()\n         * ```\n         *\n         * The BleedBox of a page defines the region to which the contents of the\n         * page shall be clipped when output in a production environment. This may\n         * include any extra bleed area needed to accommodate the physical\n         * limitations of cutting, folding, and trimming equipment. The actual\n         * printed page may include printing marks that fall outside the BleedBox.\n         *\n         * The BleedBox's default value is the page's CropBox.\n         *\n         * @returns An object defining the lower left corner of the BleedBox and its\n         *          width & height.\n         */\n        PDFPage.prototype.getBleedBox = function () {\n            var _a;\n            var bleedBox = this.node.BleedBox();\n            return (_a = bleedBox === null || bleedBox === void 0 ? void 0 : bleedBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n        };\n        /**\n         * Get the rectangle defining this page's TrimBox. For example:\n         * ```js\n         * const { x, y, width, height } = page.getTrimBox()\n         * ```\n         *\n         * The TrimBox of a page defines the intended dimensions of the finished\n         * page after trimming. It may be smaller than the MediaBox to allow for\n         * production-related content, such as printing instructions, cut marks, or\n         * color bars.\n         *\n         * The TrimBox's default value is the page's CropBox.\n         *\n         * @returns An object defining the lower left corner of the TrimBox and its\n         *          width & height.\n         */\n        PDFPage.prototype.getTrimBox = function () {\n            var _a;\n            var trimBox = this.node.TrimBox();\n            return (_a = trimBox === null || trimBox === void 0 ? void 0 : trimBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n        };\n        /**\n         * Get the rectangle defining this page's ArtBox. For example:\n         * ```js\n         * const { x, y, width, height } = page.getArtBox()\n         * ```\n         *\n         * The ArtBox of a page defines the extent of the page's meaningful content\n         * (including potential white space).\n         *\n         * The ArtBox's default value is the page's CropBox.\n         *\n         * @returns An object defining the lower left corner of the ArtBox and its\n         *          width & height.\n         */\n        PDFPage.prototype.getArtBox = function () {\n            var _a;\n            var artBox = this.node.ArtBox();\n            return (_a = artBox === null || artBox === void 0 ? void 0 : artBox.asRectangle()) !== null && _a !== void 0 ? _a : this.getCropBox();\n        };\n        /**\n         * Translate this page's content to a new location on the page. This operation\n         * is often useful after resizing the page with [[setSize]]. For example:\n         * ```js\n         * // Add 50 units of whitespace to the top and right of the page\n         * page.setSize(page.getWidth() + 50, page.getHeight() + 50)\n         *\n         * // Move the page's content from the lower-left corner of the page\n         * // to the top-right corner.\n         * page.translateContent(50, 50)\n         *\n         * // Now there are 50 units of whitespace to the left and bottom of the page\n         * ```\n         * See also: [[resetPosition]]\n         * @param x The new position on the x-axis for this page's content.\n         * @param y The new position on the y-axis for this page's content.\n         */\n        PDFPage.prototype.translateContent = function (x, y) {\n            assertIs(x, 'x', ['number']);\n            assertIs(y, 'y', ['number']);\n            this.node.normalize();\n            this.getContentStream();\n            var start = this.createContentStream(pushGraphicsState(), translate(x, y));\n            var startRef = this.doc.context.register(start);\n            var end = this.createContentStream(popGraphicsState());\n            var endRef = this.doc.context.register(end);\n            this.node.wrapContentStreams(startRef, endRef);\n        };\n        /**\n         * Scale the size, content, and annotations of a page.\n         *\n         * For example:\n         * ```js\n         * page.scale(0.5, 0.5);\n         * ```\n         *\n         * @param x The factor by which the width for the page should be scaled\n         *          (e.g. `0.5` is 50%).\n         * @param y The factor by which the height for the page should be scaled\n         *          (e.g. `2.0` is 200%).\n         */\n        PDFPage.prototype.scale = function (x, y) {\n            assertIs(x, 'x', ['number']);\n            assertIs(y, 'y', ['number']);\n            this.setSize(this.getWidth() * x, this.getHeight() * y);\n            this.scaleContent(x, y);\n            this.scaleAnnotations(x, y);\n        };\n        /**\n         * Scale the content of a page. This is useful after resizing an existing\n         * page. This scales only the content, not the annotations.\n         *\n         * For example:\n         * ```js\n         * // Bisect the size of the page\n         * page.setSize(page.getWidth() / 2, page.getHeight() / 2);\n         *\n         * // Scale the content of the page down by 50% in x and y\n         * page.scaleContent(0.5, 0.5);\n         * ```\n         * See also: [[scaleAnnotations]]\n         * @param x The factor by which the x-axis for the content should be scaled\n         *          (e.g. `0.5` is 50%).\n         * @param y The factor by which the y-axis for the content should be scaled\n         *          (e.g. `2.0` is 200%).\n         */\n        PDFPage.prototype.scaleContent = function (x, y) {\n            assertIs(x, 'x', ['number']);\n            assertIs(y, 'y', ['number']);\n            this.node.normalize();\n            this.getContentStream();\n            var start = this.createContentStream(pushGraphicsState(), scale(x, y));\n            var startRef = this.doc.context.register(start);\n            var end = this.createContentStream(popGraphicsState());\n            var endRef = this.doc.context.register(end);\n            this.node.wrapContentStreams(startRef, endRef);\n        };\n        /**\n         * Scale the annotations of a page. This is useful if you want to scale a\n         * page with comments or other annotations.\n         * ```js\n         * // Scale the content of the page down by 50% in x and y\n         * page.scaleContent(0.5, 0.5);\n         *\n         * // Scale the content of the page down by 50% in x and y\n         * page.scaleAnnotations(0.5, 0.5);\n         * ```\n         * See also: [[scaleContent]]\n         * @param x The factor by which the x-axis for the annotations should be\n         *          scaled (e.g. `0.5` is 50%).\n         * @param y The factor by which the y-axis for the annotations should be\n         *          scaled (e.g. `2.0` is 200%).\n         */\n        PDFPage.prototype.scaleAnnotations = function (x, y) {\n            assertIs(x, 'x', ['number']);\n            assertIs(y, 'y', ['number']);\n            var annots = this.node.Annots();\n            if (!annots)\n                return;\n            for (var idx = 0; idx < annots.size(); idx++) {\n                var annot = annots.lookup(idx);\n                if (annot instanceof PDFDict)\n                    this.scaleAnnot(annot, x, y);\n            }\n        };\n        /**\n         * Reset the x and y coordinates of this page to `(0, 0)`. This operation is\n         * often useful after calling [[translateContent]]. For example:\n         * ```js\n         * // Shift the page's contents up and to the right by 50 units\n         * page.translateContent(50, 50)\n         *\n         * // This text will shifted - it will be drawn at (50, 50)\n         * page.drawText('I am shifted')\n         *\n         * // Move back to (0, 0)\n         * page.resetPosition()\n         *\n         * // This text will not be shifted - it will be drawn at (0, 0)\n         * page.drawText('I am not shifted')\n         * ```\n         */\n        PDFPage.prototype.resetPosition = function () {\n            this.getContentStream(false);\n            this.x = 0;\n            this.y = 0;\n        };\n        /**\n         * Choose a default font for this page. The default font will be used whenever\n         * text is drawn on this page and no font is specified. For example:\n         * ```js\n         * import { StandardFonts } from 'pdf-lib'\n         *\n         * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\n         * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const courierFont = await pdfDoc.embedFont(StandardFonts.Courier)\n         *\n         * const page = pdfDoc.addPage()\n         *\n         * page.setFont(helveticaFont)\n         * page.drawText('I will be drawn in Helvetica')\n         *\n         * page.setFont(timesRomanFont)\n         * page.drawText('I will be drawn in Courier', { font: courierFont })\n         * ```\n         * @param font The default font to be used when drawing text on this page.\n         */\n        PDFPage.prototype.setFont = function (font) {\n            // TODO: Reuse image Font name if we've already added this image to Resources.Fonts\n            assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n            this.font = font;\n            this.fontKey = this.node.newFontDictionary(this.font.name, this.font.ref);\n        };\n        /**\n         * Choose a default font size for this page. The default font size will be\n         * used whenever text is drawn on this page and no font size is specified.\n         * For example:\n         * ```js\n         * page.setFontSize(12)\n         * page.drawText('I will be drawn in size 12')\n         *\n         * page.setFontSize(36)\n         * page.drawText('I will be drawn in size 24', { fontSize: 24 })\n         * ```\n         * @param fontSize The default font size to be used when drawing text on this\n         *                 page.\n         */\n        PDFPage.prototype.setFontSize = function (fontSize) {\n            assertIs(fontSize, 'fontSize', ['number']);\n            this.fontSize = fontSize;\n        };\n        /**\n         * Choose a default font color for this page. The default font color will be\n         * used whenever text is drawn on this page and no font color is specified.\n         * For example:\n         * ```js\n         * import { rgb, cmyk, grayscale } from 'pdf-lib'\n         *\n         * page.setFontColor(rgb(0.97, 0.02, 0.97))\n         * page.drawText('I will be drawn in pink')\n         *\n         * page.setFontColor(cmyk(0.4, 0.7, 0.39, 0.15))\n         * page.drawText('I will be drawn in gray', { color: grayscale(0.5) })\n         * ```\n         * @param fontColor The default font color to be used when drawing text on\n         *                  this page.\n         */\n        PDFPage.prototype.setFontColor = function (fontColor) {\n            assertIs(fontColor, 'fontColor', [[Object, 'Color']]);\n            this.fontColor = fontColor;\n        };\n        /**\n         * Choose a default line height for this page. The default line height will be\n         * used whenever text is drawn on this page and no line height is specified.\n         * For example:\n         * ```js\n         * page.setLineHeight(12);\n         * page.drawText('These lines will be vertically \\n separated by 12 units')\n         *\n         * page.setLineHeight(36);\n         * page.drawText('These lines will be vertically \\n separated by 24 units', {\n         *   lineHeight: 24\n         * })\n         * ```\n         * @param lineHeight The default line height to be used when drawing text on\n         *                   this page.\n         */\n        PDFPage.prototype.setLineHeight = function (lineHeight) {\n            assertIs(lineHeight, 'lineHeight', ['number']);\n            this.lineHeight = lineHeight;\n        };\n        /**\n         * Get the default position of this page. For example:\n         * ```js\n         * const { x, y } = page.getPosition()\n         * ```\n         * @returns The default position of the page.\n         */\n        PDFPage.prototype.getPosition = function () {\n            return { x: this.x, y: this.y };\n        };\n        /**\n         * Get the default x coordinate of this page. For example:\n         * ```js\n         * const x = page.getX()\n         * ```\n         * @returns The default x coordinate of the page.\n         */\n        PDFPage.prototype.getX = function () {\n            return this.x;\n        };\n        /**\n         * Get the default y coordinate of this page. For example:\n         * ```js\n         * const y = page.getY()\n         * ```\n         * @returns The default y coordinate of the page.\n         */\n        PDFPage.prototype.getY = function () {\n            return this.y;\n        };\n        /**\n         * Change the default position of this page. For example:\n         * ```js\n         * page.moveTo(0, 0)\n         * page.drawText('I will be drawn at the origin')\n         *\n         * page.moveTo(0, 25)\n         * page.drawText('I will be drawn 25 units up')\n         *\n         * page.moveTo(25, 25)\n         * page.drawText('I will be drawn 25 units up and 25 units to the right')\n         * ```\n         * @param x The new default position on the x-axis for this page.\n         * @param y The new default position on the y-axis for this page.\n         */\n        PDFPage.prototype.moveTo = function (x, y) {\n            assertIs(x, 'x', ['number']);\n            assertIs(y, 'y', ['number']);\n            this.x = x;\n            this.y = y;\n        };\n        /**\n         * Change the default position of this page to be further down the y-axis.\n         * For example:\n         * ```js\n         * page.moveTo(50, 50)\n         * page.drawText('I will be drawn at (50, 50)')\n         *\n         * page.moveDown(10)\n         * page.drawText('I will be drawn at (50, 40)')\n         * ```\n         * @param yDecrease The amount by which the page's default position along the\n         *                  y-axis should be decreased.\n         */\n        PDFPage.prototype.moveDown = function (yDecrease) {\n            assertIs(yDecrease, 'yDecrease', ['number']);\n            this.y -= yDecrease;\n        };\n        /**\n         * Change the default position of this page to be further up the y-axis.\n         * For example:\n         * ```js\n         * page.moveTo(50, 50)\n         * page.drawText('I will be drawn at (50, 50)')\n         *\n         * page.moveUp(10)\n         * page.drawText('I will be drawn at (50, 60)')\n         * ```\n         * @param yIncrease The amount by which the page's default position along the\n         *                  y-axis should be increased.\n         */\n        PDFPage.prototype.moveUp = function (yIncrease) {\n            assertIs(yIncrease, 'yIncrease', ['number']);\n            this.y += yIncrease;\n        };\n        /**\n         * Change the default position of this page to be further left on the x-axis.\n         * For example:\n         * ```js\n         * page.moveTo(50, 50)\n         * page.drawText('I will be drawn at (50, 50)')\n         *\n         * page.moveLeft(10)\n         * page.drawText('I will be drawn at (40, 50)')\n         * ```\n         * @param xDecrease The amount by which the page's default position along the\n         *                  x-axis should be decreased.\n         */\n        PDFPage.prototype.moveLeft = function (xDecrease) {\n            assertIs(xDecrease, 'xDecrease', ['number']);\n            this.x -= xDecrease;\n        };\n        /**\n         * Change the default position of this page to be further right on the y-axis.\n         * For example:\n         * ```js\n         * page.moveTo(50, 50)\n         * page.drawText('I will be drawn at (50, 50)')\n         *\n         * page.moveRight(10)\n         * page.drawText('I will be drawn at (60, 50)')\n         * ```\n         * @param xIncrease The amount by which the page's default position along the\n         *                  x-axis should be increased.\n         */\n        PDFPage.prototype.moveRight = function (xIncrease) {\n            assertIs(xIncrease, 'xIncrease', ['number']);\n            this.x += xIncrease;\n        };\n        /**\n         * Push one or more operators to the end of this page's current content\n         * stream. For example:\n         * ```js\n         * import {\n         *   pushGraphicsState,\n         *   moveTo,\n         *   lineTo,\n         *   closePath,\n         *   setFillingColor,\n         *   rgb,\n         *   fill,\n         *   popGraphicsState,\n         * } from 'pdf-lib'\n         *\n         * // Draw a green triangle in the lower-left corner of the page\n         * page.pushOperators(\n         *   pushGraphicsState(),\n         *   moveTo(0, 0),\n         *   lineTo(100, 0),\n         *   lineTo(50, 100),\n         *   closePath(),\n         *   setFillingColor(rgb(0.0, 1.0, 0.0)),\n         *   fill(),\n         *   popGraphicsState(),\n         * )\n         * ```\n         * @param operator The operators to be pushed.\n         */\n        PDFPage.prototype.pushOperators = function () {\n            var operator = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                operator[_i] = arguments[_i];\n            }\n            assertEachIs(operator, 'operator', [[PDFOperator, 'PDFOperator']]);\n            var contentStream = this.getContentStream();\n            contentStream.push.apply(contentStream, operator);\n        };\n        /**\n         * Draw one or more lines of text on this page. For example:\n         * ```js\n         * import { StandardFonts, rgb } from 'pdf-lib'\n         *\n         * const helveticaFont = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman)\n         *\n         * const page = pdfDoc.addPage()\n         *\n         * page.setFont(helveticaFont)\n         *\n         * page.moveTo(5, 200)\n         * page.drawText('The Life of an Egg', { size: 36 })\n         *\n         * page.moveDown(36)\n         * page.drawText('An Epic Tale of Woe', { size: 30 })\n         *\n         * page.drawText(\n         *   `Humpty Dumpty sat on a wall \\n` +\n         *   `Humpty Dumpty had a great fall; \\n` +\n         *   `All the king's horses and all the king's men \\n` +\n         *   `Couldn't put Humpty together again. \\n`,\n         *   {\n         *     x: 25,\n         *     y: 100,\n         *     font: timesRomanFont,\n         *     size: 24,\n         *     color: rgb(1, 0, 0),\n         *     lineHeight: 24,\n         *     opacity: 0.75,\n         *   },\n         * )\n         * ```\n         * @param text The text to be drawn.\n         * @param options The options to be used when drawing the text.\n         */\n        PDFPage.prototype.drawText = function (text, options) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (options === void 0) { options = {}; }\n            assertIs(text, 'text', ['string']);\n            assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n            assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n            assertOrUndefined(options.font, 'options.font', [[PDFFont, 'PDFFont']]);\n            assertOrUndefined(options.size, 'options.size', ['number']);\n            assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n            assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n            assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n            assertOrUndefined(options.x, 'options.x', ['number']);\n            assertOrUndefined(options.y, 'options.y', ['number']);\n            assertOrUndefined(options.lineHeight, 'options.lineHeight', ['number']);\n            assertOrUndefined(options.maxWidth, 'options.maxWidth', ['number']);\n            assertOrUndefined(options.wordBreaks, 'options.wordBreaks', [Array]);\n            assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', exports.BlendMode);\n            var _h = this.setOrEmbedFont(options.font), oldFont = _h.oldFont, newFont = _h.newFont, newFontKey = _h.newFontKey;\n            var fontSize = options.size || this.fontSize;\n            var wordBreaks = options.wordBreaks || this.doc.defaultWordBreaks;\n            var textWidth = function (t) { return newFont.widthOfTextAtSize(t, fontSize); };\n            var lines = options.maxWidth === undefined\n                ? lineSplit(cleanText(text))\n                : breakTextIntoLines(text, wordBreaks, options.maxWidth, textWidth);\n            var encodedLines = new Array(lines.length);\n            for (var idx = 0, len = lines.length; idx < len; idx++) {\n                encodedLines[idx] = newFont.encodeText(lines[idx]);\n            }\n            var graphicsStateKey = this.maybeEmbedGraphicsState({\n                opacity: options.opacity,\n                blendMode: options.blendMode,\n            });\n            var contentStream = this.getContentStream();\n            contentStream.push.apply(contentStream, drawLinesOfText(encodedLines, {\n                color: (_a = options.color) !== null && _a !== void 0 ? _a : this.fontColor,\n                font: newFontKey,\n                size: fontSize,\n                rotate: (_b = options.rotate) !== null && _b !== void 0 ? _b : degrees(0),\n                xSkew: (_c = options.xSkew) !== null && _c !== void 0 ? _c : degrees(0),\n                ySkew: (_d = options.ySkew) !== null && _d !== void 0 ? _d : degrees(0),\n                x: (_e = options.x) !== null && _e !== void 0 ? _e : this.x,\n                y: (_f = options.y) !== null && _f !== void 0 ? _f : this.y,\n                lineHeight: (_g = options.lineHeight) !== null && _g !== void 0 ? _g : this.lineHeight,\n                graphicsState: graphicsStateKey,\n            }));\n            if (options.font) {\n                if (oldFont)\n                    this.setFont(oldFont);\n                else\n                    this.resetFont();\n            }\n        };\n        /**\n         * Draw an image on this page. For example:\n         * ```js\n         * import { degrees } from 'pdf-lib'\n         *\n         * const jpgUrl = 'https://pdf-lib.js.org/assets/cat_riding_unicorn.jpg'\n         * const jpgImageBytes = await fetch(jpgUrl).then((res) => res.arrayBuffer())\n         *\n         * const jpgImage = await pdfDoc.embedJpg(jpgImageBytes)\n         * const jpgDims = jpgImage.scale(0.5)\n         *\n         * const page = pdfDoc.addPage()\n         *\n         * page.drawImage(jpgImage, {\n         *   x: 25,\n         *   y: 25,\n         *   width: jpgDims.width,\n         *   height: jpgDims.height,\n         *   rotate: degrees(30),\n         *   opacity: 0.75,\n         * })\n         * ```\n         * @param image The image to be drawn.\n         * @param options The options to be used when drawing the image.\n         */\n        PDFPage.prototype.drawImage = function (image, options) {\n            var _a, _b, _c, _d, _e, _f, _g;\n            if (options === void 0) { options = {}; }\n            // TODO: Reuse image XObject name if we've already added this image to Resources.XObjects\n            assertIs(image, 'image', [[PDFImage, 'PDFImage']]);\n            assertOrUndefined(options.x, 'options.x', ['number']);\n            assertOrUndefined(options.y, 'options.y', ['number']);\n            assertOrUndefined(options.width, 'options.width', ['number']);\n            assertOrUndefined(options.height, 'options.height', ['number']);\n            assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n            assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n            assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n            assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n            assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', exports.BlendMode);\n            var xObjectKey = this.node.newXObject('Image', image.ref);\n            var graphicsStateKey = this.maybeEmbedGraphicsState({\n                opacity: options.opacity,\n                blendMode: options.blendMode,\n            });\n            var contentStream = this.getContentStream();\n            contentStream.push.apply(contentStream, drawImage(xObjectKey, {\n                x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n                y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n                width: (_c = options.width) !== null && _c !== void 0 ? _c : image.size().width,\n                height: (_d = options.height) !== null && _d !== void 0 ? _d : image.size().height,\n                rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : degrees(0),\n                xSkew: (_f = options.xSkew) !== null && _f !== void 0 ? _f : degrees(0),\n                ySkew: (_g = options.ySkew) !== null && _g !== void 0 ? _g : degrees(0),\n                graphicsState: graphicsStateKey,\n            }));\n        };\n        /**\n         * Draw an embedded PDF page on this page. For example:\n         * ```js\n         * import { degrees } from 'pdf-lib'\n         *\n         * const pdfDoc = await PDFDocument.create()\n         * const page = pdfDoc.addPage()\n         *\n         * const sourcePdfUrl = 'https://pdf-lib.js.org/assets/with_large_page_count.pdf'\n         * const sourcePdf = await fetch(sourcePdfUrl).then((res) => res.arrayBuffer())\n         *\n         * // Embed page 74 from the PDF\n         * const [embeddedPage] = await pdfDoc.embedPdf(sourcePdf, 73)\n         *\n         * page.drawPage(embeddedPage, {\n         *   x: 250,\n         *   y: 200,\n         *   xScale: 0.5,\n         *   yScale: 0.5,\n         *   rotate: degrees(30),\n         *   opacity: 0.75,\n         * })\n         * ```\n         *\n         * The `options` argument accepts both `width`/`height` and `xScale`/`yScale`\n         * as options. Since each of these options defines the size of the drawn page,\n         * if both options are given, `width` and `height` take precedence and the\n         * corresponding scale variants are ignored.\n         *\n         * @param embeddedPage The embedded page to be drawn.\n         * @param options The options to be used when drawing the embedded page.\n         */\n        PDFPage.prototype.drawPage = function (embeddedPage, options) {\n            var _a, _b, _c, _d, _e;\n            if (options === void 0) { options = {}; }\n            // TODO: Reuse embeddedPage XObject name if we've already added this embeddedPage to Resources.XObjects\n            assertIs(embeddedPage, 'embeddedPage', [\n                [PDFEmbeddedPage, 'PDFEmbeddedPage'],\n            ]);\n            assertOrUndefined(options.x, 'options.x', ['number']);\n            assertOrUndefined(options.y, 'options.y', ['number']);\n            assertOrUndefined(options.xScale, 'options.xScale', ['number']);\n            assertOrUndefined(options.yScale, 'options.yScale', ['number']);\n            assertOrUndefined(options.width, 'options.width', ['number']);\n            assertOrUndefined(options.height, 'options.height', ['number']);\n            assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n            assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n            assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n            assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n            assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', exports.BlendMode);\n            var xObjectKey = this.node.newXObject('EmbeddedPdfPage', embeddedPage.ref);\n            var graphicsStateKey = this.maybeEmbedGraphicsState({\n                opacity: options.opacity,\n                blendMode: options.blendMode,\n            });\n            // prettier-ignore\n            var xScale = (options.width !== undefined ? options.width / embeddedPage.width\n                : options.xScale !== undefined ? options.xScale\n                    : 1);\n            // prettier-ignore\n            var yScale = (options.height !== undefined ? options.height / embeddedPage.height\n                : options.yScale !== undefined ? options.yScale\n                    : 1);\n            var contentStream = this.getContentStream();\n            contentStream.push.apply(contentStream, drawPage(xObjectKey, {\n                x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n                y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n                xScale: xScale,\n                yScale: yScale,\n                rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0),\n                xSkew: (_d = options.xSkew) !== null && _d !== void 0 ? _d : degrees(0),\n                ySkew: (_e = options.ySkew) !== null && _e !== void 0 ? _e : degrees(0),\n                graphicsState: graphicsStateKey,\n            }));\n        };\n        /**\n         * Draw an SVG path on this page. For example:\n         * ```js\n         * import { rgb } from 'pdf-lib'\n         *\n         * const svgPath = 'M 0,20 L 100,160 Q 130,200 150,120 C 190,-40 200,200 300,150 L 400,90'\n         *\n         * // Draw path as black line\n         * page.drawSvgPath(svgPath, { x: 25, y: 75 })\n         *\n         * // Change border style and opacity\n         * page.drawSvgPath(svgPath, {\n         *   x: 25,\n         *   y: 275,\n         *   borderColor: rgb(0.5, 0.5, 0.5),\n         *   borderWidth: 2,\n         *   borderOpacity: 0.75,\n         * })\n         *\n         * // Set fill color and opacity\n         * page.drawSvgPath(svgPath, {\n         *   x: 25,\n         *   y: 475,\n         *   color: rgb(1.0, 0, 0),\n         *   opacity: 0.75,\n         * })\n         *\n         * // Draw 50% of original size\n         * page.drawSvgPath(svgPath, {\n         *   x: 25,\n         *   y: 675,\n         *   scale: 0.5,\n         * })\n         * ```\n         * @param path The SVG path to be drawn.\n         * @param options The options to be used when drawing the SVG path.\n         */\n        PDFPage.prototype.drawSvgPath = function (path, options) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n            if (options === void 0) { options = {}; }\n            assertIs(path, 'path', ['string']);\n            assertOrUndefined(options.x, 'options.x', ['number']);\n            assertOrUndefined(options.y, 'options.y', ['number']);\n            assertOrUndefined(options.scale, 'options.scale', ['number']);\n            assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n            assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n            assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n            assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n            assertOrUndefined(options.borderColor, 'options.borderColor', [\n                [Object, 'Color'],\n            ]);\n            assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [\n                Array,\n            ]);\n            assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', [\n                'number',\n            ]);\n            assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', exports.LineCapStyle);\n            assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n            assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', exports.BlendMode);\n            var graphicsStateKey = this.maybeEmbedGraphicsState({\n                opacity: options.opacity,\n                borderOpacity: options.borderOpacity,\n                blendMode: options.blendMode,\n            });\n            if (!('color' in options) && !('borderColor' in options)) {\n                options.borderColor = rgb(0, 0, 0);\n            }\n            var contentStream = this.getContentStream();\n            contentStream.push.apply(contentStream, drawSvgPath(path, {\n                x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n                y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n                scale: options.scale,\n                rotate: (_c = options.rotate) !== null && _c !== void 0 ? _c : degrees(0),\n                color: (_d = options.color) !== null && _d !== void 0 ? _d : undefined,\n                borderColor: (_e = options.borderColor) !== null && _e !== void 0 ? _e : undefined,\n                borderWidth: (_f = options.borderWidth) !== null && _f !== void 0 ? _f : 0,\n                borderDashArray: (_g = options.borderDashArray) !== null && _g !== void 0 ? _g : undefined,\n                borderDashPhase: (_h = options.borderDashPhase) !== null && _h !== void 0 ? _h : undefined,\n                borderLineCap: (_j = options.borderLineCap) !== null && _j !== void 0 ? _j : undefined,\n                graphicsState: graphicsStateKey,\n            }));\n        };\n        /**\n         * Draw a line on this page. For example:\n         * ```js\n         * import { rgb } from 'pdf-lib'\n         *\n         * page.drawLine({\n         *   start: { x: 25, y: 75 },\n         *   end: { x: 125, y: 175 },\n         *   thickness: 2,\n         *   color: rgb(0.75, 0.2, 0.2),\n         *   opacity: 0.75,\n         * })\n         * ```\n         * @param options The options to be used when drawing the line.\n         */\n        PDFPage.prototype.drawLine = function (options) {\n            var _a, _b, _c, _d, _e;\n            assertIs(options.start, 'options.start', [\n                [Object, '{ x: number, y: number }'],\n            ]);\n            assertIs(options.end, 'options.end', [\n                [Object, '{ x: number, y: number }'],\n            ]);\n            assertIs(options.start.x, 'options.start.x', ['number']);\n            assertIs(options.start.y, 'options.start.y', ['number']);\n            assertIs(options.end.x, 'options.end.x', ['number']);\n            assertIs(options.end.y, 'options.end.y', ['number']);\n            assertOrUndefined(options.thickness, 'options.thickness', ['number']);\n            assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n            assertOrUndefined(options.dashArray, 'options.dashArray', [Array]);\n            assertOrUndefined(options.dashPhase, 'options.dashPhase', ['number']);\n            assertIsOneOfOrUndefined(options.lineCap, 'options.lineCap', exports.LineCapStyle);\n            assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n            assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', exports.BlendMode);\n            var graphicsStateKey = this.maybeEmbedGraphicsState({\n                borderOpacity: options.opacity,\n                blendMode: options.blendMode,\n            });\n            if (!('color' in options)) {\n                options.color = rgb(0, 0, 0);\n            }\n            var contentStream = this.getContentStream();\n            contentStream.push.apply(contentStream, drawLine({\n                start: options.start,\n                end: options.end,\n                thickness: (_a = options.thickness) !== null && _a !== void 0 ? _a : 1,\n                color: (_b = options.color) !== null && _b !== void 0 ? _b : undefined,\n                dashArray: (_c = options.dashArray) !== null && _c !== void 0 ? _c : undefined,\n                dashPhase: (_d = options.dashPhase) !== null && _d !== void 0 ? _d : undefined,\n                lineCap: (_e = options.lineCap) !== null && _e !== void 0 ? _e : undefined,\n                graphicsState: graphicsStateKey,\n            }));\n        };\n        /**\n         * Draw a rectangle on this page. For example:\n         * ```js\n         * import { degrees, grayscale, rgb } from 'pdf-lib'\n         *\n         * page.drawRectangle({\n         *   x: 25,\n         *   y: 75,\n         *   width: 250,\n         *   height: 75,\n         *   rotate: degrees(-15),\n         *   borderWidth: 5,\n         *   borderColor: grayscale(0.5),\n         *   color: rgb(0.75, 0.2, 0.2),\n         *   opacity: 0.5,\n         *   borderOpacity: 0.75,\n         * })\n         * ```\n         * @param options The options to be used when drawing the rectangle.\n         */\n        PDFPage.prototype.drawRectangle = function (options) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n            if (options === void 0) { options = {}; }\n            assertOrUndefined(options.x, 'options.x', ['number']);\n            assertOrUndefined(options.y, 'options.y', ['number']);\n            assertOrUndefined(options.width, 'options.width', ['number']);\n            assertOrUndefined(options.height, 'options.height', ['number']);\n            assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n            assertOrUndefined(options.xSkew, 'options.xSkew', [[Object, 'Rotation']]);\n            assertOrUndefined(options.ySkew, 'options.ySkew', [[Object, 'Rotation']]);\n            assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n            assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n            assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n            assertOrUndefined(options.borderColor, 'options.borderColor', [\n                [Object, 'Color'],\n            ]);\n            assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [\n                Array,\n            ]);\n            assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', [\n                'number',\n            ]);\n            assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', exports.LineCapStyle);\n            assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n            assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', exports.BlendMode);\n            var graphicsStateKey = this.maybeEmbedGraphicsState({\n                opacity: options.opacity,\n                borderOpacity: options.borderOpacity,\n                blendMode: options.blendMode,\n            });\n            if (!('color' in options) && !('borderColor' in options)) {\n                options.color = rgb(0, 0, 0);\n            }\n            var contentStream = this.getContentStream();\n            contentStream.push.apply(contentStream, drawRectangle({\n                x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n                y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n                width: (_c = options.width) !== null && _c !== void 0 ? _c : 150,\n                height: (_d = options.height) !== null && _d !== void 0 ? _d : 100,\n                rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : degrees(0),\n                xSkew: (_f = options.xSkew) !== null && _f !== void 0 ? _f : degrees(0),\n                ySkew: (_g = options.ySkew) !== null && _g !== void 0 ? _g : degrees(0),\n                borderWidth: (_h = options.borderWidth) !== null && _h !== void 0 ? _h : 0,\n                color: (_j = options.color) !== null && _j !== void 0 ? _j : undefined,\n                borderColor: (_k = options.borderColor) !== null && _k !== void 0 ? _k : undefined,\n                borderDashArray: (_l = options.borderDashArray) !== null && _l !== void 0 ? _l : undefined,\n                borderDashPhase: (_m = options.borderDashPhase) !== null && _m !== void 0 ? _m : undefined,\n                graphicsState: graphicsStateKey,\n                borderLineCap: (_o = options.borderLineCap) !== null && _o !== void 0 ? _o : undefined,\n            }));\n        };\n        /**\n         * Draw a square on this page. For example:\n         * ```js\n         * import { degrees, grayscale, rgb } from 'pdf-lib'\n         *\n         * page.drawSquare({\n         *   x: 25,\n         *   y: 75,\n         *   size: 100,\n         *   rotate: degrees(-15),\n         *   borderWidth: 5,\n         *   borderColor: grayscale(0.5),\n         *   color: rgb(0.75, 0.2, 0.2),\n         *   opacity: 0.5,\n         *   borderOpacity: 0.75,\n         * })\n         * ```\n         * @param options The options to be used when drawing the square.\n         */\n        PDFPage.prototype.drawSquare = function (options) {\n            if (options === void 0) { options = {}; }\n            var size = options.size;\n            assertOrUndefined(size, 'size', ['number']);\n            this.drawRectangle(tslibExports.__assign(tslibExports.__assign({}, options), { width: size, height: size }));\n        };\n        /**\n         * Draw an ellipse on this page. For example:\n         * ```js\n         * import { grayscale, rgb } from 'pdf-lib'\n         *\n         * page.drawEllipse({\n         *   x: 200,\n         *   y: 75,\n         *   xScale: 100,\n         *   yScale: 50,\n         *   borderWidth: 5,\n         *   borderColor: grayscale(0.5),\n         *   color: rgb(0.75, 0.2, 0.2),\n         *   opacity: 0.5,\n         *   borderOpacity: 0.75,\n         * })\n         * ```\n         * @param options The options to be used when drawing the ellipse.\n         */\n        PDFPage.prototype.drawEllipse = function (options) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n            if (options === void 0) { options = {}; }\n            assertOrUndefined(options.x, 'options.x', ['number']);\n            assertOrUndefined(options.y, 'options.y', ['number']);\n            assertOrUndefined(options.xScale, 'options.xScale', ['number']);\n            assertOrUndefined(options.yScale, 'options.yScale', ['number']);\n            assertOrUndefined(options.rotate, 'options.rotate', [[Object, 'Rotation']]);\n            assertOrUndefined(options.color, 'options.color', [[Object, 'Color']]);\n            assertRangeOrUndefined(options.opacity, 'opacity.opacity', 0, 1);\n            assertOrUndefined(options.borderColor, 'options.borderColor', [\n                [Object, 'Color'],\n            ]);\n            assertRangeOrUndefined(options.borderOpacity, 'options.borderOpacity', 0, 1);\n            assertOrUndefined(options.borderWidth, 'options.borderWidth', ['number']);\n            assertOrUndefined(options.borderDashArray, 'options.borderDashArray', [\n                Array,\n            ]);\n            assertOrUndefined(options.borderDashPhase, 'options.borderDashPhase', [\n                'number',\n            ]);\n            assertIsOneOfOrUndefined(options.borderLineCap, 'options.borderLineCap', exports.LineCapStyle);\n            assertIsOneOfOrUndefined(options.blendMode, 'options.blendMode', exports.BlendMode);\n            var graphicsStateKey = this.maybeEmbedGraphicsState({\n                opacity: options.opacity,\n                borderOpacity: options.borderOpacity,\n                blendMode: options.blendMode,\n            });\n            if (!('color' in options) && !('borderColor' in options)) {\n                options.color = rgb(0, 0, 0);\n            }\n            var contentStream = this.getContentStream();\n            contentStream.push.apply(contentStream, drawEllipse({\n                x: (_a = options.x) !== null && _a !== void 0 ? _a : this.x,\n                y: (_b = options.y) !== null && _b !== void 0 ? _b : this.y,\n                xScale: (_c = options.xScale) !== null && _c !== void 0 ? _c : 100,\n                yScale: (_d = options.yScale) !== null && _d !== void 0 ? _d : 100,\n                rotate: (_e = options.rotate) !== null && _e !== void 0 ? _e : undefined,\n                color: (_f = options.color) !== null && _f !== void 0 ? _f : undefined,\n                borderColor: (_g = options.borderColor) !== null && _g !== void 0 ? _g : undefined,\n                borderWidth: (_h = options.borderWidth) !== null && _h !== void 0 ? _h : 0,\n                borderDashArray: (_j = options.borderDashArray) !== null && _j !== void 0 ? _j : undefined,\n                borderDashPhase: (_k = options.borderDashPhase) !== null && _k !== void 0 ? _k : undefined,\n                borderLineCap: (_l = options.borderLineCap) !== null && _l !== void 0 ? _l : undefined,\n                graphicsState: graphicsStateKey,\n            }));\n        };\n        /**\n         * Draw a circle on this page. For example:\n         * ```js\n         * import { grayscale, rgb } from 'pdf-lib'\n         *\n         * page.drawCircle({\n         *   x: 200,\n         *   y: 150,\n         *   size: 100,\n         *   borderWidth: 5,\n         *   borderColor: grayscale(0.5),\n         *   color: rgb(0.75, 0.2, 0.2),\n         *   opacity: 0.5,\n         *   borderOpacity: 0.75,\n         * })\n         * ```\n         * @param options The options to be used when drawing the ellipse.\n         */\n        PDFPage.prototype.drawCircle = function (options) {\n            if (options === void 0) { options = {}; }\n            var _a = options.size, size = _a === void 0 ? 100 : _a;\n            assertOrUndefined(size, 'size', ['number']);\n            this.drawEllipse(tslibExports.__assign(tslibExports.__assign({}, options), { xScale: size, yScale: size }));\n        };\n        PDFPage.prototype.setOrEmbedFont = function (font) {\n            var oldFont = this.font;\n            var oldFontKey = this.fontKey;\n            if (font)\n                this.setFont(font);\n            else\n                this.getFont();\n            var newFont = this.font;\n            var newFontKey = this.fontKey;\n            return { oldFont: oldFont, oldFontKey: oldFontKey, newFont: newFont, newFontKey: newFontKey };\n        };\n        PDFPage.prototype.getFont = function () {\n            if (!this.font || !this.fontKey) {\n                var font = this.doc.embedStandardFont(exports.StandardFonts.Helvetica);\n                this.setFont(font);\n            }\n            return [this.font, this.fontKey];\n        };\n        PDFPage.prototype.resetFont = function () {\n            this.font = undefined;\n            this.fontKey = undefined;\n        };\n        PDFPage.prototype.getContentStream = function (useExisting) {\n            if (useExisting === void 0) { useExisting = true; }\n            if (useExisting && this.contentStream)\n                return this.contentStream;\n            this.contentStream = this.createContentStream();\n            this.contentStreamRef = this.doc.context.register(this.contentStream);\n            this.node.addContentStream(this.contentStreamRef);\n            return this.contentStream;\n        };\n        PDFPage.prototype.createContentStream = function () {\n            var operators = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                operators[_i] = arguments[_i];\n            }\n            var dict = this.doc.context.obj({});\n            var contentStream = PDFContentStream.of(dict, operators);\n            return contentStream;\n        };\n        PDFPage.prototype.maybeEmbedGraphicsState = function (options) {\n            var opacity = options.opacity, borderOpacity = options.borderOpacity, blendMode = options.blendMode;\n            if (opacity === undefined &&\n                borderOpacity === undefined &&\n                blendMode === undefined) {\n                return undefined;\n            }\n            var graphicsState = this.doc.context.obj({\n                Type: 'ExtGState',\n                ca: opacity,\n                CA: borderOpacity,\n                BM: blendMode,\n            });\n            var key = this.node.newExtGState('GS', graphicsState);\n            return key;\n        };\n        PDFPage.prototype.scaleAnnot = function (annot, x, y) {\n            var selectors = ['RD', 'CL', 'Vertices', 'QuadPoints', 'L', 'Rect'];\n            for (var idx = 0, len = selectors.length; idx < len; idx++) {\n                var list = annot.lookup(PDFName.of(selectors[idx]));\n                if (list instanceof PDFArray)\n                    list.scalePDFNumbers(x, y);\n            }\n            var inkLists = annot.lookup(PDFName.of('InkList'));\n            if (inkLists instanceof PDFArray) {\n                for (var idx = 0, len = inkLists.size(); idx < len; idx++) {\n                    var arr = inkLists.lookup(idx);\n                    if (arr instanceof PDFArray)\n                        arr.scalePDFNumbers(x, y);\n                }\n            }\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\n         * > methods, which can create instances of [[PDFPage]] for you.\n         *\n         * Create an instance of [[PDFPage]] from an existing leaf node.\n         *\n         * @param leafNode The leaf node to be wrapped.\n         * @param ref The unique reference for the page.\n         * @param doc The document to which the page will belong.\n         */\n        PDFPage.of = function (leafNode, ref, doc) {\n            return new PDFPage(leafNode, ref, doc);\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFDocument.addPage]] and [[PDFDocument.insertPage]]\n         * > methods, which can create instances of [[PDFPage]] for you.\n         *\n         * Create an instance of [[PDFPage]].\n         *\n         * @param doc The document to which the page will belong.\n         */\n        PDFPage.create = function (doc) {\n            assertIs(doc, 'doc', [[PDFDocument, 'PDFDocument']]);\n            var dummyRef = PDFRef.of(-1);\n            var pageLeaf = PDFPageLeaf.withContextAndParent(doc.context, dummyRef);\n            var pageRef = doc.context.register(pageLeaf);\n            return new PDFPage(pageLeaf, pageRef, doc);\n        };\n        return PDFPage;\n    }());\n\n    /**\n     * Represents a button field of a [[PDFForm]].\n     *\n     * [[PDFButton]] fields are interactive controls that users can click with their\n     * mouse. This type of [[PDFField]] is not stateful. The purpose of a button\n     * is to perform an action when the user clicks on it, such as opening a print\n     * modal or resetting the form. Buttons are typically rectangular in shape and\n     * have a text label describing the action that they perform when clicked.\n     */\n    var PDFButton = /** @class */ (function (_super) {\n        tslibExports.__extends(PDFButton, _super);\n        function PDFButton(acroPushButton, ref, doc) {\n            var _this = _super.call(this, acroPushButton, ref, doc) || this;\n            assertIs(acroPushButton, 'acroButton', [\n                [PDFAcroPushButton, 'PDFAcroPushButton'],\n            ]);\n            _this.acroField = acroPushButton;\n            return _this;\n        }\n        /**\n         * Display an image inside the bounds of this button's widgets. For example:\n         * ```js\n         * const pngImage = await pdfDoc.embedPng(...)\n         * const button = form.getButton('some.button.field')\n         * button.setImage(pngImage, ImageAlignment.Center)\n         * ```\n         * This will update the appearances streams for each of this button's widgets.\n         * @param image The image that should be displayed.\n         * @param alignment The alignment of the image.\n         */\n        PDFButton.prototype.setImage = function (image, alignment) {\n            if (alignment === void 0) { alignment = exports.ImageAlignment.Center; }\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                var streamRef = this.createImageAppearanceStream(widget, image, alignment);\n                this.updateWidgetAppearances(widget, { normal: streamRef });\n            }\n            this.markAsClean();\n        };\n        /**\n         * Set the font size for this field. Larger font sizes will result in larger\n         * text being displayed when PDF readers render this button. Font sizes may\n         * be integer or floating point numbers. Supplying a negative font size will\n         * cause this method to throw an error.\n         *\n         * For example:\n         * ```js\n         * const button = form.getButton('some.button.field')\n         * button.setFontSize(4)\n         * button.setFontSize(15.7)\n         * ```\n         *\n         * > This method depends upon the existence of a default appearance\n         * > (`/DA`) string. If this field does not have a default appearance string,\n         * > or that string does not contain a font size (via the `Tf` operator),\n         * > then this method will throw an error.\n         *\n         * @param fontSize The font size to be used when rendering text in this field.\n         */\n        PDFButton.prototype.setFontSize = function (fontSize) {\n            assertPositive(fontSize, 'fontSize');\n            this.acroField.setFontSize(fontSize);\n            this.markAsDirty();\n        };\n        /**\n         * Show this button on the specified page with the given text. For example:\n         * ```js\n         * const ubuntuFont = await pdfDoc.embedFont(ubuntuFontBytes)\n         * const page = pdfDoc.addPage()\n         *\n         * const form = pdfDoc.getForm()\n         * const button = form.createButton('some.button.field')\n         *\n         * button.addToPage('Do Stuff', page, {\n         *   x: 50,\n         *   y: 75,\n         *   width: 200,\n         *   height: 100,\n         *   textColor: rgb(1, 0, 0),\n         *   backgroundColor: rgb(0, 1, 0),\n         *   borderColor: rgb(0, 0, 1),\n         *   borderWidth: 2,\n         *   rotate: degrees(90),\n         *   font: ubuntuFont,\n         * })\n         * ```\n         * This will create a new widget for this button field.\n         * @param text The text to be displayed for this button widget.\n         * @param page The page to which this button widget should be added.\n         * @param options The options to be used when adding this button widget.\n         */\n        PDFButton.prototype.addToPage = function (\n        // TODO: This needs to be optional, e.g. for image buttons\n        text, page, options) {\n            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n            assertOrUndefined(text, 'text', ['string']);\n            assertOrUndefined(page, 'page', [[PDFPage, 'PDFPage']]);\n            assertFieldAppearanceOptions(options);\n            // Create a widget for this button\n            var widget = this.createWidget({\n                x: ((_a = options === null || options === void 0 ? void 0 : options.x) !== null && _a !== void 0 ? _a : 0) - ((_b = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _b !== void 0 ? _b : 0) / 2,\n                y: ((_c = options === null || options === void 0 ? void 0 : options.y) !== null && _c !== void 0 ? _c : 0) - ((_d = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _d !== void 0 ? _d : 0) / 2,\n                width: (_e = options === null || options === void 0 ? void 0 : options.width) !== null && _e !== void 0 ? _e : 100,\n                height: (_f = options === null || options === void 0 ? void 0 : options.height) !== null && _f !== void 0 ? _f : 50,\n                textColor: (_g = options === null || options === void 0 ? void 0 : options.textColor) !== null && _g !== void 0 ? _g : rgb(0, 0, 0),\n                backgroundColor: (_h = options === null || options === void 0 ? void 0 : options.backgroundColor) !== null && _h !== void 0 ? _h : rgb(0.75, 0.75, 0.75),\n                borderColor: options === null || options === void 0 ? void 0 : options.borderColor,\n                borderWidth: (_j = options === null || options === void 0 ? void 0 : options.borderWidth) !== null && _j !== void 0 ? _j : 0,\n                rotate: (_k = options === null || options === void 0 ? void 0 : options.rotate) !== null && _k !== void 0 ? _k : degrees(0),\n                caption: text,\n                hidden: options === null || options === void 0 ? void 0 : options.hidden,\n                page: page.ref,\n            });\n            var widgetRef = this.doc.context.register(widget.dict);\n            // Add widget to this field\n            this.acroField.addWidget(widgetRef);\n            // Set appearance streams for widget\n            var font = (_l = options === null || options === void 0 ? void 0 : options.font) !== null && _l !== void 0 ? _l : this.doc.getForm().getDefaultFont();\n            this.updateWidgetAppearance(widget, font);\n            // Add widget to the given page\n            page.node.addAnnot(widgetRef);\n        };\n        /**\n         * Returns `true` if this button has been marked as dirty, or if any of this\n         * button's widgets do not have an appearance stream. For example:\n         * ```js\n         * const button = form.getButton('some.button.field')\n         * if (button.needsAppearancesUpdate()) console.log('Needs update')\n         * ```\n         * @returns Whether or not this button needs an appearance update.\n         */\n        PDFButton.prototype.needsAppearancesUpdate = function () {\n            var _a;\n            if (this.isDirty())\n                return true;\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                var hasAppearances = ((_a = widget.getAppearances()) === null || _a === void 0 ? void 0 : _a.normal) instanceof PDFStream;\n                if (!hasAppearances)\n                    return true;\n            }\n            return false;\n        };\n        /**\n         * Update the appearance streams for each of this button's widgets using\n         * the default appearance provider for buttons. For example:\n         * ```js\n         * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const button = form.getButton('some.button.field')\n         * button.defaultUpdateAppearances(helvetica)\n         * ```\n         * @param font The font to be used for creating the appearance streams.\n         */\n        PDFButton.prototype.defaultUpdateAppearances = function (font) {\n            assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n            this.updateAppearances(font);\n        };\n        /**\n         * Update the appearance streams for each of this button's widgets using\n         * the given appearance provider. If no `provider` is passed, the default\n         * appearance provider for buttons will be used. For example:\n         * ```js\n         * const helvetica = await pdfDoc.embedFont(StandardFonts.Helvetica)\n         * const button = form.getButton('some.button.field')\n         * button.updateAppearances(helvetica, (field, widget, font) => {\n         *   ...\n         *   return {\n         *     normal: drawButton(...),\n         *     down: drawButton(...),\n         *   }\n         * })\n         * ```\n         * @param font The font to be used for creating the appearance streams.\n         * @param provider Optionally, the appearance provider to be used for\n         *                 generating the contents of the appearance streams.\n         */\n        PDFButton.prototype.updateAppearances = function (font, provider) {\n            assertIs(font, 'font', [[PDFFont, 'PDFFont']]);\n            assertOrUndefined(provider, 'provider', [Function]);\n            var widgets = this.acroField.getWidgets();\n            for (var idx = 0, len = widgets.length; idx < len; idx++) {\n                var widget = widgets[idx];\n                this.updateWidgetAppearance(widget, font, provider);\n            }\n        };\n        PDFButton.prototype.updateWidgetAppearance = function (widget, font, provider) {\n            var apProvider = provider !== null && provider !== void 0 ? provider : defaultButtonAppearanceProvider;\n            var appearances = normalizeAppearance(apProvider(this, widget, font));\n            this.updateWidgetAppearanceWithFont(widget, font, appearances);\n        };\n        /**\n         * > **NOTE:** You probably don't want to call this method directly. Instead,\n         * > consider using the [[PDFForm.getButton]] method, which will create an\n         * > instance of [[PDFButton]] for you.\n         *\n         * Create an instance of [[PDFButton]] from an existing acroPushButton and ref\n         *\n         * @param acroPushButton The underlying `PDFAcroPushButton` for this button.\n         * @param ref The unique reference for this button.\n         * @param doc The document to which this button will belong.\n         */\n        PDFButton.of = function (acroPushButton, ref, doc) { return new PDFButton(acroPushButton, ref, doc); };\n        return PDFButton;\n    }(PDFField));\n\n    const __esModule = true;\n\n    exports.AppearanceCharacteristics = AppearanceCharacteristics;\n    exports.Cache = Cache;\n    exports.CharCodes = CharCodes$1;\n    exports.CombedTextLayoutError = CombedTextLayoutError;\n    exports.CorruptPageTreeError = CorruptPageTreeError;\n    exports.CustomFontEmbedder = CustomFontEmbedder;\n    exports.CustomFontSubsetEmbedder = CustomFontSubsetEmbedder;\n    exports.EncryptedPDFError = EncryptedPDFError;\n    exports.ExceededMaxLengthError = ExceededMaxLengthError;\n    exports.FieldAlreadyExistsError = FieldAlreadyExistsError;\n    exports.FieldExistsAsNonTerminalError = FieldExistsAsNonTerminalError;\n    exports.FileEmbedder = FileEmbedder;\n    exports.FontkitNotRegisteredError = FontkitNotRegisteredError;\n    exports.ForeignPageError = ForeignPageError;\n    exports.IndexOutOfBoundsError = IndexOutOfBoundsError;\n    exports.InvalidAcroFieldValueError = InvalidAcroFieldValueError;\n    exports.InvalidFieldNamePartError = InvalidFieldNamePartError;\n    exports.InvalidMaxLengthError = InvalidMaxLengthError;\n    exports.InvalidPDFDateStringError = InvalidPDFDateStringError;\n    exports.InvalidTargetIndexError = InvalidTargetIndexError;\n    exports.JpegEmbedder = JpegEmbedder;\n    exports.MethodNotImplementedError = MethodNotImplementedError;\n    exports.MissingCatalogError = MissingCatalogError;\n    exports.MissingDAEntryError = MissingDAEntryError;\n    exports.MissingKeywordError = MissingKeywordError;\n    exports.MissingOnValueCheckError = MissingOnValueCheckError;\n    exports.MissingPDFHeaderError = MissingPDFHeaderError;\n    exports.MissingPageContentsEmbeddingError = MissingPageContentsEmbeddingError;\n    exports.MissingTfOperatorError = MissingTfOperatorError;\n    exports.MultiSelectValueError = MultiSelectValueError;\n    exports.NextByteAssertionError = NextByteAssertionError;\n    exports.NoSuchFieldError = NoSuchFieldError;\n    exports.NumberParsingError = NumberParsingError;\n    exports.PDFAcroButton = PDFAcroButton;\n    exports.PDFAcroCheckBox = PDFAcroCheckBox;\n    exports.PDFAcroChoice = PDFAcroChoice;\n    exports.PDFAcroComboBox = PDFAcroComboBox;\n    exports.PDFAcroField = PDFAcroField;\n    exports.PDFAcroForm = PDFAcroForm;\n    exports.PDFAcroListBox = PDFAcroListBox;\n    exports.PDFAcroNonTerminal = PDFAcroNonTerminal;\n    exports.PDFAcroPushButton = PDFAcroPushButton;\n    exports.PDFAcroRadioButton = PDFAcroRadioButton;\n    exports.PDFAcroSignature = PDFAcroSignature;\n    exports.PDFAcroTerminal = PDFAcroTerminal;\n    exports.PDFAcroText = PDFAcroText;\n    exports.PDFAnnotation = PDFAnnotation;\n    exports.PDFArray = PDFArray;\n    exports.PDFArrayIsNotRectangleError = PDFArrayIsNotRectangleError;\n    exports.PDFBool = PDFBool;\n    exports.PDFButton = PDFButton;\n    exports.PDFCatalog = PDFCatalog;\n    exports.PDFCheckBox = PDFCheckBox;\n    exports.PDFContentStream = PDFContentStream;\n    exports.PDFContext = PDFContext;\n    exports.PDFCrossRefSection = PDFCrossRefSection;\n    exports.PDFCrossRefStream = PDFCrossRefStream;\n    exports.PDFDict = PDFDict;\n    exports.PDFDocument = PDFDocument;\n    exports.PDFDropdown = PDFDropdown;\n    exports.PDFEmbeddedPage = PDFEmbeddedPage;\n    exports.PDFField = PDFField;\n    exports.PDFFlateStream = PDFFlateStream;\n    exports.PDFFont = PDFFont;\n    exports.PDFForm = PDFForm;\n    exports.PDFHeader = PDFHeader;\n    exports.PDFHexString = PDFHexString;\n    exports.PDFImage = PDFImage;\n    exports.PDFInvalidObject = PDFInvalidObject;\n    exports.PDFInvalidObjectParsingError = PDFInvalidObjectParsingError;\n    exports.PDFJavaScript = PDFJavaScript;\n    exports.PDFName = PDFName;\n    exports.PDFNull = PDFNull$1;\n    exports.PDFNumber = PDFNumber;\n    exports.PDFObject = PDFObject;\n    exports.PDFObjectCopier = PDFObjectCopier;\n    exports.PDFObjectParser = PDFObjectParser;\n    exports.PDFObjectParsingError = PDFObjectParsingError;\n    exports.PDFObjectStream = PDFObjectStream;\n    exports.PDFObjectStreamParser = PDFObjectStreamParser;\n    exports.PDFOperator = PDFOperator;\n    exports.PDFOperatorNames = Ops;\n    exports.PDFOptionList = PDFOptionList;\n    exports.PDFPage = PDFPage;\n    exports.PDFPageEmbedder = PDFPageEmbedder;\n    exports.PDFPageLeaf = PDFPageLeaf;\n    exports.PDFPageTree = PDFPageTree;\n    exports.PDFParser = PDFParser;\n    exports.PDFParsingError = PDFParsingError;\n    exports.PDFRadioGroup = PDFRadioGroup;\n    exports.PDFRawStream = PDFRawStream;\n    exports.PDFRef = PDFRef;\n    exports.PDFSignature = PDFSignature;\n    exports.PDFStream = PDFStream;\n    exports.PDFStreamParsingError = PDFStreamParsingError;\n    exports.PDFStreamWriter = PDFStreamWriter;\n    exports.PDFString = PDFString;\n    exports.PDFTextField = PDFTextField;\n    exports.PDFTrailer = PDFTrailer;\n    exports.PDFTrailerDict = PDFTrailerDict;\n    exports.PDFWidgetAnnotation = PDFWidgetAnnotation;\n    exports.PDFWriter = PDFWriter;\n    exports.PDFXRefStreamParser = PDFXRefStreamParser;\n    exports.PageEmbeddingMismatchedContextError = PageEmbeddingMismatchedContextError;\n    exports.PageSizes = PageSizes;\n    exports.PngEmbedder = PngEmbedder;\n    exports.PrivateConstructorError = PrivateConstructorError;\n    exports.RemovePageFromEmptyDocumentError = RemovePageFromEmptyDocumentError;\n    exports.ReparseError = ReparseError;\n    exports.RichTextFieldReadError = RichTextFieldReadError;\n    exports.StalledParserError = StalledParserError;\n    exports.StandardFontEmbedder = StandardFontEmbedder;\n    exports.StandardFontValues = StandardFontValues;\n    exports.UnbalancedParenthesisError = UnbalancedParenthesisError;\n    exports.UnexpectedFieldTypeError = UnexpectedFieldTypeError;\n    exports.UnexpectedObjectTypeError = UnexpectedObjectTypeError;\n    exports.UnrecognizedStreamTypeError = UnrecognizedStreamTypeError;\n    exports.UnsupportedEncodingError = UnsupportedEncodingError;\n    exports.ViewerPreferences = ViewerPreferences;\n    exports.__esModule = __esModule;\n    exports.addRandomSuffix = addRandomSuffix;\n    exports.adjustDimsForRotation = adjustDimsForRotation;\n    exports.appendBezierCurve = appendBezierCurve;\n    exports.appendQuadraticCurve = appendQuadraticCurve;\n    exports.arrayAsString = arrayAsString;\n    exports.asNumber = asNumber;\n    exports.asPDFName = asPDFName;\n    exports.asPDFNumber = asPDFNumber;\n    exports.assertEachIs = assertEachIs;\n    exports.assertInteger = assertInteger;\n    exports.assertIs = assertIs;\n    exports.assertIsOneOf = assertIsOneOf;\n    exports.assertIsOneOfOrUndefined = assertIsOneOfOrUndefined;\n    exports.assertIsSubset = assertIsSubset;\n    exports.assertMultiple = assertMultiple;\n    exports.assertOrUndefined = assertOrUndefined;\n    exports.assertPositive = assertPositive;\n    exports.assertRange = assertRange;\n    exports.assertRangeOrUndefined = assertRangeOrUndefined;\n    exports.backtick = backtick;\n    exports.beginMarkedContent = beginMarkedContent;\n    exports.beginText = beginText;\n    exports.breakTextIntoLines = breakTextIntoLines;\n    exports.byAscendingId = byAscendingId;\n    exports.bytesFor = bytesFor;\n    exports.canBeConvertedToUint8Array = canBeConvertedToUint8Array;\n    exports.charAtIndex = charAtIndex;\n    exports.charFromCode = charFromCode;\n    exports.charFromHexCode = charFromHexCode;\n    exports.charSplit = charSplit;\n    exports.cleanText = cleanText;\n    exports.clip = clip;\n    exports.clipEvenOdd = clipEvenOdd;\n    exports.closePath = closePath;\n    exports.cmyk = cmyk;\n    exports.colorToComponents = colorToComponents;\n    exports.componentsToColor = componentsToColor;\n    exports.concatTransformationMatrix = concatTransformationMatrix;\n    exports.copyStringIntoBuffer = copyStringIntoBuffer;\n    exports.createPDFAcroField = createPDFAcroField;\n    exports.createPDFAcroFields = createPDFAcroFields;\n    exports.createTypeErrorMsg = createTypeErrorMsg;\n    exports.createValueErrorMsg = createValueErrorMsg;\n    exports.decodeFromBase64 = decodeFromBase64$1;\n    exports.decodeFromBase64DataUri = decodeFromBase64DataUri;\n    exports.decodePDFRawStream = decodePDFRawStream;\n    exports.defaultButtonAppearanceProvider = defaultButtonAppearanceProvider;\n    exports.defaultCheckBoxAppearanceProvider = defaultCheckBoxAppearanceProvider;\n    exports.defaultDropdownAppearanceProvider = defaultDropdownAppearanceProvider;\n    exports.defaultOptionListAppearanceProvider = defaultOptionListAppearanceProvider;\n    exports.defaultRadioGroupAppearanceProvider = defaultRadioGroupAppearanceProvider;\n    exports.defaultTextFieldAppearanceProvider = defaultTextFieldAppearanceProvider;\n    exports.degrees = degrees;\n    exports.degreesToRadians = degreesToRadians;\n    exports.drawButton = drawButton;\n    exports.drawCheckBox = drawCheckBox;\n    exports.drawCheckMark = drawCheckMark;\n    exports.drawEllipse = drawEllipse;\n    exports.drawEllipsePath = drawEllipsePath;\n    exports.drawImage = drawImage;\n    exports.drawLine = drawLine;\n    exports.drawLinesOfText = drawLinesOfText;\n    exports.drawObject = drawObject;\n    exports.drawOptionList = drawOptionList;\n    exports.drawPage = drawPage;\n    exports.drawRadioButton = drawRadioButton;\n    exports.drawRectangle = drawRectangle;\n    exports.drawSvgPath = drawSvgPath;\n    exports.drawText = drawText;\n    exports.drawTextField = drawTextField;\n    exports.drawTextLines = drawTextLines;\n    exports.encodeToBase64 = encodeToBase64;\n    exports.endMarkedContent = endMarkedContent;\n    exports.endPath = endPath;\n    exports.endText = endText;\n    exports.error = error;\n    exports.escapeRegExp = escapeRegExp;\n    exports.escapedNewlineChars = escapedNewlineChars;\n    exports.fill = fill;\n    exports.fillAndStroke = fillAndStroke;\n    exports.findLastMatch = findLastMatch;\n    exports.getType = getType;\n    exports.grayscale = grayscale;\n    exports.hasSurrogates = hasSurrogates;\n    exports.hasUtf16BOM = hasUtf16BOM;\n    exports.highSurrogate = highSurrogate;\n    exports.isNewlineChar = isNewlineChar;\n    exports.isStandardFont = isStandardFont;\n    exports.isType = isType;\n    exports.isWithinBMP = isWithinBMP;\n    exports.last = last;\n    exports.layoutCombedText = layoutCombedText;\n    exports.layoutMultilineText = layoutMultilineText;\n    exports.layoutSinglelineText = layoutSinglelineText;\n    exports.lineSplit = lineSplit;\n    exports.lineTo = lineTo;\n    exports.lowSurrogate = lowSurrogate;\n    exports.mergeIntoTypedArray = mergeIntoTypedArray;\n    exports.mergeLines = mergeLines;\n    exports.mergeUint8Arrays = mergeUint8Arrays;\n    exports.moveText = moveText;\n    exports.moveTo = moveTo;\n    exports.newlineChars = newlineChars;\n    exports.nextLine = nextLine;\n    exports.normalizeAppearance = normalizeAppearance;\n    exports.numberToString = numberToString;\n    exports.padStart = padStart$1;\n    exports.parseDate = parseDate;\n    exports.pdfDocEncodingDecode = pdfDocEncodingDecode;\n    exports.pluckIndices = pluckIndices;\n    exports.popGraphicsState = popGraphicsState;\n    exports.pushGraphicsState = pushGraphicsState;\n    exports.radians = radians;\n    exports.radiansToDegrees = radiansToDegrees;\n    exports.range = range;\n    exports.rectangle = rectangle;\n    exports.rectanglesAreEqual = rectanglesAreEqual;\n    exports.reduceRotation = reduceRotation;\n    exports.restoreDashPattern = restoreDashPattern;\n    exports.reverseArray = reverseArray;\n    exports.rgb = rgb;\n    exports.rotateAndSkewTextDegreesAndTranslate = rotateAndSkewTextDegreesAndTranslate;\n    exports.rotateAndSkewTextRadiansAndTranslate = rotateAndSkewTextRadiansAndTranslate;\n    exports.rotateDegrees = rotateDegrees;\n    exports.rotateInPlace = rotateInPlace;\n    exports.rotateRadians = rotateRadians;\n    exports.rotateRectangle = rotateRectangle;\n    exports.scale = scale;\n    exports.setCharacterSpacing = setCharacterSpacing;\n    exports.setCharacterSqueeze = setCharacterSqueeze;\n    exports.setDashPattern = setDashPattern;\n    exports.setFillingCmykColor = setFillingCmykColor;\n    exports.setFillingColor = setFillingColor;\n    exports.setFillingGrayscaleColor = setFillingGrayscaleColor;\n    exports.setFillingRgbColor = setFillingRgbColor;\n    exports.setFontAndSize = setFontAndSize;\n    exports.setGraphicsState = setGraphicsState;\n    exports.setLineCap = setLineCap;\n    exports.setLineHeight = setLineHeight;\n    exports.setLineJoin = setLineJoin;\n    exports.setLineWidth = setLineWidth;\n    exports.setStrokingCmykColor = setStrokingCmykColor;\n    exports.setStrokingColor = setStrokingColor;\n    exports.setStrokingGrayscaleColor = setStrokingGrayscaleColor;\n    exports.setStrokingRgbColor = setStrokingRgbColor;\n    exports.setTextMatrix = setTextMatrix;\n    exports.setTextRenderingMode = setTextRenderingMode;\n    exports.setTextRise = setTextRise;\n    exports.setWordSpacing = setWordSpacing;\n    exports.showText = showText;\n    exports.singleQuote = singleQuote;\n    exports.sizeInBytes = sizeInBytes;\n    exports.skewDegrees = skewDegrees;\n    exports.skewRadians = skewRadians;\n    exports.sortedUniq = sortedUniq;\n    exports.square = square;\n    exports.stroke = stroke;\n    exports.sum = sum;\n    exports.toCharCode = toCharCode;\n    exports.toCodePoint = toCodePoint;\n    exports.toDegrees = toDegrees;\n    exports.toHexString = toHexString;\n    exports.toHexStringOfMinLength = toHexStringOfMinLength;\n    exports.toRadians = toRadians;\n    exports.toUint8Array = toUint8Array;\n    exports.translate = translate;\n    exports.typedArrayFor = typedArrayFor;\n    exports.utf16Decode = utf16Decode;\n    exports.utf16Encode = utf16Encode;\n    exports.utf8Encode = utf8Encode;\n    exports.values = values;\n    exports.waitForTick = waitForTick;\n\n}));\n"
    },
    {
      "name": "pdfjs-dist",
      "path": "C:\\Users\\Asus\\OneDrive\\Developments\\kmsa\\com.kmsa.dashboard\\node_modules\\pdfjs-dist\\build\\pdf.mjs",
      "lastModified": 1729446681491,
      "type": "module",
      "code": "sap.ui.define(['require', 'exports', 'com/kmsa/dashboard/resources/node.buffer'], (function (require, exports, _polyfillNode_buffer) { 'use strict';\n\n  /**\n   * @licstart The following is the entire license notice for the\n   * JavaScript code in this page\n   *\n   * Copyright 2024 Mozilla Foundation\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * @licend The above is the entire license notice for the\n   * JavaScript code in this page\n   */\n\n  /******/ // The require scope\n  /******/ var __webpack_require__ = {};\n  /******/ \n  /************************************************************************/\n  /******/ /* webpack/runtime/define property getters */\n  /******/ (() => {\n  /******/ \t// define getter functions for harmony exports\n  /******/ \t__webpack_require__.d = (exports, definition) => {\n  /******/ \t\tfor(var key in definition) {\n  /******/ \t\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n  /******/ \t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n  /******/ \t\t\t}\n  /******/ \t\t}\n  /******/ \t};\n  /******/ })();\n  /******/ \n  /******/ /* webpack/runtime/hasOwnProperty shorthand */\n  /******/ (() => {\n  /******/ \t__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop));\n  /******/ })();\n  /******/ \n  /************************************************************************/\n  var __webpack_exports__ = globalThis.pdfjsLib = {};\n\n  // EXPORTS\n  __webpack_require__.d(__webpack_exports__, {\n    AbortException: () => (/* reexport */ AbortException),\n    AnnotationEditorLayer: () => (/* reexport */ AnnotationEditorLayer),\n    AnnotationEditorParamsType: () => (/* reexport */ AnnotationEditorParamsType),\n    AnnotationEditorType: () => (/* reexport */ AnnotationEditorType),\n    AnnotationEditorUIManager: () => (/* reexport */ AnnotationEditorUIManager),\n    AnnotationLayer: () => (/* reexport */ AnnotationLayer),\n    AnnotationMode: () => (/* reexport */ AnnotationMode),\n    CMapCompressionType: () => (/* reexport */ CMapCompressionType),\n    ColorPicker: () => (/* reexport */ ColorPicker),\n    DOMSVGFactory: () => (/* reexport */ DOMSVGFactory),\n    DrawLayer: () => (/* reexport */ DrawLayer),\n    FeatureTest: () => (/* reexport */ util_FeatureTest),\n    GlobalWorkerOptions: () => (/* reexport */ GlobalWorkerOptions),\n    ImageKind: () => (/* reexport */ util_ImageKind),\n    InvalidPDFException: () => (/* reexport */ InvalidPDFException),\n    MissingPDFException: () => (/* reexport */ MissingPDFException),\n    OPS: () => (/* reexport */ OPS),\n    OutputScale: () => (/* reexport */ OutputScale),\n    PDFDataRangeTransport: () => (/* reexport */ PDFDataRangeTransport),\n    PDFDateString: () => (/* reexport */ PDFDateString),\n    PDFWorker: () => (/* reexport */ PDFWorker),\n    PasswordResponses: () => (/* reexport */ PasswordResponses),\n    PermissionFlag: () => (/* reexport */ PermissionFlag),\n    PixelsPerInch: () => (/* reexport */ PixelsPerInch),\n    RenderingCancelledException: () => (/* reexport */ RenderingCancelledException),\n    TextLayer: () => (/* reexport */ TextLayer),\n    UnexpectedResponseException: () => (/* reexport */ UnexpectedResponseException),\n    Util: () => (/* reexport */ Util),\n    VerbosityLevel: () => (/* reexport */ VerbosityLevel),\n    XfaLayer: () => (/* reexport */ XfaLayer),\n    build: () => (/* reexport */ build),\n    createValidAbsoluteUrl: () => (/* reexport */ createValidAbsoluteUrl),\n    fetchData: () => (/* reexport */ fetchData),\n    getDocument: () => (/* reexport */ getDocument),\n    getFilenameFromUrl: () => (/* reexport */ getFilenameFromUrl),\n    getPdfFilenameFromUrl: () => (/* reexport */ getPdfFilenameFromUrl),\n    getXfaPageViewport: () => (/* reexport */ getXfaPageViewport),\n    isDataScheme: () => (/* reexport */ isDataScheme),\n    isPdfFile: () => (/* reexport */ isPdfFile),\n    noContextMenu: () => (/* reexport */ noContextMenu),\n    normalizeUnicode: () => (/* reexport */ normalizeUnicode),\n    setLayerDimensions: () => (/* reexport */ setLayerDimensions),\n    shadow: () => (/* reexport */ shadow),\n    version: () => (/* reexport */ version)\n  });\n  const isNodeJS = typeof _polyfillNode_buffer.browser$1 === \"object\" && _polyfillNode_buffer.browser$1 + \"\" === \"[object process]\" && !_polyfillNode_buffer.browser$1.versions.nw && !(_polyfillNode_buffer.browser$1.versions.electron && _polyfillNode_buffer.browser$1.type && _polyfillNode_buffer.browser$1.type !== \"browser\");\n  const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\n  const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n  const MAX_IMAGE_SIZE_TO_CACHE = 10e6;\n  const LINE_FACTOR = 1.35;\n  const RenderingIntentFlag = {\n    ANY: 0x01,\n    DISPLAY: 0x02,\n    PRINT: 0x04,\n    SAVE: 0x08,\n    ANNOTATIONS_FORMS: 0x10,\n    ANNOTATIONS_STORAGE: 0x20,\n    ANNOTATIONS_DISABLE: 0x40,\n    IS_EDITING: 0x80,\n    OPLIST: 0x100\n  };\n  const AnnotationMode = {\n    DISABLE: 0,\n    ENABLE: 1,\n    ENABLE_FORMS: 2,\n    ENABLE_STORAGE: 3\n  };\n  const AnnotationEditorPrefix = \"pdfjs_internal_editor_\";\n  const AnnotationEditorType = {\n    DISABLE: -1,\n    NONE: 0,\n    FREETEXT: 3,\n    HIGHLIGHT: 9,\n    STAMP: 13,\n    INK: 15\n  };\n  const AnnotationEditorParamsType = {\n    RESIZE: 1,\n    CREATE: 2,\n    FREETEXT_SIZE: 11,\n    FREETEXT_COLOR: 12,\n    FREETEXT_OPACITY: 13,\n    INK_COLOR: 21,\n    INK_THICKNESS: 22,\n    INK_OPACITY: 23,\n    HIGHLIGHT_COLOR: 31,\n    HIGHLIGHT_DEFAULT_COLOR: 32,\n    HIGHLIGHT_THICKNESS: 33,\n    HIGHLIGHT_FREE: 34,\n    HIGHLIGHT_SHOW_ALL: 35\n  };\n  const PermissionFlag = {\n    PRINT: 0x04,\n    MODIFY_CONTENTS: 0x08,\n    COPY: 0x10,\n    MODIFY_ANNOTATIONS: 0x20,\n    FILL_INTERACTIVE_FORMS: 0x100,\n    COPY_FOR_ACCESSIBILITY: 0x200,\n    ASSEMBLE: 0x400,\n    PRINT_HIGH_QUALITY: 0x800\n  };\n  const TextRenderingMode = {\n    FILL: 0,\n    STROKE: 1,\n    FILL_STROKE: 2,\n    INVISIBLE: 3,\n    FILL_ADD_TO_PATH: 4,\n    STROKE_ADD_TO_PATH: 5,\n    FILL_STROKE_ADD_TO_PATH: 6,\n    ADD_TO_PATH: 7,\n    FILL_STROKE_MASK: 3,\n    ADD_TO_PATH_FLAG: 4\n  };\n  const util_ImageKind = {\n    GRAYSCALE_1BPP: 1,\n    RGB_24BPP: 2,\n    RGBA_32BPP: 3\n  };\n  const AnnotationType = {\n    TEXT: 1,\n    LINK: 2,\n    FREETEXT: 3,\n    LINE: 4,\n    SQUARE: 5,\n    CIRCLE: 6,\n    POLYGON: 7,\n    POLYLINE: 8,\n    HIGHLIGHT: 9,\n    UNDERLINE: 10,\n    SQUIGGLY: 11,\n    STRIKEOUT: 12,\n    STAMP: 13,\n    CARET: 14,\n    INK: 15,\n    POPUP: 16,\n    FILEATTACHMENT: 17,\n    SOUND: 18,\n    MOVIE: 19,\n    WIDGET: 20,\n    SCREEN: 21,\n    PRINTERMARK: 22,\n    TRAPNET: 23,\n    WATERMARK: 24,\n    THREED: 25,\n    REDACT: 26\n  };\n  const AnnotationBorderStyleType = {\n    SOLID: 1,\n    DASHED: 2,\n    BEVELED: 3,\n    INSET: 4,\n    UNDERLINE: 5\n  };\n  const VerbosityLevel = {\n    ERRORS: 0,\n    WARNINGS: 1,\n    INFOS: 5\n  };\n  const CMapCompressionType = {\n    NONE: 0,\n    BINARY: 1\n  };\n  const OPS = {\n    dependency: 1,\n    setLineWidth: 2,\n    setLineCap: 3,\n    setLineJoin: 4,\n    setMiterLimit: 5,\n    setDash: 6,\n    setRenderingIntent: 7,\n    setFlatness: 8,\n    setGState: 9,\n    save: 10,\n    restore: 11,\n    transform: 12,\n    moveTo: 13,\n    lineTo: 14,\n    curveTo: 15,\n    curveTo2: 16,\n    curveTo3: 17,\n    closePath: 18,\n    rectangle: 19,\n    stroke: 20,\n    closeStroke: 21,\n    fill: 22,\n    eoFill: 23,\n    fillStroke: 24,\n    eoFillStroke: 25,\n    closeFillStroke: 26,\n    closeEOFillStroke: 27,\n    endPath: 28,\n    clip: 29,\n    eoClip: 30,\n    beginText: 31,\n    endText: 32,\n    setCharSpacing: 33,\n    setWordSpacing: 34,\n    setHScale: 35,\n    setLeading: 36,\n    setFont: 37,\n    setTextRenderingMode: 38,\n    setTextRise: 39,\n    moveText: 40,\n    setLeadingMoveText: 41,\n    setTextMatrix: 42,\n    nextLine: 43,\n    showText: 44,\n    showSpacedText: 45,\n    nextLineShowText: 46,\n    nextLineSetSpacingShowText: 47,\n    setCharWidth: 48,\n    setCharWidthAndBounds: 49,\n    setStrokeColorSpace: 50,\n    setFillColorSpace: 51,\n    setStrokeColor: 52,\n    setStrokeColorN: 53,\n    setFillColor: 54,\n    setFillColorN: 55,\n    setStrokeGray: 56,\n    setFillGray: 57,\n    setStrokeRGBColor: 58,\n    setFillRGBColor: 59,\n    setStrokeCMYKColor: 60,\n    setFillCMYKColor: 61,\n    shadingFill: 62,\n    beginInlineImage: 63,\n    beginImageData: 64,\n    endInlineImage: 65,\n    paintXObject: 66,\n    markPoint: 67,\n    markPointProps: 68,\n    beginMarkedContent: 69,\n    beginMarkedContentProps: 70,\n    endMarkedContent: 71,\n    beginCompat: 72,\n    endCompat: 73,\n    paintFormXObjectBegin: 74,\n    paintFormXObjectEnd: 75,\n    beginGroup: 76,\n    endGroup: 77,\n    beginAnnotation: 80,\n    endAnnotation: 81,\n    paintImageMaskXObject: 83,\n    paintImageMaskXObjectGroup: 84,\n    paintImageXObject: 85,\n    paintInlineImageXObject: 86,\n    paintInlineImageXObjectGroup: 87,\n    paintImageXObjectRepeat: 88,\n    paintImageMaskXObjectRepeat: 89,\n    paintSolidColorImageMask: 90,\n    constructPath: 91,\n    setStrokeTransparent: 92,\n    setFillTransparent: 93\n  };\n  const PasswordResponses = {\n    NEED_PASSWORD: 1,\n    INCORRECT_PASSWORD: 2\n  };\n  let verbosity = VerbosityLevel.WARNINGS;\n  function setVerbosityLevel(level) {\n    if (Number.isInteger(level)) {\n      verbosity = level;\n    }\n  }\n  function getVerbosityLevel() {\n    return verbosity;\n  }\n  function info(msg) {\n    if (verbosity >= VerbosityLevel.INFOS) {\n      console.log(`Info: ${msg}`);\n    }\n  }\n  function warn(msg) {\n    if (verbosity >= VerbosityLevel.WARNINGS) {\n      console.log(`Warning: ${msg}`);\n    }\n  }\n  function unreachable(msg) {\n    throw new Error(msg);\n  }\n  function assert(cond, msg) {\n    if (!cond) {\n      unreachable(msg);\n    }\n  }\n  function _isValidProtocol(url) {\n    switch (url?.protocol) {\n      case \"http:\":\n      case \"https:\":\n      case \"ftp:\":\n      case \"mailto:\":\n      case \"tel:\":\n        return true;\n      default:\n        return false;\n    }\n  }\n  function createValidAbsoluteUrl(url, baseUrl = null, options = null) {\n    if (!url) {\n      return null;\n    }\n    try {\n      if (options && typeof url === \"string\") {\n        if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n          const dots = url.match(/\\./g);\n          if (dots?.length >= 2) {\n            url = `http://${url}`;\n          }\n        }\n        if (options.tryConvertEncoding) {\n          try {\n            url = stringToUTF8String(url);\n          } catch {}\n        }\n      }\n      const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n      if (_isValidProtocol(absoluteUrl)) {\n        return absoluteUrl;\n      }\n    } catch {}\n    return null;\n  }\n  function shadow(obj, prop, value, nonSerializable = false) {\n    Object.defineProperty(obj, prop, {\n      value,\n      enumerable: !nonSerializable,\n      configurable: true,\n      writable: false\n    });\n    return value;\n  }\n  const BaseException = function BaseExceptionClosure() {\n    function BaseException(message, name) {\n      this.message = message;\n      this.name = name;\n    }\n    BaseException.prototype = new Error();\n    BaseException.constructor = BaseException;\n    return BaseException;\n  }();\n  class PasswordException extends BaseException {\n    constructor(msg, code) {\n      super(msg, \"PasswordException\");\n      this.code = code;\n    }\n  }\n  class UnknownErrorException extends BaseException {\n    constructor(msg, details) {\n      super(msg, \"UnknownErrorException\");\n      this.details = details;\n    }\n  }\n  class InvalidPDFException extends BaseException {\n    constructor(msg) {\n      super(msg, \"InvalidPDFException\");\n    }\n  }\n  class MissingPDFException extends BaseException {\n    constructor(msg) {\n      super(msg, \"MissingPDFException\");\n    }\n  }\n  class UnexpectedResponseException extends BaseException {\n    constructor(msg, status) {\n      super(msg, \"UnexpectedResponseException\");\n      this.status = status;\n    }\n  }\n  class FormatError extends BaseException {\n    constructor(msg) {\n      super(msg, \"FormatError\");\n    }\n  }\n  class AbortException extends BaseException {\n    constructor(msg) {\n      super(msg, \"AbortException\");\n    }\n  }\n  function bytesToString(bytes) {\n    if (typeof bytes !== \"object\" || bytes?.length === undefined) {\n      unreachable(\"Invalid argument for bytesToString\");\n    }\n    const length = bytes.length;\n    const MAX_ARGUMENT_COUNT = 8192;\n    if (length < MAX_ARGUMENT_COUNT) {\n      return String.fromCharCode.apply(null, bytes);\n    }\n    const strBuf = [];\n    for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n      const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n      const chunk = bytes.subarray(i, chunkEnd);\n      strBuf.push(String.fromCharCode.apply(null, chunk));\n    }\n    return strBuf.join(\"\");\n  }\n  function stringToBytes(str) {\n    if (typeof str !== \"string\") {\n      unreachable(\"Invalid argument for stringToBytes\");\n    }\n    const length = str.length;\n    const bytes = new Uint8Array(length);\n    for (let i = 0; i < length; ++i) {\n      bytes[i] = str.charCodeAt(i) & 0xff;\n    }\n    return bytes;\n  }\n  function string32(value) {\n    return String.fromCharCode(value >> 24 & 0xff, value >> 16 & 0xff, value >> 8 & 0xff, value & 0xff);\n  }\n  function objectFromMap(map) {\n    const obj = Object.create(null);\n    for (const [key, value] of map) {\n      obj[key] = value;\n    }\n    return obj;\n  }\n  function isLittleEndian() {\n    const buffer8 = new Uint8Array(4);\n    buffer8[0] = 1;\n    const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n    return view32[0] === 1;\n  }\n  function isEvalSupported() {\n    try {\n      new Function(\"\");\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  class util_FeatureTest {\n    static get isLittleEndian() {\n      return shadow(this, \"isLittleEndian\", isLittleEndian());\n    }\n    static get isEvalSupported() {\n      return shadow(this, \"isEvalSupported\", isEvalSupported());\n    }\n    static get isOffscreenCanvasSupported() {\n      return shadow(this, \"isOffscreenCanvasSupported\", typeof OffscreenCanvas !== \"undefined\");\n    }\n    static get platform() {\n      if (typeof navigator !== \"undefined\" && typeof navigator?.platform === \"string\") {\n        return shadow(this, \"platform\", {\n          isMac: navigator.platform.includes(\"Mac\"),\n          isWindows: navigator.platform.includes(\"Win\"),\n          isFirefox: typeof navigator?.userAgent === \"string\" && navigator.userAgent.includes(\"Firefox\")\n        });\n      }\n      return shadow(this, \"platform\", {\n        isMac: false,\n        isWindows: false,\n        isFirefox: false\n      });\n    }\n    static get isCSSRoundSupported() {\n      return shadow(this, \"isCSSRoundSupported\", globalThis.CSS?.supports?.(\"width: round(1.5px, 1px)\"));\n    }\n  }\n  const hexNumbers = Array.from(Array(256).keys(), n => n.toString(16).padStart(2, \"0\"));\n  class Util {\n    static makeHexColor(r, g, b) {\n      return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n    }\n    static scaleMinMax(transform, minMax) {\n      let temp;\n      if (transform[0]) {\n        if (transform[0] < 0) {\n          temp = minMax[0];\n          minMax[0] = minMax[2];\n          minMax[2] = temp;\n        }\n        minMax[0] *= transform[0];\n        minMax[2] *= transform[0];\n        if (transform[3] < 0) {\n          temp = minMax[1];\n          minMax[1] = minMax[3];\n          minMax[3] = temp;\n        }\n        minMax[1] *= transform[3];\n        minMax[3] *= transform[3];\n      } else {\n        temp = minMax[0];\n        minMax[0] = minMax[1];\n        minMax[1] = temp;\n        temp = minMax[2];\n        minMax[2] = minMax[3];\n        minMax[3] = temp;\n        if (transform[1] < 0) {\n          temp = minMax[1];\n          minMax[1] = minMax[3];\n          minMax[3] = temp;\n        }\n        minMax[1] *= transform[1];\n        minMax[3] *= transform[1];\n        if (transform[2] < 0) {\n          temp = minMax[0];\n          minMax[0] = minMax[2];\n          minMax[2] = temp;\n        }\n        minMax[0] *= transform[2];\n        minMax[2] *= transform[2];\n      }\n      minMax[0] += transform[4];\n      minMax[1] += transform[5];\n      minMax[2] += transform[4];\n      minMax[3] += transform[5];\n    }\n    static transform(m1, m2) {\n      return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];\n    }\n    static applyTransform(p, m) {\n      const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n      const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n      return [xt, yt];\n    }\n    static applyInverseTransform(p, m) {\n      const d = m[0] * m[3] - m[1] * m[2];\n      const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n      const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n      return [xt, yt];\n    }\n    static getAxialAlignedBoundingBox(r, m) {\n      const p1 = this.applyTransform(r, m);\n      const p2 = this.applyTransform(r.slice(2, 4), m);\n      const p3 = this.applyTransform([r[0], r[3]], m);\n      const p4 = this.applyTransform([r[2], r[1]], m);\n      return [Math.min(p1[0], p2[0], p3[0], p4[0]), Math.min(p1[1], p2[1], p3[1], p4[1]), Math.max(p1[0], p2[0], p3[0], p4[0]), Math.max(p1[1], p2[1], p3[1], p4[1])];\n    }\n    static inverseTransform(m) {\n      const d = m[0] * m[3] - m[1] * m[2];\n      return [m[3] / d, -m[1] / d, -m[2] / d, m[0] / d, (m[2] * m[5] - m[4] * m[3]) / d, (m[4] * m[1] - m[5] * m[0]) / d];\n    }\n    static singularValueDecompose2dScale(m) {\n      const transpose = [m[0], m[2], m[1], m[3]];\n      const a = m[0] * transpose[0] + m[1] * transpose[2];\n      const b = m[0] * transpose[1] + m[1] * transpose[3];\n      const c = m[2] * transpose[0] + m[3] * transpose[2];\n      const d = m[2] * transpose[1] + m[3] * transpose[3];\n      const first = (a + d) / 2;\n      const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n      const sx = first + second || 1;\n      const sy = first - second || 1;\n      return [Math.sqrt(sx), Math.sqrt(sy)];\n    }\n    static normalizeRect(rect) {\n      const r = rect.slice(0);\n      if (rect[0] > rect[2]) {\n        r[0] = rect[2];\n        r[2] = rect[0];\n      }\n      if (rect[1] > rect[3]) {\n        r[1] = rect[3];\n        r[3] = rect[1];\n      }\n      return r;\n    }\n    static intersect(rect1, rect2) {\n      const xLow = Math.max(Math.min(rect1[0], rect1[2]), Math.min(rect2[0], rect2[2]));\n      const xHigh = Math.min(Math.max(rect1[0], rect1[2]), Math.max(rect2[0], rect2[2]));\n      if (xLow > xHigh) {\n        return null;\n      }\n      const yLow = Math.max(Math.min(rect1[1], rect1[3]), Math.min(rect2[1], rect2[3]));\n      const yHigh = Math.min(Math.max(rect1[1], rect1[3]), Math.max(rect2[1], rect2[3]));\n      if (yLow > yHigh) {\n        return null;\n      }\n      return [xLow, yLow, xHigh, yHigh];\n    }\n    static #getExtremumOnCurve(x0, x1, x2, x3, y0, y1, y2, y3, t, minMax) {\n      if (t <= 0 || t >= 1) {\n        return;\n      }\n      const mt = 1 - t;\n      const tt = t * t;\n      const ttt = tt * t;\n      const x = mt * (mt * (mt * x0 + 3 * t * x1) + 3 * tt * x2) + ttt * x3;\n      const y = mt * (mt * (mt * y0 + 3 * t * y1) + 3 * tt * y2) + ttt * y3;\n      minMax[0] = Math.min(minMax[0], x);\n      minMax[1] = Math.min(minMax[1], y);\n      minMax[2] = Math.max(minMax[2], x);\n      minMax[3] = Math.max(minMax[3], y);\n    }\n    static #getExtremum(x0, x1, x2, x3, y0, y1, y2, y3, a, b, c, minMax) {\n      if (Math.abs(a) < 1e-12) {\n        if (Math.abs(b) >= 1e-12) {\n          this.#getExtremumOnCurve(x0, x1, x2, x3, y0, y1, y2, y3, -c / b, minMax);\n        }\n        return;\n      }\n      const delta = b ** 2 - 4 * c * a;\n      if (delta < 0) {\n        return;\n      }\n      const sqrtDelta = Math.sqrt(delta);\n      const a2 = 2 * a;\n      this.#getExtremumOnCurve(x0, x1, x2, x3, y0, y1, y2, y3, (-b + sqrtDelta) / a2, minMax);\n      this.#getExtremumOnCurve(x0, x1, x2, x3, y0, y1, y2, y3, (-b - sqrtDelta) / a2, minMax);\n    }\n    static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3, minMax) {\n      if (minMax) {\n        minMax[0] = Math.min(minMax[0], x0, x3);\n        minMax[1] = Math.min(minMax[1], y0, y3);\n        minMax[2] = Math.max(minMax[2], x0, x3);\n        minMax[3] = Math.max(minMax[3], y0, y3);\n      } else {\n        minMax = [Math.min(x0, x3), Math.min(y0, y3), Math.max(x0, x3), Math.max(y0, y3)];\n      }\n      this.#getExtremum(x0, x1, x2, x3, y0, y1, y2, y3, 3 * (-x0 + 3 * (x1 - x2) + x3), 6 * (x0 - 2 * x1 + x2), 3 * (x1 - x0), minMax);\n      this.#getExtremum(x0, x1, x2, x3, y0, y1, y2, y3, 3 * (-y0 + 3 * (y1 - y2) + y3), 6 * (y0 - 2 * y1 + y2), 3 * (y1 - y0), minMax);\n      return minMax;\n    }\n  }\n  function stringToUTF8String(str) {\n    return decodeURIComponent(escape(str));\n  }\n  let NormalizeRegex = null;\n  let NormalizationMap = null;\n  function normalizeUnicode(str) {\n    if (!NormalizeRegex) {\n      NormalizeRegex = /([\\u00a0\\u00b5\\u037e\\u0eb3\\u2000-\\u200a\\u202f\\u2126\\ufb00-\\ufb04\\ufb06\\ufb20-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufba1\\ufba4-\\ufba9\\ufbae-\\ufbb1\\ufbd3-\\ufbdc\\ufbde-\\ufbe7\\ufbea-\\ufbf8\\ufbfc-\\ufbfd\\ufc00-\\ufc5d\\ufc64-\\ufcf1\\ufcf5-\\ufd3d\\ufd88\\ufdf4\\ufdfa-\\ufdfb\\ufe71\\ufe77\\ufe79\\ufe7b\\ufe7d]+)|(\\ufb05+)/gu;\n      NormalizationMap = new Map([[\"ﬅ\", \"ſt\"]]);\n    }\n    return str.replaceAll(NormalizeRegex, (_, p1, p2) => p1 ? p1.normalize(\"NFKC\") : NormalizationMap.get(p2));\n  }\n  function getUuid() {\n    if (typeof crypto !== \"undefined\" && typeof crypto?.randomUUID === \"function\") {\n      return crypto.randomUUID();\n    }\n    const buf = new Uint8Array(32);\n    if (typeof crypto !== \"undefined\" && typeof crypto?.getRandomValues === \"function\") {\n      crypto.getRandomValues(buf);\n    } else {\n      for (let i = 0; i < 32; i++) {\n        buf[i] = Math.floor(Math.random() * 255);\n      }\n    }\n    return bytesToString(buf);\n  }\n  const AnnotationPrefix = \"pdfjs_internal_id_\";\n  const FontRenderOps = {\n    BEZIER_CURVE_TO: 0,\n    MOVE_TO: 1,\n    LINE_TO: 2,\n    QUADRATIC_CURVE_TO: 3,\n    RESTORE: 4,\n    SAVE: 5,\n    SCALE: 6,\n    TRANSFORM: 7,\n    TRANSLATE: 8\n  };\n\n  class BaseFilterFactory {\n    addFilter(maps) {\n      return \"none\";\n    }\n    addHCMFilter(fgColor, bgColor) {\n      return \"none\";\n    }\n    addAlphaFilter(map) {\n      return \"none\";\n    }\n    addLuminosityFilter(map) {\n      return \"none\";\n    }\n    addHighlightHCMFilter(filterName, fgColor, bgColor, newFgColor, newBgColor) {\n      return \"none\";\n    }\n    destroy(keepHCM = false) {}\n  }\n  class BaseCanvasFactory {\n    #enableHWA = false;\n    constructor({\n      enableHWA = false\n    }) {\n      this.#enableHWA = enableHWA;\n    }\n    create(width, height) {\n      if (width <= 0 || height <= 0) {\n        throw new Error(\"Invalid canvas size\");\n      }\n      const canvas = this._createCanvas(width, height);\n      return {\n        canvas,\n        context: canvas.getContext(\"2d\", {\n          willReadFrequently: !this.#enableHWA\n        })\n      };\n    }\n    reset(canvasAndContext, width, height) {\n      if (!canvasAndContext.canvas) {\n        throw new Error(\"Canvas is not specified\");\n      }\n      if (width <= 0 || height <= 0) {\n        throw new Error(\"Invalid canvas size\");\n      }\n      canvasAndContext.canvas.width = width;\n      canvasAndContext.canvas.height = height;\n    }\n    destroy(canvasAndContext) {\n      if (!canvasAndContext.canvas) {\n        throw new Error(\"Canvas is not specified\");\n      }\n      canvasAndContext.canvas.width = 0;\n      canvasAndContext.canvas.height = 0;\n      canvasAndContext.canvas = null;\n      canvasAndContext.context = null;\n    }\n    _createCanvas(width, height) {\n      unreachable(\"Abstract method `_createCanvas` called.\");\n    }\n  }\n  class BaseCMapReaderFactory {\n    constructor({\n      baseUrl = null,\n      isCompressed = true\n    }) {\n      this.baseUrl = baseUrl;\n      this.isCompressed = isCompressed;\n    }\n    async fetch({\n      name\n    }) {\n      if (!this.baseUrl) {\n        throw new Error(\"Ensure that the `cMapUrl` and `cMapPacked` API parameters are provided.\");\n      }\n      if (!name) {\n        throw new Error(\"CMap name must be specified.\");\n      }\n      const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n      const compressionType = this.isCompressed ? CMapCompressionType.BINARY : CMapCompressionType.NONE;\n      return this._fetchData(url, compressionType).catch(reason => {\n        throw new Error(`Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`);\n      });\n    }\n    _fetchData(url, compressionType) {\n      unreachable(\"Abstract method `_fetchData` called.\");\n    }\n  }\n  class BaseStandardFontDataFactory {\n    constructor({\n      baseUrl = null\n    }) {\n      this.baseUrl = baseUrl;\n    }\n    async fetch({\n      filename\n    }) {\n      if (!this.baseUrl) {\n        throw new Error(\"Ensure that the `standardFontDataUrl` API parameter is provided.\");\n      }\n      if (!filename) {\n        throw new Error(\"Font filename must be specified.\");\n      }\n      const url = `${this.baseUrl}${filename}`;\n      return this._fetchData(url).catch(reason => {\n        throw new Error(`Unable to load font data at: ${url}`);\n      });\n    }\n    _fetchData(url) {\n      unreachable(\"Abstract method `_fetchData` called.\");\n    }\n  }\n  class BaseSVGFactory {\n    create(width, height, skipDimensions = false) {\n      if (width <= 0 || height <= 0) {\n        throw new Error(\"Invalid SVG dimensions\");\n      }\n      const svg = this._createSVG(\"svg:svg\");\n      svg.setAttribute(\"version\", \"1.1\");\n      if (!skipDimensions) {\n        svg.setAttribute(\"width\", `${width}px`);\n        svg.setAttribute(\"height\", `${height}px`);\n      }\n      svg.setAttribute(\"preserveAspectRatio\", \"none\");\n      svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n      return svg;\n    }\n    createElement(type) {\n      if (typeof type !== \"string\") {\n        throw new Error(\"Invalid SVG element type\");\n      }\n      return this._createSVG(type);\n    }\n    _createSVG(type) {\n      unreachable(\"Abstract method `_createSVG` called.\");\n    }\n  }\n\n\n  const SVG_NS = \"http://www.w3.org/2000/svg\";\n  class PixelsPerInch {\n    static CSS = 96.0;\n    static PDF = 72.0;\n    static PDF_TO_CSS_UNITS = this.CSS / this.PDF;\n  }\n  class DOMFilterFactory extends BaseFilterFactory {\n    #baseUrl;\n    #_cache;\n    #_defs;\n    #docId;\n    #document;\n    #_hcmCache;\n    #id = 0;\n    constructor({\n      docId,\n      ownerDocument = globalThis.document\n    }) {\n      super();\n      this.#docId = docId;\n      this.#document = ownerDocument;\n    }\n    get #cache() {\n      return this.#_cache ||= new Map();\n    }\n    get #hcmCache() {\n      return this.#_hcmCache ||= new Map();\n    }\n    get #defs() {\n      if (!this.#_defs) {\n        const div = this.#document.createElement(\"div\");\n        const {\n          style\n        } = div;\n        style.visibility = \"hidden\";\n        style.contain = \"strict\";\n        style.width = style.height = 0;\n        style.position = \"absolute\";\n        style.top = style.left = 0;\n        style.zIndex = -1;\n        const svg = this.#document.createElementNS(SVG_NS, \"svg\");\n        svg.setAttribute(\"width\", 0);\n        svg.setAttribute(\"height\", 0);\n        this.#_defs = this.#document.createElementNS(SVG_NS, \"defs\");\n        div.append(svg);\n        svg.append(this.#_defs);\n        this.#document.body.append(div);\n      }\n      return this.#_defs;\n    }\n    #createTables(maps) {\n      if (maps.length === 1) {\n        const mapR = maps[0];\n        const buffer = new Array(256);\n        for (let i = 0; i < 256; i++) {\n          buffer[i] = mapR[i] / 255;\n        }\n        const table = buffer.join(\",\");\n        return [table, table, table];\n      }\n      const [mapR, mapG, mapB] = maps;\n      const bufferR = new Array(256);\n      const bufferG = new Array(256);\n      const bufferB = new Array(256);\n      for (let i = 0; i < 256; i++) {\n        bufferR[i] = mapR[i] / 255;\n        bufferG[i] = mapG[i] / 255;\n        bufferB[i] = mapB[i] / 255;\n      }\n      return [bufferR.join(\",\"), bufferG.join(\",\"), bufferB.join(\",\")];\n    }\n    #createUrl(id) {\n      if (this.#baseUrl === undefined) {\n        this.#baseUrl = \"\";\n        const url = this.#document.URL;\n        if (url !== this.#document.baseURI) {\n          if (isDataScheme(url)) {\n            warn('#createUrl: ignore \"data:\"-URL for performance reasons.');\n          } else {\n            this.#baseUrl = url.split(\"#\", 1)[0];\n          }\n        }\n      }\n      return `url(${this.#baseUrl}#${id})`;\n    }\n    addFilter(maps) {\n      if (!maps) {\n        return \"none\";\n      }\n      let value = this.#cache.get(maps);\n      if (value) {\n        return value;\n      }\n      const [tableR, tableG, tableB] = this.#createTables(maps);\n      const key = maps.length === 1 ? tableR : `${tableR}${tableG}${tableB}`;\n      value = this.#cache.get(key);\n      if (value) {\n        this.#cache.set(maps, value);\n        return value;\n      }\n      const id = `g_${this.#docId}_transfer_map_${this.#id++}`;\n      const url = this.#createUrl(id);\n      this.#cache.set(maps, url);\n      this.#cache.set(key, url);\n      const filter = this.#createFilter(id);\n      this.#addTransferMapConversion(tableR, tableG, tableB, filter);\n      return url;\n    }\n    addHCMFilter(fgColor, bgColor) {\n      const key = `${fgColor}-${bgColor}`;\n      const filterName = \"base\";\n      let info = this.#hcmCache.get(filterName);\n      if (info?.key === key) {\n        return info.url;\n      }\n      if (info) {\n        info.filter?.remove();\n        info.key = key;\n        info.url = \"none\";\n        info.filter = null;\n      } else {\n        info = {\n          key,\n          url: \"none\",\n          filter: null\n        };\n        this.#hcmCache.set(filterName, info);\n      }\n      if (!fgColor || !bgColor) {\n        return info.url;\n      }\n      const fgRGB = this.#getRGB(fgColor);\n      fgColor = Util.makeHexColor(...fgRGB);\n      const bgRGB = this.#getRGB(bgColor);\n      bgColor = Util.makeHexColor(...bgRGB);\n      this.#defs.style.color = \"\";\n      if (fgColor === \"#000000\" && bgColor === \"#ffffff\" || fgColor === bgColor) {\n        return info.url;\n      }\n      const map = new Array(256);\n      for (let i = 0; i <= 255; i++) {\n        const x = i / 255;\n        map[i] = x <= 0.03928 ? x / 12.92 : ((x + 0.055) / 1.055) ** 2.4;\n      }\n      const table = map.join(\",\");\n      const id = `g_${this.#docId}_hcm_filter`;\n      const filter = info.filter = this.#createFilter(id);\n      this.#addTransferMapConversion(table, table, table, filter);\n      this.#addGrayConversion(filter);\n      const getSteps = (c, n) => {\n        const start = fgRGB[c] / 255;\n        const end = bgRGB[c] / 255;\n        const arr = new Array(n + 1);\n        for (let i = 0; i <= n; i++) {\n          arr[i] = start + i / n * (end - start);\n        }\n        return arr.join(\",\");\n      };\n      this.#addTransferMapConversion(getSteps(0, 5), getSteps(1, 5), getSteps(2, 5), filter);\n      info.url = this.#createUrl(id);\n      return info.url;\n    }\n    addAlphaFilter(map) {\n      let value = this.#cache.get(map);\n      if (value) {\n        return value;\n      }\n      const [tableA] = this.#createTables([map]);\n      const key = `alpha_${tableA}`;\n      value = this.#cache.get(key);\n      if (value) {\n        this.#cache.set(map, value);\n        return value;\n      }\n      const id = `g_${this.#docId}_alpha_map_${this.#id++}`;\n      const url = this.#createUrl(id);\n      this.#cache.set(map, url);\n      this.#cache.set(key, url);\n      const filter = this.#createFilter(id);\n      this.#addTransferMapAlphaConversion(tableA, filter);\n      return url;\n    }\n    addLuminosityFilter(map) {\n      let value = this.#cache.get(map || \"luminosity\");\n      if (value) {\n        return value;\n      }\n      let tableA, key;\n      if (map) {\n        [tableA] = this.#createTables([map]);\n        key = `luminosity_${tableA}`;\n      } else {\n        key = \"luminosity\";\n      }\n      value = this.#cache.get(key);\n      if (value) {\n        this.#cache.set(map, value);\n        return value;\n      }\n      const id = `g_${this.#docId}_luminosity_map_${this.#id++}`;\n      const url = this.#createUrl(id);\n      this.#cache.set(map, url);\n      this.#cache.set(key, url);\n      const filter = this.#createFilter(id);\n      this.#addLuminosityConversion(filter);\n      if (map) {\n        this.#addTransferMapAlphaConversion(tableA, filter);\n      }\n      return url;\n    }\n    addHighlightHCMFilter(filterName, fgColor, bgColor, newFgColor, newBgColor) {\n      const key = `${fgColor}-${bgColor}-${newFgColor}-${newBgColor}`;\n      let info = this.#hcmCache.get(filterName);\n      if (info?.key === key) {\n        return info.url;\n      }\n      if (info) {\n        info.filter?.remove();\n        info.key = key;\n        info.url = \"none\";\n        info.filter = null;\n      } else {\n        info = {\n          key,\n          url: \"none\",\n          filter: null\n        };\n        this.#hcmCache.set(filterName, info);\n      }\n      if (!fgColor || !bgColor) {\n        return info.url;\n      }\n      const [fgRGB, bgRGB] = [fgColor, bgColor].map(this.#getRGB.bind(this));\n      let fgGray = Math.round(0.2126 * fgRGB[0] + 0.7152 * fgRGB[1] + 0.0722 * fgRGB[2]);\n      let bgGray = Math.round(0.2126 * bgRGB[0] + 0.7152 * bgRGB[1] + 0.0722 * bgRGB[2]);\n      let [newFgRGB, newBgRGB] = [newFgColor, newBgColor].map(this.#getRGB.bind(this));\n      if (bgGray < fgGray) {\n        [fgGray, bgGray, newFgRGB, newBgRGB] = [bgGray, fgGray, newBgRGB, newFgRGB];\n      }\n      this.#defs.style.color = \"\";\n      const getSteps = (fg, bg, n) => {\n        const arr = new Array(256);\n        const step = (bgGray - fgGray) / n;\n        const newStart = fg / 255;\n        const newStep = (bg - fg) / (255 * n);\n        let prev = 0;\n        for (let i = 0; i <= n; i++) {\n          const k = Math.round(fgGray + i * step);\n          const value = newStart + i * newStep;\n          for (let j = prev; j <= k; j++) {\n            arr[j] = value;\n          }\n          prev = k + 1;\n        }\n        for (let i = prev; i < 256; i++) {\n          arr[i] = arr[prev - 1];\n        }\n        return arr.join(\",\");\n      };\n      const id = `g_${this.#docId}_hcm_${filterName}_filter`;\n      const filter = info.filter = this.#createFilter(id);\n      this.#addGrayConversion(filter);\n      this.#addTransferMapConversion(getSteps(newFgRGB[0], newBgRGB[0], 5), getSteps(newFgRGB[1], newBgRGB[1], 5), getSteps(newFgRGB[2], newBgRGB[2], 5), filter);\n      info.url = this.#createUrl(id);\n      return info.url;\n    }\n    destroy(keepHCM = false) {\n      if (keepHCM && this.#hcmCache.size !== 0) {\n        return;\n      }\n      if (this.#_defs) {\n        this.#_defs.parentNode.parentNode.remove();\n        this.#_defs = null;\n      }\n      if (this.#_cache) {\n        this.#_cache.clear();\n        this.#_cache = null;\n      }\n      this.#id = 0;\n    }\n    #addLuminosityConversion(filter) {\n      const feColorMatrix = this.#document.createElementNS(SVG_NS, \"feColorMatrix\");\n      feColorMatrix.setAttribute(\"type\", \"matrix\");\n      feColorMatrix.setAttribute(\"values\", \"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0.59 0.11 0 0\");\n      filter.append(feColorMatrix);\n    }\n    #addGrayConversion(filter) {\n      const feColorMatrix = this.#document.createElementNS(SVG_NS, \"feColorMatrix\");\n      feColorMatrix.setAttribute(\"type\", \"matrix\");\n      feColorMatrix.setAttribute(\"values\", \"0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0\");\n      filter.append(feColorMatrix);\n    }\n    #createFilter(id) {\n      const filter = this.#document.createElementNS(SVG_NS, \"filter\");\n      filter.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n      filter.setAttribute(\"id\", id);\n      this.#defs.append(filter);\n      return filter;\n    }\n    #appendFeFunc(feComponentTransfer, func, table) {\n      const feFunc = this.#document.createElementNS(SVG_NS, func);\n      feFunc.setAttribute(\"type\", \"discrete\");\n      feFunc.setAttribute(\"tableValues\", table);\n      feComponentTransfer.append(feFunc);\n    }\n    #addTransferMapConversion(rTable, gTable, bTable, filter) {\n      const feComponentTransfer = this.#document.createElementNS(SVG_NS, \"feComponentTransfer\");\n      filter.append(feComponentTransfer);\n      this.#appendFeFunc(feComponentTransfer, \"feFuncR\", rTable);\n      this.#appendFeFunc(feComponentTransfer, \"feFuncG\", gTable);\n      this.#appendFeFunc(feComponentTransfer, \"feFuncB\", bTable);\n    }\n    #addTransferMapAlphaConversion(aTable, filter) {\n      const feComponentTransfer = this.#document.createElementNS(SVG_NS, \"feComponentTransfer\");\n      filter.append(feComponentTransfer);\n      this.#appendFeFunc(feComponentTransfer, \"feFuncA\", aTable);\n    }\n    #getRGB(color) {\n      this.#defs.style.color = color;\n      return getRGB(getComputedStyle(this.#defs).getPropertyValue(\"color\"));\n    }\n  }\n  class DOMCanvasFactory extends BaseCanvasFactory {\n    constructor({\n      ownerDocument = globalThis.document,\n      enableHWA = false\n    }) {\n      super({\n        enableHWA\n      });\n      this._document = ownerDocument;\n    }\n    _createCanvas(width, height) {\n      const canvas = this._document.createElement(\"canvas\");\n      canvas.width = width;\n      canvas.height = height;\n      return canvas;\n    }\n  }\n  async function fetchData(url, type = \"text\") {\n    if (isValidFetchUrl(url, document.baseURI)) {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n      switch (type) {\n        case \"arraybuffer\":\n          return response.arrayBuffer();\n        case \"blob\":\n          return response.blob();\n        case \"json\":\n          return response.json();\n      }\n      return response.text();\n    }\n    return new Promise((resolve, reject) => {\n      const request = new XMLHttpRequest();\n      request.open(\"GET\", url, true);\n      request.responseType = type;\n      request.onreadystatechange = () => {\n        if (request.readyState !== XMLHttpRequest.DONE) {\n          return;\n        }\n        if (request.status === 200 || request.status === 0) {\n          switch (type) {\n            case \"arraybuffer\":\n            case \"blob\":\n            case \"json\":\n              resolve(request.response);\n              return;\n          }\n          resolve(request.responseText);\n          return;\n        }\n        reject(new Error(request.statusText));\n      };\n      request.send(null);\n    });\n  }\n  class DOMCMapReaderFactory extends BaseCMapReaderFactory {\n    _fetchData(url, compressionType) {\n      return fetchData(url, this.isCompressed ? \"arraybuffer\" : \"text\").then(data => ({\n        cMapData: data instanceof ArrayBuffer ? new Uint8Array(data) : stringToBytes(data),\n        compressionType\n      }));\n    }\n  }\n  class DOMStandardFontDataFactory extends BaseStandardFontDataFactory {\n    _fetchData(url) {\n      return fetchData(url, \"arraybuffer\").then(data => new Uint8Array(data));\n    }\n  }\n  class DOMSVGFactory extends BaseSVGFactory {\n    _createSVG(type) {\n      return document.createElementNS(SVG_NS, type);\n    }\n  }\n  class PageViewport {\n    constructor({\n      viewBox,\n      scale,\n      rotation,\n      offsetX = 0,\n      offsetY = 0,\n      dontFlip = false\n    }) {\n      this.viewBox = viewBox;\n      this.scale = scale;\n      this.rotation = rotation;\n      this.offsetX = offsetX;\n      this.offsetY = offsetY;\n      const centerX = (viewBox[2] + viewBox[0]) / 2;\n      const centerY = (viewBox[3] + viewBox[1]) / 2;\n      let rotateA, rotateB, rotateC, rotateD;\n      rotation %= 360;\n      if (rotation < 0) {\n        rotation += 360;\n      }\n      switch (rotation) {\n        case 180:\n          rotateA = -1;\n          rotateB = 0;\n          rotateC = 0;\n          rotateD = 1;\n          break;\n        case 90:\n          rotateA = 0;\n          rotateB = 1;\n          rotateC = 1;\n          rotateD = 0;\n          break;\n        case 270:\n          rotateA = 0;\n          rotateB = -1;\n          rotateC = -1;\n          rotateD = 0;\n          break;\n        case 0:\n          rotateA = 1;\n          rotateB = 0;\n          rotateC = 0;\n          rotateD = -1;\n          break;\n        default:\n          throw new Error(\"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\");\n      }\n      if (dontFlip) {\n        rotateC = -rotateC;\n        rotateD = -rotateD;\n      }\n      let offsetCanvasX, offsetCanvasY;\n      let width, height;\n      if (rotateA === 0) {\n        offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n        offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n        width = (viewBox[3] - viewBox[1]) * scale;\n        height = (viewBox[2] - viewBox[0]) * scale;\n      } else {\n        offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n        offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n        width = (viewBox[2] - viewBox[0]) * scale;\n        height = (viewBox[3] - viewBox[1]) * scale;\n      }\n      this.transform = [rotateA * scale, rotateB * scale, rotateC * scale, rotateD * scale, offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY, offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY];\n      this.width = width;\n      this.height = height;\n    }\n    get rawDims() {\n      const {\n        viewBox\n      } = this;\n      return shadow(this, \"rawDims\", {\n        pageWidth: viewBox[2] - viewBox[0],\n        pageHeight: viewBox[3] - viewBox[1],\n        pageX: viewBox[0],\n        pageY: viewBox[1]\n      });\n    }\n    clone({\n      scale = this.scale,\n      rotation = this.rotation,\n      offsetX = this.offsetX,\n      offsetY = this.offsetY,\n      dontFlip = false\n    } = {}) {\n      return new PageViewport({\n        viewBox: this.viewBox.slice(),\n        scale,\n        rotation,\n        offsetX,\n        offsetY,\n        dontFlip\n      });\n    }\n    convertToViewportPoint(x, y) {\n      return Util.applyTransform([x, y], this.transform);\n    }\n    convertToViewportRectangle(rect) {\n      const topLeft = Util.applyTransform([rect[0], rect[1]], this.transform);\n      const bottomRight = Util.applyTransform([rect[2], rect[3]], this.transform);\n      return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n    }\n    convertToPdfPoint(x, y) {\n      return Util.applyInverseTransform([x, y], this.transform);\n    }\n  }\n  class RenderingCancelledException extends BaseException {\n    constructor(msg, extraDelay = 0) {\n      super(msg, \"RenderingCancelledException\");\n      this.extraDelay = extraDelay;\n    }\n  }\n  function isDataScheme(url) {\n    const ii = url.length;\n    let i = 0;\n    while (i < ii && url[i].trim() === \"\") {\n      i++;\n    }\n    return url.substring(i, i + 5).toLowerCase() === \"data:\";\n  }\n  function isPdfFile(filename) {\n    return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n  }\n  function getFilenameFromUrl(url) {\n    [url] = url.split(/[#?]/, 1);\n    return url.substring(url.lastIndexOf(\"/\") + 1);\n  }\n  function getPdfFilenameFromUrl(url, defaultFilename = \"document.pdf\") {\n    if (typeof url !== \"string\") {\n      return defaultFilename;\n    }\n    if (isDataScheme(url)) {\n      warn('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n      return defaultFilename;\n    }\n    const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n    const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n    const splitURI = reURI.exec(url);\n    let suggestedFilename = reFilename.exec(splitURI[1]) || reFilename.exec(splitURI[2]) || reFilename.exec(splitURI[3]);\n    if (suggestedFilename) {\n      suggestedFilename = suggestedFilename[0];\n      if (suggestedFilename.includes(\"%\")) {\n        try {\n          suggestedFilename = reFilename.exec(decodeURIComponent(suggestedFilename))[0];\n        } catch {}\n      }\n    }\n    return suggestedFilename || defaultFilename;\n  }\n  class StatTimer {\n    started = Object.create(null);\n    times = [];\n    time(name) {\n      if (name in this.started) {\n        warn(`Timer is already running for ${name}`);\n      }\n      this.started[name] = Date.now();\n    }\n    timeEnd(name) {\n      if (!(name in this.started)) {\n        warn(`Timer has not been started for ${name}`);\n      }\n      this.times.push({\n        name,\n        start: this.started[name],\n        end: Date.now()\n      });\n      delete this.started[name];\n    }\n    toString() {\n      const outBuf = [];\n      let longest = 0;\n      for (const {\n        name\n      } of this.times) {\n        longest = Math.max(name.length, longest);\n      }\n      for (const {\n        name,\n        start,\n        end\n      } of this.times) {\n        outBuf.push(`${name.padEnd(longest)} ${end - start}ms\\n`);\n      }\n      return outBuf.join(\"\");\n    }\n  }\n  function isValidFetchUrl(url, baseUrl) {\n    try {\n      const {\n        protocol\n      } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n      return protocol === \"http:\" || protocol === \"https:\";\n    } catch {\n      return false;\n    }\n  }\n  function noContextMenu(e) {\n    e.preventDefault();\n  }\n  function deprecated(details) {\n    console.log(\"Deprecated API usage: \" + details);\n  }\n  let pdfDateStringRegex;\n  class PDFDateString {\n    static toDateObject(input) {\n      if (!input || typeof input !== \"string\") {\n        return null;\n      }\n      pdfDateStringRegex ||= new RegExp(\"^D:\" + \"(\\\\d{4})\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"(\\\\d{2})?\" + \"([Z|+|-])?\" + \"(\\\\d{2})?\" + \"'?\" + \"(\\\\d{2})?\" + \"'?\");\n      const matches = pdfDateStringRegex.exec(input);\n      if (!matches) {\n        return null;\n      }\n      const year = parseInt(matches[1], 10);\n      let month = parseInt(matches[2], 10);\n      month = month >= 1 && month <= 12 ? month - 1 : 0;\n      let day = parseInt(matches[3], 10);\n      day = day >= 1 && day <= 31 ? day : 1;\n      let hour = parseInt(matches[4], 10);\n      hour = hour >= 0 && hour <= 23 ? hour : 0;\n      let minute = parseInt(matches[5], 10);\n      minute = minute >= 0 && minute <= 59 ? minute : 0;\n      let second = parseInt(matches[6], 10);\n      second = second >= 0 && second <= 59 ? second : 0;\n      const universalTimeRelation = matches[7] || \"Z\";\n      let offsetHour = parseInt(matches[8], 10);\n      offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n      let offsetMinute = parseInt(matches[9], 10) || 0;\n      offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n      if (universalTimeRelation === \"-\") {\n        hour += offsetHour;\n        minute += offsetMinute;\n      } else if (universalTimeRelation === \"+\") {\n        hour -= offsetHour;\n        minute -= offsetMinute;\n      }\n      return new Date(Date.UTC(year, month, day, hour, minute, second));\n    }\n  }\n  function getXfaPageViewport(xfaPage, {\n    scale = 1,\n    rotation = 0\n  }) {\n    const {\n      width,\n      height\n    } = xfaPage.attributes.style;\n    const viewBox = [0, 0, parseInt(width), parseInt(height)];\n    return new PageViewport({\n      viewBox,\n      scale,\n      rotation\n    });\n  }\n  function getRGB(color) {\n    if (color.startsWith(\"#\")) {\n      const colorRGB = parseInt(color.slice(1), 16);\n      return [(colorRGB & 0xff0000) >> 16, (colorRGB & 0x00ff00) >> 8, colorRGB & 0x0000ff];\n    }\n    if (color.startsWith(\"rgb(\")) {\n      return color.slice(4, -1).split(\",\").map(x => parseInt(x));\n    }\n    if (color.startsWith(\"rgba(\")) {\n      return color.slice(5, -1).split(\",\").map(x => parseInt(x)).slice(0, 3);\n    }\n    warn(`Not a valid color format: \"${color}\"`);\n    return [0, 0, 0];\n  }\n  function getColorValues(colors) {\n    const span = document.createElement(\"span\");\n    span.style.visibility = \"hidden\";\n    document.body.append(span);\n    for (const name of colors.keys()) {\n      span.style.color = name;\n      const computedColor = window.getComputedStyle(span).color;\n      colors.set(name, getRGB(computedColor));\n    }\n    span.remove();\n  }\n  function getCurrentTransform(ctx) {\n    const {\n      a,\n      b,\n      c,\n      d,\n      e,\n      f\n    } = ctx.getTransform();\n    return [a, b, c, d, e, f];\n  }\n  function getCurrentTransformInverse(ctx) {\n    const {\n      a,\n      b,\n      c,\n      d,\n      e,\n      f\n    } = ctx.getTransform().invertSelf();\n    return [a, b, c, d, e, f];\n  }\n  function setLayerDimensions(div, viewport, mustFlip = false, mustRotate = true) {\n    if (viewport instanceof PageViewport) {\n      const {\n        pageWidth,\n        pageHeight\n      } = viewport.rawDims;\n      const {\n        style\n      } = div;\n      const useRound = util_FeatureTest.isCSSRoundSupported;\n      const w = `var(--scale-factor) * ${pageWidth}px`,\n        h = `var(--scale-factor) * ${pageHeight}px`;\n      const widthStr = useRound ? `round(down, ${w}, var(--scale-round-x, 1px))` : `calc(${w})`,\n        heightStr = useRound ? `round(down, ${h}, var(--scale-round-y, 1px))` : `calc(${h})`;\n      if (!mustFlip || viewport.rotation % 180 === 0) {\n        style.width = widthStr;\n        style.height = heightStr;\n      } else {\n        style.width = heightStr;\n        style.height = widthStr;\n      }\n    }\n    if (mustRotate) {\n      div.setAttribute(\"data-main-rotation\", viewport.rotation);\n    }\n  }\n  class OutputScale {\n    constructor() {\n      const pixelRatio = window.devicePixelRatio || 1;\n      this.sx = pixelRatio;\n      this.sy = pixelRatio;\n    }\n    get scaled() {\n      return this.sx !== 1 || this.sy !== 1;\n    }\n    get symmetric() {\n      return this.sx === this.sy;\n    }\n  }\n\n  class EditorToolbar {\n    #toolbar = null;\n    #colorPicker = null;\n    #editor;\n    #buttons = null;\n    #altText = null;\n    static #l10nRemove = null;\n    constructor(editor) {\n      this.#editor = editor;\n      EditorToolbar.#l10nRemove ||= Object.freeze({\n        freetext: \"pdfjs-editor-remove-freetext-button\",\n        highlight: \"pdfjs-editor-remove-highlight-button\",\n        ink: \"pdfjs-editor-remove-ink-button\",\n        stamp: \"pdfjs-editor-remove-stamp-button\"\n      });\n    }\n    render() {\n      const editToolbar = this.#toolbar = document.createElement(\"div\");\n      editToolbar.classList.add(\"editToolbar\", \"hidden\");\n      editToolbar.setAttribute(\"role\", \"toolbar\");\n      const signal = this.#editor._uiManager._signal;\n      editToolbar.addEventListener(\"contextmenu\", noContextMenu, {\n        signal\n      });\n      editToolbar.addEventListener(\"pointerdown\", EditorToolbar.#pointerDown, {\n        signal\n      });\n      const buttons = this.#buttons = document.createElement(\"div\");\n      buttons.className = \"buttons\";\n      editToolbar.append(buttons);\n      const position = this.#editor.toolbarPosition;\n      if (position) {\n        const {\n          style\n        } = editToolbar;\n        const x = this.#editor._uiManager.direction === \"ltr\" ? 1 - position[0] : position[0];\n        style.insetInlineEnd = `${100 * x}%`;\n        style.top = `calc(${100 * position[1]}% + var(--editor-toolbar-vert-offset))`;\n      }\n      this.#addDeleteButton();\n      return editToolbar;\n    }\n    get div() {\n      return this.#toolbar;\n    }\n    static #pointerDown(e) {\n      e.stopPropagation();\n    }\n    #focusIn(e) {\n      this.#editor._focusEventsAllowed = false;\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    #focusOut(e) {\n      this.#editor._focusEventsAllowed = true;\n      e.preventDefault();\n      e.stopPropagation();\n    }\n    #addListenersToElement(element) {\n      const signal = this.#editor._uiManager._signal;\n      element.addEventListener(\"focusin\", this.#focusIn.bind(this), {\n        capture: true,\n        signal\n      });\n      element.addEventListener(\"focusout\", this.#focusOut.bind(this), {\n        capture: true,\n        signal\n      });\n      element.addEventListener(\"contextmenu\", noContextMenu, {\n        signal\n      });\n    }\n    hide() {\n      this.#toolbar.classList.add(\"hidden\");\n      this.#colorPicker?.hideDropdown();\n    }\n    show() {\n      this.#toolbar.classList.remove(\"hidden\");\n      this.#altText?.shown();\n    }\n    #addDeleteButton() {\n      const {\n        editorType,\n        _uiManager\n      } = this.#editor;\n      const button = document.createElement(\"button\");\n      button.className = \"delete\";\n      button.tabIndex = 0;\n      button.setAttribute(\"data-l10n-id\", EditorToolbar.#l10nRemove[editorType]);\n      this.#addListenersToElement(button);\n      button.addEventListener(\"click\", e => {\n        _uiManager.delete();\n      }, {\n        signal: _uiManager._signal\n      });\n      this.#buttons.append(button);\n    }\n    get #divider() {\n      const divider = document.createElement(\"div\");\n      divider.className = \"divider\";\n      return divider;\n    }\n    async addAltText(altText) {\n      const button = await altText.render();\n      this.#addListenersToElement(button);\n      this.#buttons.prepend(button, this.#divider);\n      this.#altText = altText;\n    }\n    addColorPicker(colorPicker) {\n      this.#colorPicker = colorPicker;\n      const button = colorPicker.renderButton();\n      this.#addListenersToElement(button);\n      this.#buttons.prepend(button, this.#divider);\n    }\n    remove() {\n      this.#toolbar.remove();\n      this.#colorPicker?.destroy();\n      this.#colorPicker = null;\n    }\n  }\n  class HighlightToolbar {\n    #buttons = null;\n    #toolbar = null;\n    #uiManager;\n    constructor(uiManager) {\n      this.#uiManager = uiManager;\n    }\n    #render() {\n      const editToolbar = this.#toolbar = document.createElement(\"div\");\n      editToolbar.className = \"editToolbar\";\n      editToolbar.setAttribute(\"role\", \"toolbar\");\n      editToolbar.addEventListener(\"contextmenu\", noContextMenu, {\n        signal: this.#uiManager._signal\n      });\n      const buttons = this.#buttons = document.createElement(\"div\");\n      buttons.className = \"buttons\";\n      editToolbar.append(buttons);\n      this.#addHighlightButton();\n      return editToolbar;\n    }\n    #getLastPoint(boxes, isLTR) {\n      let lastY = 0;\n      let lastX = 0;\n      for (const box of boxes) {\n        const y = box.y + box.height;\n        if (y < lastY) {\n          continue;\n        }\n        const x = box.x + (isLTR ? box.width : 0);\n        if (y > lastY) {\n          lastX = x;\n          lastY = y;\n          continue;\n        }\n        if (isLTR) {\n          if (x > lastX) {\n            lastX = x;\n          }\n        } else if (x < lastX) {\n          lastX = x;\n        }\n      }\n      return [isLTR ? 1 - lastX : lastX, lastY];\n    }\n    show(parent, boxes, isLTR) {\n      const [x, y] = this.#getLastPoint(boxes, isLTR);\n      const {\n        style\n      } = this.#toolbar ||= this.#render();\n      parent.append(this.#toolbar);\n      style.insetInlineEnd = `${100 * x}%`;\n      style.top = `calc(${100 * y}% + var(--editor-toolbar-vert-offset))`;\n    }\n    hide() {\n      this.#toolbar.remove();\n    }\n    #addHighlightButton() {\n      const button = document.createElement(\"button\");\n      button.className = \"highlightButton\";\n      button.tabIndex = 0;\n      button.setAttribute(\"data-l10n-id\", `pdfjs-highlight-floating-button1`);\n      const span = document.createElement(\"span\");\n      button.append(span);\n      span.className = \"visuallyHidden\";\n      span.setAttribute(\"data-l10n-id\", \"pdfjs-highlight-floating-button-label\");\n      const signal = this.#uiManager._signal;\n      button.addEventListener(\"contextmenu\", noContextMenu, {\n        signal\n      });\n      button.addEventListener(\"click\", () => {\n        this.#uiManager.highlightSelection(\"floating_button\");\n      }, {\n        signal\n      });\n      this.#buttons.append(button);\n    }\n  }\n\n\n\n  function bindEvents(obj, element, names) {\n    for (const name of names) {\n      element.addEventListener(name, obj[name].bind(obj));\n    }\n  }\n  function opacityToHex(opacity) {\n    return Math.round(Math.min(255, Math.max(1, 255 * opacity))).toString(16).padStart(2, \"0\");\n  }\n  class IdManager {\n    #id = 0;\n    get id() {\n      return `${AnnotationEditorPrefix}${this.#id++}`;\n    }\n  }\n  class ImageManager {\n    #baseId = getUuid();\n    #id = 0;\n    #cache = null;\n    static get _isSVGFittingCanvas() {\n      const svg = `data:image/svg+xml;charset=UTF-8,<svg viewBox=\"0 0 1 1\" width=\"1\" height=\"1\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"1\" height=\"1\" style=\"fill:red;\"/></svg>`;\n      const canvas = new OffscreenCanvas(1, 3);\n      const ctx = canvas.getContext(\"2d\", {\n        willReadFrequently: true\n      });\n      const image = new Image();\n      image.src = svg;\n      const promise = image.decode().then(() => {\n        ctx.drawImage(image, 0, 0, 1, 1, 0, 0, 1, 3);\n        return new Uint32Array(ctx.getImageData(0, 0, 1, 1).data.buffer)[0] === 0;\n      });\n      return shadow(this, \"_isSVGFittingCanvas\", promise);\n    }\n    async #get(key, rawData) {\n      this.#cache ||= new Map();\n      let data = this.#cache.get(key);\n      if (data === null) {\n        return null;\n      }\n      if (data?.bitmap) {\n        data.refCounter += 1;\n        return data;\n      }\n      try {\n        data ||= {\n          bitmap: null,\n          id: `image_${this.#baseId}_${this.#id++}`,\n          refCounter: 0,\n          isSvg: false\n        };\n        let image;\n        if (typeof rawData === \"string\") {\n          data.url = rawData;\n          image = await fetchData(rawData, \"blob\");\n        } else if (rawData instanceof File) {\n          image = data.file = rawData;\n        } else if (rawData instanceof Blob) {\n          image = rawData;\n        }\n        if (image.type === \"image/svg+xml\") {\n          const mustRemoveAspectRatioPromise = ImageManager._isSVGFittingCanvas;\n          const fileReader = new FileReader();\n          const imageElement = new Image();\n          const imagePromise = new Promise((resolve, reject) => {\n            imageElement.onload = () => {\n              data.bitmap = imageElement;\n              data.isSvg = true;\n              resolve();\n            };\n            fileReader.onload = async () => {\n              const url = data.svgUrl = fileReader.result;\n              imageElement.src = (await mustRemoveAspectRatioPromise) ? `${url}#svgView(preserveAspectRatio(none))` : url;\n            };\n            imageElement.onerror = fileReader.onerror = reject;\n          });\n          fileReader.readAsDataURL(image);\n          await imagePromise;\n        } else {\n          data.bitmap = await createImageBitmap(image);\n        }\n        data.refCounter = 1;\n      } catch (e) {\n        console.error(e);\n        data = null;\n      }\n      this.#cache.set(key, data);\n      if (data) {\n        this.#cache.set(data.id, data);\n      }\n      return data;\n    }\n    async getFromFile(file) {\n      const {\n        lastModified,\n        name,\n        size,\n        type\n      } = file;\n      return this.#get(`${lastModified}_${name}_${size}_${type}`, file);\n    }\n    async getFromUrl(url) {\n      return this.#get(url, url);\n    }\n    async getFromBlob(id, blobPromise) {\n      const blob = await blobPromise;\n      return this.#get(id, blob);\n    }\n    async getFromId(id) {\n      this.#cache ||= new Map();\n      const data = this.#cache.get(id);\n      if (!data) {\n        return null;\n      }\n      if (data.bitmap) {\n        data.refCounter += 1;\n        return data;\n      }\n      if (data.file) {\n        return this.getFromFile(data.file);\n      }\n      if (data.blobPromise) {\n        const {\n          blobPromise\n        } = data;\n        delete data.blobPromise;\n        return this.getFromBlob(data.id, blobPromise);\n      }\n      return this.getFromUrl(data.url);\n    }\n    getFromCanvas(id, canvas) {\n      this.#cache ||= new Map();\n      let data = this.#cache.get(id);\n      if (data?.bitmap) {\n        data.refCounter += 1;\n        return data;\n      }\n      const offscreen = new OffscreenCanvas(canvas.width, canvas.height);\n      const ctx = offscreen.getContext(\"2d\");\n      ctx.drawImage(canvas, 0, 0);\n      data = {\n        bitmap: offscreen.transferToImageBitmap(),\n        id: `image_${this.#baseId}_${this.#id++}`,\n        refCounter: 1,\n        isSvg: false\n      };\n      this.#cache.set(id, data);\n      this.#cache.set(data.id, data);\n      return data;\n    }\n    getSvgUrl(id) {\n      const data = this.#cache.get(id);\n      if (!data?.isSvg) {\n        return null;\n      }\n      return data.svgUrl;\n    }\n    deleteId(id) {\n      this.#cache ||= new Map();\n      const data = this.#cache.get(id);\n      if (!data) {\n        return;\n      }\n      data.refCounter -= 1;\n      if (data.refCounter !== 0) {\n        return;\n      }\n      const {\n        bitmap\n      } = data;\n      if (!data.url && !data.file) {\n        const canvas = new OffscreenCanvas(bitmap.width, bitmap.height);\n        const ctx = canvas.getContext(\"bitmaprenderer\");\n        ctx.transferFromImageBitmap(bitmap);\n        data.blobPromise = canvas.convertToBlob();\n      }\n      bitmap.close?.();\n      data.bitmap = null;\n    }\n    isValidId(id) {\n      return id.startsWith(`image_${this.#baseId}_`);\n    }\n  }\n  class CommandManager {\n    #commands = [];\n    #locked = false;\n    #maxSize;\n    #position = -1;\n    constructor(maxSize = 128) {\n      this.#maxSize = maxSize;\n    }\n    add({\n      cmd,\n      undo,\n      post,\n      mustExec,\n      type = NaN,\n      overwriteIfSameType = false,\n      keepUndo = false\n    }) {\n      if (mustExec) {\n        cmd();\n      }\n      if (this.#locked) {\n        return;\n      }\n      const save = {\n        cmd,\n        undo,\n        post,\n        type\n      };\n      if (this.#position === -1) {\n        if (this.#commands.length > 0) {\n          this.#commands.length = 0;\n        }\n        this.#position = 0;\n        this.#commands.push(save);\n        return;\n      }\n      if (overwriteIfSameType && this.#commands[this.#position].type === type) {\n        if (keepUndo) {\n          save.undo = this.#commands[this.#position].undo;\n        }\n        this.#commands[this.#position] = save;\n        return;\n      }\n      const next = this.#position + 1;\n      if (next === this.#maxSize) {\n        this.#commands.splice(0, 1);\n      } else {\n        this.#position = next;\n        if (next < this.#commands.length) {\n          this.#commands.splice(next);\n        }\n      }\n      this.#commands.push(save);\n    }\n    undo() {\n      if (this.#position === -1) {\n        return;\n      }\n      this.#locked = true;\n      const {\n        undo,\n        post\n      } = this.#commands[this.#position];\n      undo();\n      post?.();\n      this.#locked = false;\n      this.#position -= 1;\n    }\n    redo() {\n      if (this.#position < this.#commands.length - 1) {\n        this.#position += 1;\n        this.#locked = true;\n        const {\n          cmd,\n          post\n        } = this.#commands[this.#position];\n        cmd();\n        post?.();\n        this.#locked = false;\n      }\n    }\n    hasSomethingToUndo() {\n      return this.#position !== -1;\n    }\n    hasSomethingToRedo() {\n      return this.#position < this.#commands.length - 1;\n    }\n    destroy() {\n      this.#commands = null;\n    }\n  }\n  class KeyboardManager {\n    constructor(callbacks) {\n      this.buffer = [];\n      this.callbacks = new Map();\n      this.allKeys = new Set();\n      const {\n        isMac\n      } = util_FeatureTest.platform;\n      for (const [keys, callback, options = {}] of callbacks) {\n        for (const key of keys) {\n          const isMacKey = key.startsWith(\"mac+\");\n          if (isMac && isMacKey) {\n            this.callbacks.set(key.slice(4), {\n              callback,\n              options\n            });\n            this.allKeys.add(key.split(\"+\").at(-1));\n          } else if (!isMac && !isMacKey) {\n            this.callbacks.set(key, {\n              callback,\n              options\n            });\n            this.allKeys.add(key.split(\"+\").at(-1));\n          }\n        }\n      }\n    }\n    #serialize(event) {\n      if (event.altKey) {\n        this.buffer.push(\"alt\");\n      }\n      if (event.ctrlKey) {\n        this.buffer.push(\"ctrl\");\n      }\n      if (event.metaKey) {\n        this.buffer.push(\"meta\");\n      }\n      if (event.shiftKey) {\n        this.buffer.push(\"shift\");\n      }\n      this.buffer.push(event.key);\n      const str = this.buffer.join(\"+\");\n      this.buffer.length = 0;\n      return str;\n    }\n    exec(self, event) {\n      if (!this.allKeys.has(event.key)) {\n        return;\n      }\n      const info = this.callbacks.get(this.#serialize(event));\n      if (!info) {\n        return;\n      }\n      const {\n        callback,\n        options: {\n          bubbles = false,\n          args = [],\n          checker = null\n        }\n      } = info;\n      if (checker && !checker(self, event)) {\n        return;\n      }\n      callback.bind(self, ...args, event)();\n      if (!bubbles) {\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    }\n  }\n  class ColorManager {\n    static _colorsMapping = new Map([[\"CanvasText\", [0, 0, 0]], [\"Canvas\", [255, 255, 255]]]);\n    get _colors() {\n      const colors = new Map([[\"CanvasText\", null], [\"Canvas\", null]]);\n      getColorValues(colors);\n      return shadow(this, \"_colors\", colors);\n    }\n    convert(color) {\n      const rgb = getRGB(color);\n      if (!window.matchMedia(\"(forced-colors: active)\").matches) {\n        return rgb;\n      }\n      for (const [name, RGB] of this._colors) {\n        if (RGB.every((x, i) => x === rgb[i])) {\n          return ColorManager._colorsMapping.get(name);\n        }\n      }\n      return rgb;\n    }\n    getHexCode(name) {\n      const rgb = this._colors.get(name);\n      if (!rgb) {\n        return name;\n      }\n      return Util.makeHexColor(...rgb);\n    }\n  }\n  class AnnotationEditorUIManager {\n    #abortController = new AbortController();\n    #activeEditor = null;\n    #allEditors = new Map();\n    #allLayers = new Map();\n    #altTextManager = null;\n    #annotationStorage = null;\n    #changedExistingAnnotations = null;\n    #commandManager = new CommandManager();\n    #copyPasteAC = null;\n    #currentPageIndex = 0;\n    #deletedAnnotationsElementIds = new Set();\n    #draggingEditors = null;\n    #editorTypes = null;\n    #editorsToRescale = new Set();\n    #enableHighlightFloatingButton = false;\n    #enableUpdatedAddImage = false;\n    #enableNewAltTextWhenAddingImage = false;\n    #filterFactory = null;\n    #focusMainContainerTimeoutId = null;\n    #focusManagerAC = null;\n    #highlightColors = null;\n    #highlightWhenShiftUp = false;\n    #highlightToolbar = null;\n    #idManager = new IdManager();\n    #isEnabled = false;\n    #isWaiting = false;\n    #keyboardManagerAC = null;\n    #lastActiveElement = null;\n    #mainHighlightColorPicker = null;\n    #mlManager = null;\n    #mode = AnnotationEditorType.NONE;\n    #selectedEditors = new Set();\n    #selectedTextNode = null;\n    #pageColors = null;\n    #showAllStates = null;\n    #previousStates = {\n      isEditing: false,\n      isEmpty: true,\n      hasSomethingToUndo: false,\n      hasSomethingToRedo: false,\n      hasSelectedEditor: false,\n      hasSelectedText: false\n    };\n    #translation = [0, 0];\n    #translationTimeoutId = null;\n    #container = null;\n    #viewer = null;\n    #updateModeCapability = null;\n    static TRANSLATE_SMALL = 1;\n    static TRANSLATE_BIG = 10;\n    static get _keyboardManager() {\n      const proto = AnnotationEditorUIManager.prototype;\n      const arrowChecker = self => self.#container.contains(document.activeElement) && document.activeElement.tagName !== \"BUTTON\" && self.hasSomethingToControl();\n      const textInputChecker = (_self, {\n        target: el\n      }) => {\n        if (el instanceof HTMLInputElement) {\n          const {\n            type\n          } = el;\n          return type !== \"text\" && type !== \"number\";\n        }\n        return true;\n      };\n      const small = this.TRANSLATE_SMALL;\n      const big = this.TRANSLATE_BIG;\n      return shadow(this, \"_keyboardManager\", new KeyboardManager([[[\"ctrl+a\", \"mac+meta+a\"], proto.selectAll, {\n        checker: textInputChecker\n      }], [[\"ctrl+z\", \"mac+meta+z\"], proto.undo, {\n        checker: textInputChecker\n      }], [[\"ctrl+y\", \"ctrl+shift+z\", \"mac+meta+shift+z\", \"ctrl+shift+Z\", \"mac+meta+shift+Z\"], proto.redo, {\n        checker: textInputChecker\n      }], [[\"Backspace\", \"alt+Backspace\", \"ctrl+Backspace\", \"shift+Backspace\", \"mac+Backspace\", \"mac+alt+Backspace\", \"mac+ctrl+Backspace\", \"Delete\", \"ctrl+Delete\", \"shift+Delete\", \"mac+Delete\"], proto.delete, {\n        checker: textInputChecker\n      }], [[\"Enter\", \"mac+Enter\"], proto.addNewEditorFromKeyboard, {\n        checker: (self, {\n          target: el\n        }) => !(el instanceof HTMLButtonElement) && self.#container.contains(el) && !self.isEnterHandled\n      }], [[\" \", \"mac+ \"], proto.addNewEditorFromKeyboard, {\n        checker: (self, {\n          target: el\n        }) => !(el instanceof HTMLButtonElement) && self.#container.contains(document.activeElement)\n      }], [[\"Escape\", \"mac+Escape\"], proto.unselectAll], [[\"ArrowLeft\", \"mac+ArrowLeft\"], proto.translateSelectedEditors, {\n        args: [-small, 0],\n        checker: arrowChecker\n      }], [[\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"], proto.translateSelectedEditors, {\n        args: [-big, 0],\n        checker: arrowChecker\n      }], [[\"ArrowRight\", \"mac+ArrowRight\"], proto.translateSelectedEditors, {\n        args: [small, 0],\n        checker: arrowChecker\n      }], [[\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"], proto.translateSelectedEditors, {\n        args: [big, 0],\n        checker: arrowChecker\n      }], [[\"ArrowUp\", \"mac+ArrowUp\"], proto.translateSelectedEditors, {\n        args: [0, -small],\n        checker: arrowChecker\n      }], [[\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"], proto.translateSelectedEditors, {\n        args: [0, -big],\n        checker: arrowChecker\n      }], [[\"ArrowDown\", \"mac+ArrowDown\"], proto.translateSelectedEditors, {\n        args: [0, small],\n        checker: arrowChecker\n      }], [[\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"], proto.translateSelectedEditors, {\n        args: [0, big],\n        checker: arrowChecker\n      }]]));\n    }\n    constructor(container, viewer, altTextManager, eventBus, pdfDocument, pageColors, highlightColors, enableHighlightFloatingButton, enableUpdatedAddImage, enableNewAltTextWhenAddingImage, mlManager) {\n      const signal = this._signal = this.#abortController.signal;\n      this.#container = container;\n      this.#viewer = viewer;\n      this.#altTextManager = altTextManager;\n      this._eventBus = eventBus;\n      eventBus._on(\"editingaction\", this.onEditingAction.bind(this), {\n        signal\n      });\n      eventBus._on(\"pagechanging\", this.onPageChanging.bind(this), {\n        signal\n      });\n      eventBus._on(\"scalechanging\", this.onScaleChanging.bind(this), {\n        signal\n      });\n      eventBus._on(\"rotationchanging\", this.onRotationChanging.bind(this), {\n        signal\n      });\n      eventBus._on(\"setpreference\", this.onSetPreference.bind(this), {\n        signal\n      });\n      eventBus._on(\"switchannotationeditorparams\", evt => this.updateParams(evt.type, evt.value), {\n        signal\n      });\n      this.#addSelectionListener();\n      this.#addDragAndDropListeners();\n      this.#addKeyboardManager();\n      this.#annotationStorage = pdfDocument.annotationStorage;\n      this.#filterFactory = pdfDocument.filterFactory;\n      this.#pageColors = pageColors;\n      this.#highlightColors = highlightColors || null;\n      this.#enableHighlightFloatingButton = enableHighlightFloatingButton;\n      this.#enableUpdatedAddImage = enableUpdatedAddImage;\n      this.#enableNewAltTextWhenAddingImage = enableNewAltTextWhenAddingImage;\n      this.#mlManager = mlManager || null;\n      this.viewParameters = {\n        realScale: PixelsPerInch.PDF_TO_CSS_UNITS,\n        rotation: 0\n      };\n      this.isShiftKeyDown = false;\n    }\n    destroy() {\n      this.#updateModeCapability?.resolve();\n      this.#updateModeCapability = null;\n      this.#abortController?.abort();\n      this.#abortController = null;\n      this._signal = null;\n      for (const layer of this.#allLayers.values()) {\n        layer.destroy();\n      }\n      this.#allLayers.clear();\n      this.#allEditors.clear();\n      this.#editorsToRescale.clear();\n      this.#activeEditor = null;\n      this.#selectedEditors.clear();\n      this.#commandManager.destroy();\n      this.#altTextManager?.destroy();\n      this.#highlightToolbar?.hide();\n      this.#highlightToolbar = null;\n      if (this.#focusMainContainerTimeoutId) {\n        clearTimeout(this.#focusMainContainerTimeoutId);\n        this.#focusMainContainerTimeoutId = null;\n      }\n      if (this.#translationTimeoutId) {\n        clearTimeout(this.#translationTimeoutId);\n        this.#translationTimeoutId = null;\n      }\n    }\n    combinedSignal(ac) {\n      return AbortSignal.any([this._signal, ac.signal]);\n    }\n    get mlManager() {\n      return this.#mlManager;\n    }\n    get useNewAltTextFlow() {\n      return this.#enableUpdatedAddImage;\n    }\n    get useNewAltTextWhenAddingImage() {\n      return this.#enableNewAltTextWhenAddingImage;\n    }\n    get hcmFilter() {\n      return shadow(this, \"hcmFilter\", this.#pageColors ? this.#filterFactory.addHCMFilter(this.#pageColors.foreground, this.#pageColors.background) : \"none\");\n    }\n    get direction() {\n      return shadow(this, \"direction\", getComputedStyle(this.#container).direction);\n    }\n    get highlightColors() {\n      return shadow(this, \"highlightColors\", this.#highlightColors ? new Map(this.#highlightColors.split(\",\").map(pair => pair.split(\"=\").map(x => x.trim()))) : null);\n    }\n    get highlightColorNames() {\n      return shadow(this, \"highlightColorNames\", this.highlightColors ? new Map(Array.from(this.highlightColors, e => e.reverse())) : null);\n    }\n    setMainHighlightColorPicker(colorPicker) {\n      this.#mainHighlightColorPicker = colorPicker;\n    }\n    editAltText(editor, firstTime = false) {\n      this.#altTextManager?.editAltText(this, editor, firstTime);\n    }\n    switchToMode(mode, callback) {\n      this._eventBus.on(\"annotationeditormodechanged\", callback, {\n        once: true,\n        signal: this._signal\n      });\n      this._eventBus.dispatch(\"showannotationeditorui\", {\n        source: this,\n        mode\n      });\n    }\n    setPreference(name, value) {\n      this._eventBus.dispatch(\"setpreference\", {\n        source: this,\n        name,\n        value\n      });\n    }\n    onSetPreference({\n      name,\n      value\n    }) {\n      switch (name) {\n        case \"enableNewAltTextWhenAddingImage\":\n          this.#enableNewAltTextWhenAddingImage = value;\n          break;\n      }\n    }\n    onPageChanging({\n      pageNumber\n    }) {\n      this.#currentPageIndex = pageNumber - 1;\n    }\n    focusMainContainer() {\n      this.#container.focus();\n    }\n    findParent(x, y) {\n      for (const layer of this.#allLayers.values()) {\n        const {\n          x: layerX,\n          y: layerY,\n          width,\n          height\n        } = layer.div.getBoundingClientRect();\n        if (x >= layerX && x <= layerX + width && y >= layerY && y <= layerY + height) {\n          return layer;\n        }\n      }\n      return null;\n    }\n    disableUserSelect(value = false) {\n      this.#viewer.classList.toggle(\"noUserSelect\", value);\n    }\n    addShouldRescale(editor) {\n      this.#editorsToRescale.add(editor);\n    }\n    removeShouldRescale(editor) {\n      this.#editorsToRescale.delete(editor);\n    }\n    onScaleChanging({\n      scale\n    }) {\n      this.commitOrRemove();\n      this.viewParameters.realScale = scale * PixelsPerInch.PDF_TO_CSS_UNITS;\n      for (const editor of this.#editorsToRescale) {\n        editor.onScaleChanging();\n      }\n    }\n    onRotationChanging({\n      pagesRotation\n    }) {\n      this.commitOrRemove();\n      this.viewParameters.rotation = pagesRotation;\n    }\n    #getAnchorElementForSelection({\n      anchorNode\n    }) {\n      return anchorNode.nodeType === Node.TEXT_NODE ? anchorNode.parentElement : anchorNode;\n    }\n    #getLayerForTextLayer(textLayer) {\n      const {\n        currentLayer\n      } = this;\n      if (currentLayer.hasTextLayer(textLayer)) {\n        return currentLayer;\n      }\n      for (const layer of this.#allLayers.values()) {\n        if (layer.hasTextLayer(textLayer)) {\n          return layer;\n        }\n      }\n      return null;\n    }\n    highlightSelection(methodOfCreation = \"\") {\n      const selection = document.getSelection();\n      if (!selection || selection.isCollapsed) {\n        return;\n      }\n      const {\n        anchorNode,\n        anchorOffset,\n        focusNode,\n        focusOffset\n      } = selection;\n      const text = selection.toString();\n      const anchorElement = this.#getAnchorElementForSelection(selection);\n      const textLayer = anchorElement.closest(\".textLayer\");\n      const boxes = this.getSelectionBoxes(textLayer);\n      if (!boxes) {\n        return;\n      }\n      selection.empty();\n      const layer = this.#getLayerForTextLayer(textLayer);\n      const isNoneMode = this.#mode === AnnotationEditorType.NONE;\n      const callback = () => {\n        layer?.createAndAddNewEditor({\n          x: 0,\n          y: 0\n        }, false, {\n          methodOfCreation,\n          boxes,\n          anchorNode,\n          anchorOffset,\n          focusNode,\n          focusOffset,\n          text\n        });\n        if (isNoneMode) {\n          this.showAllEditors(\"highlight\", true, true);\n        }\n      };\n      if (isNoneMode) {\n        this.switchToMode(AnnotationEditorType.HIGHLIGHT, callback);\n        return;\n      }\n      callback();\n    }\n    #displayHighlightToolbar() {\n      const selection = document.getSelection();\n      if (!selection || selection.isCollapsed) {\n        return;\n      }\n      const anchorElement = this.#getAnchorElementForSelection(selection);\n      const textLayer = anchorElement.closest(\".textLayer\");\n      const boxes = this.getSelectionBoxes(textLayer);\n      if (!boxes) {\n        return;\n      }\n      this.#highlightToolbar ||= new HighlightToolbar(this);\n      this.#highlightToolbar.show(textLayer, boxes, this.direction === \"ltr\");\n    }\n    addToAnnotationStorage(editor) {\n      if (!editor.isEmpty() && this.#annotationStorage && !this.#annotationStorage.has(editor.id)) {\n        this.#annotationStorage.setValue(editor.id, editor);\n      }\n    }\n    #selectionChange() {\n      const selection = document.getSelection();\n      if (!selection || selection.isCollapsed) {\n        if (this.#selectedTextNode) {\n          this.#highlightToolbar?.hide();\n          this.#selectedTextNode = null;\n          this.#dispatchUpdateStates({\n            hasSelectedText: false\n          });\n        }\n        return;\n      }\n      const {\n        anchorNode\n      } = selection;\n      if (anchorNode === this.#selectedTextNode) {\n        return;\n      }\n      const anchorElement = this.#getAnchorElementForSelection(selection);\n      const textLayer = anchorElement.closest(\".textLayer\");\n      if (!textLayer) {\n        if (this.#selectedTextNode) {\n          this.#highlightToolbar?.hide();\n          this.#selectedTextNode = null;\n          this.#dispatchUpdateStates({\n            hasSelectedText: false\n          });\n        }\n        return;\n      }\n      this.#highlightToolbar?.hide();\n      this.#selectedTextNode = anchorNode;\n      this.#dispatchUpdateStates({\n        hasSelectedText: true\n      });\n      if (this.#mode !== AnnotationEditorType.HIGHLIGHT && this.#mode !== AnnotationEditorType.NONE) {\n        return;\n      }\n      if (this.#mode === AnnotationEditorType.HIGHLIGHT) {\n        this.showAllEditors(\"highlight\", true, true);\n      }\n      this.#highlightWhenShiftUp = this.isShiftKeyDown;\n      if (!this.isShiftKeyDown) {\n        const activeLayer = this.#mode === AnnotationEditorType.HIGHLIGHT ? this.#getLayerForTextLayer(textLayer) : null;\n        activeLayer?.toggleDrawing();\n        const ac = new AbortController();\n        const signal = this.combinedSignal(ac);\n        const pointerup = e => {\n          if (e.type === \"pointerup\" && e.button !== 0) {\n            return;\n          }\n          ac.abort();\n          activeLayer?.toggleDrawing(true);\n          if (e.type === \"pointerup\") {\n            this.#onSelectEnd(\"main_toolbar\");\n          }\n        };\n        window.addEventListener(\"pointerup\", pointerup, {\n          signal\n        });\n        window.addEventListener(\"blur\", pointerup, {\n          signal\n        });\n      }\n    }\n    #onSelectEnd(methodOfCreation = \"\") {\n      if (this.#mode === AnnotationEditorType.HIGHLIGHT) {\n        this.highlightSelection(methodOfCreation);\n      } else if (this.#enableHighlightFloatingButton) {\n        this.#displayHighlightToolbar();\n      }\n    }\n    #addSelectionListener() {\n      document.addEventListener(\"selectionchange\", this.#selectionChange.bind(this), {\n        signal: this._signal\n      });\n    }\n    #addFocusManager() {\n      if (this.#focusManagerAC) {\n        return;\n      }\n      this.#focusManagerAC = new AbortController();\n      const signal = this.combinedSignal(this.#focusManagerAC);\n      window.addEventListener(\"focus\", this.focus.bind(this), {\n        signal\n      });\n      window.addEventListener(\"blur\", this.blur.bind(this), {\n        signal\n      });\n    }\n    #removeFocusManager() {\n      this.#focusManagerAC?.abort();\n      this.#focusManagerAC = null;\n    }\n    blur() {\n      this.isShiftKeyDown = false;\n      if (this.#highlightWhenShiftUp) {\n        this.#highlightWhenShiftUp = false;\n        this.#onSelectEnd(\"main_toolbar\");\n      }\n      if (!this.hasSelection) {\n        return;\n      }\n      const {\n        activeElement\n      } = document;\n      for (const editor of this.#selectedEditors) {\n        if (editor.div.contains(activeElement)) {\n          this.#lastActiveElement = [editor, activeElement];\n          editor._focusEventsAllowed = false;\n          break;\n        }\n      }\n    }\n    focus() {\n      if (!this.#lastActiveElement) {\n        return;\n      }\n      const [lastEditor, lastActiveElement] = this.#lastActiveElement;\n      this.#lastActiveElement = null;\n      lastActiveElement.addEventListener(\"focusin\", () => {\n        lastEditor._focusEventsAllowed = true;\n      }, {\n        once: true,\n        signal: this._signal\n      });\n      lastActiveElement.focus();\n    }\n    #addKeyboardManager() {\n      if (this.#keyboardManagerAC) {\n        return;\n      }\n      this.#keyboardManagerAC = new AbortController();\n      const signal = this.combinedSignal(this.#keyboardManagerAC);\n      window.addEventListener(\"keydown\", this.keydown.bind(this), {\n        signal\n      });\n      window.addEventListener(\"keyup\", this.keyup.bind(this), {\n        signal\n      });\n    }\n    #removeKeyboardManager() {\n      this.#keyboardManagerAC?.abort();\n      this.#keyboardManagerAC = null;\n    }\n    #addCopyPasteListeners() {\n      if (this.#copyPasteAC) {\n        return;\n      }\n      this.#copyPasteAC = new AbortController();\n      const signal = this.combinedSignal(this.#copyPasteAC);\n      document.addEventListener(\"copy\", this.copy.bind(this), {\n        signal\n      });\n      document.addEventListener(\"cut\", this.cut.bind(this), {\n        signal\n      });\n      document.addEventListener(\"paste\", this.paste.bind(this), {\n        signal\n      });\n    }\n    #removeCopyPasteListeners() {\n      this.#copyPasteAC?.abort();\n      this.#copyPasteAC = null;\n    }\n    #addDragAndDropListeners() {\n      const signal = this._signal;\n      document.addEventListener(\"dragover\", this.dragOver.bind(this), {\n        signal\n      });\n      document.addEventListener(\"drop\", this.drop.bind(this), {\n        signal\n      });\n    }\n    addEditListeners() {\n      this.#addKeyboardManager();\n      this.#addCopyPasteListeners();\n    }\n    removeEditListeners() {\n      this.#removeKeyboardManager();\n      this.#removeCopyPasteListeners();\n    }\n    dragOver(event) {\n      for (const {\n        type\n      } of event.dataTransfer.items) {\n        for (const editorType of this.#editorTypes) {\n          if (editorType.isHandlingMimeForPasting(type)) {\n            event.dataTransfer.dropEffect = \"copy\";\n            event.preventDefault();\n            return;\n          }\n        }\n      }\n    }\n    drop(event) {\n      for (const item of event.dataTransfer.items) {\n        for (const editorType of this.#editorTypes) {\n          if (editorType.isHandlingMimeForPasting(item.type)) {\n            editorType.paste(item, this.currentLayer);\n            event.preventDefault();\n            return;\n          }\n        }\n      }\n    }\n    copy(event) {\n      event.preventDefault();\n      this.#activeEditor?.commitOrRemove();\n      if (!this.hasSelection) {\n        return;\n      }\n      const editors = [];\n      for (const editor of this.#selectedEditors) {\n        const serialized = editor.serialize(true);\n        if (serialized) {\n          editors.push(serialized);\n        }\n      }\n      if (editors.length === 0) {\n        return;\n      }\n      event.clipboardData.setData(\"application/pdfjs\", JSON.stringify(editors));\n    }\n    cut(event) {\n      this.copy(event);\n      this.delete();\n    }\n    async paste(event) {\n      event.preventDefault();\n      const {\n        clipboardData\n      } = event;\n      for (const item of clipboardData.items) {\n        for (const editorType of this.#editorTypes) {\n          if (editorType.isHandlingMimeForPasting(item.type)) {\n            editorType.paste(item, this.currentLayer);\n            return;\n          }\n        }\n      }\n      let data = clipboardData.getData(\"application/pdfjs\");\n      if (!data) {\n        return;\n      }\n      try {\n        data = JSON.parse(data);\n      } catch (ex) {\n        warn(`paste: \"${ex.message}\".`);\n        return;\n      }\n      if (!Array.isArray(data)) {\n        return;\n      }\n      this.unselectAll();\n      const layer = this.currentLayer;\n      try {\n        const newEditors = [];\n        for (const editor of data) {\n          const deserializedEditor = await layer.deserialize(editor);\n          if (!deserializedEditor) {\n            return;\n          }\n          newEditors.push(deserializedEditor);\n        }\n        const cmd = () => {\n          for (const editor of newEditors) {\n            this.#addEditorToLayer(editor);\n          }\n          this.#selectEditors(newEditors);\n        };\n        const undo = () => {\n          for (const editor of newEditors) {\n            editor.remove();\n          }\n        };\n        this.addCommands({\n          cmd,\n          undo,\n          mustExec: true\n        });\n      } catch (ex) {\n        warn(`paste: \"${ex.message}\".`);\n      }\n    }\n    keydown(event) {\n      if (!this.isShiftKeyDown && event.key === \"Shift\") {\n        this.isShiftKeyDown = true;\n      }\n      if (this.#mode !== AnnotationEditorType.NONE && !this.isEditorHandlingKeyboard) {\n        AnnotationEditorUIManager._keyboardManager.exec(this, event);\n      }\n    }\n    keyup(event) {\n      if (this.isShiftKeyDown && event.key === \"Shift\") {\n        this.isShiftKeyDown = false;\n        if (this.#highlightWhenShiftUp) {\n          this.#highlightWhenShiftUp = false;\n          this.#onSelectEnd(\"main_toolbar\");\n        }\n      }\n    }\n    onEditingAction({\n      name\n    }) {\n      switch (name) {\n        case \"undo\":\n        case \"redo\":\n        case \"delete\":\n        case \"selectAll\":\n          this[name]();\n          break;\n        case \"highlightSelection\":\n          this.highlightSelection(\"context_menu\");\n          break;\n      }\n    }\n    #dispatchUpdateStates(details) {\n      const hasChanged = Object.entries(details).some(([key, value]) => this.#previousStates[key] !== value);\n      if (hasChanged) {\n        this._eventBus.dispatch(\"annotationeditorstateschanged\", {\n          source: this,\n          details: Object.assign(this.#previousStates, details)\n        });\n        if (this.#mode === AnnotationEditorType.HIGHLIGHT && details.hasSelectedEditor === false) {\n          this.#dispatchUpdateUI([[AnnotationEditorParamsType.HIGHLIGHT_FREE, true]]);\n        }\n      }\n    }\n    #dispatchUpdateUI(details) {\n      this._eventBus.dispatch(\"annotationeditorparamschanged\", {\n        source: this,\n        details\n      });\n    }\n    setEditingState(isEditing) {\n      if (isEditing) {\n        this.#addFocusManager();\n        this.#addCopyPasteListeners();\n        this.#dispatchUpdateStates({\n          isEditing: this.#mode !== AnnotationEditorType.NONE,\n          isEmpty: this.#isEmpty(),\n          hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n          hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n          hasSelectedEditor: false\n        });\n      } else {\n        this.#removeFocusManager();\n        this.#removeCopyPasteListeners();\n        this.#dispatchUpdateStates({\n          isEditing: false\n        });\n        this.disableUserSelect(false);\n      }\n    }\n    registerEditorTypes(types) {\n      if (this.#editorTypes) {\n        return;\n      }\n      this.#editorTypes = types;\n      for (const editorType of this.#editorTypes) {\n        this.#dispatchUpdateUI(editorType.defaultPropertiesToUpdate);\n      }\n    }\n    getId() {\n      return this.#idManager.id;\n    }\n    get currentLayer() {\n      return this.#allLayers.get(this.#currentPageIndex);\n    }\n    getLayer(pageIndex) {\n      return this.#allLayers.get(pageIndex);\n    }\n    get currentPageIndex() {\n      return this.#currentPageIndex;\n    }\n    addLayer(layer) {\n      this.#allLayers.set(layer.pageIndex, layer);\n      if (this.#isEnabled) {\n        layer.enable();\n      } else {\n        layer.disable();\n      }\n    }\n    removeLayer(layer) {\n      this.#allLayers.delete(layer.pageIndex);\n    }\n    async updateMode(mode, editId = null, isFromKeyboard = false) {\n      if (this.#mode === mode) {\n        return;\n      }\n      if (this.#updateModeCapability) {\n        await this.#updateModeCapability.promise;\n        if (!this.#updateModeCapability) {\n          return;\n        }\n      }\n      this.#updateModeCapability = Promise.withResolvers();\n      this.#mode = mode;\n      if (mode === AnnotationEditorType.NONE) {\n        this.setEditingState(false);\n        this.#disableAll();\n        this.#updateModeCapability.resolve();\n        return;\n      }\n      this.setEditingState(true);\n      await this.#enableAll();\n      this.unselectAll();\n      for (const layer of this.#allLayers.values()) {\n        layer.updateMode(mode);\n      }\n      if (!editId) {\n        if (isFromKeyboard) {\n          this.addNewEditorFromKeyboard();\n        }\n        this.#updateModeCapability.resolve();\n        return;\n      }\n      for (const editor of this.#allEditors.values()) {\n        if (editor.annotationElementId === editId) {\n          this.setSelected(editor);\n          editor.enterInEditMode();\n        } else {\n          editor.unselect();\n        }\n      }\n      this.#updateModeCapability.resolve();\n    }\n    addNewEditorFromKeyboard() {\n      if (this.currentLayer.canCreateNewEmptyEditor()) {\n        this.currentLayer.addNewEditor();\n      }\n    }\n    updateToolbar(mode) {\n      if (mode === this.#mode) {\n        return;\n      }\n      this._eventBus.dispatch(\"switchannotationeditormode\", {\n        source: this,\n        mode\n      });\n    }\n    updateParams(type, value) {\n      if (!this.#editorTypes) {\n        return;\n      }\n      switch (type) {\n        case AnnotationEditorParamsType.CREATE:\n          this.currentLayer.addNewEditor();\n          return;\n        case AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR:\n          this.#mainHighlightColorPicker?.updateColor(value);\n          break;\n        case AnnotationEditorParamsType.HIGHLIGHT_SHOW_ALL:\n          this._eventBus.dispatch(\"reporttelemetry\", {\n            source: this,\n            details: {\n              type: \"editing\",\n              data: {\n                type: \"highlight\",\n                action: \"toggle_visibility\"\n              }\n            }\n          });\n          (this.#showAllStates ||= new Map()).set(type, value);\n          this.showAllEditors(\"highlight\", value);\n          break;\n      }\n      for (const editor of this.#selectedEditors) {\n        editor.updateParams(type, value);\n      }\n      for (const editorType of this.#editorTypes) {\n        editorType.updateDefaultParams(type, value);\n      }\n    }\n    showAllEditors(type, visible, updateButton = false) {\n      for (const editor of this.#allEditors.values()) {\n        if (editor.editorType === type) {\n          editor.show(visible);\n        }\n      }\n      const state = this.#showAllStates?.get(AnnotationEditorParamsType.HIGHLIGHT_SHOW_ALL) ?? true;\n      if (state !== visible) {\n        this.#dispatchUpdateUI([[AnnotationEditorParamsType.HIGHLIGHT_SHOW_ALL, visible]]);\n      }\n    }\n    enableWaiting(mustWait = false) {\n      if (this.#isWaiting === mustWait) {\n        return;\n      }\n      this.#isWaiting = mustWait;\n      for (const layer of this.#allLayers.values()) {\n        if (mustWait) {\n          layer.disableClick();\n        } else {\n          layer.enableClick();\n        }\n        layer.div.classList.toggle(\"waiting\", mustWait);\n      }\n    }\n    async #enableAll() {\n      if (!this.#isEnabled) {\n        this.#isEnabled = true;\n        const promises = [];\n        for (const layer of this.#allLayers.values()) {\n          promises.push(layer.enable());\n        }\n        await Promise.all(promises);\n        for (const editor of this.#allEditors.values()) {\n          editor.enable();\n        }\n      }\n    }\n    #disableAll() {\n      this.unselectAll();\n      if (this.#isEnabled) {\n        this.#isEnabled = false;\n        for (const layer of this.#allLayers.values()) {\n          layer.disable();\n        }\n        for (const editor of this.#allEditors.values()) {\n          editor.disable();\n        }\n      }\n    }\n    getEditors(pageIndex) {\n      const editors = [];\n      for (const editor of this.#allEditors.values()) {\n        if (editor.pageIndex === pageIndex) {\n          editors.push(editor);\n        }\n      }\n      return editors;\n    }\n    getEditor(id) {\n      return this.#allEditors.get(id);\n    }\n    addEditor(editor) {\n      this.#allEditors.set(editor.id, editor);\n    }\n    removeEditor(editor) {\n      if (editor.div.contains(document.activeElement)) {\n        if (this.#focusMainContainerTimeoutId) {\n          clearTimeout(this.#focusMainContainerTimeoutId);\n        }\n        this.#focusMainContainerTimeoutId = setTimeout(() => {\n          this.focusMainContainer();\n          this.#focusMainContainerTimeoutId = null;\n        }, 0);\n      }\n      this.#allEditors.delete(editor.id);\n      this.unselect(editor);\n      if (!editor.annotationElementId || !this.#deletedAnnotationsElementIds.has(editor.annotationElementId)) {\n        this.#annotationStorage?.remove(editor.id);\n      }\n    }\n    addDeletedAnnotationElement(editor) {\n      this.#deletedAnnotationsElementIds.add(editor.annotationElementId);\n      this.addChangedExistingAnnotation(editor);\n      editor.deleted = true;\n    }\n    isDeletedAnnotationElement(annotationElementId) {\n      return this.#deletedAnnotationsElementIds.has(annotationElementId);\n    }\n    removeDeletedAnnotationElement(editor) {\n      this.#deletedAnnotationsElementIds.delete(editor.annotationElementId);\n      this.removeChangedExistingAnnotation(editor);\n      editor.deleted = false;\n    }\n    #addEditorToLayer(editor) {\n      const layer = this.#allLayers.get(editor.pageIndex);\n      if (layer) {\n        layer.addOrRebuild(editor);\n      } else {\n        this.addEditor(editor);\n        this.addToAnnotationStorage(editor);\n      }\n    }\n    setActiveEditor(editor) {\n      if (this.#activeEditor === editor) {\n        return;\n      }\n      this.#activeEditor = editor;\n      if (editor) {\n        this.#dispatchUpdateUI(editor.propertiesToUpdate);\n      }\n    }\n    get #lastSelectedEditor() {\n      let ed = null;\n      for (ed of this.#selectedEditors) {}\n      return ed;\n    }\n    updateUI(editor) {\n      if (this.#lastSelectedEditor === editor) {\n        this.#dispatchUpdateUI(editor.propertiesToUpdate);\n      }\n    }\n    toggleSelected(editor) {\n      if (this.#selectedEditors.has(editor)) {\n        this.#selectedEditors.delete(editor);\n        editor.unselect();\n        this.#dispatchUpdateStates({\n          hasSelectedEditor: this.hasSelection\n        });\n        return;\n      }\n      this.#selectedEditors.add(editor);\n      editor.select();\n      this.#dispatchUpdateUI(editor.propertiesToUpdate);\n      this.#dispatchUpdateStates({\n        hasSelectedEditor: true\n      });\n    }\n    setSelected(editor) {\n      for (const ed of this.#selectedEditors) {\n        if (ed !== editor) {\n          ed.unselect();\n        }\n      }\n      this.#selectedEditors.clear();\n      this.#selectedEditors.add(editor);\n      editor.select();\n      this.#dispatchUpdateUI(editor.propertiesToUpdate);\n      this.#dispatchUpdateStates({\n        hasSelectedEditor: true\n      });\n    }\n    isSelected(editor) {\n      return this.#selectedEditors.has(editor);\n    }\n    get firstSelectedEditor() {\n      return this.#selectedEditors.values().next().value;\n    }\n    unselect(editor) {\n      editor.unselect();\n      this.#selectedEditors.delete(editor);\n      this.#dispatchUpdateStates({\n        hasSelectedEditor: this.hasSelection\n      });\n    }\n    get hasSelection() {\n      return this.#selectedEditors.size !== 0;\n    }\n    get isEnterHandled() {\n      return this.#selectedEditors.size === 1 && this.firstSelectedEditor.isEnterHandled;\n    }\n    undo() {\n      this.#commandManager.undo();\n      this.#dispatchUpdateStates({\n        hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n        hasSomethingToRedo: true,\n        isEmpty: this.#isEmpty()\n      });\n    }\n    redo() {\n      this.#commandManager.redo();\n      this.#dispatchUpdateStates({\n        hasSomethingToUndo: true,\n        hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n        isEmpty: this.#isEmpty()\n      });\n    }\n    addCommands(params) {\n      this.#commandManager.add(params);\n      this.#dispatchUpdateStates({\n        hasSomethingToUndo: true,\n        hasSomethingToRedo: false,\n        isEmpty: this.#isEmpty()\n      });\n    }\n    #isEmpty() {\n      if (this.#allEditors.size === 0) {\n        return true;\n      }\n      if (this.#allEditors.size === 1) {\n        for (const editor of this.#allEditors.values()) {\n          return editor.isEmpty();\n        }\n      }\n      return false;\n    }\n    delete() {\n      this.commitOrRemove();\n      if (!this.hasSelection) {\n        return;\n      }\n      const editors = [...this.#selectedEditors];\n      const cmd = () => {\n        for (const editor of editors) {\n          editor.remove();\n        }\n      };\n      const undo = () => {\n        for (const editor of editors) {\n          this.#addEditorToLayer(editor);\n        }\n      };\n      this.addCommands({\n        cmd,\n        undo,\n        mustExec: true\n      });\n    }\n    commitOrRemove() {\n      this.#activeEditor?.commitOrRemove();\n    }\n    hasSomethingToControl() {\n      return this.#activeEditor || this.hasSelection;\n    }\n    #selectEditors(editors) {\n      for (const editor of this.#selectedEditors) {\n        editor.unselect();\n      }\n      this.#selectedEditors.clear();\n      for (const editor of editors) {\n        if (editor.isEmpty()) {\n          continue;\n        }\n        this.#selectedEditors.add(editor);\n        editor.select();\n      }\n      this.#dispatchUpdateStates({\n        hasSelectedEditor: this.hasSelection\n      });\n    }\n    selectAll() {\n      for (const editor of this.#selectedEditors) {\n        editor.commit();\n      }\n      this.#selectEditors(this.#allEditors.values());\n    }\n    unselectAll() {\n      if (this.#activeEditor) {\n        this.#activeEditor.commitOrRemove();\n        if (this.#mode !== AnnotationEditorType.NONE) {\n          return;\n        }\n      }\n      if (!this.hasSelection) {\n        return;\n      }\n      for (const editor of this.#selectedEditors) {\n        editor.unselect();\n      }\n      this.#selectedEditors.clear();\n      this.#dispatchUpdateStates({\n        hasSelectedEditor: false\n      });\n    }\n    translateSelectedEditors(x, y, noCommit = false) {\n      if (!noCommit) {\n        this.commitOrRemove();\n      }\n      if (!this.hasSelection) {\n        return;\n      }\n      this.#translation[0] += x;\n      this.#translation[1] += y;\n      const [totalX, totalY] = this.#translation;\n      const editors = [...this.#selectedEditors];\n      const TIME_TO_WAIT = 1000;\n      if (this.#translationTimeoutId) {\n        clearTimeout(this.#translationTimeoutId);\n      }\n      this.#translationTimeoutId = setTimeout(() => {\n        this.#translationTimeoutId = null;\n        this.#translation[0] = this.#translation[1] = 0;\n        this.addCommands({\n          cmd: () => {\n            for (const editor of editors) {\n              if (this.#allEditors.has(editor.id)) {\n                editor.translateInPage(totalX, totalY);\n              }\n            }\n          },\n          undo: () => {\n            for (const editor of editors) {\n              if (this.#allEditors.has(editor.id)) {\n                editor.translateInPage(-totalX, -totalY);\n              }\n            }\n          },\n          mustExec: false\n        });\n      }, TIME_TO_WAIT);\n      for (const editor of editors) {\n        editor.translateInPage(x, y);\n      }\n    }\n    setUpDragSession() {\n      if (!this.hasSelection) {\n        return;\n      }\n      this.disableUserSelect(true);\n      this.#draggingEditors = new Map();\n      for (const editor of this.#selectedEditors) {\n        this.#draggingEditors.set(editor, {\n          savedX: editor.x,\n          savedY: editor.y,\n          savedPageIndex: editor.pageIndex,\n          newX: 0,\n          newY: 0,\n          newPageIndex: -1\n        });\n      }\n    }\n    endDragSession() {\n      if (!this.#draggingEditors) {\n        return false;\n      }\n      this.disableUserSelect(false);\n      const map = this.#draggingEditors;\n      this.#draggingEditors = null;\n      let mustBeAddedInUndoStack = false;\n      for (const [{\n        x,\n        y,\n        pageIndex\n      }, value] of map) {\n        value.newX = x;\n        value.newY = y;\n        value.newPageIndex = pageIndex;\n        mustBeAddedInUndoStack ||= x !== value.savedX || y !== value.savedY || pageIndex !== value.savedPageIndex;\n      }\n      if (!mustBeAddedInUndoStack) {\n        return false;\n      }\n      const move = (editor, x, y, pageIndex) => {\n        if (this.#allEditors.has(editor.id)) {\n          const parent = this.#allLayers.get(pageIndex);\n          if (parent) {\n            editor._setParentAndPosition(parent, x, y);\n          } else {\n            editor.pageIndex = pageIndex;\n            editor.x = x;\n            editor.y = y;\n          }\n        }\n      };\n      this.addCommands({\n        cmd: () => {\n          for (const [editor, {\n            newX,\n            newY,\n            newPageIndex\n          }] of map) {\n            move(editor, newX, newY, newPageIndex);\n          }\n        },\n        undo: () => {\n          for (const [editor, {\n            savedX,\n            savedY,\n            savedPageIndex\n          }] of map) {\n            move(editor, savedX, savedY, savedPageIndex);\n          }\n        },\n        mustExec: true\n      });\n      return true;\n    }\n    dragSelectedEditors(tx, ty) {\n      if (!this.#draggingEditors) {\n        return;\n      }\n      for (const editor of this.#draggingEditors.keys()) {\n        editor.drag(tx, ty);\n      }\n    }\n    rebuild(editor) {\n      if (editor.parent === null) {\n        const parent = this.getLayer(editor.pageIndex);\n        if (parent) {\n          parent.changeParent(editor);\n          parent.addOrRebuild(editor);\n        } else {\n          this.addEditor(editor);\n          this.addToAnnotationStorage(editor);\n          editor.rebuild();\n        }\n      } else {\n        editor.parent.addOrRebuild(editor);\n      }\n    }\n    get isEditorHandlingKeyboard() {\n      return this.getActive()?.shouldGetKeyboardEvents() || this.#selectedEditors.size === 1 && this.firstSelectedEditor.shouldGetKeyboardEvents();\n    }\n    isActive(editor) {\n      return this.#activeEditor === editor;\n    }\n    getActive() {\n      return this.#activeEditor;\n    }\n    getMode() {\n      return this.#mode;\n    }\n    get imageManager() {\n      return shadow(this, \"imageManager\", new ImageManager());\n    }\n    getSelectionBoxes(textLayer) {\n      if (!textLayer) {\n        return null;\n      }\n      const selection = document.getSelection();\n      for (let i = 0, ii = selection.rangeCount; i < ii; i++) {\n        if (!textLayer.contains(selection.getRangeAt(i).commonAncestorContainer)) {\n          return null;\n        }\n      }\n      const {\n        x: layerX,\n        y: layerY,\n        width: parentWidth,\n        height: parentHeight\n      } = textLayer.getBoundingClientRect();\n      let rotator;\n      switch (textLayer.getAttribute(\"data-main-rotation\")) {\n        case \"90\":\n          rotator = (x, y, w, h) => ({\n            x: (y - layerY) / parentHeight,\n            y: 1 - (x + w - layerX) / parentWidth,\n            width: h / parentHeight,\n            height: w / parentWidth\n          });\n          break;\n        case \"180\":\n          rotator = (x, y, w, h) => ({\n            x: 1 - (x + w - layerX) / parentWidth,\n            y: 1 - (y + h - layerY) / parentHeight,\n            width: w / parentWidth,\n            height: h / parentHeight\n          });\n          break;\n        case \"270\":\n          rotator = (x, y, w, h) => ({\n            x: 1 - (y + h - layerY) / parentHeight,\n            y: (x - layerX) / parentWidth,\n            width: h / parentHeight,\n            height: w / parentWidth\n          });\n          break;\n        default:\n          rotator = (x, y, w, h) => ({\n            x: (x - layerX) / parentWidth,\n            y: (y - layerY) / parentHeight,\n            width: w / parentWidth,\n            height: h / parentHeight\n          });\n          break;\n      }\n      const boxes = [];\n      for (let i = 0, ii = selection.rangeCount; i < ii; i++) {\n        const range = selection.getRangeAt(i);\n        if (range.collapsed) {\n          continue;\n        }\n        for (const {\n          x,\n          y,\n          width,\n          height\n        } of range.getClientRects()) {\n          if (width === 0 || height === 0) {\n            continue;\n          }\n          boxes.push(rotator(x, y, width, height));\n        }\n      }\n      return boxes.length === 0 ? null : boxes;\n    }\n    addChangedExistingAnnotation({\n      annotationElementId,\n      id\n    }) {\n      (this.#changedExistingAnnotations ||= new Map()).set(annotationElementId, id);\n    }\n    removeChangedExistingAnnotation({\n      annotationElementId\n    }) {\n      this.#changedExistingAnnotations?.delete(annotationElementId);\n    }\n    renderAnnotationElement(annotation) {\n      const editorId = this.#changedExistingAnnotations?.get(annotation.data.id);\n      if (!editorId) {\n        return;\n      }\n      const editor = this.#annotationStorage.getRawValue(editorId);\n      if (!editor) {\n        return;\n      }\n      if (this.#mode === AnnotationEditorType.NONE && !editor.hasBeenModified) {\n        return;\n      }\n      editor.renderAnnotationElement(annotation);\n    }\n  }\n\n  class AltText {\n    #altText = null;\n    #altTextDecorative = false;\n    #altTextButton = null;\n    #altTextTooltip = null;\n    #altTextTooltipTimeout = null;\n    #altTextWasFromKeyBoard = false;\n    #badge = null;\n    #editor = null;\n    #guessedText = null;\n    #textWithDisclaimer = null;\n    #useNewAltTextFlow = false;\n    static #l10nNewButton = null;\n    static _l10nPromise = null;\n    constructor(editor) {\n      this.#editor = editor;\n      this.#useNewAltTextFlow = editor._uiManager.useNewAltTextFlow;\n      AltText.#l10nNewButton ||= Object.freeze({\n        added: \"pdfjs-editor-new-alt-text-added-button-label\",\n        missing: \"pdfjs-editor-new-alt-text-missing-button-label\",\n        review: \"pdfjs-editor-new-alt-text-to-review-button-label\"\n      });\n    }\n    static initialize(l10nPromise) {\n      AltText._l10nPromise ||= l10nPromise;\n    }\n    async render() {\n      const altText = this.#altTextButton = document.createElement(\"button\");\n      altText.className = \"altText\";\n      let msg;\n      if (this.#useNewAltTextFlow) {\n        altText.classList.add(\"new\");\n        msg = await AltText._l10nPromise.get(AltText.#l10nNewButton.missing);\n      } else {\n        msg = await AltText._l10nPromise.get(\"pdfjs-editor-alt-text-button-label\");\n      }\n      altText.textContent = msg;\n      altText.setAttribute(\"aria-label\", msg);\n      altText.tabIndex = \"0\";\n      const signal = this.#editor._uiManager._signal;\n      altText.addEventListener(\"contextmenu\", noContextMenu, {\n        signal\n      });\n      altText.addEventListener(\"pointerdown\", event => event.stopPropagation(), {\n        signal\n      });\n      const onClick = event => {\n        event.preventDefault();\n        this.#editor._uiManager.editAltText(this.#editor);\n        if (this.#useNewAltTextFlow) {\n          this.#editor._reportTelemetry({\n            action: \"pdfjs.image.alt_text.image_status_label_clicked\",\n            data: {\n              label: this.#label\n            }\n          });\n        }\n      };\n      altText.addEventListener(\"click\", onClick, {\n        capture: true,\n        signal\n      });\n      altText.addEventListener(\"keydown\", event => {\n        if (event.target === altText && event.key === \"Enter\") {\n          this.#altTextWasFromKeyBoard = true;\n          onClick(event);\n        }\n      }, {\n        signal\n      });\n      await this.#setState();\n      return altText;\n    }\n    get #label() {\n      return this.#altText && \"added\" || this.#altText === null && this.guessedText && \"review\" || \"missing\";\n    }\n    finish() {\n      if (!this.#altTextButton) {\n        return;\n      }\n      this.#altTextButton.focus({\n        focusVisible: this.#altTextWasFromKeyBoard\n      });\n      this.#altTextWasFromKeyBoard = false;\n    }\n    isEmpty() {\n      if (this.#useNewAltTextFlow) {\n        return this.#altText === null;\n      }\n      return !this.#altText && !this.#altTextDecorative;\n    }\n    hasData() {\n      if (this.#useNewAltTextFlow) {\n        return this.#altText !== null || !!this.#guessedText;\n      }\n      return this.isEmpty();\n    }\n    get guessedText() {\n      return this.#guessedText;\n    }\n    async setGuessedText(guessedText) {\n      if (this.#altText !== null) {\n        return;\n      }\n      this.#guessedText = guessedText;\n      this.#textWithDisclaimer = await AltText._l10nPromise.get(\"pdfjs-editor-new-alt-text-generated-alt-text-with-disclaimer\")({\n        generatedAltText: guessedText\n      });\n      this.#setState();\n    }\n    toggleAltTextBadge(visibility = false) {\n      if (!this.#useNewAltTextFlow || this.#altText) {\n        this.#badge?.remove();\n        this.#badge = null;\n        return;\n      }\n      if (!this.#badge) {\n        const badge = this.#badge = document.createElement(\"div\");\n        badge.className = \"noAltTextBadge\";\n        this.#editor.div.append(badge);\n      }\n      this.#badge.classList.toggle(\"hidden\", !visibility);\n    }\n    serialize(isForCopying) {\n      let altText = this.#altText;\n      if (!isForCopying && this.#guessedText === altText) {\n        altText = this.#textWithDisclaimer;\n      }\n      return {\n        altText,\n        decorative: this.#altTextDecorative,\n        guessedText: this.#guessedText,\n        textWithDisclaimer: this.#textWithDisclaimer\n      };\n    }\n    get data() {\n      return {\n        altText: this.#altText,\n        decorative: this.#altTextDecorative\n      };\n    }\n    set data({\n      altText,\n      decorative,\n      guessedText,\n      textWithDisclaimer,\n      cancel = false\n    }) {\n      if (guessedText) {\n        this.#guessedText = guessedText;\n        this.#textWithDisclaimer = textWithDisclaimer;\n      }\n      if (this.#altText === altText && this.#altTextDecorative === decorative) {\n        return;\n      }\n      if (!cancel) {\n        this.#altText = altText;\n        this.#altTextDecorative = decorative;\n      }\n      this.#setState();\n    }\n    toggle(enabled = false) {\n      if (!this.#altTextButton) {\n        return;\n      }\n      if (!enabled && this.#altTextTooltipTimeout) {\n        clearTimeout(this.#altTextTooltipTimeout);\n        this.#altTextTooltipTimeout = null;\n      }\n      this.#altTextButton.disabled = !enabled;\n    }\n    shown() {\n      this.#editor._reportTelemetry({\n        action: \"pdfjs.image.alt_text.image_status_label_displayed\",\n        data: {\n          label: this.#label\n        }\n      });\n    }\n    destroy() {\n      this.#altTextButton?.remove();\n      this.#altTextButton = null;\n      this.#altTextTooltip = null;\n      this.#badge?.remove();\n      this.#badge = null;\n    }\n    async #setState() {\n      const button = this.#altTextButton;\n      if (!button) {\n        return;\n      }\n      if (this.#useNewAltTextFlow) {\n        button.classList.toggle(\"done\", !!this.#altText);\n        AltText._l10nPromise.get(AltText.#l10nNewButton[this.#label]).then(msg => {\n          button.setAttribute(\"aria-label\", msg);\n          for (const child of button.childNodes) {\n            if (child.nodeType === Node.TEXT_NODE) {\n              child.textContent = msg;\n              break;\n            }\n          }\n        });\n        if (!this.#altText) {\n          this.#altTextTooltip?.remove();\n          return;\n        }\n      } else {\n        if (!this.#altText && !this.#altTextDecorative) {\n          button.classList.remove(\"done\");\n          this.#altTextTooltip?.remove();\n          return;\n        }\n        button.classList.add(\"done\");\n        AltText._l10nPromise.get(\"pdfjs-editor-alt-text-edit-button-label\").then(msg => {\n          button.setAttribute(\"aria-label\", msg);\n        });\n      }\n      let tooltip = this.#altTextTooltip;\n      if (!tooltip) {\n        this.#altTextTooltip = tooltip = document.createElement(\"span\");\n        tooltip.className = \"tooltip\";\n        tooltip.setAttribute(\"role\", \"tooltip\");\n        tooltip.id = `alt-text-tooltip-${this.#editor.id}`;\n        const DELAY_TO_SHOW_TOOLTIP = 100;\n        const signal = this.#editor._uiManager._signal;\n        signal.addEventListener(\"abort\", () => {\n          clearTimeout(this.#altTextTooltipTimeout);\n          this.#altTextTooltipTimeout = null;\n        }, {\n          once: true\n        });\n        button.addEventListener(\"mouseenter\", () => {\n          this.#altTextTooltipTimeout = setTimeout(() => {\n            this.#altTextTooltipTimeout = null;\n            this.#altTextTooltip.classList.add(\"show\");\n            this.#editor._reportTelemetry({\n              action: \"alt_text_tooltip\"\n            });\n          }, DELAY_TO_SHOW_TOOLTIP);\n        }, {\n          signal\n        });\n        button.addEventListener(\"mouseleave\", () => {\n          if (this.#altTextTooltipTimeout) {\n            clearTimeout(this.#altTextTooltipTimeout);\n            this.#altTextTooltipTimeout = null;\n          }\n          this.#altTextTooltip?.classList.remove(\"show\");\n        }, {\n          signal\n        });\n      }\n      tooltip.innerText = this.#altTextDecorative ? await AltText._l10nPromise.get(\"pdfjs-editor-alt-text-decorative-tooltip\") : this.#altText;\n      if (!tooltip.parentNode) {\n        button.append(tooltip);\n      }\n      const element = this.#editor.getImageForAltText();\n      element?.setAttribute(\"aria-describedby\", tooltip.id);\n    }\n  }\n\n\n\n\n\n  class AnnotationEditor {\n    #accessibilityData = null;\n    #allResizerDivs = null;\n    #altText = null;\n    #disabled = false;\n    #keepAspectRatio = false;\n    #resizersDiv = null;\n    #savedDimensions = null;\n    #focusAC = null;\n    #focusedResizerName = \"\";\n    #hasBeenClicked = false;\n    #initialPosition = null;\n    #isEditing = false;\n    #isInEditMode = false;\n    #isResizerEnabledForKeyboard = false;\n    #moveInDOMTimeout = null;\n    #prevDragX = 0;\n    #prevDragY = 0;\n    #telemetryTimeouts = null;\n    _editToolbar = null;\n    _initialOptions = Object.create(null);\n    _initialData = null;\n    _isVisible = true;\n    _uiManager = null;\n    _focusEventsAllowed = true;\n    static _l10nPromise = null;\n    static _l10nResizer = null;\n    #isDraggable = false;\n    #zIndex = AnnotationEditor._zIndex++;\n    static _borderLineWidth = -1;\n    static _colorManager = new ColorManager();\n    static _zIndex = 1;\n    static _telemetryTimeout = 1000;\n    static get _resizerKeyboardManager() {\n      const resize = AnnotationEditor.prototype._resizeWithKeyboard;\n      const small = AnnotationEditorUIManager.TRANSLATE_SMALL;\n      const big = AnnotationEditorUIManager.TRANSLATE_BIG;\n      return shadow(this, \"_resizerKeyboardManager\", new KeyboardManager([[[\"ArrowLeft\", \"mac+ArrowLeft\"], resize, {\n        args: [-small, 0]\n      }], [[\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"], resize, {\n        args: [-big, 0]\n      }], [[\"ArrowRight\", \"mac+ArrowRight\"], resize, {\n        args: [small, 0]\n      }], [[\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"], resize, {\n        args: [big, 0]\n      }], [[\"ArrowUp\", \"mac+ArrowUp\"], resize, {\n        args: [0, -small]\n      }], [[\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"], resize, {\n        args: [0, -big]\n      }], [[\"ArrowDown\", \"mac+ArrowDown\"], resize, {\n        args: [0, small]\n      }], [[\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"], resize, {\n        args: [0, big]\n      }], [[\"Escape\", \"mac+Escape\"], AnnotationEditor.prototype._stopResizingWithKeyboard]]));\n    }\n    constructor(parameters) {\n      this.parent = parameters.parent;\n      this.id = parameters.id;\n      this.width = this.height = null;\n      this.pageIndex = parameters.parent.pageIndex;\n      this.name = parameters.name;\n      this.div = null;\n      this._uiManager = parameters.uiManager;\n      this.annotationElementId = null;\n      this._willKeepAspectRatio = false;\n      this._initialOptions.isCentered = parameters.isCentered;\n      this._structTreeParentId = null;\n      const {\n        rotation,\n        rawDims: {\n          pageWidth,\n          pageHeight,\n          pageX,\n          pageY\n        }\n      } = this.parent.viewport;\n      this.rotation = rotation;\n      this.pageRotation = (360 + rotation - this._uiManager.viewParameters.rotation) % 360;\n      this.pageDimensions = [pageWidth, pageHeight];\n      this.pageTranslation = [pageX, pageY];\n      const [width, height] = this.parentDimensions;\n      this.x = parameters.x / width;\n      this.y = parameters.y / height;\n      this.isAttachedToDOM = false;\n      this.deleted = false;\n    }\n    get editorType() {\n      return Object.getPrototypeOf(this).constructor._type;\n    }\n    static get _defaultLineColor() {\n      return shadow(this, \"_defaultLineColor\", this._colorManager.getHexCode(\"CanvasText\"));\n    }\n    static deleteAnnotationElement(editor) {\n      const fakeEditor = new FakeEditor({\n        id: editor.parent.getNextId(),\n        parent: editor.parent,\n        uiManager: editor._uiManager\n      });\n      fakeEditor.annotationElementId = editor.annotationElementId;\n      fakeEditor.deleted = true;\n      fakeEditor._uiManager.addToAnnotationStorage(fakeEditor);\n    }\n    static initialize(l10n, _uiManager, options) {\n      AnnotationEditor._l10nResizer ||= Object.freeze({\n        topLeft: \"pdfjs-editor-resizer-top-left\",\n        topMiddle: \"pdfjs-editor-resizer-top-middle\",\n        topRight: \"pdfjs-editor-resizer-top-right\",\n        middleRight: \"pdfjs-editor-resizer-middle-right\",\n        bottomRight: \"pdfjs-editor-resizer-bottom-right\",\n        bottomMiddle: \"pdfjs-editor-resizer-bottom-middle\",\n        bottomLeft: \"pdfjs-editor-resizer-bottom-left\",\n        middleLeft: \"pdfjs-editor-resizer-middle-left\"\n      });\n      AnnotationEditor._l10nPromise ||= new Map([...[\"pdfjs-editor-alt-text-button-label\", \"pdfjs-editor-alt-text-edit-button-label\", \"pdfjs-editor-alt-text-decorative-tooltip\", \"pdfjs-editor-new-alt-text-added-button-label\", \"pdfjs-editor-new-alt-text-missing-button-label\", \"pdfjs-editor-new-alt-text-to-review-button-label\"].map(str => [str, l10n.get(str)]), ...[\"pdfjs-editor-new-alt-text-generated-alt-text-with-disclaimer\"].map(str => [str, l10n.get.bind(l10n, str)])]);\n      if (options?.strings) {\n        for (const str of options.strings) {\n          AnnotationEditor._l10nPromise.set(str, l10n.get(str));\n        }\n      }\n      if (AnnotationEditor._borderLineWidth !== -1) {\n        return;\n      }\n      const style = getComputedStyle(document.documentElement);\n      AnnotationEditor._borderLineWidth = parseFloat(style.getPropertyValue(\"--outline-width\")) || 0;\n    }\n    static updateDefaultParams(_type, _value) {}\n    static get defaultPropertiesToUpdate() {\n      return [];\n    }\n    static isHandlingMimeForPasting(mime) {\n      return false;\n    }\n    static paste(item, parent) {\n      unreachable(\"Not implemented\");\n    }\n    get propertiesToUpdate() {\n      return [];\n    }\n    get _isDraggable() {\n      return this.#isDraggable;\n    }\n    set _isDraggable(value) {\n      this.#isDraggable = value;\n      this.div?.classList.toggle(\"draggable\", value);\n    }\n    get isEnterHandled() {\n      return true;\n    }\n    center() {\n      const [pageWidth, pageHeight] = this.pageDimensions;\n      switch (this.parentRotation) {\n        case 90:\n          this.x -= this.height * pageHeight / (pageWidth * 2);\n          this.y += this.width * pageWidth / (pageHeight * 2);\n          break;\n        case 180:\n          this.x += this.width / 2;\n          this.y += this.height / 2;\n          break;\n        case 270:\n          this.x += this.height * pageHeight / (pageWidth * 2);\n          this.y -= this.width * pageWidth / (pageHeight * 2);\n          break;\n        default:\n          this.x -= this.width / 2;\n          this.y -= this.height / 2;\n          break;\n      }\n      this.fixAndSetPosition();\n    }\n    addCommands(params) {\n      this._uiManager.addCommands(params);\n    }\n    get currentLayer() {\n      return this._uiManager.currentLayer;\n    }\n    setInBackground() {\n      this.div.style.zIndex = 0;\n    }\n    setInForeground() {\n      this.div.style.zIndex = this.#zIndex;\n    }\n    setParent(parent) {\n      if (parent !== null) {\n        this.pageIndex = parent.pageIndex;\n        this.pageDimensions = parent.pageDimensions;\n      } else {\n        this.#stopResizing();\n      }\n      this.parent = parent;\n    }\n    focusin(event) {\n      if (!this._focusEventsAllowed) {\n        return;\n      }\n      if (!this.#hasBeenClicked) {\n        this.parent.setSelected(this);\n      } else {\n        this.#hasBeenClicked = false;\n      }\n    }\n    focusout(event) {\n      if (!this._focusEventsAllowed) {\n        return;\n      }\n      if (!this.isAttachedToDOM) {\n        return;\n      }\n      const target = event.relatedTarget;\n      if (target?.closest(`#${this.id}`)) {\n        return;\n      }\n      event.preventDefault();\n      if (!this.parent?.isMultipleSelection) {\n        this.commitOrRemove();\n      }\n    }\n    commitOrRemove() {\n      if (this.isEmpty()) {\n        this.remove();\n      } else {\n        this.commit();\n      }\n    }\n    commit() {\n      this.addToAnnotationStorage();\n    }\n    addToAnnotationStorage() {\n      this._uiManager.addToAnnotationStorage(this);\n    }\n    setAt(x, y, tx, ty) {\n      const [width, height] = this.parentDimensions;\n      [tx, ty] = this.screenToPageTranslation(tx, ty);\n      this.x = (x + tx) / width;\n      this.y = (y + ty) / height;\n      this.fixAndSetPosition();\n    }\n    #translate([width, height], x, y) {\n      [x, y] = this.screenToPageTranslation(x, y);\n      this.x += x / width;\n      this.y += y / height;\n      this.fixAndSetPosition();\n    }\n    translate(x, y) {\n      this.#translate(this.parentDimensions, x, y);\n    }\n    translateInPage(x, y) {\n      this.#initialPosition ||= [this.x, this.y];\n      this.#translate(this.pageDimensions, x, y);\n      this.div.scrollIntoView({\n        block: \"nearest\"\n      });\n    }\n    drag(tx, ty) {\n      this.#initialPosition ||= [this.x, this.y];\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.x += tx / parentWidth;\n      this.y += ty / parentHeight;\n      if (this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {\n        const {\n          x,\n          y\n        } = this.div.getBoundingClientRect();\n        if (this.parent.findNewParent(this, x, y)) {\n          this.x -= Math.floor(this.x);\n          this.y -= Math.floor(this.y);\n        }\n      }\n      let {\n        x,\n        y\n      } = this;\n      const [bx, by] = this.getBaseTranslation();\n      x += bx;\n      y += by;\n      this.div.style.left = `${(100 * x).toFixed(2)}%`;\n      this.div.style.top = `${(100 * y).toFixed(2)}%`;\n      this.div.scrollIntoView({\n        block: \"nearest\"\n      });\n    }\n    get _hasBeenMoved() {\n      return !!this.#initialPosition && (this.#initialPosition[0] !== this.x || this.#initialPosition[1] !== this.y);\n    }\n    getBaseTranslation() {\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      const {\n        _borderLineWidth\n      } = AnnotationEditor;\n      const x = _borderLineWidth / parentWidth;\n      const y = _borderLineWidth / parentHeight;\n      switch (this.rotation) {\n        case 90:\n          return [-x, y];\n        case 180:\n          return [x, y];\n        case 270:\n          return [x, -y];\n        default:\n          return [-x, -y];\n      }\n    }\n    get _mustFixPosition() {\n      return true;\n    }\n    fixAndSetPosition(rotation = this.rotation) {\n      const [pageWidth, pageHeight] = this.pageDimensions;\n      let {\n        x,\n        y,\n        width,\n        height\n      } = this;\n      width *= pageWidth;\n      height *= pageHeight;\n      x *= pageWidth;\n      y *= pageHeight;\n      if (this._mustFixPosition) {\n        switch (rotation) {\n          case 0:\n            x = Math.max(0, Math.min(pageWidth - width, x));\n            y = Math.max(0, Math.min(pageHeight - height, y));\n            break;\n          case 90:\n            x = Math.max(0, Math.min(pageWidth - height, x));\n            y = Math.min(pageHeight, Math.max(width, y));\n            break;\n          case 180:\n            x = Math.min(pageWidth, Math.max(width, x));\n            y = Math.min(pageHeight, Math.max(height, y));\n            break;\n          case 270:\n            x = Math.min(pageWidth, Math.max(height, x));\n            y = Math.max(0, Math.min(pageHeight - width, y));\n            break;\n        }\n      }\n      this.x = x /= pageWidth;\n      this.y = y /= pageHeight;\n      const [bx, by] = this.getBaseTranslation();\n      x += bx;\n      y += by;\n      const {\n        style\n      } = this.div;\n      style.left = `${(100 * x).toFixed(2)}%`;\n      style.top = `${(100 * y).toFixed(2)}%`;\n      this.moveInDOM();\n    }\n    static #rotatePoint(x, y, angle) {\n      switch (angle) {\n        case 90:\n          return [y, -x];\n        case 180:\n          return [-x, -y];\n        case 270:\n          return [-y, x];\n        default:\n          return [x, y];\n      }\n    }\n    screenToPageTranslation(x, y) {\n      return AnnotationEditor.#rotatePoint(x, y, this.parentRotation);\n    }\n    pageTranslationToScreen(x, y) {\n      return AnnotationEditor.#rotatePoint(x, y, 360 - this.parentRotation);\n    }\n    #getRotationMatrix(rotation) {\n      switch (rotation) {\n        case 90:\n          {\n            const [pageWidth, pageHeight] = this.pageDimensions;\n            return [0, -pageWidth / pageHeight, pageHeight / pageWidth, 0];\n          }\n        case 180:\n          return [-1, 0, 0, -1];\n        case 270:\n          {\n            const [pageWidth, pageHeight] = this.pageDimensions;\n            return [0, pageWidth / pageHeight, -pageHeight / pageWidth, 0];\n          }\n        default:\n          return [1, 0, 0, 1];\n      }\n    }\n    get parentScale() {\n      return this._uiManager.viewParameters.realScale;\n    }\n    get parentRotation() {\n      return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;\n    }\n    get parentDimensions() {\n      const {\n        parentScale,\n        pageDimensions: [pageWidth, pageHeight]\n      } = this;\n      return [pageWidth * parentScale, pageHeight * parentScale];\n    }\n    setDims(width, height) {\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.div.style.width = `${(100 * width / parentWidth).toFixed(2)}%`;\n      if (!this.#keepAspectRatio) {\n        this.div.style.height = `${(100 * height / parentHeight).toFixed(2)}%`;\n      }\n    }\n    fixDims() {\n      const {\n        style\n      } = this.div;\n      const {\n        height,\n        width\n      } = style;\n      const widthPercent = width.endsWith(\"%\");\n      const heightPercent = !this.#keepAspectRatio && height.endsWith(\"%\");\n      if (widthPercent && heightPercent) {\n        return;\n      }\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      if (!widthPercent) {\n        style.width = `${(100 * parseFloat(width) / parentWidth).toFixed(2)}%`;\n      }\n      if (!this.#keepAspectRatio && !heightPercent) {\n        style.height = `${(100 * parseFloat(height) / parentHeight).toFixed(2)}%`;\n      }\n    }\n    getInitialTranslation() {\n      return [0, 0];\n    }\n    #createResizers() {\n      if (this.#resizersDiv) {\n        return;\n      }\n      this.#resizersDiv = document.createElement(\"div\");\n      this.#resizersDiv.classList.add(\"resizers\");\n      const classes = this._willKeepAspectRatio ? [\"topLeft\", \"topRight\", \"bottomRight\", \"bottomLeft\"] : [\"topLeft\", \"topMiddle\", \"topRight\", \"middleRight\", \"bottomRight\", \"bottomMiddle\", \"bottomLeft\", \"middleLeft\"];\n      const signal = this._uiManager._signal;\n      for (const name of classes) {\n        const div = document.createElement(\"div\");\n        this.#resizersDiv.append(div);\n        div.classList.add(\"resizer\", name);\n        div.setAttribute(\"data-resizer-name\", name);\n        div.addEventListener(\"pointerdown\", this.#resizerPointerdown.bind(this, name), {\n          signal\n        });\n        div.addEventListener(\"contextmenu\", noContextMenu, {\n          signal\n        });\n        div.tabIndex = -1;\n      }\n      this.div.prepend(this.#resizersDiv);\n    }\n    #resizerPointerdown(name, event) {\n      event.preventDefault();\n      const {\n        isMac\n      } = util_FeatureTest.platform;\n      if (event.button !== 0 || event.ctrlKey && isMac) {\n        return;\n      }\n      this.#altText?.toggle(false);\n      const savedDraggable = this._isDraggable;\n      this._isDraggable = false;\n      const ac = new AbortController();\n      const signal = this._uiManager.combinedSignal(ac);\n      this.parent.togglePointerEvents(false);\n      window.addEventListener(\"pointermove\", this.#resizerPointermove.bind(this, name), {\n        passive: true,\n        capture: true,\n        signal\n      });\n      window.addEventListener(\"contextmenu\", noContextMenu, {\n        signal\n      });\n      const savedX = this.x;\n      const savedY = this.y;\n      const savedWidth = this.width;\n      const savedHeight = this.height;\n      const savedParentCursor = this.parent.div.style.cursor;\n      const savedCursor = this.div.style.cursor;\n      this.div.style.cursor = this.parent.div.style.cursor = window.getComputedStyle(event.target).cursor;\n      const pointerUpCallback = () => {\n        ac.abort();\n        this.parent.togglePointerEvents(true);\n        this.#altText?.toggle(true);\n        this._isDraggable = savedDraggable;\n        this.parent.div.style.cursor = savedParentCursor;\n        this.div.style.cursor = savedCursor;\n        this.#addResizeToUndoStack(savedX, savedY, savedWidth, savedHeight);\n      };\n      window.addEventListener(\"pointerup\", pointerUpCallback, {\n        signal\n      });\n      window.addEventListener(\"blur\", pointerUpCallback, {\n        signal\n      });\n    }\n    #addResizeToUndoStack(savedX, savedY, savedWidth, savedHeight) {\n      const newX = this.x;\n      const newY = this.y;\n      const newWidth = this.width;\n      const newHeight = this.height;\n      if (newX === savedX && newY === savedY && newWidth === savedWidth && newHeight === savedHeight) {\n        return;\n      }\n      this.addCommands({\n        cmd: () => {\n          this.width = newWidth;\n          this.height = newHeight;\n          this.x = newX;\n          this.y = newY;\n          const [parentWidth, parentHeight] = this.parentDimensions;\n          this.setDims(parentWidth * newWidth, parentHeight * newHeight);\n          this.fixAndSetPosition();\n        },\n        undo: () => {\n          this.width = savedWidth;\n          this.height = savedHeight;\n          this.x = savedX;\n          this.y = savedY;\n          const [parentWidth, parentHeight] = this.parentDimensions;\n          this.setDims(parentWidth * savedWidth, parentHeight * savedHeight);\n          this.fixAndSetPosition();\n        },\n        mustExec: true\n      });\n    }\n    #resizerPointermove(name, event) {\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      const savedX = this.x;\n      const savedY = this.y;\n      const savedWidth = this.width;\n      const savedHeight = this.height;\n      const minWidth = AnnotationEditor.MIN_SIZE / parentWidth;\n      const minHeight = AnnotationEditor.MIN_SIZE / parentHeight;\n      const round = x => Math.round(x * 10000) / 10000;\n      const rotationMatrix = this.#getRotationMatrix(this.rotation);\n      const transf = (x, y) => [rotationMatrix[0] * x + rotationMatrix[2] * y, rotationMatrix[1] * x + rotationMatrix[3] * y];\n      const invRotationMatrix = this.#getRotationMatrix(360 - this.rotation);\n      const invTransf = (x, y) => [invRotationMatrix[0] * x + invRotationMatrix[2] * y, invRotationMatrix[1] * x + invRotationMatrix[3] * y];\n      let getPoint;\n      let getOpposite;\n      let isDiagonal = false;\n      let isHorizontal = false;\n      switch (name) {\n        case \"topLeft\":\n          isDiagonal = true;\n          getPoint = (w, h) => [0, 0];\n          getOpposite = (w, h) => [w, h];\n          break;\n        case \"topMiddle\":\n          getPoint = (w, h) => [w / 2, 0];\n          getOpposite = (w, h) => [w / 2, h];\n          break;\n        case \"topRight\":\n          isDiagonal = true;\n          getPoint = (w, h) => [w, 0];\n          getOpposite = (w, h) => [0, h];\n          break;\n        case \"middleRight\":\n          isHorizontal = true;\n          getPoint = (w, h) => [w, h / 2];\n          getOpposite = (w, h) => [0, h / 2];\n          break;\n        case \"bottomRight\":\n          isDiagonal = true;\n          getPoint = (w, h) => [w, h];\n          getOpposite = (w, h) => [0, 0];\n          break;\n        case \"bottomMiddle\":\n          getPoint = (w, h) => [w / 2, h];\n          getOpposite = (w, h) => [w / 2, 0];\n          break;\n        case \"bottomLeft\":\n          isDiagonal = true;\n          getPoint = (w, h) => [0, h];\n          getOpposite = (w, h) => [w, 0];\n          break;\n        case \"middleLeft\":\n          isHorizontal = true;\n          getPoint = (w, h) => [0, h / 2];\n          getOpposite = (w, h) => [w, h / 2];\n          break;\n      }\n      const point = getPoint(savedWidth, savedHeight);\n      const oppositePoint = getOpposite(savedWidth, savedHeight);\n      let transfOppositePoint = transf(...oppositePoint);\n      const oppositeX = round(savedX + transfOppositePoint[0]);\n      const oppositeY = round(savedY + transfOppositePoint[1]);\n      let ratioX = 1;\n      let ratioY = 1;\n      let [deltaX, deltaY] = this.screenToPageTranslation(event.movementX, event.movementY);\n      [deltaX, deltaY] = invTransf(deltaX / parentWidth, deltaY / parentHeight);\n      if (isDiagonal) {\n        const oldDiag = Math.hypot(savedWidth, savedHeight);\n        ratioX = ratioY = Math.max(Math.min(Math.hypot(oppositePoint[0] - point[0] - deltaX, oppositePoint[1] - point[1] - deltaY) / oldDiag, 1 / savedWidth, 1 / savedHeight), minWidth / savedWidth, minHeight / savedHeight);\n      } else if (isHorizontal) {\n        ratioX = Math.max(minWidth, Math.min(1, Math.abs(oppositePoint[0] - point[0] - deltaX))) / savedWidth;\n      } else {\n        ratioY = Math.max(minHeight, Math.min(1, Math.abs(oppositePoint[1] - point[1] - deltaY))) / savedHeight;\n      }\n      const newWidth = round(savedWidth * ratioX);\n      const newHeight = round(savedHeight * ratioY);\n      transfOppositePoint = transf(...getOpposite(newWidth, newHeight));\n      const newX = oppositeX - transfOppositePoint[0];\n      const newY = oppositeY - transfOppositePoint[1];\n      this.width = newWidth;\n      this.height = newHeight;\n      this.x = newX;\n      this.y = newY;\n      this.setDims(parentWidth * newWidth, parentHeight * newHeight);\n      this.fixAndSetPosition();\n    }\n    altTextFinish() {\n      this.#altText?.finish();\n    }\n    async addEditToolbar() {\n      if (this._editToolbar || this.#isInEditMode) {\n        return this._editToolbar;\n      }\n      this._editToolbar = new EditorToolbar(this);\n      this.div.append(this._editToolbar.render());\n      if (this.#altText) {\n        await this._editToolbar.addAltText(this.#altText);\n      }\n      return this._editToolbar;\n    }\n    removeEditToolbar() {\n      if (!this._editToolbar) {\n        return;\n      }\n      this._editToolbar.remove();\n      this._editToolbar = null;\n      this.#altText?.destroy();\n    }\n    addContainer(container) {\n      const editToolbarDiv = this._editToolbar?.div;\n      if (editToolbarDiv) {\n        editToolbarDiv.before(container);\n      } else {\n        this.div.append(container);\n      }\n    }\n    getClientDimensions() {\n      return this.div.getBoundingClientRect();\n    }\n    async addAltTextButton() {\n      if (this.#altText) {\n        return;\n      }\n      AltText.initialize(AnnotationEditor._l10nPromise);\n      this.#altText = new AltText(this);\n      if (this.#accessibilityData) {\n        this.#altText.data = this.#accessibilityData;\n        this.#accessibilityData = null;\n      }\n      await this.addEditToolbar();\n    }\n    get altTextData() {\n      return this.#altText?.data;\n    }\n    set altTextData(data) {\n      if (!this.#altText) {\n        return;\n      }\n      this.#altText.data = data;\n    }\n    get guessedAltText() {\n      return this.#altText?.guessedText;\n    }\n    async setGuessedAltText(text) {\n      await this.#altText?.setGuessedText(text);\n    }\n    serializeAltText(isForCopying) {\n      return this.#altText?.serialize(isForCopying);\n    }\n    hasAltText() {\n      return !!this.#altText && !this.#altText.isEmpty();\n    }\n    hasAltTextData() {\n      return this.#altText?.hasData() ?? false;\n    }\n    render() {\n      this.div = document.createElement(\"div\");\n      this.div.setAttribute(\"data-editor-rotation\", (360 - this.rotation) % 360);\n      this.div.className = this.name;\n      this.div.setAttribute(\"id\", this.id);\n      this.div.tabIndex = this.#disabled ? -1 : 0;\n      if (!this._isVisible) {\n        this.div.classList.add(\"hidden\");\n      }\n      this.setInForeground();\n      this.#addFocusListeners();\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      if (this.parentRotation % 180 !== 0) {\n        this.div.style.maxWidth = `${(100 * parentHeight / parentWidth).toFixed(2)}%`;\n        this.div.style.maxHeight = `${(100 * parentWidth / parentHeight).toFixed(2)}%`;\n      }\n      const [tx, ty] = this.getInitialTranslation();\n      this.translate(tx, ty);\n      bindEvents(this, this.div, [\"pointerdown\"]);\n      return this.div;\n    }\n    pointerdown(event) {\n      const {\n        isMac\n      } = util_FeatureTest.platform;\n      if (event.button !== 0 || event.ctrlKey && isMac) {\n        event.preventDefault();\n        return;\n      }\n      this.#hasBeenClicked = true;\n      if (this._isDraggable) {\n        this.#setUpDragSession(event);\n        return;\n      }\n      this.#selectOnPointerEvent(event);\n    }\n    #selectOnPointerEvent(event) {\n      const {\n        isMac\n      } = util_FeatureTest.platform;\n      if (event.ctrlKey && !isMac || event.shiftKey || event.metaKey && isMac) {\n        this.parent.toggleSelected(this);\n      } else {\n        this.parent.setSelected(this);\n      }\n    }\n    #setUpDragSession(event) {\n      const isSelected = this._uiManager.isSelected(this);\n      this._uiManager.setUpDragSession();\n      const ac = new AbortController();\n      const signal = this._uiManager.combinedSignal(ac);\n      if (isSelected) {\n        this.div.classList.add(\"moving\");\n        this.#prevDragX = event.clientX;\n        this.#prevDragY = event.clientY;\n        const pointerMoveCallback = e => {\n          const {\n            clientX: x,\n            clientY: y\n          } = e;\n          const [tx, ty] = this.screenToPageTranslation(x - this.#prevDragX, y - this.#prevDragY);\n          this.#prevDragX = x;\n          this.#prevDragY = y;\n          this._uiManager.dragSelectedEditors(tx, ty);\n        };\n        window.addEventListener(\"pointermove\", pointerMoveCallback, {\n          passive: true,\n          capture: true,\n          signal\n        });\n      }\n      const pointerUpCallback = () => {\n        ac.abort();\n        if (isSelected) {\n          this.div.classList.remove(\"moving\");\n        }\n        this.#hasBeenClicked = false;\n        if (!this._uiManager.endDragSession()) {\n          this.#selectOnPointerEvent(event);\n        }\n      };\n      window.addEventListener(\"pointerup\", pointerUpCallback, {\n        signal\n      });\n      window.addEventListener(\"blur\", pointerUpCallback, {\n        signal\n      });\n    }\n    moveInDOM() {\n      if (this.#moveInDOMTimeout) {\n        clearTimeout(this.#moveInDOMTimeout);\n      }\n      this.#moveInDOMTimeout = setTimeout(() => {\n        this.#moveInDOMTimeout = null;\n        this.parent?.moveEditorInDOM(this);\n      }, 0);\n    }\n    _setParentAndPosition(parent, x, y) {\n      parent.changeParent(this);\n      this.x = x;\n      this.y = y;\n      this.fixAndSetPosition();\n    }\n    getRect(tx, ty, rotation = this.rotation) {\n      const scale = this.parentScale;\n      const [pageWidth, pageHeight] = this.pageDimensions;\n      const [pageX, pageY] = this.pageTranslation;\n      const shiftX = tx / scale;\n      const shiftY = ty / scale;\n      const x = this.x * pageWidth;\n      const y = this.y * pageHeight;\n      const width = this.width * pageWidth;\n      const height = this.height * pageHeight;\n      switch (rotation) {\n        case 0:\n          return [x + shiftX + pageX, pageHeight - y - shiftY - height + pageY, x + shiftX + width + pageX, pageHeight - y - shiftY + pageY];\n        case 90:\n          return [x + shiftY + pageX, pageHeight - y + shiftX + pageY, x + shiftY + height + pageX, pageHeight - y + shiftX + width + pageY];\n        case 180:\n          return [x - shiftX - width + pageX, pageHeight - y + shiftY + pageY, x - shiftX + pageX, pageHeight - y + shiftY + height + pageY];\n        case 270:\n          return [x - shiftY - height + pageX, pageHeight - y - shiftX - width + pageY, x - shiftY + pageX, pageHeight - y - shiftX + pageY];\n        default:\n          throw new Error(\"Invalid rotation\");\n      }\n    }\n    getRectInCurrentCoords(rect, pageHeight) {\n      const [x1, y1, x2, y2] = rect;\n      const width = x2 - x1;\n      const height = y2 - y1;\n      switch (this.rotation) {\n        case 0:\n          return [x1, pageHeight - y2, width, height];\n        case 90:\n          return [x1, pageHeight - y1, height, width];\n        case 180:\n          return [x2, pageHeight - y1, width, height];\n        case 270:\n          return [x2, pageHeight - y2, height, width];\n        default:\n          throw new Error(\"Invalid rotation\");\n      }\n    }\n    onceAdded() {}\n    isEmpty() {\n      return false;\n    }\n    enableEditMode() {\n      this.#isInEditMode = true;\n    }\n    disableEditMode() {\n      this.#isInEditMode = false;\n    }\n    isInEditMode() {\n      return this.#isInEditMode;\n    }\n    shouldGetKeyboardEvents() {\n      return this.#isResizerEnabledForKeyboard;\n    }\n    needsToBeRebuilt() {\n      return this.div && !this.isAttachedToDOM;\n    }\n    #addFocusListeners() {\n      if (this.#focusAC || !this.div) {\n        return;\n      }\n      this.#focusAC = new AbortController();\n      const signal = this._uiManager.combinedSignal(this.#focusAC);\n      this.div.addEventListener(\"focusin\", this.focusin.bind(this), {\n        signal\n      });\n      this.div.addEventListener(\"focusout\", this.focusout.bind(this), {\n        signal\n      });\n    }\n    rebuild() {\n      this.#addFocusListeners();\n    }\n    rotate(_angle) {}\n    serializeDeleted() {\n      return {\n        id: this.annotationElementId,\n        deleted: true,\n        pageIndex: this.pageIndex,\n        popupRef: this._initialData?.popupRef || \"\"\n      };\n    }\n    serialize(isForCopying = false, context = null) {\n      unreachable(\"An editor must be serializable\");\n    }\n    static async deserialize(data, parent, uiManager) {\n      const editor = new this.prototype.constructor({\n        parent,\n        id: parent.getNextId(),\n        uiManager\n      });\n      editor.rotation = data.rotation;\n      editor.#accessibilityData = data.accessibilityData;\n      const [pageWidth, pageHeight] = editor.pageDimensions;\n      const [x, y, width, height] = editor.getRectInCurrentCoords(data.rect, pageHeight);\n      editor.x = x / pageWidth;\n      editor.y = y / pageHeight;\n      editor.width = width / pageWidth;\n      editor.height = height / pageHeight;\n      return editor;\n    }\n    get hasBeenModified() {\n      return !!this.annotationElementId && (this.deleted || this.serialize() !== null);\n    }\n    remove() {\n      this.#focusAC?.abort();\n      this.#focusAC = null;\n      if (!this.isEmpty()) {\n        this.commit();\n      }\n      if (this.parent) {\n        this.parent.remove(this);\n      } else {\n        this._uiManager.removeEditor(this);\n      }\n      if (this.#moveInDOMTimeout) {\n        clearTimeout(this.#moveInDOMTimeout);\n        this.#moveInDOMTimeout = null;\n      }\n      this.#stopResizing();\n      this.removeEditToolbar();\n      if (this.#telemetryTimeouts) {\n        for (const timeout of this.#telemetryTimeouts.values()) {\n          clearTimeout(timeout);\n        }\n        this.#telemetryTimeouts = null;\n      }\n      this.parent = null;\n    }\n    get isResizable() {\n      return false;\n    }\n    makeResizable() {\n      if (this.isResizable) {\n        this.#createResizers();\n        this.#resizersDiv.classList.remove(\"hidden\");\n        bindEvents(this, this.div, [\"keydown\"]);\n      }\n    }\n    get toolbarPosition() {\n      return null;\n    }\n    keydown(event) {\n      if (!this.isResizable || event.target !== this.div || event.key !== \"Enter\") {\n        return;\n      }\n      this._uiManager.setSelected(this);\n      this.#savedDimensions = {\n        savedX: this.x,\n        savedY: this.y,\n        savedWidth: this.width,\n        savedHeight: this.height\n      };\n      const children = this.#resizersDiv.children;\n      if (!this.#allResizerDivs) {\n        this.#allResizerDivs = Array.from(children);\n        const boundResizerKeydown = this.#resizerKeydown.bind(this);\n        const boundResizerBlur = this.#resizerBlur.bind(this);\n        const signal = this._uiManager._signal;\n        for (const div of this.#allResizerDivs) {\n          const name = div.getAttribute(\"data-resizer-name\");\n          div.setAttribute(\"role\", \"spinbutton\");\n          div.addEventListener(\"keydown\", boundResizerKeydown, {\n            signal\n          });\n          div.addEventListener(\"blur\", boundResizerBlur, {\n            signal\n          });\n          div.addEventListener(\"focus\", this.#resizerFocus.bind(this, name), {\n            signal\n          });\n          div.setAttribute(\"data-l10n-id\", AnnotationEditor._l10nResizer[name]);\n        }\n      }\n      const first = this.#allResizerDivs[0];\n      let firstPosition = 0;\n      for (const div of children) {\n        if (div === first) {\n          break;\n        }\n        firstPosition++;\n      }\n      const nextFirstPosition = (360 - this.rotation + this.parentRotation) % 360 / 90 * (this.#allResizerDivs.length / 4);\n      if (nextFirstPosition !== firstPosition) {\n        if (nextFirstPosition < firstPosition) {\n          for (let i = 0; i < firstPosition - nextFirstPosition; i++) {\n            this.#resizersDiv.append(this.#resizersDiv.firstChild);\n          }\n        } else if (nextFirstPosition > firstPosition) {\n          for (let i = 0; i < nextFirstPosition - firstPosition; i++) {\n            this.#resizersDiv.firstChild.before(this.#resizersDiv.lastChild);\n          }\n        }\n        let i = 0;\n        for (const child of children) {\n          const div = this.#allResizerDivs[i++];\n          const name = div.getAttribute(\"data-resizer-name\");\n          child.setAttribute(\"data-l10n-id\", AnnotationEditor._l10nResizer[name]);\n        }\n      }\n      this.#setResizerTabIndex(0);\n      this.#isResizerEnabledForKeyboard = true;\n      this.#resizersDiv.firstChild.focus({\n        focusVisible: true\n      });\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n    #resizerKeydown(event) {\n      AnnotationEditor._resizerKeyboardManager.exec(this, event);\n    }\n    #resizerBlur(event) {\n      if (this.#isResizerEnabledForKeyboard && event.relatedTarget?.parentNode !== this.#resizersDiv) {\n        this.#stopResizing();\n      }\n    }\n    #resizerFocus(name) {\n      this.#focusedResizerName = this.#isResizerEnabledForKeyboard ? name : \"\";\n    }\n    #setResizerTabIndex(value) {\n      if (!this.#allResizerDivs) {\n        return;\n      }\n      for (const div of this.#allResizerDivs) {\n        div.tabIndex = value;\n      }\n    }\n    _resizeWithKeyboard(x, y) {\n      if (!this.#isResizerEnabledForKeyboard) {\n        return;\n      }\n      this.#resizerPointermove(this.#focusedResizerName, {\n        movementX: x,\n        movementY: y\n      });\n    }\n    #stopResizing() {\n      this.#isResizerEnabledForKeyboard = false;\n      this.#setResizerTabIndex(-1);\n      if (this.#savedDimensions) {\n        const {\n          savedX,\n          savedY,\n          savedWidth,\n          savedHeight\n        } = this.#savedDimensions;\n        this.#addResizeToUndoStack(savedX, savedY, savedWidth, savedHeight);\n        this.#savedDimensions = null;\n      }\n    }\n    _stopResizingWithKeyboard() {\n      this.#stopResizing();\n      this.div.focus();\n    }\n    select() {\n      this.makeResizable();\n      this.div?.classList.add(\"selectedEditor\");\n      if (!this._editToolbar) {\n        this.addEditToolbar().then(() => {\n          if (this.div?.classList.contains(\"selectedEditor\")) {\n            this._editToolbar?.show();\n          }\n        });\n        return;\n      }\n      this._editToolbar?.show();\n      this.#altText?.toggleAltTextBadge(false);\n    }\n    unselect() {\n      this.#resizersDiv?.classList.add(\"hidden\");\n      this.div?.classList.remove(\"selectedEditor\");\n      if (this.div?.contains(document.activeElement)) {\n        this._uiManager.currentLayer.div.focus({\n          preventScroll: true\n        });\n      }\n      this._editToolbar?.hide();\n      this.#altText?.toggleAltTextBadge(true);\n    }\n    updateParams(type, value) {}\n    disableEditing() {}\n    enableEditing() {}\n    enterInEditMode() {}\n    getImageForAltText() {\n      return null;\n    }\n    get contentDiv() {\n      return this.div;\n    }\n    get isEditing() {\n      return this.#isEditing;\n    }\n    set isEditing(value) {\n      this.#isEditing = value;\n      if (!this.parent) {\n        return;\n      }\n      if (value) {\n        this.parent.setSelected(this);\n        this.parent.setActiveEditor(this);\n      } else {\n        this.parent.setActiveEditor(null);\n      }\n    }\n    setAspectRatio(width, height) {\n      this.#keepAspectRatio = true;\n      const aspectRatio = width / height;\n      const {\n        style\n      } = this.div;\n      style.aspectRatio = aspectRatio;\n      style.height = \"auto\";\n    }\n    static get MIN_SIZE() {\n      return 16;\n    }\n    static canCreateNewEmptyEditor() {\n      return true;\n    }\n    get telemetryInitialData() {\n      return {\n        action: \"added\"\n      };\n    }\n    get telemetryFinalData() {\n      return null;\n    }\n    _reportTelemetry(data, mustWait = false) {\n      if (mustWait) {\n        this.#telemetryTimeouts ||= new Map();\n        const {\n          action\n        } = data;\n        let timeout = this.#telemetryTimeouts.get(action);\n        if (timeout) {\n          clearTimeout(timeout);\n        }\n        timeout = setTimeout(() => {\n          this._reportTelemetry(data);\n          this.#telemetryTimeouts.delete(action);\n          if (this.#telemetryTimeouts.size === 0) {\n            this.#telemetryTimeouts = null;\n          }\n        }, AnnotationEditor._telemetryTimeout);\n        this.#telemetryTimeouts.set(action, timeout);\n        return;\n      }\n      data.type ||= this.editorType;\n      this._uiManager._eventBus.dispatch(\"reporttelemetry\", {\n        source: this,\n        details: {\n          type: \"editing\",\n          data\n        }\n      });\n    }\n    show(visible = this._isVisible) {\n      this.div.classList.toggle(\"hidden\", !visible);\n      this._isVisible = visible;\n    }\n    enable() {\n      if (this.div) {\n        this.div.tabIndex = 0;\n      }\n      this.#disabled = false;\n    }\n    disable() {\n      if (this.div) {\n        this.div.tabIndex = -1;\n      }\n      this.#disabled = true;\n    }\n    renderAnnotationElement(annotation) {\n      let content = annotation.container.querySelector(\".annotationContent\");\n      if (!content) {\n        content = document.createElement(\"div\");\n        content.classList.add(\"annotationContent\", this.editorType);\n        annotation.container.prepend(content);\n      } else if (content.nodeName === \"CANVAS\") {\n        const canvas = content;\n        content = document.createElement(\"div\");\n        content.classList.add(\"annotationContent\", this.editorType);\n        canvas.before(content);\n      }\n      return content;\n    }\n    resetAnnotationElement(annotation) {\n      const {\n        firstChild\n      } = annotation.container;\n      if (firstChild?.nodeName === \"DIV\" && firstChild.classList.contains(\"annotationContent\")) {\n        firstChild.remove();\n      }\n    }\n  }\n  class FakeEditor extends AnnotationEditor {\n    constructor(params) {\n      super(params);\n      this.annotationElementId = params.annotationElementId;\n      this.deleted = true;\n    }\n    serialize() {\n      return this.serializeDeleted();\n    }\n  }\n  const SEED = 0xc3d2e1f0;\n  const MASK_HIGH = 0xffff0000;\n  const MASK_LOW = 0xffff;\n  class MurmurHash3_64 {\n    constructor(seed) {\n      this.h1 = seed ? seed & 0xffffffff : SEED;\n      this.h2 = seed ? seed & 0xffffffff : SEED;\n    }\n    update(input) {\n      let data, length;\n      if (typeof input === \"string\") {\n        data = new Uint8Array(input.length * 2);\n        length = 0;\n        for (let i = 0, ii = input.length; i < ii; i++) {\n          const code = input.charCodeAt(i);\n          if (code <= 0xff) {\n            data[length++] = code;\n          } else {\n            data[length++] = code >>> 8;\n            data[length++] = code & 0xff;\n          }\n        }\n      } else if (ArrayBuffer.isView(input)) {\n        data = input.slice();\n        length = data.byteLength;\n      } else {\n        throw new Error(\"Invalid data format, must be a string or TypedArray.\");\n      }\n      const blockCounts = length >> 2;\n      const tailLength = length - blockCounts * 4;\n      const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\n      let k1 = 0,\n        k2 = 0;\n      let h1 = this.h1,\n        h2 = this.h2;\n      const C1 = 0xcc9e2d51,\n        C2 = 0x1b873593;\n      const C1_LOW = C1 & MASK_LOW,\n        C2_LOW = C2 & MASK_LOW;\n      for (let i = 0; i < blockCounts; i++) {\n        if (i & 1) {\n          k1 = dataUint32[i];\n          k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n          k1 = k1 << 15 | k1 >>> 17;\n          k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n          h1 ^= k1;\n          h1 = h1 << 13 | h1 >>> 19;\n          h1 = h1 * 5 + 0xe6546b64;\n        } else {\n          k2 = dataUint32[i];\n          k2 = k2 * C1 & MASK_HIGH | k2 * C1_LOW & MASK_LOW;\n          k2 = k2 << 15 | k2 >>> 17;\n          k2 = k2 * C2 & MASK_HIGH | k2 * C2_LOW & MASK_LOW;\n          h2 ^= k2;\n          h2 = h2 << 13 | h2 >>> 19;\n          h2 = h2 * 5 + 0xe6546b64;\n        }\n      }\n      k1 = 0;\n      switch (tailLength) {\n        case 3:\n          k1 ^= data[blockCounts * 4 + 2] << 16;\n        case 2:\n          k1 ^= data[blockCounts * 4 + 1] << 8;\n        case 1:\n          k1 ^= data[blockCounts * 4];\n          k1 = k1 * C1 & MASK_HIGH | k1 * C1_LOW & MASK_LOW;\n          k1 = k1 << 15 | k1 >>> 17;\n          k1 = k1 * C2 & MASK_HIGH | k1 * C2_LOW & MASK_LOW;\n          if (blockCounts & 1) {\n            h1 ^= k1;\n          } else {\n            h2 ^= k1;\n          }\n      }\n      this.h1 = h1;\n      this.h2 = h2;\n    }\n    hexdigest() {\n      let h1 = this.h1,\n        h2 = this.h2;\n      h1 ^= h2 >>> 1;\n      h1 = h1 * 0xed558ccd & MASK_HIGH | h1 * 0x8ccd & MASK_LOW;\n      h2 = h2 * 0xff51afd7 & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xafd7ed55 & MASK_HIGH) >>> 16;\n      h1 ^= h2 >>> 1;\n      h1 = h1 * 0x1a85ec53 & MASK_HIGH | h1 * 0xec53 & MASK_LOW;\n      h2 = h2 * 0xc4ceb9fe & MASK_HIGH | ((h2 << 16 | h1 >>> 16) * 0xb9fe1a85 & MASK_HIGH) >>> 16;\n      h1 ^= h2 >>> 1;\n      return (h1 >>> 0).toString(16).padStart(8, \"0\") + (h2 >>> 0).toString(16).padStart(8, \"0\");\n    }\n  }\n\n\n\n  const SerializableEmpty = Object.freeze({\n    map: null,\n    hash: \"\",\n    transfer: undefined\n  });\n  class AnnotationStorage {\n    #modified = false;\n    #modifiedIds = null;\n    #storage = new Map();\n    constructor() {\n      this.onSetModified = null;\n      this.onResetModified = null;\n      this.onAnnotationEditor = null;\n    }\n    getValue(key, defaultValue) {\n      const value = this.#storage.get(key);\n      if (value === undefined) {\n        return defaultValue;\n      }\n      return Object.assign(defaultValue, value);\n    }\n    getRawValue(key) {\n      return this.#storage.get(key);\n    }\n    remove(key) {\n      this.#storage.delete(key);\n      if (this.#storage.size === 0) {\n        this.resetModified();\n      }\n      if (typeof this.onAnnotationEditor === \"function\") {\n        for (const value of this.#storage.values()) {\n          if (value instanceof AnnotationEditor) {\n            return;\n          }\n        }\n        this.onAnnotationEditor(null);\n      }\n    }\n    setValue(key, value) {\n      const obj = this.#storage.get(key);\n      let modified = false;\n      if (obj !== undefined) {\n        for (const [entry, val] of Object.entries(value)) {\n          if (obj[entry] !== val) {\n            modified = true;\n            obj[entry] = val;\n          }\n        }\n      } else {\n        modified = true;\n        this.#storage.set(key, value);\n      }\n      if (modified) {\n        this.#setModified();\n      }\n      if (value instanceof AnnotationEditor && typeof this.onAnnotationEditor === \"function\") {\n        this.onAnnotationEditor(value.constructor._type);\n      }\n    }\n    has(key) {\n      return this.#storage.has(key);\n    }\n    getAll() {\n      return this.#storage.size > 0 ? objectFromMap(this.#storage) : null;\n    }\n    setAll(obj) {\n      for (const [key, val] of Object.entries(obj)) {\n        this.setValue(key, val);\n      }\n    }\n    get size() {\n      return this.#storage.size;\n    }\n    #setModified() {\n      if (!this.#modified) {\n        this.#modified = true;\n        if (typeof this.onSetModified === \"function\") {\n          this.onSetModified();\n        }\n      }\n    }\n    resetModified() {\n      if (this.#modified) {\n        this.#modified = false;\n        if (typeof this.onResetModified === \"function\") {\n          this.onResetModified();\n        }\n      }\n    }\n    get print() {\n      return new PrintAnnotationStorage(this);\n    }\n    get serializable() {\n      if (this.#storage.size === 0) {\n        return SerializableEmpty;\n      }\n      const map = new Map(),\n        hash = new MurmurHash3_64(),\n        transfer = [];\n      const context = Object.create(null);\n      let hasBitmap = false;\n      for (const [key, val] of this.#storage) {\n        const serialized = val instanceof AnnotationEditor ? val.serialize(false, context) : val;\n        if (serialized) {\n          map.set(key, serialized);\n          hash.update(`${key}:${JSON.stringify(serialized)}`);\n          hasBitmap ||= !!serialized.bitmap;\n        }\n      }\n      if (hasBitmap) {\n        for (const value of map.values()) {\n          if (value.bitmap) {\n            transfer.push(value.bitmap);\n          }\n        }\n      }\n      return map.size > 0 ? {\n        map,\n        hash: hash.hexdigest(),\n        transfer\n      } : SerializableEmpty;\n    }\n    get editorStats() {\n      let stats = null;\n      const typeToEditor = new Map();\n      for (const value of this.#storage.values()) {\n        if (!(value instanceof AnnotationEditor)) {\n          continue;\n        }\n        const editorStats = value.telemetryFinalData;\n        if (!editorStats) {\n          continue;\n        }\n        const {\n          type\n        } = editorStats;\n        if (!typeToEditor.has(type)) {\n          typeToEditor.set(type, Object.getPrototypeOf(value).constructor);\n        }\n        stats ||= Object.create(null);\n        const map = stats[type] ||= new Map();\n        for (const [key, val] of Object.entries(editorStats)) {\n          if (key === \"type\") {\n            continue;\n          }\n          let counters = map.get(key);\n          if (!counters) {\n            counters = new Map();\n            map.set(key, counters);\n          }\n          const count = counters.get(val) ?? 0;\n          counters.set(val, count + 1);\n        }\n      }\n      for (const [type, editor] of typeToEditor) {\n        stats[type] = editor.computeTelemetryFinalData(stats[type]);\n      }\n      return stats;\n    }\n    resetModifiedIds() {\n      this.#modifiedIds = null;\n    }\n    get modifiedIds() {\n      if (this.#modifiedIds) {\n        return this.#modifiedIds;\n      }\n      const ids = [];\n      for (const value of this.#storage.values()) {\n        if (!(value instanceof AnnotationEditor) || !value.annotationElementId || !value.serialize()) {\n          continue;\n        }\n        ids.push(value.annotationElementId);\n      }\n      return this.#modifiedIds = {\n        ids: new Set(ids),\n        hash: ids.join(\",\")\n      };\n    }\n  }\n  class PrintAnnotationStorage extends AnnotationStorage {\n    #serializable;\n    constructor(parent) {\n      super();\n      const {\n        map,\n        hash,\n        transfer\n      } = parent.serializable;\n      const clone = structuredClone(map, transfer ? {\n        transfer\n      } : null);\n      this.#serializable = {\n        map: clone,\n        hash,\n        transfer\n      };\n    }\n    get print() {\n      unreachable(\"Should not call PrintAnnotationStorage.print\");\n    }\n    get serializable() {\n      return this.#serializable;\n    }\n    get modifiedIds() {\n      return shadow(this, \"modifiedIds\", {\n        ids: new Set(),\n        hash: \"\"\n      });\n    }\n  }\n\n  class FontLoader {\n    #systemFonts = new Set();\n    constructor({\n      ownerDocument = globalThis.document,\n      styleElement = null\n    }) {\n      this._document = ownerDocument;\n      this.nativeFontFaces = new Set();\n      this.styleElement = null;\n      this.loadingRequests = [];\n      this.loadTestFontId = 0;\n    }\n    addNativeFontFace(nativeFontFace) {\n      this.nativeFontFaces.add(nativeFontFace);\n      this._document.fonts.add(nativeFontFace);\n    }\n    removeNativeFontFace(nativeFontFace) {\n      this.nativeFontFaces.delete(nativeFontFace);\n      this._document.fonts.delete(nativeFontFace);\n    }\n    insertRule(rule) {\n      if (!this.styleElement) {\n        this.styleElement = this._document.createElement(\"style\");\n        this._document.documentElement.getElementsByTagName(\"head\")[0].append(this.styleElement);\n      }\n      const styleSheet = this.styleElement.sheet;\n      styleSheet.insertRule(rule, styleSheet.cssRules.length);\n    }\n    clear() {\n      for (const nativeFontFace of this.nativeFontFaces) {\n        this._document.fonts.delete(nativeFontFace);\n      }\n      this.nativeFontFaces.clear();\n      this.#systemFonts.clear();\n      if (this.styleElement) {\n        this.styleElement.remove();\n        this.styleElement = null;\n      }\n    }\n    async loadSystemFont({\n      systemFontInfo: info,\n      _inspectFont\n    }) {\n      if (!info || this.#systemFonts.has(info.loadedName)) {\n        return;\n      }\n      assert(!this.disableFontFace, \"loadSystemFont shouldn't be called when `disableFontFace` is set.\");\n      if (this.isFontLoadingAPISupported) {\n        const {\n          loadedName,\n          src,\n          style\n        } = info;\n        const fontFace = new FontFace(loadedName, src, style);\n        this.addNativeFontFace(fontFace);\n        try {\n          await fontFace.load();\n          this.#systemFonts.add(loadedName);\n          _inspectFont?.(info);\n        } catch {\n          warn(`Cannot load system font: ${info.baseFontName}, installing it could help to improve PDF rendering.`);\n          this.removeNativeFontFace(fontFace);\n        }\n        return;\n      }\n      unreachable(\"Not implemented: loadSystemFont without the Font Loading API.\");\n    }\n    async bind(font) {\n      if (font.attached || font.missingFile && !font.systemFontInfo) {\n        return;\n      }\n      font.attached = true;\n      if (font.systemFontInfo) {\n        await this.loadSystemFont(font);\n        return;\n      }\n      if (this.isFontLoadingAPISupported) {\n        const nativeFontFace = font.createNativeFontFace();\n        if (nativeFontFace) {\n          this.addNativeFontFace(nativeFontFace);\n          try {\n            await nativeFontFace.loaded;\n          } catch (ex) {\n            warn(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n            font.disableFontFace = true;\n            throw ex;\n          }\n        }\n        return;\n      }\n      const rule = font.createFontFaceRule();\n      if (rule) {\n        this.insertRule(rule);\n        if (this.isSyncFontLoadingSupported) {\n          return;\n        }\n        await new Promise(resolve => {\n          const request = this._queueLoadingCallback(resolve);\n          this._prepareFontLoadEvent(font, request);\n        });\n      }\n    }\n    get isFontLoadingAPISupported() {\n      const hasFonts = !!this._document?.fonts;\n      return shadow(this, \"isFontLoadingAPISupported\", hasFonts);\n    }\n    get isSyncFontLoadingSupported() {\n      let supported = false;\n      if (isNodeJS) {\n        supported = true;\n      } else if (typeof navigator !== \"undefined\" && typeof navigator?.userAgent === \"string\" && /Mozilla\\/5.0.*?rv:\\d+.*? Gecko/.test(navigator.userAgent)) {\n        supported = true;\n      }\n      return shadow(this, \"isSyncFontLoadingSupported\", supported);\n    }\n    _queueLoadingCallback(callback) {\n      function completeRequest() {\n        assert(!request.done, \"completeRequest() cannot be called twice.\");\n        request.done = true;\n        while (loadingRequests.length > 0 && loadingRequests[0].done) {\n          const otherRequest = loadingRequests.shift();\n          setTimeout(otherRequest.callback, 0);\n        }\n      }\n      const {\n        loadingRequests\n      } = this;\n      const request = {\n        done: false,\n        complete: completeRequest,\n        callback\n      };\n      loadingRequests.push(request);\n      return request;\n    }\n    get _loadTestFont() {\n      const testFont = atob(\"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" + \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" + \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" + \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" + \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" + \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" + \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" + \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" + \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" + \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" + \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" + \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" + \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" + \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" + \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" + \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" + \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" + \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\");\n      return shadow(this, \"_loadTestFont\", testFont);\n    }\n    _prepareFontLoadEvent(font, request) {\n      function int32(data, offset) {\n        return data.charCodeAt(offset) << 24 | data.charCodeAt(offset + 1) << 16 | data.charCodeAt(offset + 2) << 8 | data.charCodeAt(offset + 3) & 0xff;\n      }\n      function spliceString(s, offset, remove, insert) {\n        const chunk1 = s.substring(0, offset);\n        const chunk2 = s.substring(offset + remove);\n        return chunk1 + insert + chunk2;\n      }\n      let i, ii;\n      const canvas = this._document.createElement(\"canvas\");\n      canvas.width = 1;\n      canvas.height = 1;\n      const ctx = canvas.getContext(\"2d\");\n      let called = 0;\n      function isFontReady(name, callback) {\n        if (++called > 30) {\n          warn(\"Load test font never loaded.\");\n          callback();\n          return;\n        }\n        ctx.font = \"30px \" + name;\n        ctx.fillText(\".\", 0, 20);\n        const imageData = ctx.getImageData(0, 0, 1, 1);\n        if (imageData.data[3] > 0) {\n          callback();\n          return;\n        }\n        setTimeout(isFontReady.bind(null, name, callback));\n      }\n      const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n      let data = this._loadTestFont;\n      const COMMENT_OFFSET = 976;\n      data = spliceString(data, COMMENT_OFFSET, loadTestFontId.length, loadTestFontId);\n      const CFF_CHECKSUM_OFFSET = 16;\n      const XXXX_VALUE = 0x58585858;\n      let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n      for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n        checksum = checksum - XXXX_VALUE + int32(loadTestFontId, i) | 0;\n      }\n      if (i < loadTestFontId.length) {\n        checksum = checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i) | 0;\n      }\n      data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, string32(checksum));\n      const url = `url(data:font/opentype;base64,${btoa(data)});`;\n      const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n      this.insertRule(rule);\n      const div = this._document.createElement(\"div\");\n      div.style.visibility = \"hidden\";\n      div.style.width = div.style.height = \"10px\";\n      div.style.position = \"absolute\";\n      div.style.top = div.style.left = \"0px\";\n      for (const name of [font.loadedName, loadTestFontId]) {\n        const span = this._document.createElement(\"span\");\n        span.textContent = \"Hi\";\n        span.style.fontFamily = name;\n        div.append(span);\n      }\n      this._document.body.append(div);\n      isFontReady(loadTestFontId, () => {\n        div.remove();\n        request.complete();\n      });\n    }\n  }\n  class FontFaceObject {\n    constructor(translatedData, {\n      disableFontFace = false,\n      inspectFont = null\n    }) {\n      this.compiledGlyphs = Object.create(null);\n      for (const i in translatedData) {\n        this[i] = translatedData[i];\n      }\n      this.disableFontFace = disableFontFace === true;\n      this._inspectFont = inspectFont;\n    }\n    createNativeFontFace() {\n      if (!this.data || this.disableFontFace) {\n        return null;\n      }\n      let nativeFontFace;\n      if (!this.cssFontInfo) {\n        nativeFontFace = new FontFace(this.loadedName, this.data, {});\n      } else {\n        const css = {\n          weight: this.cssFontInfo.fontWeight\n        };\n        if (this.cssFontInfo.italicAngle) {\n          css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n        }\n        nativeFontFace = new FontFace(this.cssFontInfo.fontFamily, this.data, css);\n      }\n      this._inspectFont?.(this);\n      return nativeFontFace;\n    }\n    createFontFaceRule() {\n      if (!this.data || this.disableFontFace) {\n        return null;\n      }\n      const data = bytesToString(this.data);\n      const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n      let rule;\n      if (!this.cssFontInfo) {\n        rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n      } else {\n        let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n        if (this.cssFontInfo.italicAngle) {\n          css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n        }\n        rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n      }\n      this._inspectFont?.(this, url);\n      return rule;\n    }\n    getPathGenerator(objs, character) {\n      if (this.compiledGlyphs[character] !== undefined) {\n        return this.compiledGlyphs[character];\n      }\n      let cmds;\n      try {\n        cmds = objs.get(this.loadedName + \"_path_\" + character);\n      } catch (ex) {\n        warn(`getPathGenerator - ignoring character: \"${ex}\".`);\n      }\n      if (!Array.isArray(cmds) || cmds.length === 0) {\n        return this.compiledGlyphs[character] = function (c, size) {};\n      }\n      const commands = [];\n      for (let i = 0, ii = cmds.length; i < ii;) {\n        switch (cmds[i++]) {\n          case FontRenderOps.BEZIER_CURVE_TO:\n            {\n              const [a, b, c, d, e, f] = cmds.slice(i, i + 6);\n              commands.push(ctx => ctx.bezierCurveTo(a, b, c, d, e, f));\n              i += 6;\n            }\n            break;\n          case FontRenderOps.MOVE_TO:\n            {\n              const [a, b] = cmds.slice(i, i + 2);\n              commands.push(ctx => ctx.moveTo(a, b));\n              i += 2;\n            }\n            break;\n          case FontRenderOps.LINE_TO:\n            {\n              const [a, b] = cmds.slice(i, i + 2);\n              commands.push(ctx => ctx.lineTo(a, b));\n              i += 2;\n            }\n            break;\n          case FontRenderOps.QUADRATIC_CURVE_TO:\n            {\n              const [a, b, c, d] = cmds.slice(i, i + 4);\n              commands.push(ctx => ctx.quadraticCurveTo(a, b, c, d));\n              i += 4;\n            }\n            break;\n          case FontRenderOps.RESTORE:\n            commands.push(ctx => ctx.restore());\n            break;\n          case FontRenderOps.SAVE:\n            commands.push(ctx => ctx.save());\n            break;\n          case FontRenderOps.SCALE:\n            assert(commands.length === 2, \"Scale command is only valid at the third position.\");\n            break;\n          case FontRenderOps.TRANSFORM:\n            {\n              const [a, b, c, d, e, f] = cmds.slice(i, i + 6);\n              commands.push(ctx => ctx.transform(a, b, c, d, e, f));\n              i += 6;\n            }\n            break;\n          case FontRenderOps.TRANSLATE:\n            {\n              const [a, b] = cmds.slice(i, i + 2);\n              commands.push(ctx => ctx.translate(a, b));\n              i += 2;\n            }\n            break;\n        }\n      }\n      return this.compiledGlyphs[character] = function glyphDrawer(ctx, size) {\n        commands[0](ctx);\n        commands[1](ctx);\n        ctx.scale(size, -size);\n        for (let i = 2, ii = commands.length; i < ii; i++) {\n          commands[i](ctx);\n        }\n      };\n    }\n  }\n\n\n  if (isNodeJS) {\n    var packageCapability = Promise.withResolvers();\n    var packageMap = null;\n    const loadPackages = async () => {\n      const fs = await new Promise(function (resolve, reject) { require([/*webpackIgnore: true*/'com/kmsa/dashboard/resources/node.fs'], resolve, reject); }),\n        http = await new Promise(function (resolve, reject) { require([/*webpackIgnore: true*/'com/kmsa/dashboard/resources/node.http'], resolve, reject); }),\n        https = await new Promise(function (resolve, reject) { require([/*webpackIgnore: true*/'com/kmsa/dashboard/resources/node.https'], resolve, reject); }),\n        url = await new Promise(function (resolve, reject) { require([/*webpackIgnore: true*/'com/kmsa/dashboard/resources/node.url'], resolve, reject); });\n      let canvas, path2d;\n      return new Map(Object.entries({\n        fs,\n        http,\n        https,\n        url,\n        canvas,\n        path2d\n      }));\n    };\n    loadPackages().then(map => {\n      packageMap = map;\n      packageCapability.resolve();\n    }, reason => {\n      warn(`loadPackages: ${reason}`);\n      packageMap = new Map();\n      packageCapability.resolve();\n    });\n  }\n  class NodePackages {\n    static get promise() {\n      return packageCapability.promise;\n    }\n    static get(name) {\n      return packageMap?.get(name);\n    }\n  }\n  const node_utils_fetchData = function (url) {\n    const fs = NodePackages.get(\"fs\");\n    return fs.promises.readFile(url).then(data => new Uint8Array(data));\n  };\n  class NodeFilterFactory extends BaseFilterFactory {}\n  class NodeCanvasFactory extends BaseCanvasFactory {\n    _createCanvas(width, height) {\n      const canvas = NodePackages.get(\"canvas\");\n      return canvas.createCanvas(width, height);\n    }\n  }\n  class NodeCMapReaderFactory extends BaseCMapReaderFactory {\n    _fetchData(url, compressionType) {\n      return node_utils_fetchData(url).then(data => ({\n        cMapData: data,\n        compressionType\n      }));\n    }\n  }\n  class NodeStandardFontDataFactory extends BaseStandardFontDataFactory {\n    _fetchData(url) {\n      return node_utils_fetchData(url);\n    }\n  }\n\n\n  const PathType = {\n    FILL: \"Fill\",\n    STROKE: \"Stroke\",\n    SHADING: \"Shading\"\n  };\n  function applyBoundingBox(ctx, bbox) {\n    if (!bbox) {\n      return;\n    }\n    const width = bbox[2] - bbox[0];\n    const height = bbox[3] - bbox[1];\n    const region = new Path2D();\n    region.rect(bbox[0], bbox[1], width, height);\n    ctx.clip(region);\n  }\n  class BaseShadingPattern {\n    getPattern() {\n      unreachable(\"Abstract method `getPattern` called.\");\n    }\n  }\n  class RadialAxialShadingPattern extends BaseShadingPattern {\n    constructor(IR) {\n      super();\n      this._type = IR[1];\n      this._bbox = IR[2];\n      this._colorStops = IR[3];\n      this._p0 = IR[4];\n      this._p1 = IR[5];\n      this._r0 = IR[6];\n      this._r1 = IR[7];\n      this.matrix = null;\n    }\n    _createGradient(ctx) {\n      let grad;\n      if (this._type === \"axial\") {\n        grad = ctx.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]);\n      } else if (this._type === \"radial\") {\n        grad = ctx.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1);\n      }\n      for (const colorStop of this._colorStops) {\n        grad.addColorStop(colorStop[0], colorStop[1]);\n      }\n      return grad;\n    }\n    getPattern(ctx, owner, inverse, pathType) {\n      let pattern;\n      if (pathType === PathType.STROKE || pathType === PathType.FILL) {\n        const ownerBBox = owner.current.getClippedPathBoundingBox(pathType, getCurrentTransform(ctx)) || [0, 0, 0, 0];\n        const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;\n        const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;\n        const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", width, height);\n        const tmpCtx = tmpCanvas.context;\n        tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n        tmpCtx.beginPath();\n        tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n        tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);\n        inverse = Util.transform(inverse, [1, 0, 0, 1, ownerBBox[0], ownerBBox[1]]);\n        tmpCtx.transform(...owner.baseTransform);\n        if (this.matrix) {\n          tmpCtx.transform(...this.matrix);\n        }\n        applyBoundingBox(tmpCtx, this._bbox);\n        tmpCtx.fillStyle = this._createGradient(tmpCtx);\n        tmpCtx.fill();\n        pattern = ctx.createPattern(tmpCanvas.canvas, \"no-repeat\");\n        const domMatrix = new DOMMatrix(inverse);\n        pattern.setTransform(domMatrix);\n      } else {\n        applyBoundingBox(ctx, this._bbox);\n        pattern = this._createGradient(ctx);\n      }\n      return pattern;\n    }\n  }\n  function drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n    const coords = context.coords,\n      colors = context.colors;\n    const bytes = data.data,\n      rowSize = data.width * 4;\n    let tmp;\n    if (coords[p1 + 1] > coords[p2 + 1]) {\n      tmp = p1;\n      p1 = p2;\n      p2 = tmp;\n      tmp = c1;\n      c1 = c2;\n      c2 = tmp;\n    }\n    if (coords[p2 + 1] > coords[p3 + 1]) {\n      tmp = p2;\n      p2 = p3;\n      p3 = tmp;\n      tmp = c2;\n      c2 = c3;\n      c3 = tmp;\n    }\n    if (coords[p1 + 1] > coords[p2 + 1]) {\n      tmp = p1;\n      p1 = p2;\n      p2 = tmp;\n      tmp = c1;\n      c1 = c2;\n      c2 = tmp;\n    }\n    const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n    const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n    const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n    const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n    const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n    const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n    if (y1 >= y3) {\n      return;\n    }\n    const c1r = colors[c1],\n      c1g = colors[c1 + 1],\n      c1b = colors[c1 + 2];\n    const c2r = colors[c2],\n      c2g = colors[c2 + 1],\n      c2b = colors[c2 + 2];\n    const c3r = colors[c3],\n      c3g = colors[c3 + 1],\n      c3b = colors[c3 + 2];\n    const minY = Math.round(y1),\n      maxY = Math.round(y3);\n    let xa, car, cag, cab;\n    let xb, cbr, cbg, cbb;\n    for (let y = minY; y <= maxY; y++) {\n      if (y < y2) {\n        const k = y < y1 ? 0 : (y1 - y) / (y1 - y2);\n        xa = x1 - (x1 - x2) * k;\n        car = c1r - (c1r - c2r) * k;\n        cag = c1g - (c1g - c2g) * k;\n        cab = c1b - (c1b - c2b) * k;\n      } else {\n        let k;\n        if (y > y3) {\n          k = 1;\n        } else if (y2 === y3) {\n          k = 0;\n        } else {\n          k = (y2 - y) / (y2 - y3);\n        }\n        xa = x2 - (x2 - x3) * k;\n        car = c2r - (c2r - c3r) * k;\n        cag = c2g - (c2g - c3g) * k;\n        cab = c2b - (c2b - c3b) * k;\n      }\n      let k;\n      if (y < y1) {\n        k = 0;\n      } else if (y > y3) {\n        k = 1;\n      } else {\n        k = (y1 - y) / (y1 - y3);\n      }\n      xb = x1 - (x1 - x3) * k;\n      cbr = c1r - (c1r - c3r) * k;\n      cbg = c1g - (c1g - c3g) * k;\n      cbb = c1b - (c1b - c3b) * k;\n      const x1_ = Math.round(Math.min(xa, xb));\n      const x2_ = Math.round(Math.max(xa, xb));\n      let j = rowSize * y + x1_ * 4;\n      for (let x = x1_; x <= x2_; x++) {\n        k = (xa - x) / (xa - xb);\n        if (k < 0) {\n          k = 0;\n        } else if (k > 1) {\n          k = 1;\n        }\n        bytes[j++] = car - (car - cbr) * k | 0;\n        bytes[j++] = cag - (cag - cbg) * k | 0;\n        bytes[j++] = cab - (cab - cbb) * k | 0;\n        bytes[j++] = 255;\n      }\n    }\n  }\n  function drawFigure(data, figure, context) {\n    const ps = figure.coords;\n    const cs = figure.colors;\n    let i, ii;\n    switch (figure.type) {\n      case \"lattice\":\n        const verticesPerRow = figure.verticesPerRow;\n        const rows = Math.floor(ps.length / verticesPerRow) - 1;\n        const cols = verticesPerRow - 1;\n        for (i = 0; i < rows; i++) {\n          let q = i * verticesPerRow;\n          for (let j = 0; j < cols; j++, q++) {\n            drawTriangle(data, context, ps[q], ps[q + 1], ps[q + verticesPerRow], cs[q], cs[q + 1], cs[q + verticesPerRow]);\n            drawTriangle(data, context, ps[q + verticesPerRow + 1], ps[q + 1], ps[q + verticesPerRow], cs[q + verticesPerRow + 1], cs[q + 1], cs[q + verticesPerRow]);\n          }\n        }\n        break;\n      case \"triangles\":\n        for (i = 0, ii = ps.length; i < ii; i += 3) {\n          drawTriangle(data, context, ps[i], ps[i + 1], ps[i + 2], cs[i], cs[i + 1], cs[i + 2]);\n        }\n        break;\n      default:\n        throw new Error(\"illegal figure\");\n    }\n  }\n  class MeshShadingPattern extends BaseShadingPattern {\n    constructor(IR) {\n      super();\n      this._coords = IR[2];\n      this._colors = IR[3];\n      this._figures = IR[4];\n      this._bounds = IR[5];\n      this._bbox = IR[7];\n      this._background = IR[8];\n      this.matrix = null;\n    }\n    _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n      const EXPECTED_SCALE = 1.1;\n      const MAX_PATTERN_SIZE = 3000;\n      const BORDER_SIZE = 2;\n      const offsetX = Math.floor(this._bounds[0]);\n      const offsetY = Math.floor(this._bounds[1]);\n      const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n      const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n      const width = Math.min(Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n      const height = Math.min(Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)), MAX_PATTERN_SIZE);\n      const scaleX = boundsWidth / width;\n      const scaleY = boundsHeight / height;\n      const context = {\n        coords: this._coords,\n        colors: this._colors,\n        offsetX: -offsetX,\n        offsetY: -offsetY,\n        scaleX: 1 / scaleX,\n        scaleY: 1 / scaleY\n      };\n      const paddedWidth = width + BORDER_SIZE * 2;\n      const paddedHeight = height + BORDER_SIZE * 2;\n      const tmpCanvas = cachedCanvases.getCanvas(\"mesh\", paddedWidth, paddedHeight);\n      const tmpCtx = tmpCanvas.context;\n      const data = tmpCtx.createImageData(width, height);\n      if (backgroundColor) {\n        const bytes = data.data;\n        for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n          bytes[i] = backgroundColor[0];\n          bytes[i + 1] = backgroundColor[1];\n          bytes[i + 2] = backgroundColor[2];\n          bytes[i + 3] = 255;\n        }\n      }\n      for (const figure of this._figures) {\n        drawFigure(data, figure, context);\n      }\n      tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n      const canvas = tmpCanvas.canvas;\n      return {\n        canvas,\n        offsetX: offsetX - BORDER_SIZE * scaleX,\n        offsetY: offsetY - BORDER_SIZE * scaleY,\n        scaleX,\n        scaleY\n      };\n    }\n    getPattern(ctx, owner, inverse, pathType) {\n      applyBoundingBox(ctx, this._bbox);\n      let scale;\n      if (pathType === PathType.SHADING) {\n        scale = Util.singularValueDecompose2dScale(getCurrentTransform(ctx));\n      } else {\n        scale = Util.singularValueDecompose2dScale(owner.baseTransform);\n        if (this.matrix) {\n          const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n          scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n        }\n      }\n      const temporaryPatternCanvas = this._createMeshCanvas(scale, pathType === PathType.SHADING ? null : this._background, owner.cachedCanvases);\n      if (pathType !== PathType.SHADING) {\n        ctx.setTransform(...owner.baseTransform);\n        if (this.matrix) {\n          ctx.transform(...this.matrix);\n        }\n      }\n      ctx.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n      ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n      return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n    }\n  }\n  class DummyShadingPattern extends BaseShadingPattern {\n    getPattern() {\n      return \"hotpink\";\n    }\n  }\n  function getShadingPattern(IR) {\n    switch (IR[0]) {\n      case \"RadialAxial\":\n        return new RadialAxialShadingPattern(IR);\n      case \"Mesh\":\n        return new MeshShadingPattern(IR);\n      case \"Dummy\":\n        return new DummyShadingPattern();\n    }\n    throw new Error(`Unknown IR type: ${IR[0]}`);\n  }\n  const PaintType = {\n    COLORED: 1,\n    UNCOLORED: 2\n  };\n  class TilingPattern {\n    static MAX_PATTERN_SIZE = 3000;\n    constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n      this.operatorList = IR[2];\n      this.matrix = IR[3];\n      this.bbox = IR[4];\n      this.xstep = IR[5];\n      this.ystep = IR[6];\n      this.paintType = IR[7];\n      this.tilingType = IR[8];\n      this.color = color;\n      this.ctx = ctx;\n      this.canvasGraphicsFactory = canvasGraphicsFactory;\n      this.baseTransform = baseTransform;\n    }\n    createPatternCanvas(owner) {\n      const {\n        bbox,\n        operatorList,\n        paintType,\n        tilingType,\n        color,\n        canvasGraphicsFactory\n      } = this;\n      let {\n        xstep,\n        ystep\n      } = this;\n      xstep = Math.abs(xstep);\n      ystep = Math.abs(ystep);\n      info(\"TilingType: \" + tilingType);\n      const x0 = bbox[0],\n        y0 = bbox[1],\n        x1 = bbox[2],\n        y1 = bbox[3];\n      const width = x1 - x0;\n      const height = y1 - y0;\n      const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n      const curMatrixScale = Util.singularValueDecompose2dScale(this.baseTransform);\n      const combinedScaleX = matrixScale[0] * curMatrixScale[0];\n      const combinedScaleY = matrixScale[1] * curMatrixScale[1];\n      let canvasWidth = width,\n        canvasHeight = height,\n        redrawHorizontally = false,\n        redrawVertically = false;\n      const xScaledStep = Math.ceil(xstep * combinedScaleX);\n      const yScaledStep = Math.ceil(ystep * combinedScaleY);\n      const xScaledWidth = Math.ceil(width * combinedScaleX);\n      const yScaledHeight = Math.ceil(height * combinedScaleY);\n      if (xScaledStep >= xScaledWidth) {\n        canvasWidth = xstep;\n      } else {\n        redrawHorizontally = true;\n      }\n      if (yScaledStep >= yScaledHeight) {\n        canvasHeight = ystep;\n      } else {\n        redrawVertically = true;\n      }\n      const dimx = this.getSizeAndScale(canvasWidth, this.ctx.canvas.width, combinedScaleX);\n      const dimy = this.getSizeAndScale(canvasHeight, this.ctx.canvas.height, combinedScaleY);\n      const tmpCanvas = owner.cachedCanvases.getCanvas(\"pattern\", dimx.size, dimy.size);\n      const tmpCtx = tmpCanvas.context;\n      const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n      graphics.groupLevel = owner.groupLevel;\n      this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n      tmpCtx.translate(-dimx.scale * x0, -dimy.scale * y0);\n      graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n      tmpCtx.save();\n      this.clipBbox(graphics, x0, y0, x1, y1);\n      graphics.baseTransform = getCurrentTransform(graphics.ctx);\n      graphics.executeOperatorList(operatorList);\n      graphics.endDrawing();\n      tmpCtx.restore();\n      if (redrawHorizontally || redrawVertically) {\n        const image = tmpCanvas.canvas;\n        if (redrawHorizontally) {\n          canvasWidth = xstep;\n        }\n        if (redrawVertically) {\n          canvasHeight = ystep;\n        }\n        const dimx2 = this.getSizeAndScale(canvasWidth, this.ctx.canvas.width, combinedScaleX);\n        const dimy2 = this.getSizeAndScale(canvasHeight, this.ctx.canvas.height, combinedScaleY);\n        const xSize = dimx2.size;\n        const ySize = dimy2.size;\n        const tmpCanvas2 = owner.cachedCanvases.getCanvas(\"pattern-workaround\", xSize, ySize);\n        const tmpCtx2 = tmpCanvas2.context;\n        const ii = redrawHorizontally ? Math.floor(width / xstep) : 0;\n        const jj = redrawVertically ? Math.floor(height / ystep) : 0;\n        for (let i = 0; i <= ii; i++) {\n          for (let j = 0; j <= jj; j++) {\n            tmpCtx2.drawImage(image, xSize * i, ySize * j, xSize, ySize, 0, 0, xSize, ySize);\n          }\n        }\n        return {\n          canvas: tmpCanvas2.canvas,\n          scaleX: dimx2.scale,\n          scaleY: dimy2.scale,\n          offsetX: x0,\n          offsetY: y0\n        };\n      }\n      return {\n        canvas: tmpCanvas.canvas,\n        scaleX: dimx.scale,\n        scaleY: dimy.scale,\n        offsetX: x0,\n        offsetY: y0\n      };\n    }\n    getSizeAndScale(step, realOutputSize, scale) {\n      const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n      let size = Math.ceil(step * scale);\n      if (size >= maxSize) {\n        size = maxSize;\n      } else {\n        scale = size / step;\n      }\n      return {\n        scale,\n        size\n      };\n    }\n    clipBbox(graphics, x0, y0, x1, y1) {\n      const bboxWidth = x1 - x0;\n      const bboxHeight = y1 - y0;\n      graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n      graphics.current.updateRectMinMax(getCurrentTransform(graphics.ctx), [x0, y0, x1, y1]);\n      graphics.clip();\n      graphics.endPath();\n    }\n    setFillAndStrokeStyleToContext(graphics, paintType, color) {\n      const context = graphics.ctx,\n        current = graphics.current;\n      switch (paintType) {\n        case PaintType.COLORED:\n          const ctx = this.ctx;\n          context.fillStyle = ctx.fillStyle;\n          context.strokeStyle = ctx.strokeStyle;\n          current.fillColor = ctx.fillStyle;\n          current.strokeColor = ctx.strokeStyle;\n          break;\n        case PaintType.UNCOLORED:\n          const cssColor = Util.makeHexColor(color[0], color[1], color[2]);\n          context.fillStyle = cssColor;\n          context.strokeStyle = cssColor;\n          current.fillColor = cssColor;\n          current.strokeColor = cssColor;\n          break;\n        default:\n          throw new FormatError(`Unsupported paint type: ${paintType}`);\n      }\n    }\n    getPattern(ctx, owner, inverse, pathType) {\n      let matrix = inverse;\n      if (pathType !== PathType.SHADING) {\n        matrix = Util.transform(matrix, owner.baseTransform);\n        if (this.matrix) {\n          matrix = Util.transform(matrix, this.matrix);\n        }\n      }\n      const temporaryPatternCanvas = this.createPatternCanvas(owner);\n      let domMatrix = new DOMMatrix(matrix);\n      domMatrix = domMatrix.translate(temporaryPatternCanvas.offsetX, temporaryPatternCanvas.offsetY);\n      domMatrix = domMatrix.scale(1 / temporaryPatternCanvas.scaleX, 1 / temporaryPatternCanvas.scaleY);\n      const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n      pattern.setTransform(domMatrix);\n      return pattern;\n    }\n  }\n  function convertBlackAndWhiteToRGBA({\n    src,\n    srcPos = 0,\n    dest,\n    width,\n    height,\n    nonBlackColor = 0xffffffff,\n    inverseDecode = false\n  }) {\n    const black = util_FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n    const [zeroMapping, oneMapping] = inverseDecode ? [nonBlackColor, black] : [black, nonBlackColor];\n    const widthInSource = width >> 3;\n    const widthRemainder = width & 7;\n    const srcLength = src.length;\n    dest = new Uint32Array(dest.buffer);\n    let destPos = 0;\n    for (let i = 0; i < height; i++) {\n      for (const max = srcPos + widthInSource; srcPos < max; srcPos++) {\n        const elem = srcPos < srcLength ? src[srcPos] : 255;\n        dest[destPos++] = elem & 0b10000000 ? oneMapping : zeroMapping;\n        dest[destPos++] = elem & 0b1000000 ? oneMapping : zeroMapping;\n        dest[destPos++] = elem & 0b100000 ? oneMapping : zeroMapping;\n        dest[destPos++] = elem & 0b10000 ? oneMapping : zeroMapping;\n        dest[destPos++] = elem & 0b1000 ? oneMapping : zeroMapping;\n        dest[destPos++] = elem & 0b100 ? oneMapping : zeroMapping;\n        dest[destPos++] = elem & 0b10 ? oneMapping : zeroMapping;\n        dest[destPos++] = elem & 0b1 ? oneMapping : zeroMapping;\n      }\n      if (widthRemainder === 0) {\n        continue;\n      }\n      const elem = srcPos < srcLength ? src[srcPos++] : 255;\n      for (let j = 0; j < widthRemainder; j++) {\n        dest[destPos++] = elem & 1 << 7 - j ? oneMapping : zeroMapping;\n      }\n    }\n    return {\n      srcPos,\n      destPos\n    };\n  }\n\n\n\n\n  const MIN_FONT_SIZE = 16;\n  const MAX_FONT_SIZE = 100;\n  const EXECUTION_TIME = 15;\n  const EXECUTION_STEPS = 10;\n  const MAX_SIZE_TO_COMPILE = 1000;\n  const FULL_CHUNK_HEIGHT = 16;\n  function mirrorContextOperations(ctx, destCtx) {\n    if (ctx._removeMirroring) {\n      throw new Error(\"Context is already forwarding operations.\");\n    }\n    ctx.__originalSave = ctx.save;\n    ctx.__originalRestore = ctx.restore;\n    ctx.__originalRotate = ctx.rotate;\n    ctx.__originalScale = ctx.scale;\n    ctx.__originalTranslate = ctx.translate;\n    ctx.__originalTransform = ctx.transform;\n    ctx.__originalSetTransform = ctx.setTransform;\n    ctx.__originalResetTransform = ctx.resetTransform;\n    ctx.__originalClip = ctx.clip;\n    ctx.__originalMoveTo = ctx.moveTo;\n    ctx.__originalLineTo = ctx.lineTo;\n    ctx.__originalBezierCurveTo = ctx.bezierCurveTo;\n    ctx.__originalRect = ctx.rect;\n    ctx.__originalClosePath = ctx.closePath;\n    ctx.__originalBeginPath = ctx.beginPath;\n    ctx._removeMirroring = () => {\n      ctx.save = ctx.__originalSave;\n      ctx.restore = ctx.__originalRestore;\n      ctx.rotate = ctx.__originalRotate;\n      ctx.scale = ctx.__originalScale;\n      ctx.translate = ctx.__originalTranslate;\n      ctx.transform = ctx.__originalTransform;\n      ctx.setTransform = ctx.__originalSetTransform;\n      ctx.resetTransform = ctx.__originalResetTransform;\n      ctx.clip = ctx.__originalClip;\n      ctx.moveTo = ctx.__originalMoveTo;\n      ctx.lineTo = ctx.__originalLineTo;\n      ctx.bezierCurveTo = ctx.__originalBezierCurveTo;\n      ctx.rect = ctx.__originalRect;\n      ctx.closePath = ctx.__originalClosePath;\n      ctx.beginPath = ctx.__originalBeginPath;\n      delete ctx._removeMirroring;\n    };\n    ctx.save = function ctxSave() {\n      destCtx.save();\n      this.__originalSave();\n    };\n    ctx.restore = function ctxRestore() {\n      destCtx.restore();\n      this.__originalRestore();\n    };\n    ctx.translate = function ctxTranslate(x, y) {\n      destCtx.translate(x, y);\n      this.__originalTranslate(x, y);\n    };\n    ctx.scale = function ctxScale(x, y) {\n      destCtx.scale(x, y);\n      this.__originalScale(x, y);\n    };\n    ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n      destCtx.transform(a, b, c, d, e, f);\n      this.__originalTransform(a, b, c, d, e, f);\n    };\n    ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n      destCtx.setTransform(a, b, c, d, e, f);\n      this.__originalSetTransform(a, b, c, d, e, f);\n    };\n    ctx.resetTransform = function ctxResetTransform() {\n      destCtx.resetTransform();\n      this.__originalResetTransform();\n    };\n    ctx.rotate = function ctxRotate(angle) {\n      destCtx.rotate(angle);\n      this.__originalRotate(angle);\n    };\n    ctx.clip = function ctxRotate(rule) {\n      destCtx.clip(rule);\n      this.__originalClip(rule);\n    };\n    ctx.moveTo = function (x, y) {\n      destCtx.moveTo(x, y);\n      this.__originalMoveTo(x, y);\n    };\n    ctx.lineTo = function (x, y) {\n      destCtx.lineTo(x, y);\n      this.__originalLineTo(x, y);\n    };\n    ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n      destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n      this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    };\n    ctx.rect = function (x, y, width, height) {\n      destCtx.rect(x, y, width, height);\n      this.__originalRect(x, y, width, height);\n    };\n    ctx.closePath = function () {\n      destCtx.closePath();\n      this.__originalClosePath();\n    };\n    ctx.beginPath = function () {\n      destCtx.beginPath();\n      this.__originalBeginPath();\n    };\n  }\n  class CachedCanvases {\n    constructor(canvasFactory) {\n      this.canvasFactory = canvasFactory;\n      this.cache = Object.create(null);\n    }\n    getCanvas(id, width, height) {\n      let canvasEntry;\n      if (this.cache[id] !== undefined) {\n        canvasEntry = this.cache[id];\n        this.canvasFactory.reset(canvasEntry, width, height);\n      } else {\n        canvasEntry = this.canvasFactory.create(width, height);\n        this.cache[id] = canvasEntry;\n      }\n      return canvasEntry;\n    }\n    delete(id) {\n      delete this.cache[id];\n    }\n    clear() {\n      for (const id in this.cache) {\n        const canvasEntry = this.cache[id];\n        this.canvasFactory.destroy(canvasEntry);\n        delete this.cache[id];\n      }\n    }\n  }\n  function drawImageAtIntegerCoords(ctx, srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH) {\n    const [a, b, c, d, tx, ty] = getCurrentTransform(ctx);\n    if (b === 0 && c === 0) {\n      const tlX = destX * a + tx;\n      const rTlX = Math.round(tlX);\n      const tlY = destY * d + ty;\n      const rTlY = Math.round(tlY);\n      const brX = (destX + destW) * a + tx;\n      const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n      const brY = (destY + destH) * d + ty;\n      const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n      ctx.setTransform(Math.sign(a), 0, 0, Math.sign(d), rTlX, rTlY);\n      ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rWidth, rHeight);\n      ctx.setTransform(a, b, c, d, tx, ty);\n      return [rWidth, rHeight];\n    }\n    if (a === 0 && d === 0) {\n      const tlX = destY * c + tx;\n      const rTlX = Math.round(tlX);\n      const tlY = destX * b + ty;\n      const rTlY = Math.round(tlY);\n      const brX = (destY + destH) * c + tx;\n      const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n      const brY = (destX + destW) * b + ty;\n      const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n      ctx.setTransform(0, Math.sign(b), Math.sign(c), 0, rTlX, rTlY);\n      ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rHeight, rWidth);\n      ctx.setTransform(a, b, c, d, tx, ty);\n      return [rHeight, rWidth];\n    }\n    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH);\n    const scaleX = Math.hypot(a, b);\n    const scaleY = Math.hypot(c, d);\n    return [scaleX * destW, scaleY * destH];\n  }\n  function compileType3Glyph(imgData) {\n    const {\n      width,\n      height\n    } = imgData;\n    if (width > MAX_SIZE_TO_COMPILE || height > MAX_SIZE_TO_COMPILE) {\n      return null;\n    }\n    const POINT_TO_PROCESS_LIMIT = 1000;\n    const POINT_TYPES = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]);\n    const width1 = width + 1;\n    let points = new Uint8Array(width1 * (height + 1));\n    let i, j, j0;\n    const lineSize = width + 7 & ~7;\n    let data = new Uint8Array(lineSize * height),\n      pos = 0;\n    for (const elem of imgData.data) {\n      let mask = 128;\n      while (mask > 0) {\n        data[pos++] = elem & mask ? 0 : 255;\n        mask >>= 1;\n      }\n    }\n    let count = 0;\n    pos = 0;\n    if (data[pos] !== 0) {\n      points[0] = 1;\n      ++count;\n    }\n    for (j = 1; j < width; j++) {\n      if (data[pos] !== data[pos + 1]) {\n        points[j] = data[pos] ? 2 : 1;\n        ++count;\n      }\n      pos++;\n    }\n    if (data[pos] !== 0) {\n      points[j] = 2;\n      ++count;\n    }\n    for (i = 1; i < height; i++) {\n      pos = i * lineSize;\n      j0 = i * width1;\n      if (data[pos - lineSize] !== data[pos]) {\n        points[j0] = data[pos] ? 1 : 8;\n        ++count;\n      }\n      let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n      for (j = 1; j < width; j++) {\n        sum = (sum >> 2) + (data[pos + 1] ? 4 : 0) + (data[pos - lineSize + 1] ? 8 : 0);\n        if (POINT_TYPES[sum]) {\n          points[j0 + j] = POINT_TYPES[sum];\n          ++count;\n        }\n        pos++;\n      }\n      if (data[pos - lineSize] !== data[pos]) {\n        points[j0 + j] = data[pos] ? 2 : 4;\n        ++count;\n      }\n      if (count > POINT_TO_PROCESS_LIMIT) {\n        return null;\n      }\n    }\n    pos = lineSize * (height - 1);\n    j0 = i * width1;\n    if (data[pos] !== 0) {\n      points[j0] = 8;\n      ++count;\n    }\n    for (j = 1; j < width; j++) {\n      if (data[pos] !== data[pos + 1]) {\n        points[j0 + j] = data[pos] ? 4 : 8;\n        ++count;\n      }\n      pos++;\n    }\n    if (data[pos] !== 0) {\n      points[j0 + j] = 4;\n      ++count;\n    }\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n    const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n    const path = new Path2D();\n    for (i = 0; count && i <= height; i++) {\n      let p = i * width1;\n      const end = p + width;\n      while (p < end && !points[p]) {\n        p++;\n      }\n      if (p === end) {\n        continue;\n      }\n      path.moveTo(p % width1, i);\n      const p0 = p;\n      let type = points[p];\n      do {\n        const step = steps[type];\n        do {\n          p += step;\n        } while (!points[p]);\n        const pp = points[p];\n        if (pp !== 5 && pp !== 10) {\n          type = pp;\n          points[p] = 0;\n        } else {\n          type = pp & 0x33 * type >> 4;\n          points[p] &= type >> 2 | type << 2;\n        }\n        path.lineTo(p % width1, p / width1 | 0);\n        if (!points[p]) {\n          --count;\n        }\n      } while (p0 !== p);\n      --i;\n    }\n    data = null;\n    points = null;\n    const drawOutline = function (c) {\n      c.save();\n      c.scale(1 / width, -1 / height);\n      c.translate(0, -height);\n      c.fill(path);\n      c.beginPath();\n      c.restore();\n    };\n    return drawOutline;\n  }\n  class CanvasExtraState {\n    constructor(width, height) {\n      this.alphaIsShape = false;\n      this.fontSize = 0;\n      this.fontSizeScale = 1;\n      this.textMatrix = IDENTITY_MATRIX;\n      this.textMatrixScale = 1;\n      this.fontMatrix = FONT_IDENTITY_MATRIX;\n      this.leading = 0;\n      this.x = 0;\n      this.y = 0;\n      this.lineX = 0;\n      this.lineY = 0;\n      this.charSpacing = 0;\n      this.wordSpacing = 0;\n      this.textHScale = 1;\n      this.textRenderingMode = TextRenderingMode.FILL;\n      this.textRise = 0;\n      this.fillColor = \"#000000\";\n      this.strokeColor = \"#000000\";\n      this.patternFill = false;\n      this.fillAlpha = 1;\n      this.strokeAlpha = 1;\n      this.lineWidth = 1;\n      this.activeSMask = null;\n      this.transferMaps = \"none\";\n      this.startNewPathAndClipBox([0, 0, width, height]);\n    }\n    clone() {\n      const clone = Object.create(this);\n      clone.clipBox = this.clipBox.slice();\n      return clone;\n    }\n    setCurrentPoint(x, y) {\n      this.x = x;\n      this.y = y;\n    }\n    updatePathMinMax(transform, x, y) {\n      [x, y] = Util.applyTransform([x, y], transform);\n      this.minX = Math.min(this.minX, x);\n      this.minY = Math.min(this.minY, y);\n      this.maxX = Math.max(this.maxX, x);\n      this.maxY = Math.max(this.maxY, y);\n    }\n    updateRectMinMax(transform, rect) {\n      const p1 = Util.applyTransform(rect, transform);\n      const p2 = Util.applyTransform(rect.slice(2), transform);\n      const p3 = Util.applyTransform([rect[0], rect[3]], transform);\n      const p4 = Util.applyTransform([rect[2], rect[1]], transform);\n      this.minX = Math.min(this.minX, p1[0], p2[0], p3[0], p4[0]);\n      this.minY = Math.min(this.minY, p1[1], p2[1], p3[1], p4[1]);\n      this.maxX = Math.max(this.maxX, p1[0], p2[0], p3[0], p4[0]);\n      this.maxY = Math.max(this.maxY, p1[1], p2[1], p3[1], p4[1]);\n    }\n    updateScalingPathMinMax(transform, minMax) {\n      Util.scaleMinMax(transform, minMax);\n      this.minX = Math.min(this.minX, minMax[0]);\n      this.minY = Math.min(this.minY, minMax[1]);\n      this.maxX = Math.max(this.maxX, minMax[2]);\n      this.maxY = Math.max(this.maxY, minMax[3]);\n    }\n    updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3, minMax) {\n      const box = Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3, minMax);\n      if (minMax) {\n        return;\n      }\n      this.updateRectMinMax(transform, box);\n    }\n    getPathBoundingBox(pathType = PathType.FILL, transform = null) {\n      const box = [this.minX, this.minY, this.maxX, this.maxY];\n      if (pathType === PathType.STROKE) {\n        if (!transform) {\n          unreachable(\"Stroke bounding box must include transform.\");\n        }\n        const scale = Util.singularValueDecompose2dScale(transform);\n        const xStrokePad = scale[0] * this.lineWidth / 2;\n        const yStrokePad = scale[1] * this.lineWidth / 2;\n        box[0] -= xStrokePad;\n        box[1] -= yStrokePad;\n        box[2] += xStrokePad;\n        box[3] += yStrokePad;\n      }\n      return box;\n    }\n    updateClipFromPath() {\n      const intersect = Util.intersect(this.clipBox, this.getPathBoundingBox());\n      this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);\n    }\n    isEmptyClip() {\n      return this.minX === Infinity;\n    }\n    startNewPathAndClipBox(box) {\n      this.clipBox = box;\n      this.minX = Infinity;\n      this.minY = Infinity;\n      this.maxX = 0;\n      this.maxY = 0;\n    }\n    getClippedPathBoundingBox(pathType = PathType.FILL, transform = null) {\n      return Util.intersect(this.clipBox, this.getPathBoundingBox(pathType, transform));\n    }\n  }\n  function putBinaryImageData(ctx, imgData) {\n    if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n      ctx.putImageData(imgData, 0, 0);\n      return;\n    }\n    const height = imgData.height,\n      width = imgData.width;\n    const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n    const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n    const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n    const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n    let srcPos = 0,\n      destPos;\n    const src = imgData.data;\n    const dest = chunkImgData.data;\n    let i, j, thisChunkHeight, elemsInThisChunk;\n    if (imgData.kind === util_ImageKind.GRAYSCALE_1BPP) {\n      const srcLength = src.byteLength;\n      const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n      const dest32DataLength = dest32.length;\n      const fullSrcDiff = width + 7 >> 3;\n      const white = 0xffffffff;\n      const black = util_FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n      for (i = 0; i < totalChunks; i++) {\n        thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n        destPos = 0;\n        for (j = 0; j < thisChunkHeight; j++) {\n          const srcDiff = srcLength - srcPos;\n          let k = 0;\n          const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n          const kEndUnrolled = kEnd & ~7;\n          let mask = 0;\n          let srcByte = 0;\n          for (; k < kEndUnrolled; k += 8) {\n            srcByte = src[srcPos++];\n            dest32[destPos++] = srcByte & 128 ? white : black;\n            dest32[destPos++] = srcByte & 64 ? white : black;\n            dest32[destPos++] = srcByte & 32 ? white : black;\n            dest32[destPos++] = srcByte & 16 ? white : black;\n            dest32[destPos++] = srcByte & 8 ? white : black;\n            dest32[destPos++] = srcByte & 4 ? white : black;\n            dest32[destPos++] = srcByte & 2 ? white : black;\n            dest32[destPos++] = srcByte & 1 ? white : black;\n          }\n          for (; k < kEnd; k++) {\n            if (mask === 0) {\n              srcByte = src[srcPos++];\n              mask = 128;\n            }\n            dest32[destPos++] = srcByte & mask ? white : black;\n            mask >>= 1;\n          }\n        }\n        while (destPos < dest32DataLength) {\n          dest32[destPos++] = 0;\n        }\n        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n      }\n    } else if (imgData.kind === util_ImageKind.RGBA_32BPP) {\n      j = 0;\n      elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n      for (i = 0; i < fullChunks; i++) {\n        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n        srcPos += elemsInThisChunk;\n        ctx.putImageData(chunkImgData, 0, j);\n        j += FULL_CHUNK_HEIGHT;\n      }\n      if (i < totalChunks) {\n        elemsInThisChunk = width * partialChunkHeight * 4;\n        dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n        ctx.putImageData(chunkImgData, 0, j);\n      }\n    } else if (imgData.kind === util_ImageKind.RGB_24BPP) {\n      thisChunkHeight = FULL_CHUNK_HEIGHT;\n      elemsInThisChunk = width * thisChunkHeight;\n      for (i = 0; i < totalChunks; i++) {\n        if (i >= fullChunks) {\n          thisChunkHeight = partialChunkHeight;\n          elemsInThisChunk = width * thisChunkHeight;\n        }\n        destPos = 0;\n        for (j = elemsInThisChunk; j--;) {\n          dest[destPos++] = src[srcPos++];\n          dest[destPos++] = src[srcPos++];\n          dest[destPos++] = src[srcPos++];\n          dest[destPos++] = 255;\n        }\n        ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n      }\n    } else {\n      throw new Error(`bad image kind: ${imgData.kind}`);\n    }\n  }\n  function putBinaryImageMask(ctx, imgData) {\n    if (imgData.bitmap) {\n      ctx.drawImage(imgData.bitmap, 0, 0);\n      return;\n    }\n    const height = imgData.height,\n      width = imgData.width;\n    const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n    const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n    const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n    const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n    let srcPos = 0;\n    const src = imgData.data;\n    const dest = chunkImgData.data;\n    for (let i = 0; i < totalChunks; i++) {\n      const thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n      ({\n        srcPos\n      } = convertBlackAndWhiteToRGBA({\n        src,\n        srcPos,\n        dest,\n        width,\n        height: thisChunkHeight,\n        nonBlackColor: 0\n      }));\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  }\n  function copyCtxState(sourceCtx, destCtx) {\n    const properties = [\"strokeStyle\", \"fillStyle\", \"fillRule\", \"globalAlpha\", \"lineWidth\", \"lineCap\", \"lineJoin\", \"miterLimit\", \"globalCompositeOperation\", \"font\", \"filter\"];\n    for (const property of properties) {\n      if (sourceCtx[property] !== undefined) {\n        destCtx[property] = sourceCtx[property];\n      }\n    }\n    if (sourceCtx.setLineDash !== undefined) {\n      destCtx.setLineDash(sourceCtx.getLineDash());\n      destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n    }\n  }\n  function resetCtxToDefault(ctx) {\n    ctx.strokeStyle = ctx.fillStyle = \"#000000\";\n    ctx.fillRule = \"nonzero\";\n    ctx.globalAlpha = 1;\n    ctx.lineWidth = 1;\n    ctx.lineCap = \"butt\";\n    ctx.lineJoin = \"miter\";\n    ctx.miterLimit = 10;\n    ctx.globalCompositeOperation = \"source-over\";\n    ctx.font = \"10px sans-serif\";\n    if (ctx.setLineDash !== undefined) {\n      ctx.setLineDash([]);\n      ctx.lineDashOffset = 0;\n    }\n    if (!isNodeJS) {\n      const {\n        filter\n      } = ctx;\n      if (filter !== \"none\" && filter !== \"\") {\n        ctx.filter = \"none\";\n      }\n    }\n  }\n  function getImageSmoothingEnabled(transform, interpolate) {\n    if (interpolate) {\n      return true;\n    }\n    const scale = Util.singularValueDecompose2dScale(transform);\n    scale[0] = Math.fround(scale[0]);\n    scale[1] = Math.fround(scale[1]);\n    const actualScale = Math.fround((globalThis.devicePixelRatio || 1) * PixelsPerInch.PDF_TO_CSS_UNITS);\n    return scale[0] <= actualScale && scale[1] <= actualScale;\n  }\n  const LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\n  const LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n  const NORMAL_CLIP = {};\n  const EO_CLIP = {};\n  class CanvasGraphics {\n    constructor(canvasCtx, commonObjs, objs, canvasFactory, filterFactory, {\n      optionalContentConfig,\n      markedContentStack = null\n    }, annotationCanvasMap, pageColors) {\n      this.ctx = canvasCtx;\n      this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);\n      this.stateStack = [];\n      this.pendingClip = null;\n      this.pendingEOFill = false;\n      this.res = null;\n      this.xobjs = null;\n      this.commonObjs = commonObjs;\n      this.objs = objs;\n      this.canvasFactory = canvasFactory;\n      this.filterFactory = filterFactory;\n      this.groupStack = [];\n      this.processingType3 = null;\n      this.baseTransform = null;\n      this.baseTransformStack = [];\n      this.groupLevel = 0;\n      this.smaskStack = [];\n      this.smaskCounter = 0;\n      this.tempSMask = null;\n      this.suspendedCtx = null;\n      this.contentVisible = true;\n      this.markedContentStack = markedContentStack || [];\n      this.optionalContentConfig = optionalContentConfig;\n      this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n      this.cachedPatterns = new Map();\n      this.annotationCanvasMap = annotationCanvasMap;\n      this.viewportScale = 1;\n      this.outputScaleX = 1;\n      this.outputScaleY = 1;\n      this.pageColors = pageColors;\n      this._cachedScaleForStroking = [-1, 0];\n      this._cachedGetSinglePixelWidth = null;\n      this._cachedBitmapsMap = new Map();\n    }\n    getObject(data, fallback = null) {\n      if (typeof data === \"string\") {\n        return data.startsWith(\"g_\") ? this.commonObjs.get(data) : this.objs.get(data);\n      }\n      return fallback;\n    }\n    beginDrawing({\n      transform,\n      viewport,\n      transparency = false,\n      background = null\n    }) {\n      const width = this.ctx.canvas.width;\n      const height = this.ctx.canvas.height;\n      const savedFillStyle = this.ctx.fillStyle;\n      this.ctx.fillStyle = background || \"#ffffff\";\n      this.ctx.fillRect(0, 0, width, height);\n      this.ctx.fillStyle = savedFillStyle;\n      if (transparency) {\n        const transparentCanvas = this.cachedCanvases.getCanvas(\"transparent\", width, height);\n        this.compositeCtx = this.ctx;\n        this.transparentCanvas = transparentCanvas.canvas;\n        this.ctx = transparentCanvas.context;\n        this.ctx.save();\n        this.ctx.transform(...getCurrentTransform(this.compositeCtx));\n      }\n      this.ctx.save();\n      resetCtxToDefault(this.ctx);\n      if (transform) {\n        this.ctx.transform(...transform);\n        this.outputScaleX = transform[0];\n        this.outputScaleY = transform[0];\n      }\n      this.ctx.transform(...viewport.transform);\n      this.viewportScale = viewport.scale;\n      this.baseTransform = getCurrentTransform(this.ctx);\n    }\n    executeOperatorList(operatorList, executionStartIdx, continueCallback, stepper) {\n      const argsArray = operatorList.argsArray;\n      const fnArray = operatorList.fnArray;\n      let i = executionStartIdx || 0;\n      const argsArrayLen = argsArray.length;\n      if (argsArrayLen === i) {\n        return i;\n      }\n      const chunkOperations = argsArrayLen - i > EXECUTION_STEPS && typeof continueCallback === \"function\";\n      const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n      let steps = 0;\n      const commonObjs = this.commonObjs;\n      const objs = this.objs;\n      let fnId;\n      while (true) {\n        if (stepper !== undefined && i === stepper.nextBreakPoint) {\n          stepper.breakIt(i, continueCallback);\n          return i;\n        }\n        fnId = fnArray[i];\n        if (fnId !== OPS.dependency) {\n          this[fnId].apply(this, argsArray[i]);\n        } else {\n          for (const depObjId of argsArray[i]) {\n            const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n            if (!objsPool.has(depObjId)) {\n              objsPool.get(depObjId, continueCallback);\n              return i;\n            }\n          }\n        }\n        i++;\n        if (i === argsArrayLen) {\n          return i;\n        }\n        if (chunkOperations && ++steps > EXECUTION_STEPS) {\n          if (Date.now() > endTime) {\n            continueCallback();\n            return i;\n          }\n          steps = 0;\n        }\n      }\n    }\n    #restoreInitialState() {\n      while (this.stateStack.length || this.inSMaskMode) {\n        this.restore();\n      }\n      this.current.activeSMask = null;\n      this.ctx.restore();\n      if (this.transparentCanvas) {\n        this.ctx = this.compositeCtx;\n        this.ctx.save();\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n        this.ctx.drawImage(this.transparentCanvas, 0, 0);\n        this.ctx.restore();\n        this.transparentCanvas = null;\n      }\n    }\n    endDrawing() {\n      this.#restoreInitialState();\n      this.cachedCanvases.clear();\n      this.cachedPatterns.clear();\n      for (const cache of this._cachedBitmapsMap.values()) {\n        for (const canvas of cache.values()) {\n          if (typeof HTMLCanvasElement !== \"undefined\" && canvas instanceof HTMLCanvasElement) {\n            canvas.width = canvas.height = 0;\n          }\n        }\n        cache.clear();\n      }\n      this._cachedBitmapsMap.clear();\n      this.#drawFilter();\n    }\n    #drawFilter() {\n      if (this.pageColors) {\n        const hcmFilterId = this.filterFactory.addHCMFilter(this.pageColors.foreground, this.pageColors.background);\n        if (hcmFilterId !== \"none\") {\n          const savedFilter = this.ctx.filter;\n          this.ctx.filter = hcmFilterId;\n          this.ctx.drawImage(this.ctx.canvas, 0, 0);\n          this.ctx.filter = savedFilter;\n        }\n      }\n    }\n    _scaleImage(img, inverseTransform) {\n      const width = img.width;\n      const height = img.height;\n      let widthScale = Math.max(Math.hypot(inverseTransform[0], inverseTransform[1]), 1);\n      let heightScale = Math.max(Math.hypot(inverseTransform[2], inverseTransform[3]), 1);\n      let paintWidth = width,\n        paintHeight = height;\n      let tmpCanvasId = \"prescale1\";\n      let tmpCanvas, tmpCtx;\n      while (widthScale > 2 && paintWidth > 1 || heightScale > 2 && paintHeight > 1) {\n        let newWidth = paintWidth,\n          newHeight = paintHeight;\n        if (widthScale > 2 && paintWidth > 1) {\n          newWidth = paintWidth >= 16384 ? Math.floor(paintWidth / 2) - 1 || 1 : Math.ceil(paintWidth / 2);\n          widthScale /= paintWidth / newWidth;\n        }\n        if (heightScale > 2 && paintHeight > 1) {\n          newHeight = paintHeight >= 16384 ? Math.floor(paintHeight / 2) - 1 || 1 : Math.ceil(paintHeight) / 2;\n          heightScale /= paintHeight / newHeight;\n        }\n        tmpCanvas = this.cachedCanvases.getCanvas(tmpCanvasId, newWidth, newHeight);\n        tmpCtx = tmpCanvas.context;\n        tmpCtx.clearRect(0, 0, newWidth, newHeight);\n        tmpCtx.drawImage(img, 0, 0, paintWidth, paintHeight, 0, 0, newWidth, newHeight);\n        img = tmpCanvas.canvas;\n        paintWidth = newWidth;\n        paintHeight = newHeight;\n        tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n      }\n      return {\n        img,\n        paintWidth,\n        paintHeight\n      };\n    }\n    _createMaskCanvas(img) {\n      const ctx = this.ctx;\n      const {\n        width,\n        height\n      } = img;\n      const fillColor = this.current.fillColor;\n      const isPatternFill = this.current.patternFill;\n      const currentTransform = getCurrentTransform(ctx);\n      let cache, cacheKey, scaled, maskCanvas;\n      if ((img.bitmap || img.data) && img.count > 1) {\n        const mainKey = img.bitmap || img.data.buffer;\n        cacheKey = JSON.stringify(isPatternFill ? currentTransform : [currentTransform.slice(0, 4), fillColor]);\n        cache = this._cachedBitmapsMap.get(mainKey);\n        if (!cache) {\n          cache = new Map();\n          this._cachedBitmapsMap.set(mainKey, cache);\n        }\n        const cachedImage = cache.get(cacheKey);\n        if (cachedImage && !isPatternFill) {\n          const offsetX = Math.round(Math.min(currentTransform[0], currentTransform[2]) + currentTransform[4]);\n          const offsetY = Math.round(Math.min(currentTransform[1], currentTransform[3]) + currentTransform[5]);\n          return {\n            canvas: cachedImage,\n            offsetX,\n            offsetY\n          };\n        }\n        scaled = cachedImage;\n      }\n      if (!scaled) {\n        maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n        putBinaryImageMask(maskCanvas.context, img);\n      }\n      let maskToCanvas = Util.transform(currentTransform, [1 / width, 0, 0, -1 / height, 0, 0]);\n      maskToCanvas = Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n      const [minX, minY, maxX, maxY] = Util.getAxialAlignedBoundingBox([0, 0, width, height], maskToCanvas);\n      const drawnWidth = Math.round(maxX - minX) || 1;\n      const drawnHeight = Math.round(maxY - minY) || 1;\n      const fillCanvas = this.cachedCanvases.getCanvas(\"fillCanvas\", drawnWidth, drawnHeight);\n      const fillCtx = fillCanvas.context;\n      const offsetX = minX;\n      const offsetY = minY;\n      fillCtx.translate(-offsetX, -offsetY);\n      fillCtx.transform(...maskToCanvas);\n      if (!scaled) {\n        scaled = this._scaleImage(maskCanvas.canvas, getCurrentTransformInverse(fillCtx));\n        scaled = scaled.img;\n        if (cache && isPatternFill) {\n          cache.set(cacheKey, scaled);\n        }\n      }\n      fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(getCurrentTransform(fillCtx), img.interpolate);\n      drawImageAtIntegerCoords(fillCtx, scaled, 0, 0, scaled.width, scaled.height, 0, 0, width, height);\n      fillCtx.globalCompositeOperation = \"source-in\";\n      const inverse = Util.transform(getCurrentTransformInverse(fillCtx), [1, 0, 0, 1, -offsetX, -offsetY]);\n      fillCtx.fillStyle = isPatternFill ? fillColor.getPattern(ctx, this, inverse, PathType.FILL) : fillColor;\n      fillCtx.fillRect(0, 0, width, height);\n      if (cache && !isPatternFill) {\n        this.cachedCanvases.delete(\"fillCanvas\");\n        cache.set(cacheKey, fillCanvas.canvas);\n      }\n      return {\n        canvas: fillCanvas.canvas,\n        offsetX: Math.round(offsetX),\n        offsetY: Math.round(offsetY)\n      };\n    }\n    setLineWidth(width) {\n      if (width !== this.current.lineWidth) {\n        this._cachedScaleForStroking[0] = -1;\n      }\n      this.current.lineWidth = width;\n      this.ctx.lineWidth = width;\n    }\n    setLineCap(style) {\n      this.ctx.lineCap = LINE_CAP_STYLES[style];\n    }\n    setLineJoin(style) {\n      this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n    }\n    setMiterLimit(limit) {\n      this.ctx.miterLimit = limit;\n    }\n    setDash(dashArray, dashPhase) {\n      const ctx = this.ctx;\n      if (ctx.setLineDash !== undefined) {\n        ctx.setLineDash(dashArray);\n        ctx.lineDashOffset = dashPhase;\n      }\n    }\n    setRenderingIntent(intent) {}\n    setFlatness(flatness) {}\n    setGState(states) {\n      for (const [key, value] of states) {\n        switch (key) {\n          case \"LW\":\n            this.setLineWidth(value);\n            break;\n          case \"LC\":\n            this.setLineCap(value);\n            break;\n          case \"LJ\":\n            this.setLineJoin(value);\n            break;\n          case \"ML\":\n            this.setMiterLimit(value);\n            break;\n          case \"D\":\n            this.setDash(value[0], value[1]);\n            break;\n          case \"RI\":\n            this.setRenderingIntent(value);\n            break;\n          case \"FL\":\n            this.setFlatness(value);\n            break;\n          case \"Font\":\n            this.setFont(value[0], value[1]);\n            break;\n          case \"CA\":\n            this.current.strokeAlpha = value;\n            break;\n          case \"ca\":\n            this.current.fillAlpha = value;\n            this.ctx.globalAlpha = value;\n            break;\n          case \"BM\":\n            this.ctx.globalCompositeOperation = value;\n            break;\n          case \"SMask\":\n            this.current.activeSMask = value ? this.tempSMask : null;\n            this.tempSMask = null;\n            this.checkSMaskState();\n            break;\n          case \"TR\":\n            this.ctx.filter = this.current.transferMaps = this.filterFactory.addFilter(value);\n            break;\n        }\n      }\n    }\n    get inSMaskMode() {\n      return !!this.suspendedCtx;\n    }\n    checkSMaskState() {\n      const inSMaskMode = this.inSMaskMode;\n      if (this.current.activeSMask && !inSMaskMode) {\n        this.beginSMaskMode();\n      } else if (!this.current.activeSMask && inSMaskMode) {\n        this.endSMaskMode();\n      }\n    }\n    beginSMaskMode() {\n      if (this.inSMaskMode) {\n        throw new Error(\"beginSMaskMode called while already in smask mode\");\n      }\n      const drawnWidth = this.ctx.canvas.width;\n      const drawnHeight = this.ctx.canvas.height;\n      const cacheId = \"smaskGroupAt\" + this.groupLevel;\n      const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);\n      this.suspendedCtx = this.ctx;\n      this.ctx = scratchCanvas.context;\n      const ctx = this.ctx;\n      ctx.setTransform(...getCurrentTransform(this.suspendedCtx));\n      copyCtxState(this.suspendedCtx, ctx);\n      mirrorContextOperations(ctx, this.suspendedCtx);\n      this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n    }\n    endSMaskMode() {\n      if (!this.inSMaskMode) {\n        throw new Error(\"endSMaskMode called while not in smask mode\");\n      }\n      this.ctx._removeMirroring();\n      copyCtxState(this.ctx, this.suspendedCtx);\n      this.ctx = this.suspendedCtx;\n      this.suspendedCtx = null;\n    }\n    compose(dirtyBox) {\n      if (!this.current.activeSMask) {\n        return;\n      }\n      if (!dirtyBox) {\n        dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];\n      } else {\n        dirtyBox[0] = Math.floor(dirtyBox[0]);\n        dirtyBox[1] = Math.floor(dirtyBox[1]);\n        dirtyBox[2] = Math.ceil(dirtyBox[2]);\n        dirtyBox[3] = Math.ceil(dirtyBox[3]);\n      }\n      const smask = this.current.activeSMask;\n      const suspendedCtx = this.suspendedCtx;\n      this.composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);\n      this.ctx.save();\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n      this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n      this.ctx.restore();\n    }\n    composeSMask(ctx, smask, layerCtx, layerBox) {\n      const layerOffsetX = layerBox[0];\n      const layerOffsetY = layerBox[1];\n      const layerWidth = layerBox[2] - layerOffsetX;\n      const layerHeight = layerBox[3] - layerOffsetY;\n      if (layerWidth === 0 || layerHeight === 0) {\n        return;\n      }\n      this.genericComposeSMask(smask.context, layerCtx, layerWidth, layerHeight, smask.subtype, smask.backdrop, smask.transferMap, layerOffsetX, layerOffsetY, smask.offsetX, smask.offsetY);\n      ctx.save();\n      ctx.globalAlpha = 1;\n      ctx.globalCompositeOperation = \"source-over\";\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.drawImage(layerCtx.canvas, 0, 0);\n      ctx.restore();\n    }\n    genericComposeSMask(maskCtx, layerCtx, width, height, subtype, backdrop, transferMap, layerOffsetX, layerOffsetY, maskOffsetX, maskOffsetY) {\n      let maskCanvas = maskCtx.canvas;\n      let maskX = layerOffsetX - maskOffsetX;\n      let maskY = layerOffsetY - maskOffsetY;\n      if (backdrop) {\n        if (maskX < 0 || maskY < 0 || maskX + width > maskCanvas.width || maskY + height > maskCanvas.height) {\n          const canvas = this.cachedCanvases.getCanvas(\"maskExtension\", width, height);\n          const ctx = canvas.context;\n          ctx.drawImage(maskCanvas, -maskX, -maskY);\n          if (backdrop.some(c => c !== 0)) {\n            ctx.globalCompositeOperation = \"destination-atop\";\n            ctx.fillStyle = Util.makeHexColor(...backdrop);\n            ctx.fillRect(0, 0, width, height);\n            ctx.globalCompositeOperation = \"source-over\";\n          }\n          maskCanvas = canvas.canvas;\n          maskX = maskY = 0;\n        } else if (backdrop.some(c => c !== 0)) {\n          maskCtx.save();\n          maskCtx.globalAlpha = 1;\n          maskCtx.setTransform(1, 0, 0, 1, 0, 0);\n          const clip = new Path2D();\n          clip.rect(maskX, maskY, width, height);\n          maskCtx.clip(clip);\n          maskCtx.globalCompositeOperation = \"destination-atop\";\n          maskCtx.fillStyle = Util.makeHexColor(...backdrop);\n          maskCtx.fillRect(maskX, maskY, width, height);\n          maskCtx.restore();\n        }\n      }\n      layerCtx.save();\n      layerCtx.globalAlpha = 1;\n      layerCtx.setTransform(1, 0, 0, 1, 0, 0);\n      if (subtype === \"Alpha\" && transferMap) {\n        layerCtx.filter = this.filterFactory.addAlphaFilter(transferMap);\n      } else if (subtype === \"Luminosity\") {\n        layerCtx.filter = this.filterFactory.addLuminosityFilter(transferMap);\n      }\n      const clip = new Path2D();\n      clip.rect(layerOffsetX, layerOffsetY, width, height);\n      layerCtx.clip(clip);\n      layerCtx.globalCompositeOperation = \"destination-in\";\n      layerCtx.drawImage(maskCanvas, maskX, maskY, width, height, layerOffsetX, layerOffsetY, width, height);\n      layerCtx.restore();\n    }\n    save() {\n      if (this.inSMaskMode) {\n        copyCtxState(this.ctx, this.suspendedCtx);\n        this.suspendedCtx.save();\n      } else {\n        this.ctx.save();\n      }\n      const old = this.current;\n      this.stateStack.push(old);\n      this.current = old.clone();\n    }\n    restore() {\n      if (this.stateStack.length === 0 && this.inSMaskMode) {\n        this.endSMaskMode();\n      }\n      if (this.stateStack.length !== 0) {\n        this.current = this.stateStack.pop();\n        if (this.inSMaskMode) {\n          this.suspendedCtx.restore();\n          copyCtxState(this.suspendedCtx, this.ctx);\n        } else {\n          this.ctx.restore();\n        }\n        this.checkSMaskState();\n        this.pendingClip = null;\n        this._cachedScaleForStroking[0] = -1;\n        this._cachedGetSinglePixelWidth = null;\n      }\n    }\n    transform(a, b, c, d, e, f) {\n      this.ctx.transform(a, b, c, d, e, f);\n      this._cachedScaleForStroking[0] = -1;\n      this._cachedGetSinglePixelWidth = null;\n    }\n    constructPath(ops, args, minMax) {\n      const ctx = this.ctx;\n      const current = this.current;\n      let x = current.x,\n        y = current.y;\n      let startX, startY;\n      const currentTransform = getCurrentTransform(ctx);\n      const isScalingMatrix = currentTransform[0] === 0 && currentTransform[3] === 0 || currentTransform[1] === 0 && currentTransform[2] === 0;\n      const minMaxForBezier = isScalingMatrix ? minMax.slice(0) : null;\n      for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n        switch (ops[i] | 0) {\n          case OPS.rectangle:\n            x = args[j++];\n            y = args[j++];\n            const width = args[j++];\n            const height = args[j++];\n            const xw = x + width;\n            const yh = y + height;\n            ctx.moveTo(x, y);\n            if (width === 0 || height === 0) {\n              ctx.lineTo(xw, yh);\n            } else {\n              ctx.lineTo(xw, y);\n              ctx.lineTo(xw, yh);\n              ctx.lineTo(x, yh);\n            }\n            if (!isScalingMatrix) {\n              current.updateRectMinMax(currentTransform, [x, y, xw, yh]);\n            }\n            ctx.closePath();\n            break;\n          case OPS.moveTo:\n            x = args[j++];\n            y = args[j++];\n            ctx.moveTo(x, y);\n            if (!isScalingMatrix) {\n              current.updatePathMinMax(currentTransform, x, y);\n            }\n            break;\n          case OPS.lineTo:\n            x = args[j++];\n            y = args[j++];\n            ctx.lineTo(x, y);\n            if (!isScalingMatrix) {\n              current.updatePathMinMax(currentTransform, x, y);\n            }\n            break;\n          case OPS.curveTo:\n            startX = x;\n            startY = y;\n            x = args[j + 4];\n            y = args[j + 5];\n            ctx.bezierCurveTo(args[j], args[j + 1], args[j + 2], args[j + 3], x, y);\n            current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], args[j + 2], args[j + 3], x, y, minMaxForBezier);\n            j += 6;\n            break;\n          case OPS.curveTo2:\n            startX = x;\n            startY = y;\n            ctx.bezierCurveTo(x, y, args[j], args[j + 1], args[j + 2], args[j + 3]);\n            current.updateCurvePathMinMax(currentTransform, startX, startY, x, y, args[j], args[j + 1], args[j + 2], args[j + 3], minMaxForBezier);\n            x = args[j + 2];\n            y = args[j + 3];\n            j += 4;\n            break;\n          case OPS.curveTo3:\n            startX = x;\n            startY = y;\n            x = args[j + 2];\n            y = args[j + 3];\n            ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n            current.updateCurvePathMinMax(currentTransform, startX, startY, args[j], args[j + 1], x, y, x, y, minMaxForBezier);\n            j += 4;\n            break;\n          case OPS.closePath:\n            ctx.closePath();\n            break;\n        }\n      }\n      if (isScalingMatrix) {\n        current.updateScalingPathMinMax(currentTransform, minMaxForBezier);\n      }\n      current.setCurrentPoint(x, y);\n    }\n    closePath() {\n      this.ctx.closePath();\n    }\n    stroke(consumePath = true) {\n      const ctx = this.ctx;\n      const strokeColor = this.current.strokeColor;\n      ctx.globalAlpha = this.current.strokeAlpha;\n      if (this.contentVisible) {\n        if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n          ctx.save();\n          ctx.strokeStyle = strokeColor.getPattern(ctx, this, getCurrentTransformInverse(ctx), PathType.STROKE);\n          this.rescaleAndStroke(false);\n          ctx.restore();\n        } else {\n          this.rescaleAndStroke(true);\n        }\n      }\n      if (consumePath) {\n        this.consumePath(this.current.getClippedPathBoundingBox());\n      }\n      ctx.globalAlpha = this.current.fillAlpha;\n    }\n    closeStroke() {\n      this.closePath();\n      this.stroke();\n    }\n    fill(consumePath = true) {\n      const ctx = this.ctx;\n      const fillColor = this.current.fillColor;\n      const isPatternFill = this.current.patternFill;\n      let needRestore = false;\n      if (isPatternFill) {\n        ctx.save();\n        ctx.fillStyle = fillColor.getPattern(ctx, this, getCurrentTransformInverse(ctx), PathType.FILL);\n        needRestore = true;\n      }\n      const intersect = this.current.getClippedPathBoundingBox();\n      if (this.contentVisible && intersect !== null) {\n        if (this.pendingEOFill) {\n          ctx.fill(\"evenodd\");\n          this.pendingEOFill = false;\n        } else {\n          ctx.fill();\n        }\n      }\n      if (needRestore) {\n        ctx.restore();\n      }\n      if (consumePath) {\n        this.consumePath(intersect);\n      }\n    }\n    eoFill() {\n      this.pendingEOFill = true;\n      this.fill();\n    }\n    fillStroke() {\n      this.fill(false);\n      this.stroke(false);\n      this.consumePath();\n    }\n    eoFillStroke() {\n      this.pendingEOFill = true;\n      this.fillStroke();\n    }\n    closeFillStroke() {\n      this.closePath();\n      this.fillStroke();\n    }\n    closeEOFillStroke() {\n      this.pendingEOFill = true;\n      this.closePath();\n      this.fillStroke();\n    }\n    endPath() {\n      this.consumePath();\n    }\n    clip() {\n      this.pendingClip = NORMAL_CLIP;\n    }\n    eoClip() {\n      this.pendingClip = EO_CLIP;\n    }\n    beginText() {\n      this.current.textMatrix = IDENTITY_MATRIX;\n      this.current.textMatrixScale = 1;\n      this.current.x = this.current.lineX = 0;\n      this.current.y = this.current.lineY = 0;\n    }\n    endText() {\n      const paths = this.pendingTextPaths;\n      const ctx = this.ctx;\n      if (paths === undefined) {\n        ctx.beginPath();\n        return;\n      }\n      ctx.save();\n      ctx.beginPath();\n      for (const path of paths) {\n        ctx.setTransform(...path.transform);\n        ctx.translate(path.x, path.y);\n        path.addToPath(ctx, path.fontSize);\n      }\n      ctx.restore();\n      ctx.clip();\n      ctx.beginPath();\n      delete this.pendingTextPaths;\n    }\n    setCharSpacing(spacing) {\n      this.current.charSpacing = spacing;\n    }\n    setWordSpacing(spacing) {\n      this.current.wordSpacing = spacing;\n    }\n    setHScale(scale) {\n      this.current.textHScale = scale / 100;\n    }\n    setLeading(leading) {\n      this.current.leading = -leading;\n    }\n    setFont(fontRefName, size) {\n      const fontObj = this.commonObjs.get(fontRefName);\n      const current = this.current;\n      if (!fontObj) {\n        throw new Error(`Can't find font for ${fontRefName}`);\n      }\n      current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n      if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n        warn(\"Invalid font matrix for font \" + fontRefName);\n      }\n      if (size < 0) {\n        size = -size;\n        current.fontDirection = -1;\n      } else {\n        current.fontDirection = 1;\n      }\n      this.current.font = fontObj;\n      this.current.fontSize = size;\n      if (fontObj.isType3Font) {\n        return;\n      }\n      const name = fontObj.loadedName || \"sans-serif\";\n      const typeface = fontObj.systemFontInfo?.css || `\"${name}\", ${fontObj.fallbackName}`;\n      let bold = \"normal\";\n      if (fontObj.black) {\n        bold = \"900\";\n      } else if (fontObj.bold) {\n        bold = \"bold\";\n      }\n      const italic = fontObj.italic ? \"italic\" : \"normal\";\n      let browserFontSize = size;\n      if (size < MIN_FONT_SIZE) {\n        browserFontSize = MIN_FONT_SIZE;\n      } else if (size > MAX_FONT_SIZE) {\n        browserFontSize = MAX_FONT_SIZE;\n      }\n      this.current.fontSizeScale = size / browserFontSize;\n      this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n    }\n    setTextRenderingMode(mode) {\n      this.current.textRenderingMode = mode;\n    }\n    setTextRise(rise) {\n      this.current.textRise = rise;\n    }\n    moveText(x, y) {\n      this.current.x = this.current.lineX += x;\n      this.current.y = this.current.lineY += y;\n    }\n    setLeadingMoveText(x, y) {\n      this.setLeading(-y);\n      this.moveText(x, y);\n    }\n    setTextMatrix(a, b, c, d, e, f) {\n      this.current.textMatrix = [a, b, c, d, e, f];\n      this.current.textMatrixScale = Math.hypot(a, b);\n      this.current.x = this.current.lineX = 0;\n      this.current.y = this.current.lineY = 0;\n    }\n    nextLine() {\n      this.moveText(0, this.current.leading);\n    }\n    paintChar(character, x, y, patternTransform) {\n      const ctx = this.ctx;\n      const current = this.current;\n      const font = current.font;\n      const textRenderingMode = current.textRenderingMode;\n      const fontSize = current.fontSize / current.fontSizeScale;\n      const fillStrokeMode = textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      const isAddToPathSet = !!(textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG);\n      const patternFill = current.patternFill && !font.missingFile;\n      let addToPath;\n      if (font.disableFontFace || isAddToPathSet || patternFill) {\n        addToPath = font.getPathGenerator(this.commonObjs, character);\n      }\n      if (font.disableFontFace || patternFill) {\n        ctx.save();\n        ctx.translate(x, y);\n        ctx.beginPath();\n        addToPath(ctx, fontSize);\n        if (patternTransform) {\n          ctx.setTransform(...patternTransform);\n        }\n        if (fillStrokeMode === TextRenderingMode.FILL || fillStrokeMode === TextRenderingMode.FILL_STROKE) {\n          ctx.fill();\n        }\n        if (fillStrokeMode === TextRenderingMode.STROKE || fillStrokeMode === TextRenderingMode.FILL_STROKE) {\n          ctx.stroke();\n        }\n        ctx.restore();\n      } else {\n        if (fillStrokeMode === TextRenderingMode.FILL || fillStrokeMode === TextRenderingMode.FILL_STROKE) {\n          ctx.fillText(character, x, y);\n        }\n        if (fillStrokeMode === TextRenderingMode.STROKE || fillStrokeMode === TextRenderingMode.FILL_STROKE) {\n          ctx.strokeText(character, x, y);\n        }\n      }\n      if (isAddToPathSet) {\n        const paths = this.pendingTextPaths ||= [];\n        paths.push({\n          transform: getCurrentTransform(ctx),\n          x,\n          y,\n          fontSize,\n          addToPath\n        });\n      }\n    }\n    get isFontSubpixelAAEnabled() {\n      const {\n        context: ctx\n      } = this.cachedCanvases.getCanvas(\"isFontSubpixelAAEnabled\", 10, 10);\n      ctx.scale(1.5, 1);\n      ctx.fillText(\"I\", 0, 10);\n      const data = ctx.getImageData(0, 0, 10, 10).data;\n      let enabled = false;\n      for (let i = 3; i < data.length; i += 4) {\n        if (data[i] > 0 && data[i] < 255) {\n          enabled = true;\n          break;\n        }\n      }\n      return shadow(this, \"isFontSubpixelAAEnabled\", enabled);\n    }\n    showText(glyphs) {\n      const current = this.current;\n      const font = current.font;\n      if (font.isType3Font) {\n        return this.showType3Text(glyphs);\n      }\n      const fontSize = current.fontSize;\n      if (fontSize === 0) {\n        return undefined;\n      }\n      const ctx = this.ctx;\n      const fontSizeScale = current.fontSizeScale;\n      const charSpacing = current.charSpacing;\n      const wordSpacing = current.wordSpacing;\n      const fontDirection = current.fontDirection;\n      const textHScale = current.textHScale * fontDirection;\n      const glyphsLength = glyphs.length;\n      const vertical = font.vertical;\n      const spacingDir = vertical ? 1 : -1;\n      const defaultVMetrics = font.defaultVMetrics;\n      const widthAdvanceScale = fontSize * current.fontMatrix[0];\n      const simpleFillText = current.textRenderingMode === TextRenderingMode.FILL && !font.disableFontFace && !current.patternFill;\n      ctx.save();\n      ctx.transform(...current.textMatrix);\n      ctx.translate(current.x, current.y + current.textRise);\n      if (fontDirection > 0) {\n        ctx.scale(textHScale, -1);\n      } else {\n        ctx.scale(textHScale, 1);\n      }\n      let patternTransform;\n      if (current.patternFill) {\n        ctx.save();\n        const pattern = current.fillColor.getPattern(ctx, this, getCurrentTransformInverse(ctx), PathType.FILL);\n        patternTransform = getCurrentTransform(ctx);\n        ctx.restore();\n        ctx.fillStyle = pattern;\n      }\n      let lineWidth = current.lineWidth;\n      const scale = current.textMatrixScale;\n      if (scale === 0 || lineWidth === 0) {\n        const fillStrokeMode = current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n        if (fillStrokeMode === TextRenderingMode.STROKE || fillStrokeMode === TextRenderingMode.FILL_STROKE) {\n          lineWidth = this.getSinglePixelWidth();\n        }\n      } else {\n        lineWidth /= scale;\n      }\n      if (fontSizeScale !== 1.0) {\n        ctx.scale(fontSizeScale, fontSizeScale);\n        lineWidth /= fontSizeScale;\n      }\n      ctx.lineWidth = lineWidth;\n      if (font.isInvalidPDFjsFont) {\n        const chars = [];\n        let width = 0;\n        for (const glyph of glyphs) {\n          chars.push(glyph.unicode);\n          width += glyph.width;\n        }\n        ctx.fillText(chars.join(\"\"), 0, 0);\n        current.x += width * widthAdvanceScale * textHScale;\n        ctx.restore();\n        this.compose();\n        return undefined;\n      }\n      let x = 0,\n        i;\n      for (i = 0; i < glyphsLength; ++i) {\n        const glyph = glyphs[i];\n        if (typeof glyph === \"number\") {\n          x += spacingDir * glyph * fontSize / 1000;\n          continue;\n        }\n        let restoreNeeded = false;\n        const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        const character = glyph.fontChar;\n        const accent = glyph.accent;\n        let scaledX, scaledY;\n        let width = glyph.width;\n        if (vertical) {\n          const vmetric = glyph.vmetric || defaultVMetrics;\n          const vx = -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n          const vy = vmetric[2] * widthAdvanceScale;\n          width = vmetric ? -vmetric[0] : width;\n          scaledX = vx / fontSizeScale;\n          scaledY = (x + vy) / fontSizeScale;\n        } else {\n          scaledX = x / fontSizeScale;\n          scaledY = 0;\n        }\n        if (font.remeasure && width > 0) {\n          const measuredWidth = ctx.measureText(character).width * 1000 / fontSize * fontSizeScale;\n          if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n            const characterScaleX = width / measuredWidth;\n            restoreNeeded = true;\n            ctx.save();\n            ctx.scale(characterScaleX, 1);\n            scaledX /= characterScaleX;\n          } else if (width !== measuredWidth) {\n            scaledX += (width - measuredWidth) / 2000 * fontSize / fontSizeScale;\n          }\n        }\n        if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n          if (simpleFillText && !accent) {\n            ctx.fillText(character, scaledX, scaledY);\n          } else {\n            this.paintChar(character, scaledX, scaledY, patternTransform);\n            if (accent) {\n              const scaledAccentX = scaledX + fontSize * accent.offset.x / fontSizeScale;\n              const scaledAccentY = scaledY - fontSize * accent.offset.y / fontSizeScale;\n              this.paintChar(accent.fontChar, scaledAccentX, scaledAccentY, patternTransform);\n            }\n          }\n        }\n        const charWidth = vertical ? width * widthAdvanceScale - spacing * fontDirection : width * widthAdvanceScale + spacing * fontDirection;\n        x += charWidth;\n        if (restoreNeeded) {\n          ctx.restore();\n        }\n      }\n      if (vertical) {\n        current.y -= x;\n      } else {\n        current.x += x * textHScale;\n      }\n      ctx.restore();\n      this.compose();\n      return undefined;\n    }\n    showType3Text(glyphs) {\n      const ctx = this.ctx;\n      const current = this.current;\n      const font = current.font;\n      const fontSize = current.fontSize;\n      const fontDirection = current.fontDirection;\n      const spacingDir = font.vertical ? 1 : -1;\n      const charSpacing = current.charSpacing;\n      const wordSpacing = current.wordSpacing;\n      const textHScale = current.textHScale * fontDirection;\n      const fontMatrix = current.fontMatrix || FONT_IDENTITY_MATRIX;\n      const glyphsLength = glyphs.length;\n      const isTextInvisible = current.textRenderingMode === TextRenderingMode.INVISIBLE;\n      let i, glyph, width, spacingLength;\n      if (isTextInvisible || fontSize === 0) {\n        return;\n      }\n      this._cachedScaleForStroking[0] = -1;\n      this._cachedGetSinglePixelWidth = null;\n      ctx.save();\n      ctx.transform(...current.textMatrix);\n      ctx.translate(current.x, current.y);\n      ctx.scale(textHScale, fontDirection);\n      for (i = 0; i < glyphsLength; ++i) {\n        glyph = glyphs[i];\n        if (typeof glyph === \"number\") {\n          spacingLength = spacingDir * glyph * fontSize / 1000;\n          this.ctx.translate(spacingLength, 0);\n          current.x += spacingLength * textHScale;\n          continue;\n        }\n        const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n        const operatorList = font.charProcOperatorList[glyph.operatorListId];\n        if (!operatorList) {\n          warn(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n          continue;\n        }\n        if (this.contentVisible) {\n          this.processingType3 = glyph;\n          this.save();\n          ctx.scale(fontSize, fontSize);\n          ctx.transform(...fontMatrix);\n          this.executeOperatorList(operatorList);\n          this.restore();\n        }\n        const transformed = Util.applyTransform([glyph.width, 0], fontMatrix);\n        width = transformed[0] * fontSize + spacing;\n        ctx.translate(width, 0);\n        current.x += width * textHScale;\n      }\n      ctx.restore();\n      this.processingType3 = null;\n    }\n    setCharWidth(xWidth, yWidth) {}\n    setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n      this.ctx.rect(llx, lly, urx - llx, ury - lly);\n      this.ctx.clip();\n      this.endPath();\n    }\n    getColorN_Pattern(IR) {\n      let pattern;\n      if (IR[0] === \"TilingPattern\") {\n        const color = IR[1];\n        const baseTransform = this.baseTransform || getCurrentTransform(this.ctx);\n        const canvasGraphicsFactory = {\n          createCanvasGraphics: ctx => new CanvasGraphics(ctx, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {\n            optionalContentConfig: this.optionalContentConfig,\n            markedContentStack: this.markedContentStack\n          })\n        };\n        pattern = new TilingPattern(IR, color, this.ctx, canvasGraphicsFactory, baseTransform);\n      } else {\n        pattern = this._getPattern(IR[1], IR[2]);\n      }\n      return pattern;\n    }\n    setStrokeColorN() {\n      this.current.strokeColor = this.getColorN_Pattern(arguments);\n    }\n    setFillColorN() {\n      this.current.fillColor = this.getColorN_Pattern(arguments);\n      this.current.patternFill = true;\n    }\n    setStrokeRGBColor(r, g, b) {\n      this.ctx.strokeStyle = this.current.strokeColor = Util.makeHexColor(r, g, b);\n    }\n    setStrokeTransparent() {\n      this.ctx.strokeStyle = this.current.strokeColor = \"transparent\";\n    }\n    setFillRGBColor(r, g, b) {\n      this.ctx.fillStyle = this.current.fillColor = Util.makeHexColor(r, g, b);\n      this.current.patternFill = false;\n    }\n    setFillTransparent() {\n      this.ctx.fillStyle = this.current.fillColor = \"transparent\";\n      this.current.patternFill = false;\n    }\n    _getPattern(objId, matrix = null) {\n      let pattern;\n      if (this.cachedPatterns.has(objId)) {\n        pattern = this.cachedPatterns.get(objId);\n      } else {\n        pattern = getShadingPattern(this.getObject(objId));\n        this.cachedPatterns.set(objId, pattern);\n      }\n      if (matrix) {\n        pattern.matrix = matrix;\n      }\n      return pattern;\n    }\n    shadingFill(objId) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const ctx = this.ctx;\n      this.save();\n      const pattern = this._getPattern(objId);\n      ctx.fillStyle = pattern.getPattern(ctx, this, getCurrentTransformInverse(ctx), PathType.SHADING);\n      const inv = getCurrentTransformInverse(ctx);\n      if (inv) {\n        const {\n          width,\n          height\n        } = ctx.canvas;\n        const [x0, y0, x1, y1] = Util.getAxialAlignedBoundingBox([0, 0, width, height], inv);\n        this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n      } else {\n        this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n      }\n      this.compose(this.current.getClippedPathBoundingBox());\n      this.restore();\n    }\n    beginInlineImage() {\n      unreachable(\"Should not call beginInlineImage\");\n    }\n    beginImageData() {\n      unreachable(\"Should not call beginImageData\");\n    }\n    paintFormXObjectBegin(matrix, bbox) {\n      if (!this.contentVisible) {\n        return;\n      }\n      this.save();\n      this.baseTransformStack.push(this.baseTransform);\n      if (matrix) {\n        this.transform(...matrix);\n      }\n      this.baseTransform = getCurrentTransform(this.ctx);\n      if (bbox) {\n        const width = bbox[2] - bbox[0];\n        const height = bbox[3] - bbox[1];\n        this.ctx.rect(bbox[0], bbox[1], width, height);\n        this.current.updateRectMinMax(getCurrentTransform(this.ctx), bbox);\n        this.clip();\n        this.endPath();\n      }\n    }\n    paintFormXObjectEnd() {\n      if (!this.contentVisible) {\n        return;\n      }\n      this.restore();\n      this.baseTransform = this.baseTransformStack.pop();\n    }\n    beginGroup(group) {\n      if (!this.contentVisible) {\n        return;\n      }\n      this.save();\n      if (this.inSMaskMode) {\n        this.endSMaskMode();\n        this.current.activeSMask = null;\n      }\n      const currentCtx = this.ctx;\n      if (!group.isolated) {\n        info(\"TODO: Support non-isolated groups.\");\n      }\n      if (group.knockout) {\n        warn(\"Knockout groups not supported.\");\n      }\n      const currentTransform = getCurrentTransform(currentCtx);\n      if (group.matrix) {\n        currentCtx.transform(...group.matrix);\n      }\n      if (!group.bbox) {\n        throw new Error(\"Bounding box is required.\");\n      }\n      let bounds = Util.getAxialAlignedBoundingBox(group.bbox, getCurrentTransform(currentCtx));\n      const canvasBounds = [0, 0, currentCtx.canvas.width, currentCtx.canvas.height];\n      bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n      const offsetX = Math.floor(bounds[0]);\n      const offsetY = Math.floor(bounds[1]);\n      const drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n      const drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n      this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);\n      let cacheId = \"groupAt\" + this.groupLevel;\n      if (group.smask) {\n        cacheId += \"_smask_\" + this.smaskCounter++ % 2;\n      }\n      const scratchCanvas = this.cachedCanvases.getCanvas(cacheId, drawnWidth, drawnHeight);\n      const groupCtx = scratchCanvas.context;\n      groupCtx.translate(-offsetX, -offsetY);\n      groupCtx.transform(...currentTransform);\n      if (group.smask) {\n        this.smaskStack.push({\n          canvas: scratchCanvas.canvas,\n          context: groupCtx,\n          offsetX,\n          offsetY,\n          subtype: group.smask.subtype,\n          backdrop: group.smask.backdrop,\n          transferMap: group.smask.transferMap || null,\n          startTransformInverse: null\n        });\n      } else {\n        currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n        currentCtx.translate(offsetX, offsetY);\n        currentCtx.save();\n      }\n      copyCtxState(currentCtx, groupCtx);\n      this.ctx = groupCtx;\n      this.setGState([[\"BM\", \"source-over\"], [\"ca\", 1], [\"CA\", 1]]);\n      this.groupStack.push(currentCtx);\n      this.groupLevel++;\n    }\n    endGroup(group) {\n      if (!this.contentVisible) {\n        return;\n      }\n      this.groupLevel--;\n      const groupCtx = this.ctx;\n      const ctx = this.groupStack.pop();\n      this.ctx = ctx;\n      this.ctx.imageSmoothingEnabled = false;\n      if (group.smask) {\n        this.tempSMask = this.smaskStack.pop();\n        this.restore();\n      } else {\n        this.ctx.restore();\n        const currentMtx = getCurrentTransform(this.ctx);\n        this.restore();\n        this.ctx.save();\n        this.ctx.setTransform(...currentMtx);\n        const dirtyBox = Util.getAxialAlignedBoundingBox([0, 0, groupCtx.canvas.width, groupCtx.canvas.height], currentMtx);\n        this.ctx.drawImage(groupCtx.canvas, 0, 0);\n        this.ctx.restore();\n        this.compose(dirtyBox);\n      }\n    }\n    beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {\n      this.#restoreInitialState();\n      resetCtxToDefault(this.ctx);\n      this.ctx.save();\n      this.save();\n      if (this.baseTransform) {\n        this.ctx.setTransform(...this.baseTransform);\n      }\n      if (rect) {\n        const width = rect[2] - rect[0];\n        const height = rect[3] - rect[1];\n        if (hasOwnCanvas && this.annotationCanvasMap) {\n          transform = transform.slice();\n          transform[4] -= rect[0];\n          transform[5] -= rect[1];\n          rect = rect.slice();\n          rect[0] = rect[1] = 0;\n          rect[2] = width;\n          rect[3] = height;\n          const [scaleX, scaleY] = Util.singularValueDecompose2dScale(getCurrentTransform(this.ctx));\n          const {\n            viewportScale\n          } = this;\n          const canvasWidth = Math.ceil(width * this.outputScaleX * viewportScale);\n          const canvasHeight = Math.ceil(height * this.outputScaleY * viewportScale);\n          this.annotationCanvas = this.canvasFactory.create(canvasWidth, canvasHeight);\n          const {\n            canvas,\n            context\n          } = this.annotationCanvas;\n          this.annotationCanvasMap.set(id, canvas);\n          this.annotationCanvas.savedCtx = this.ctx;\n          this.ctx = context;\n          this.ctx.save();\n          this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);\n          resetCtxToDefault(this.ctx);\n        } else {\n          resetCtxToDefault(this.ctx);\n          this.endPath();\n          this.ctx.rect(rect[0], rect[1], width, height);\n          this.ctx.clip();\n          this.ctx.beginPath();\n        }\n      }\n      this.current = new CanvasExtraState(this.ctx.canvas.width, this.ctx.canvas.height);\n      this.transform(...transform);\n      this.transform(...matrix);\n    }\n    endAnnotation() {\n      if (this.annotationCanvas) {\n        this.ctx.restore();\n        this.#drawFilter();\n        this.ctx = this.annotationCanvas.savedCtx;\n        delete this.annotationCanvas.savedCtx;\n        delete this.annotationCanvas;\n      }\n    }\n    paintImageMaskXObject(img) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const count = img.count;\n      img = this.getObject(img.data, img);\n      img.count = count;\n      const ctx = this.ctx;\n      const glyph = this.processingType3;\n      if (glyph) {\n        if (glyph.compiled === undefined) {\n          glyph.compiled = compileType3Glyph(img);\n        }\n        if (glyph.compiled) {\n          glyph.compiled(ctx);\n          return;\n        }\n      }\n      const mask = this._createMaskCanvas(img);\n      const maskCanvas = mask.canvas;\n      ctx.save();\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n      ctx.restore();\n      this.compose();\n    }\n    paintImageMaskXObjectRepeat(img, scaleX, skewX = 0, skewY = 0, scaleY, positions) {\n      if (!this.contentVisible) {\n        return;\n      }\n      img = this.getObject(img.data, img);\n      const ctx = this.ctx;\n      ctx.save();\n      const currentTransform = getCurrentTransform(ctx);\n      ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n      const mask = this._createMaskCanvas(img);\n      ctx.setTransform(1, 0, 0, 1, mask.offsetX - currentTransform[4], mask.offsetY - currentTransform[5]);\n      for (let i = 0, ii = positions.length; i < ii; i += 2) {\n        const trans = Util.transform(currentTransform, [scaleX, skewX, skewY, scaleY, positions[i], positions[i + 1]]);\n        const [x, y] = Util.applyTransform([0, 0], trans);\n        ctx.drawImage(mask.canvas, x, y);\n      }\n      ctx.restore();\n      this.compose();\n    }\n    paintImageMaskXObjectGroup(images) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const ctx = this.ctx;\n      const fillColor = this.current.fillColor;\n      const isPatternFill = this.current.patternFill;\n      for (const image of images) {\n        const {\n          data,\n          width,\n          height,\n          transform\n        } = image;\n        const maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n        const maskCtx = maskCanvas.context;\n        maskCtx.save();\n        const img = this.getObject(data, image);\n        putBinaryImageMask(maskCtx, img);\n        maskCtx.globalCompositeOperation = \"source-in\";\n        maskCtx.fillStyle = isPatternFill ? fillColor.getPattern(maskCtx, this, getCurrentTransformInverse(ctx), PathType.FILL) : fillColor;\n        maskCtx.fillRect(0, 0, width, height);\n        maskCtx.restore();\n        ctx.save();\n        ctx.transform(...transform);\n        ctx.scale(1, -1);\n        drawImageAtIntegerCoords(ctx, maskCanvas.canvas, 0, 0, width, height, 0, -1, 1, 1);\n        ctx.restore();\n      }\n      this.compose();\n    }\n    paintImageXObject(objId) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const imgData = this.getObject(objId);\n      if (!imgData) {\n        warn(\"Dependent image isn't ready yet\");\n        return;\n      }\n      this.paintInlineImageXObject(imgData);\n    }\n    paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const imgData = this.getObject(objId);\n      if (!imgData) {\n        warn(\"Dependent image isn't ready yet\");\n        return;\n      }\n      const width = imgData.width;\n      const height = imgData.height;\n      const map = [];\n      for (let i = 0, ii = positions.length; i < ii; i += 2) {\n        map.push({\n          transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n          x: 0,\n          y: 0,\n          w: width,\n          h: height\n        });\n      }\n      this.paintInlineImageXObjectGroup(imgData, map);\n    }\n    applyTransferMapsToCanvas(ctx) {\n      if (this.current.transferMaps !== \"none\") {\n        ctx.filter = this.current.transferMaps;\n        ctx.drawImage(ctx.canvas, 0, 0);\n        ctx.filter = \"none\";\n      }\n      return ctx.canvas;\n    }\n    applyTransferMapsToBitmap(imgData) {\n      if (this.current.transferMaps === \"none\") {\n        return imgData.bitmap;\n      }\n      const {\n        bitmap,\n        width,\n        height\n      } = imgData;\n      const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n      const tmpCtx = tmpCanvas.context;\n      tmpCtx.filter = this.current.transferMaps;\n      tmpCtx.drawImage(bitmap, 0, 0);\n      tmpCtx.filter = \"none\";\n      return tmpCanvas.canvas;\n    }\n    paintInlineImageXObject(imgData) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const width = imgData.width;\n      const height = imgData.height;\n      const ctx = this.ctx;\n      this.save();\n      if (!isNodeJS) {\n        const {\n          filter\n        } = ctx;\n        if (filter !== \"none\" && filter !== \"\") {\n          ctx.filter = \"none\";\n        }\n      }\n      ctx.scale(1 / width, -1 / height);\n      let imgToPaint;\n      if (imgData.bitmap) {\n        imgToPaint = this.applyTransferMapsToBitmap(imgData);\n      } else if (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement || !imgData.data) {\n        imgToPaint = imgData;\n      } else {\n        const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", width, height);\n        const tmpCtx = tmpCanvas.context;\n        putBinaryImageData(tmpCtx, imgData);\n        imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n      }\n      const scaled = this._scaleImage(imgToPaint, getCurrentTransformInverse(ctx));\n      ctx.imageSmoothingEnabled = getImageSmoothingEnabled(getCurrentTransform(ctx), imgData.interpolate);\n      drawImageAtIntegerCoords(ctx, scaled.img, 0, 0, scaled.paintWidth, scaled.paintHeight, 0, -height, width, height);\n      this.compose();\n      this.restore();\n    }\n    paintInlineImageXObjectGroup(imgData, map) {\n      if (!this.contentVisible) {\n        return;\n      }\n      const ctx = this.ctx;\n      let imgToPaint;\n      if (imgData.bitmap) {\n        imgToPaint = imgData.bitmap;\n      } else {\n        const w = imgData.width;\n        const h = imgData.height;\n        const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n        const tmpCtx = tmpCanvas.context;\n        putBinaryImageData(tmpCtx, imgData);\n        imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n      }\n      for (const entry of map) {\n        ctx.save();\n        ctx.transform(...entry.transform);\n        ctx.scale(1, -1);\n        drawImageAtIntegerCoords(ctx, imgToPaint, entry.x, entry.y, entry.w, entry.h, 0, -1, 1, 1);\n        ctx.restore();\n      }\n      this.compose();\n    }\n    paintSolidColorImageMask() {\n      if (!this.contentVisible) {\n        return;\n      }\n      this.ctx.fillRect(0, 0, 1, 1);\n      this.compose();\n    }\n    markPoint(tag) {}\n    markPointProps(tag, properties) {}\n    beginMarkedContent(tag) {\n      this.markedContentStack.push({\n        visible: true\n      });\n    }\n    beginMarkedContentProps(tag, properties) {\n      if (tag === \"OC\") {\n        this.markedContentStack.push({\n          visible: this.optionalContentConfig.isVisible(properties)\n        });\n      } else {\n        this.markedContentStack.push({\n          visible: true\n        });\n      }\n      this.contentVisible = this.isContentVisible();\n    }\n    endMarkedContent() {\n      this.markedContentStack.pop();\n      this.contentVisible = this.isContentVisible();\n    }\n    beginCompat() {}\n    endCompat() {}\n    consumePath(clipBox) {\n      const isEmpty = this.current.isEmptyClip();\n      if (this.pendingClip) {\n        this.current.updateClipFromPath();\n      }\n      if (!this.pendingClip) {\n        this.compose(clipBox);\n      }\n      const ctx = this.ctx;\n      if (this.pendingClip) {\n        if (!isEmpty) {\n          if (this.pendingClip === EO_CLIP) {\n            ctx.clip(\"evenodd\");\n          } else {\n            ctx.clip();\n          }\n        }\n        this.pendingClip = null;\n      }\n      this.current.startNewPathAndClipBox(this.current.clipBox);\n      ctx.beginPath();\n    }\n    getSinglePixelWidth() {\n      if (!this._cachedGetSinglePixelWidth) {\n        const m = getCurrentTransform(this.ctx);\n        if (m[1] === 0 && m[2] === 0) {\n          this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(m[0]), Math.abs(m[3]));\n        } else {\n          const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n          const normX = Math.hypot(m[0], m[2]);\n          const normY = Math.hypot(m[1], m[3]);\n          this._cachedGetSinglePixelWidth = Math.max(normX, normY) / absDet;\n        }\n      }\n      return this._cachedGetSinglePixelWidth;\n    }\n    getScaleForStroking() {\n      if (this._cachedScaleForStroking[0] === -1) {\n        const {\n          lineWidth\n        } = this.current;\n        const {\n          a,\n          b,\n          c,\n          d\n        } = this.ctx.getTransform();\n        let scaleX, scaleY;\n        if (b === 0 && c === 0) {\n          const normX = Math.abs(a);\n          const normY = Math.abs(d);\n          if (normX === normY) {\n            if (lineWidth === 0) {\n              scaleX = scaleY = 1 / normX;\n            } else {\n              const scaledLineWidth = normX * lineWidth;\n              scaleX = scaleY = scaledLineWidth < 1 ? 1 / scaledLineWidth : 1;\n            }\n          } else if (lineWidth === 0) {\n            scaleX = 1 / normX;\n            scaleY = 1 / normY;\n          } else {\n            const scaledXLineWidth = normX * lineWidth;\n            const scaledYLineWidth = normY * lineWidth;\n            scaleX = scaledXLineWidth < 1 ? 1 / scaledXLineWidth : 1;\n            scaleY = scaledYLineWidth < 1 ? 1 / scaledYLineWidth : 1;\n          }\n        } else {\n          const absDet = Math.abs(a * d - b * c);\n          const normX = Math.hypot(a, b);\n          const normY = Math.hypot(c, d);\n          if (lineWidth === 0) {\n            scaleX = normY / absDet;\n            scaleY = normX / absDet;\n          } else {\n            const baseArea = lineWidth * absDet;\n            scaleX = normY > baseArea ? normY / baseArea : 1;\n            scaleY = normX > baseArea ? normX / baseArea : 1;\n          }\n        }\n        this._cachedScaleForStroking[0] = scaleX;\n        this._cachedScaleForStroking[1] = scaleY;\n      }\n      return this._cachedScaleForStroking;\n    }\n    rescaleAndStroke(saveRestore) {\n      const {\n        ctx\n      } = this;\n      const {\n        lineWidth\n      } = this.current;\n      const [scaleX, scaleY] = this.getScaleForStroking();\n      ctx.lineWidth = lineWidth || 1;\n      if (scaleX === 1 && scaleY === 1) {\n        ctx.stroke();\n        return;\n      }\n      const dashes = ctx.getLineDash();\n      if (saveRestore) {\n        ctx.save();\n      }\n      ctx.scale(scaleX, scaleY);\n      if (dashes.length > 0) {\n        const scale = Math.max(scaleX, scaleY);\n        ctx.setLineDash(dashes.map(x => x / scale));\n        ctx.lineDashOffset /= scale;\n      }\n      ctx.stroke();\n      if (saveRestore) {\n        ctx.restore();\n      }\n    }\n    isContentVisible() {\n      for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n        if (!this.markedContentStack[i].visible) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  for (const op in OPS) {\n    if (CanvasGraphics.prototype[op] !== undefined) {\n      CanvasGraphics.prototype[OPS[op]] = CanvasGraphics.prototype[op];\n    }\n  }\n  class GlobalWorkerOptions {\n    static #port = null;\n    static #src = \"\";\n    static get workerPort() {\n      return this.#port;\n    }\n    static set workerPort(val) {\n      if (!(typeof Worker !== \"undefined\" && val instanceof Worker) && val !== null) {\n        throw new Error(\"Invalid `workerPort` type.\");\n      }\n      this.#port = val;\n    }\n    static get workerSrc() {\n      return this.#src;\n    }\n    static set workerSrc(val) {\n      if (typeof val !== \"string\") {\n        throw new Error(\"Invalid `workerSrc` type.\");\n      }\n      this.#src = val;\n    }\n  }\n\n  const CallbackKind = {\n    UNKNOWN: 0,\n    DATA: 1,\n    ERROR: 2\n  };\n  const StreamKind = {\n    UNKNOWN: 0,\n    CANCEL: 1,\n    CANCEL_COMPLETE: 2,\n    CLOSE: 3,\n    ENQUEUE: 4,\n    ERROR: 5,\n    PULL: 6,\n    PULL_COMPLETE: 7,\n    START_COMPLETE: 8\n  };\n  function wrapReason(reason) {\n    if (!(reason instanceof Error || typeof reason === \"object\" && reason !== null)) {\n      unreachable('wrapReason: Expected \"reason\" to be a (possibly cloned) Error.');\n    }\n    switch (reason.name) {\n      case \"AbortException\":\n        return new AbortException(reason.message);\n      case \"MissingPDFException\":\n        return new MissingPDFException(reason.message);\n      case \"PasswordException\":\n        return new PasswordException(reason.message, reason.code);\n      case \"UnexpectedResponseException\":\n        return new UnexpectedResponseException(reason.message, reason.status);\n      case \"UnknownErrorException\":\n        return new UnknownErrorException(reason.message, reason.details);\n      default:\n        return new UnknownErrorException(reason.message, reason.toString());\n    }\n  }\n  class MessageHandler {\n    constructor(sourceName, targetName, comObj) {\n      this.sourceName = sourceName;\n      this.targetName = targetName;\n      this.comObj = comObj;\n      this.callbackId = 1;\n      this.streamId = 1;\n      this.streamSinks = Object.create(null);\n      this.streamControllers = Object.create(null);\n      this.callbackCapabilities = Object.create(null);\n      this.actionHandler = Object.create(null);\n      this._onComObjOnMessage = event => {\n        const data = event.data;\n        if (data.targetName !== this.sourceName) {\n          return;\n        }\n        if (data.stream) {\n          this.#processStreamMessage(data);\n          return;\n        }\n        if (data.callback) {\n          const callbackId = data.callbackId;\n          const capability = this.callbackCapabilities[callbackId];\n          if (!capability) {\n            throw new Error(`Cannot resolve callback ${callbackId}`);\n          }\n          delete this.callbackCapabilities[callbackId];\n          if (data.callback === CallbackKind.DATA) {\n            capability.resolve(data.data);\n          } else if (data.callback === CallbackKind.ERROR) {\n            capability.reject(wrapReason(data.reason));\n          } else {\n            throw new Error(\"Unexpected callback case\");\n          }\n          return;\n        }\n        const action = this.actionHandler[data.action];\n        if (!action) {\n          throw new Error(`Unknown action from worker: ${data.action}`);\n        }\n        if (data.callbackId) {\n          const cbSourceName = this.sourceName;\n          const cbTargetName = data.sourceName;\n          new Promise(function (resolve) {\n            resolve(action(data.data));\n          }).then(function (result) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.DATA,\n              callbackId: data.callbackId,\n              data: result\n            });\n          }, function (reason) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.ERROR,\n              callbackId: data.callbackId,\n              reason: wrapReason(reason)\n            });\n          });\n          return;\n        }\n        if (data.streamId) {\n          this.#createStreamSink(data);\n          return;\n        }\n        action(data.data);\n      };\n      comObj.addEventListener(\"message\", this._onComObjOnMessage);\n    }\n    on(actionName, handler) {\n      const ah = this.actionHandler;\n      if (ah[actionName]) {\n        throw new Error(`There is already an actionName called \"${actionName}\"`);\n      }\n      ah[actionName] = handler;\n    }\n    send(actionName, data, transfers) {\n      this.comObj.postMessage({\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data\n      }, transfers);\n    }\n    sendWithPromise(actionName, data, transfers) {\n      const callbackId = this.callbackId++;\n      const capability = Promise.withResolvers();\n      this.callbackCapabilities[callbackId] = capability;\n      try {\n        this.comObj.postMessage({\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId,\n          data\n        }, transfers);\n      } catch (ex) {\n        capability.reject(ex);\n      }\n      return capability.promise;\n    }\n    sendWithStream(actionName, data, queueingStrategy, transfers) {\n      const streamId = this.streamId++,\n        sourceName = this.sourceName,\n        targetName = this.targetName,\n        comObj = this.comObj;\n      return new ReadableStream({\n        start: controller => {\n          const startCapability = Promise.withResolvers();\n          this.streamControllers[streamId] = {\n            controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false\n          };\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            action: actionName,\n            streamId,\n            data,\n            desiredSize: controller.desiredSize\n          }, transfers);\n          return startCapability.promise;\n        },\n        pull: controller => {\n          const pullCapability = Promise.withResolvers();\n          this.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL,\n            streamId,\n            desiredSize: controller.desiredSize\n          });\n          return pullCapability.promise;\n        },\n        cancel: reason => {\n          assert(reason instanceof Error, \"cancel must have a valid reason\");\n          const cancelCapability = Promise.withResolvers();\n          this.streamControllers[streamId].cancelCall = cancelCapability;\n          this.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL,\n            streamId,\n            reason: wrapReason(reason)\n          });\n          return cancelCapability.promise;\n        }\n      }, queueingStrategy);\n    }\n    #createStreamSink(data) {\n      const streamId = data.streamId,\n        sourceName = this.sourceName,\n        targetName = data.sourceName,\n        comObj = this.comObj;\n      const self = this,\n        action = this.actionHandler[data.action];\n      const streamSink = {\n        enqueue(chunk, size = 1, transfers) {\n          if (this.isCancelled) {\n            return;\n          }\n          const lastDesiredSize = this.desiredSize;\n          this.desiredSize -= size;\n          if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n            this.sinkCapability = Promise.withResolvers();\n            this.ready = this.sinkCapability.promise;\n          }\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId,\n            chunk\n          }, transfers);\n        },\n        close() {\n          if (this.isCancelled) {\n            return;\n          }\n          this.isCancelled = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CLOSE,\n            streamId\n          });\n          delete self.streamSinks[streamId];\n        },\n        error(reason) {\n          assert(reason instanceof Error, \"error must have a valid reason\");\n          if (this.isCancelled) {\n            return;\n          }\n          this.isCancelled = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.ERROR,\n            streamId,\n            reason: wrapReason(reason)\n          });\n        },\n        sinkCapability: Promise.withResolvers(),\n        onPull: null,\n        onCancel: null,\n        isCancelled: false,\n        desiredSize: data.desiredSize,\n        ready: null\n      };\n      streamSink.sinkCapability.resolve();\n      streamSink.ready = streamSink.sinkCapability.promise;\n      this.streamSinks[streamId] = streamSink;\n      new Promise(function (resolve) {\n        resolve(action(data.data, streamSink));\n      }).then(function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          success: true\n        });\n      }, function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          reason: wrapReason(reason)\n        });\n      });\n    }\n    #processStreamMessage(data) {\n      const streamId = data.streamId,\n        sourceName = this.sourceName,\n        targetName = data.sourceName,\n        comObj = this.comObj;\n      const streamController = this.streamControllers[streamId],\n        streamSink = this.streamSinks[streamId];\n      switch (data.stream) {\n        case StreamKind.START_COMPLETE:\n          if (data.success) {\n            streamController.startCall.resolve();\n          } else {\n            streamController.startCall.reject(wrapReason(data.reason));\n          }\n          break;\n        case StreamKind.PULL_COMPLETE:\n          if (data.success) {\n            streamController.pullCall.resolve();\n          } else {\n            streamController.pullCall.reject(wrapReason(data.reason));\n          }\n          break;\n        case StreamKind.PULL:\n          if (!streamSink) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true\n            });\n            break;\n          }\n          if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n            streamSink.sinkCapability.resolve();\n          }\n          streamSink.desiredSize = data.desiredSize;\n          new Promise(function (resolve) {\n            resolve(streamSink.onPull?.());\n          }).then(function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true\n            });\n          }, function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason)\n            });\n          });\n          break;\n        case StreamKind.ENQUEUE:\n          assert(streamController, \"enqueue should have stream controller\");\n          if (streamController.isClosed) {\n            break;\n          }\n          streamController.controller.enqueue(data.chunk);\n          break;\n        case StreamKind.CLOSE:\n          assert(streamController, \"close should have stream controller\");\n          if (streamController.isClosed) {\n            break;\n          }\n          streamController.isClosed = true;\n          streamController.controller.close();\n          this.#deleteStreamController(streamController, streamId);\n          break;\n        case StreamKind.ERROR:\n          assert(streamController, \"error should have stream controller\");\n          streamController.controller.error(wrapReason(data.reason));\n          this.#deleteStreamController(streamController, streamId);\n          break;\n        case StreamKind.CANCEL_COMPLETE:\n          if (data.success) {\n            streamController.cancelCall.resolve();\n          } else {\n            streamController.cancelCall.reject(wrapReason(data.reason));\n          }\n          this.#deleteStreamController(streamController, streamId);\n          break;\n        case StreamKind.CANCEL:\n          if (!streamSink) {\n            break;\n          }\n          new Promise(function (resolve) {\n            resolve(streamSink.onCancel?.(wrapReason(data.reason)));\n          }).then(function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              success: true\n            });\n          }, function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason)\n            });\n          });\n          streamSink.sinkCapability.reject(wrapReason(data.reason));\n          streamSink.isCancelled = true;\n          delete this.streamSinks[streamId];\n          break;\n        default:\n          throw new Error(\"Unexpected stream case\");\n      }\n    }\n    async #deleteStreamController(streamController, streamId) {\n      await Promise.allSettled([streamController.startCall?.promise, streamController.pullCall?.promise, streamController.cancelCall?.promise]);\n      delete this.streamControllers[streamId];\n    }\n    destroy() {\n      this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n    }\n  }\n\n  class Metadata {\n    #metadataMap;\n    #data;\n    constructor({\n      parsedData,\n      rawData\n    }) {\n      this.#metadataMap = parsedData;\n      this.#data = rawData;\n    }\n    getRaw() {\n      return this.#data;\n    }\n    get(name) {\n      return this.#metadataMap.get(name) ?? null;\n    }\n    getAll() {\n      return objectFromMap(this.#metadataMap);\n    }\n    has(name) {\n      return this.#metadataMap.has(name);\n    }\n  }\n\n\n  const INTERNAL = Symbol(\"INTERNAL\");\n  class OptionalContentGroup {\n    #isDisplay = false;\n    #isPrint = false;\n    #userSet = false;\n    #visible = true;\n    constructor(renderingIntent, {\n      name,\n      intent,\n      usage\n    }) {\n      this.#isDisplay = !!(renderingIntent & RenderingIntentFlag.DISPLAY);\n      this.#isPrint = !!(renderingIntent & RenderingIntentFlag.PRINT);\n      this.name = name;\n      this.intent = intent;\n      this.usage = usage;\n    }\n    get visible() {\n      if (this.#userSet) {\n        return this.#visible;\n      }\n      if (!this.#visible) {\n        return false;\n      }\n      const {\n        print,\n        view\n      } = this.usage;\n      if (this.#isDisplay) {\n        return view?.viewState !== \"OFF\";\n      } else if (this.#isPrint) {\n        return print?.printState !== \"OFF\";\n      }\n      return true;\n    }\n    _setVisible(internal, visible, userSet = false) {\n      if (internal !== INTERNAL) {\n        unreachable(\"Internal method `_setVisible` called.\");\n      }\n      this.#userSet = userSet;\n      this.#visible = visible;\n    }\n  }\n  class OptionalContentConfig {\n    #cachedGetHash = null;\n    #groups = new Map();\n    #initialHash = null;\n    #order = null;\n    constructor(data, renderingIntent = RenderingIntentFlag.DISPLAY) {\n      this.renderingIntent = renderingIntent;\n      this.name = null;\n      this.creator = null;\n      if (data === null) {\n        return;\n      }\n      this.name = data.name;\n      this.creator = data.creator;\n      this.#order = data.order;\n      for (const group of data.groups) {\n        this.#groups.set(group.id, new OptionalContentGroup(renderingIntent, group));\n      }\n      if (data.baseState === \"OFF\") {\n        for (const group of this.#groups.values()) {\n          group._setVisible(INTERNAL, false);\n        }\n      }\n      for (const on of data.on) {\n        this.#groups.get(on)._setVisible(INTERNAL, true);\n      }\n      for (const off of data.off) {\n        this.#groups.get(off)._setVisible(INTERNAL, false);\n      }\n      this.#initialHash = this.getHash();\n    }\n    #evaluateVisibilityExpression(array) {\n      const length = array.length;\n      if (length < 2) {\n        return true;\n      }\n      const operator = array[0];\n      for (let i = 1; i < length; i++) {\n        const element = array[i];\n        let state;\n        if (Array.isArray(element)) {\n          state = this.#evaluateVisibilityExpression(element);\n        } else if (this.#groups.has(element)) {\n          state = this.#groups.get(element).visible;\n        } else {\n          warn(`Optional content group not found: ${element}`);\n          return true;\n        }\n        switch (operator) {\n          case \"And\":\n            if (!state) {\n              return false;\n            }\n            break;\n          case \"Or\":\n            if (state) {\n              return true;\n            }\n            break;\n          case \"Not\":\n            return !state;\n          default:\n            return true;\n        }\n      }\n      return operator === \"And\";\n    }\n    isVisible(group) {\n      if (this.#groups.size === 0) {\n        return true;\n      }\n      if (!group) {\n        info(\"Optional content group not defined.\");\n        return true;\n      }\n      if (group.type === \"OCG\") {\n        if (!this.#groups.has(group.id)) {\n          warn(`Optional content group not found: ${group.id}`);\n          return true;\n        }\n        return this.#groups.get(group.id).visible;\n      } else if (group.type === \"OCMD\") {\n        if (group.expression) {\n          return this.#evaluateVisibilityExpression(group.expression);\n        }\n        if (!group.policy || group.policy === \"AnyOn\") {\n          for (const id of group.ids) {\n            if (!this.#groups.has(id)) {\n              warn(`Optional content group not found: ${id}`);\n              return true;\n            }\n            if (this.#groups.get(id).visible) {\n              return true;\n            }\n          }\n          return false;\n        } else if (group.policy === \"AllOn\") {\n          for (const id of group.ids) {\n            if (!this.#groups.has(id)) {\n              warn(`Optional content group not found: ${id}`);\n              return true;\n            }\n            if (!this.#groups.get(id).visible) {\n              return false;\n            }\n          }\n          return true;\n        } else if (group.policy === \"AnyOff\") {\n          for (const id of group.ids) {\n            if (!this.#groups.has(id)) {\n              warn(`Optional content group not found: ${id}`);\n              return true;\n            }\n            if (!this.#groups.get(id).visible) {\n              return true;\n            }\n          }\n          return false;\n        } else if (group.policy === \"AllOff\") {\n          for (const id of group.ids) {\n            if (!this.#groups.has(id)) {\n              warn(`Optional content group not found: ${id}`);\n              return true;\n            }\n            if (this.#groups.get(id).visible) {\n              return false;\n            }\n          }\n          return true;\n        }\n        warn(`Unknown optional content policy ${group.policy}.`);\n        return true;\n      }\n      warn(`Unknown group type ${group.type}.`);\n      return true;\n    }\n    setVisibility(id, visible = true) {\n      const group = this.#groups.get(id);\n      if (!group) {\n        warn(`Optional content group not found: ${id}`);\n        return;\n      }\n      group._setVisible(INTERNAL, !!visible, true);\n      this.#cachedGetHash = null;\n    }\n    setOCGState({\n      state,\n      preserveRB\n    }) {\n      let operator;\n      for (const elem of state) {\n        switch (elem) {\n          case \"ON\":\n          case \"OFF\":\n          case \"Toggle\":\n            operator = elem;\n            continue;\n        }\n        const group = this.#groups.get(elem);\n        if (!group) {\n          continue;\n        }\n        switch (operator) {\n          case \"ON\":\n            group._setVisible(INTERNAL, true);\n            break;\n          case \"OFF\":\n            group._setVisible(INTERNAL, false);\n            break;\n          case \"Toggle\":\n            group._setVisible(INTERNAL, !group.visible);\n            break;\n        }\n      }\n      this.#cachedGetHash = null;\n    }\n    get hasInitialVisibility() {\n      return this.#initialHash === null || this.getHash() === this.#initialHash;\n    }\n    getOrder() {\n      if (!this.#groups.size) {\n        return null;\n      }\n      if (this.#order) {\n        return this.#order.slice();\n      }\n      return [...this.#groups.keys()];\n    }\n    getGroups() {\n      return this.#groups.size > 0 ? objectFromMap(this.#groups) : null;\n    }\n    getGroup(id) {\n      return this.#groups.get(id) || null;\n    }\n    getHash() {\n      if (this.#cachedGetHash !== null) {\n        return this.#cachedGetHash;\n      }\n      const hash = new MurmurHash3_64();\n      for (const [id, group] of this.#groups) {\n        hash.update(`${id}:${group.visible}`);\n      }\n      return this.#cachedGetHash = hash.hexdigest();\n    }\n  }\n\n\n  class PDFDataTransportStream {\n    constructor(pdfDataRangeTransport, {\n      disableRange = false,\n      disableStream = false\n    }) {\n      assert(pdfDataRangeTransport, 'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.');\n      const {\n        length,\n        initialData,\n        progressiveDone,\n        contentDispositionFilename\n      } = pdfDataRangeTransport;\n      this._queuedChunks = [];\n      this._progressiveDone = progressiveDone;\n      this._contentDispositionFilename = contentDispositionFilename;\n      if (initialData?.length > 0) {\n        const buffer = initialData instanceof Uint8Array && initialData.byteLength === initialData.buffer.byteLength ? initialData.buffer : new Uint8Array(initialData).buffer;\n        this._queuedChunks.push(buffer);\n      }\n      this._pdfDataRangeTransport = pdfDataRangeTransport;\n      this._isStreamingSupported = !disableStream;\n      this._isRangeSupported = !disableRange;\n      this._contentLength = length;\n      this._fullRequestReader = null;\n      this._rangeReaders = [];\n      pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n        this._onReceiveData({\n          begin,\n          chunk\n        });\n      });\n      pdfDataRangeTransport.addProgressListener((loaded, total) => {\n        this._onProgress({\n          loaded,\n          total\n        });\n      });\n      pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n        this._onReceiveData({\n          chunk\n        });\n      });\n      pdfDataRangeTransport.addProgressiveDoneListener(() => {\n        this._onProgressiveDone();\n      });\n      pdfDataRangeTransport.transportReady();\n    }\n    _onReceiveData({\n      begin,\n      chunk\n    }) {\n      const buffer = chunk instanceof Uint8Array && chunk.byteLength === chunk.buffer.byteLength ? chunk.buffer : new Uint8Array(chunk).buffer;\n      if (begin === undefined) {\n        if (this._fullRequestReader) {\n          this._fullRequestReader._enqueue(buffer);\n        } else {\n          this._queuedChunks.push(buffer);\n        }\n      } else {\n        const found = this._rangeReaders.some(function (rangeReader) {\n          if (rangeReader._begin !== begin) {\n            return false;\n          }\n          rangeReader._enqueue(buffer);\n          return true;\n        });\n        assert(found, \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\");\n      }\n    }\n    get _progressiveDataLength() {\n      return this._fullRequestReader?._loaded ?? 0;\n    }\n    _onProgress(evt) {\n      if (evt.total === undefined) {\n        this._rangeReaders[0]?.onProgress?.({\n          loaded: evt.loaded\n        });\n      } else {\n        this._fullRequestReader?.onProgress?.({\n          loaded: evt.loaded,\n          total: evt.total\n        });\n      }\n    }\n    _onProgressiveDone() {\n      this._fullRequestReader?.progressiveDone();\n      this._progressiveDone = true;\n    }\n    _removeRangeReader(reader) {\n      const i = this._rangeReaders.indexOf(reader);\n      if (i >= 0) {\n        this._rangeReaders.splice(i, 1);\n      }\n    }\n    getFullReader() {\n      assert(!this._fullRequestReader, \"PDFDataTransportStream.getFullReader can only be called once.\");\n      const queuedChunks = this._queuedChunks;\n      this._queuedChunks = null;\n      return new PDFDataTransportStreamReader(this, queuedChunks, this._progressiveDone, this._contentDispositionFilename);\n    }\n    getRangeReader(begin, end) {\n      if (end <= this._progressiveDataLength) {\n        return null;\n      }\n      const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n      this._pdfDataRangeTransport.requestDataRange(begin, end);\n      this._rangeReaders.push(reader);\n      return reader;\n    }\n    cancelAllRequests(reason) {\n      this._fullRequestReader?.cancel(reason);\n      for (const reader of this._rangeReaders.slice(0)) {\n        reader.cancel(reason);\n      }\n      this._pdfDataRangeTransport.abort();\n    }\n  }\n  class PDFDataTransportStreamReader {\n    constructor(stream, queuedChunks, progressiveDone = false, contentDispositionFilename = null) {\n      this._stream = stream;\n      this._done = progressiveDone || false;\n      this._filename = isPdfFile(contentDispositionFilename) ? contentDispositionFilename : null;\n      this._queuedChunks = queuedChunks || [];\n      this._loaded = 0;\n      for (const chunk of this._queuedChunks) {\n        this._loaded += chunk.byteLength;\n      }\n      this._requests = [];\n      this._headersReady = Promise.resolve();\n      stream._fullRequestReader = this;\n      this.onProgress = null;\n    }\n    _enqueue(chunk) {\n      if (this._done) {\n        return;\n      }\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n        requestCapability.resolve({\n          value: chunk,\n          done: false\n        });\n      } else {\n        this._queuedChunks.push(chunk);\n      }\n      this._loaded += chunk.byteLength;\n    }\n    get headersReady() {\n      return this._headersReady;\n    }\n    get filename() {\n      return this._filename;\n    }\n    get isRangeSupported() {\n      return this._stream._isRangeSupported;\n    }\n    get isStreamingSupported() {\n      return this._stream._isStreamingSupported;\n    }\n    get contentLength() {\n      return this._stream._contentLength;\n    }\n    async read() {\n      if (this._queuedChunks.length > 0) {\n        const chunk = this._queuedChunks.shift();\n        return {\n          value: chunk,\n          done: false\n        };\n      }\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n      const requestCapability = Promise.withResolvers();\n      this._requests.push(requestCapability);\n      return requestCapability.promise;\n    }\n    cancel(reason) {\n      this._done = true;\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      }\n      this._requests.length = 0;\n    }\n    progressiveDone() {\n      if (this._done) {\n        return;\n      }\n      this._done = true;\n    }\n  }\n  class PDFDataTransportStreamRangeReader {\n    constructor(stream, begin, end) {\n      this._stream = stream;\n      this._begin = begin;\n      this._end = end;\n      this._queuedChunk = null;\n      this._requests = [];\n      this._done = false;\n      this.onProgress = null;\n    }\n    _enqueue(chunk) {\n      if (this._done) {\n        return;\n      }\n      if (this._requests.length === 0) {\n        this._queuedChunk = chunk;\n      } else {\n        const requestsCapability = this._requests.shift();\n        requestsCapability.resolve({\n          value: chunk,\n          done: false\n        });\n        for (const requestCapability of this._requests) {\n          requestCapability.resolve({\n            value: undefined,\n            done: true\n          });\n        }\n        this._requests.length = 0;\n      }\n      this._done = true;\n      this._stream._removeRangeReader(this);\n    }\n    get isStreamingSupported() {\n      return false;\n    }\n    async read() {\n      if (this._queuedChunk) {\n        const chunk = this._queuedChunk;\n        this._queuedChunk = null;\n        return {\n          value: chunk,\n          done: false\n        };\n      }\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n      const requestCapability = Promise.withResolvers();\n      this._requests.push(requestCapability);\n      return requestCapability.promise;\n    }\n    cancel(reason) {\n      this._done = true;\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      }\n      this._requests.length = 0;\n      this._stream._removeRangeReader(this);\n    }\n  }\n\n  function getFilenameFromContentDispositionHeader(contentDisposition) {\n    let needsEncodingFixup = true;\n    let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n    if (tmp) {\n      tmp = tmp[1];\n      let filename = rfc2616unquote(tmp);\n      filename = unescape(filename);\n      filename = rfc5987decode(filename);\n      filename = rfc2047decode(filename);\n      return fixupEncoding(filename);\n    }\n    tmp = rfc2231getparam(contentDisposition);\n    if (tmp) {\n      const filename = rfc2047decode(tmp);\n      return fixupEncoding(filename);\n    }\n    tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n    if (tmp) {\n      tmp = tmp[1];\n      let filename = rfc2616unquote(tmp);\n      filename = rfc2047decode(filename);\n      return fixupEncoding(filename);\n    }\n    function toParamRegExp(attributePattern, flags) {\n      return new RegExp(\"(?:^|;)\\\\s*\" + attributePattern + \"\\\\s*=\\\\s*\" + \"(\" + '[^\";\\\\s][^;\\\\s]*' + \"|\" + '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' + \")\", flags);\n    }\n    function textdecode(encoding, value) {\n      if (encoding) {\n        if (!/^[\\x00-\\xFF]+$/.test(value)) {\n          return value;\n        }\n        try {\n          const decoder = new TextDecoder(encoding, {\n            fatal: true\n          });\n          const buffer = stringToBytes(value);\n          value = decoder.decode(buffer);\n          needsEncodingFixup = false;\n        } catch {}\n      }\n      return value;\n    }\n    function fixupEncoding(value) {\n      if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n        value = textdecode(\"utf-8\", value);\n        if (needsEncodingFixup) {\n          value = textdecode(\"iso-8859-1\", value);\n        }\n      }\n      return value;\n    }\n    function rfc2231getparam(contentDispositionStr) {\n      const matches = [];\n      let match;\n      const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n      while ((match = iter.exec(contentDispositionStr)) !== null) {\n        let [, n, quot, part] = match;\n        n = parseInt(n, 10);\n        if (n in matches) {\n          if (n === 0) {\n            break;\n          }\n          continue;\n        }\n        matches[n] = [quot, part];\n      }\n      const parts = [];\n      for (let n = 0; n < matches.length; ++n) {\n        if (!(n in matches)) {\n          break;\n        }\n        let [quot, part] = matches[n];\n        part = rfc2616unquote(part);\n        if (quot) {\n          part = unescape(part);\n          if (n === 0) {\n            part = rfc5987decode(part);\n          }\n        }\n        parts.push(part);\n      }\n      return parts.join(\"\");\n    }\n    function rfc2616unquote(value) {\n      if (value.startsWith('\"')) {\n        const parts = value.slice(1).split('\\\\\"');\n        for (let i = 0; i < parts.length; ++i) {\n          const quotindex = parts[i].indexOf('\"');\n          if (quotindex !== -1) {\n            parts[i] = parts[i].slice(0, quotindex);\n            parts.length = i + 1;\n          }\n          parts[i] = parts[i].replaceAll(/\\\\(.)/g, \"$1\");\n        }\n        value = parts.join('\"');\n      }\n      return value;\n    }\n    function rfc5987decode(extvalue) {\n      const encodingend = extvalue.indexOf(\"'\");\n      if (encodingend === -1) {\n        return extvalue;\n      }\n      const encoding = extvalue.slice(0, encodingend);\n      const langvalue = extvalue.slice(encodingend + 1);\n      const value = langvalue.replace(/^[^']*'/, \"\");\n      return textdecode(encoding, value);\n    }\n    function rfc2047decode(value) {\n      if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n        return value;\n      }\n      return value.replaceAll(/=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g, function (matches, charset, encoding, text) {\n        if (encoding === \"q\" || encoding === \"Q\") {\n          text = text.replaceAll(\"_\", \" \");\n          text = text.replaceAll(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n            return String.fromCharCode(parseInt(hex, 16));\n          });\n          return textdecode(charset, text);\n        }\n        try {\n          text = atob(text);\n        } catch {}\n        return textdecode(charset, text);\n      });\n    }\n    return \"\";\n  }\n\n\n\n  function createHeaders(isHttp, httpHeaders) {\n    const headers = new Headers();\n    if (!isHttp || !httpHeaders || typeof httpHeaders !== \"object\") {\n      return headers;\n    }\n    for (const key in httpHeaders) {\n      const val = httpHeaders[key];\n      if (val !== undefined) {\n        headers.append(key, val);\n      }\n    }\n    return headers;\n  }\n  function validateRangeRequestCapabilities({\n    responseHeaders,\n    isHttp,\n    rangeChunkSize,\n    disableRange\n  }) {\n    const returnValues = {\n      allowRangeRequests: false,\n      suggestedLength: undefined\n    };\n    const length = parseInt(responseHeaders.get(\"Content-Length\"), 10);\n    if (!Number.isInteger(length)) {\n      return returnValues;\n    }\n    returnValues.suggestedLength = length;\n    if (length <= 2 * rangeChunkSize) {\n      return returnValues;\n    }\n    if (disableRange || !isHttp) {\n      return returnValues;\n    }\n    if (responseHeaders.get(\"Accept-Ranges\") !== \"bytes\") {\n      return returnValues;\n    }\n    const contentEncoding = responseHeaders.get(\"Content-Encoding\") || \"identity\";\n    if (contentEncoding !== \"identity\") {\n      return returnValues;\n    }\n    returnValues.allowRangeRequests = true;\n    return returnValues;\n  }\n  function extractFilenameFromHeader(responseHeaders) {\n    const contentDisposition = responseHeaders.get(\"Content-Disposition\");\n    if (contentDisposition) {\n      let filename = getFilenameFromContentDispositionHeader(contentDisposition);\n      if (filename.includes(\"%\")) {\n        try {\n          filename = decodeURIComponent(filename);\n        } catch {}\n      }\n      if (isPdfFile(filename)) {\n        return filename;\n      }\n    }\n    return null;\n  }\n  function createResponseStatusError(status, url) {\n    if (status === 404 || status === 0 && url.startsWith(\"file:\")) {\n      return new MissingPDFException('Missing PDF \"' + url + '\".');\n    }\n    return new UnexpectedResponseException(`Unexpected server response (${status}) while retrieving PDF \"${url}\".`, status);\n  }\n  function validateResponseStatus(status) {\n    return status === 200 || status === 206;\n  }\n\n\n  function createFetchOptions(headers, withCredentials, abortController) {\n    return {\n      method: \"GET\",\n      headers,\n      signal: abortController.signal,\n      mode: \"cors\",\n      credentials: withCredentials ? \"include\" : \"same-origin\",\n      redirect: \"follow\"\n    };\n  }\n  function getArrayBuffer(val) {\n    if (val instanceof Uint8Array) {\n      return val.buffer;\n    }\n    if (val instanceof ArrayBuffer) {\n      return val;\n    }\n    warn(`getArrayBuffer - unexpected data format: ${val}`);\n    return new Uint8Array(val).buffer;\n  }\n  class PDFFetchStream {\n    constructor(source) {\n      this.source = source;\n      this.isHttp = /^https?:/i.test(source.url);\n      this.headers = createHeaders(this.isHttp, source.httpHeaders);\n      this._fullRequestReader = null;\n      this._rangeRequestReaders = [];\n    }\n    get _progressiveDataLength() {\n      return this._fullRequestReader?._loaded ?? 0;\n    }\n    getFullReader() {\n      assert(!this._fullRequestReader, \"PDFFetchStream.getFullReader can only be called once.\");\n      this._fullRequestReader = new PDFFetchStreamReader(this);\n      return this._fullRequestReader;\n    }\n    getRangeReader(begin, end) {\n      if (end <= this._progressiveDataLength) {\n        return null;\n      }\n      const reader = new PDFFetchStreamRangeReader(this, begin, end);\n      this._rangeRequestReaders.push(reader);\n      return reader;\n    }\n    cancelAllRequests(reason) {\n      this._fullRequestReader?.cancel(reason);\n      for (const reader of this._rangeRequestReaders.slice(0)) {\n        reader.cancel(reason);\n      }\n    }\n  }\n  class PDFFetchStreamReader {\n    constructor(stream) {\n      this._stream = stream;\n      this._reader = null;\n      this._loaded = 0;\n      this._filename = null;\n      const source = stream.source;\n      this._withCredentials = source.withCredentials || false;\n      this._contentLength = source.length;\n      this._headersCapability = Promise.withResolvers();\n      this._disableRange = source.disableRange || false;\n      this._rangeChunkSize = source.rangeChunkSize;\n      if (!this._rangeChunkSize && !this._disableRange) {\n        this._disableRange = true;\n      }\n      this._abortController = new AbortController();\n      this._isStreamingSupported = !source.disableStream;\n      this._isRangeSupported = !source.disableRange;\n      const headers = new Headers(stream.headers);\n      const url = source.url;\n      fetch(url, createFetchOptions(headers, this._withCredentials, this._abortController)).then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._reader = response.body.getReader();\n        this._headersCapability.resolve();\n        const responseHeaders = response.headers;\n        const {\n          allowRangeRequests,\n          suggestedLength\n        } = validateRangeRequestCapabilities({\n          responseHeaders,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange\n        });\n        this._isRangeSupported = allowRangeRequests;\n        this._contentLength = suggestedLength || this._contentLength;\n        this._filename = extractFilenameFromHeader(responseHeaders);\n        if (!this._isStreamingSupported && this._isRangeSupported) {\n          this.cancel(new AbortException(\"Streaming is disabled.\"));\n        }\n      }).catch(this._headersCapability.reject);\n      this.onProgress = null;\n    }\n    get headersReady() {\n      return this._headersCapability.promise;\n    }\n    get filename() {\n      return this._filename;\n    }\n    get contentLength() {\n      return this._contentLength;\n    }\n    get isRangeSupported() {\n      return this._isRangeSupported;\n    }\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n    async read() {\n      await this._headersCapability.promise;\n      const {\n        value,\n        done\n      } = await this._reader.read();\n      if (done) {\n        return {\n          value,\n          done\n        };\n      }\n      this._loaded += value.byteLength;\n      this.onProgress?.({\n        loaded: this._loaded,\n        total: this._contentLength\n      });\n      return {\n        value: getArrayBuffer(value),\n        done: false\n      };\n    }\n    cancel(reason) {\n      this._reader?.cancel(reason);\n      this._abortController.abort();\n    }\n  }\n  class PDFFetchStreamRangeReader {\n    constructor(stream, begin, end) {\n      this._stream = stream;\n      this._reader = null;\n      this._loaded = 0;\n      const source = stream.source;\n      this._withCredentials = source.withCredentials || false;\n      this._readCapability = Promise.withResolvers();\n      this._isStreamingSupported = !source.disableStream;\n      this._abortController = new AbortController();\n      const headers = new Headers(stream.headers);\n      headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n      const url = source.url;\n      fetch(url, createFetchOptions(headers, this._withCredentials, this._abortController)).then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._readCapability.resolve();\n        this._reader = response.body.getReader();\n      }).catch(this._readCapability.reject);\n      this.onProgress = null;\n    }\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n    async read() {\n      await this._readCapability.promise;\n      const {\n        value,\n        done\n      } = await this._reader.read();\n      if (done) {\n        return {\n          value,\n          done\n        };\n      }\n      this._loaded += value.byteLength;\n      this.onProgress?.({\n        loaded: this._loaded\n      });\n      return {\n        value: getArrayBuffer(value),\n        done: false\n      };\n    }\n    cancel(reason) {\n      this._reader?.cancel(reason);\n      this._abortController.abort();\n    }\n  }\n\n\n  const OK_RESPONSE = 200;\n  const PARTIAL_CONTENT_RESPONSE = 206;\n  function network_getArrayBuffer(xhr) {\n    const data = xhr.response;\n    if (typeof data !== \"string\") {\n      return data;\n    }\n    return stringToBytes(data).buffer;\n  }\n  class NetworkManager {\n    constructor({\n      url,\n      httpHeaders,\n      withCredentials\n    }) {\n      this.url = url;\n      this.isHttp = /^https?:/i.test(url);\n      this.headers = createHeaders(this.isHttp, httpHeaders);\n      this.withCredentials = withCredentials || false;\n      this.currXhrId = 0;\n      this.pendingRequests = Object.create(null);\n    }\n    requestRange(begin, end, listeners) {\n      const args = {\n        begin,\n        end\n      };\n      for (const prop in listeners) {\n        args[prop] = listeners[prop];\n      }\n      return this.request(args);\n    }\n    requestFull(listeners) {\n      return this.request(listeners);\n    }\n    request(args) {\n      const xhr = new XMLHttpRequest();\n      const xhrId = this.currXhrId++;\n      const pendingRequest = this.pendingRequests[xhrId] = {\n        xhr\n      };\n      xhr.open(\"GET\", this.url);\n      xhr.withCredentials = this.withCredentials;\n      for (const [key, val] of this.headers) {\n        xhr.setRequestHeader(key, val);\n      }\n      if (this.isHttp && \"begin\" in args && \"end\" in args) {\n        xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n        pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n      } else {\n        pendingRequest.expectedStatus = OK_RESPONSE;\n      }\n      xhr.responseType = \"arraybuffer\";\n      if (args.onError) {\n        xhr.onerror = function (evt) {\n          args.onError(xhr.status);\n        };\n      }\n      xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n      xhr.onprogress = this.onProgress.bind(this, xhrId);\n      pendingRequest.onHeadersReceived = args.onHeadersReceived;\n      pendingRequest.onDone = args.onDone;\n      pendingRequest.onError = args.onError;\n      pendingRequest.onProgress = args.onProgress;\n      xhr.send(null);\n      return xhrId;\n    }\n    onProgress(xhrId, evt) {\n      const pendingRequest = this.pendingRequests[xhrId];\n      if (!pendingRequest) {\n        return;\n      }\n      pendingRequest.onProgress?.(evt);\n    }\n    onStateChange(xhrId, evt) {\n      const pendingRequest = this.pendingRequests[xhrId];\n      if (!pendingRequest) {\n        return;\n      }\n      const xhr = pendingRequest.xhr;\n      if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n        pendingRequest.onHeadersReceived();\n        delete pendingRequest.onHeadersReceived;\n      }\n      if (xhr.readyState !== 4) {\n        return;\n      }\n      if (!(xhrId in this.pendingRequests)) {\n        return;\n      }\n      delete this.pendingRequests[xhrId];\n      if (xhr.status === 0 && this.isHttp) {\n        pendingRequest.onError?.(xhr.status);\n        return;\n      }\n      const xhrStatus = xhr.status || OK_RESPONSE;\n      const ok_response_on_range_request = xhrStatus === OK_RESPONSE && pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n      if (!ok_response_on_range_request && xhrStatus !== pendingRequest.expectedStatus) {\n        pendingRequest.onError?.(xhr.status);\n        return;\n      }\n      const chunk = network_getArrayBuffer(xhr);\n      if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n        const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n        const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n        pendingRequest.onDone({\n          begin: parseInt(matches[1], 10),\n          chunk\n        });\n      } else if (chunk) {\n        pendingRequest.onDone({\n          begin: 0,\n          chunk\n        });\n      } else {\n        pendingRequest.onError?.(xhr.status);\n      }\n    }\n    getRequestXhr(xhrId) {\n      return this.pendingRequests[xhrId].xhr;\n    }\n    isPendingRequest(xhrId) {\n      return xhrId in this.pendingRequests;\n    }\n    abortRequest(xhrId) {\n      const xhr = this.pendingRequests[xhrId].xhr;\n      delete this.pendingRequests[xhrId];\n      xhr.abort();\n    }\n  }\n  class PDFNetworkStream {\n    constructor(source) {\n      this._source = source;\n      this._manager = new NetworkManager(source);\n      this._rangeChunkSize = source.rangeChunkSize;\n      this._fullRequestReader = null;\n      this._rangeRequestReaders = [];\n    }\n    _onRangeRequestReaderClosed(reader) {\n      const i = this._rangeRequestReaders.indexOf(reader);\n      if (i >= 0) {\n        this._rangeRequestReaders.splice(i, 1);\n      }\n    }\n    getFullReader() {\n      assert(!this._fullRequestReader, \"PDFNetworkStream.getFullReader can only be called once.\");\n      this._fullRequestReader = new PDFNetworkStreamFullRequestReader(this._manager, this._source);\n      return this._fullRequestReader;\n    }\n    getRangeReader(begin, end) {\n      const reader = new PDFNetworkStreamRangeRequestReader(this._manager, begin, end);\n      reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n      this._rangeRequestReaders.push(reader);\n      return reader;\n    }\n    cancelAllRequests(reason) {\n      this._fullRequestReader?.cancel(reason);\n      for (const reader of this._rangeRequestReaders.slice(0)) {\n        reader.cancel(reason);\n      }\n    }\n  }\n  class PDFNetworkStreamFullRequestReader {\n    constructor(manager, source) {\n      this._manager = manager;\n      const args = {\n        onHeadersReceived: this._onHeadersReceived.bind(this),\n        onDone: this._onDone.bind(this),\n        onError: this._onError.bind(this),\n        onProgress: this._onProgress.bind(this)\n      };\n      this._url = source.url;\n      this._fullRequestId = manager.requestFull(args);\n      this._headersCapability = Promise.withResolvers();\n      this._disableRange = source.disableRange || false;\n      this._contentLength = source.length;\n      this._rangeChunkSize = source.rangeChunkSize;\n      if (!this._rangeChunkSize && !this._disableRange) {\n        this._disableRange = true;\n      }\n      this._isStreamingSupported = false;\n      this._isRangeSupported = false;\n      this._cachedChunks = [];\n      this._requests = [];\n      this._done = false;\n      this._storedError = undefined;\n      this._filename = null;\n      this.onProgress = null;\n    }\n    _onHeadersReceived() {\n      const fullRequestXhrId = this._fullRequestId;\n      const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n      const responseHeaders = new Headers(fullRequestXhr.getAllResponseHeaders().trim().split(/[\\r\\n]+/).map(x => {\n        const [key, ...val] = x.split(\": \");\n        return [key, val.join(\": \")];\n      }));\n      const {\n        allowRangeRequests,\n        suggestedLength\n      } = validateRangeRequestCapabilities({\n        responseHeaders,\n        isHttp: this._manager.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange\n      });\n      if (allowRangeRequests) {\n        this._isRangeSupported = true;\n      }\n      this._contentLength = suggestedLength || this._contentLength;\n      this._filename = extractFilenameFromHeader(responseHeaders);\n      if (this._isRangeSupported) {\n        this._manager.abortRequest(fullRequestXhrId);\n      }\n      this._headersCapability.resolve();\n    }\n    _onDone(data) {\n      if (data) {\n        if (this._requests.length > 0) {\n          const requestCapability = this._requests.shift();\n          requestCapability.resolve({\n            value: data.chunk,\n            done: false\n          });\n        } else {\n          this._cachedChunks.push(data.chunk);\n        }\n      }\n      this._done = true;\n      if (this._cachedChunks.length > 0) {\n        return;\n      }\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      }\n      this._requests.length = 0;\n    }\n    _onError(status) {\n      this._storedError = createResponseStatusError(status, this._url);\n      this._headersCapability.reject(this._storedError);\n      for (const requestCapability of this._requests) {\n        requestCapability.reject(this._storedError);\n      }\n      this._requests.length = 0;\n      this._cachedChunks.length = 0;\n    }\n    _onProgress(evt) {\n      this.onProgress?.({\n        loaded: evt.loaded,\n        total: evt.lengthComputable ? evt.total : this._contentLength\n      });\n    }\n    get filename() {\n      return this._filename;\n    }\n    get isRangeSupported() {\n      return this._isRangeSupported;\n    }\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n    get contentLength() {\n      return this._contentLength;\n    }\n    get headersReady() {\n      return this._headersCapability.promise;\n    }\n    async read() {\n      if (this._storedError) {\n        throw this._storedError;\n      }\n      if (this._cachedChunks.length > 0) {\n        const chunk = this._cachedChunks.shift();\n        return {\n          value: chunk,\n          done: false\n        };\n      }\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n      const requestCapability = Promise.withResolvers();\n      this._requests.push(requestCapability);\n      return requestCapability.promise;\n    }\n    cancel(reason) {\n      this._done = true;\n      this._headersCapability.reject(reason);\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      }\n      this._requests.length = 0;\n      if (this._manager.isPendingRequest(this._fullRequestId)) {\n        this._manager.abortRequest(this._fullRequestId);\n      }\n      this._fullRequestReader = null;\n    }\n  }\n  class PDFNetworkStreamRangeRequestReader {\n    constructor(manager, begin, end) {\n      this._manager = manager;\n      const args = {\n        onDone: this._onDone.bind(this),\n        onError: this._onError.bind(this),\n        onProgress: this._onProgress.bind(this)\n      };\n      this._url = manager.url;\n      this._requestId = manager.requestRange(begin, end, args);\n      this._requests = [];\n      this._queuedChunk = null;\n      this._done = false;\n      this._storedError = undefined;\n      this.onProgress = null;\n      this.onClosed = null;\n    }\n    _close() {\n      this.onClosed?.(this);\n    }\n    _onDone(data) {\n      const chunk = data.chunk;\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n        requestCapability.resolve({\n          value: chunk,\n          done: false\n        });\n      } else {\n        this._queuedChunk = chunk;\n      }\n      this._done = true;\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      }\n      this._requests.length = 0;\n      this._close();\n    }\n    _onError(status) {\n      this._storedError = createResponseStatusError(status, this._url);\n      for (const requestCapability of this._requests) {\n        requestCapability.reject(this._storedError);\n      }\n      this._requests.length = 0;\n      this._queuedChunk = null;\n    }\n    _onProgress(evt) {\n      if (!this.isStreamingSupported) {\n        this.onProgress?.({\n          loaded: evt.loaded\n        });\n      }\n    }\n    get isStreamingSupported() {\n      return false;\n    }\n    async read() {\n      if (this._storedError) {\n        throw this._storedError;\n      }\n      if (this._queuedChunk !== null) {\n        const chunk = this._queuedChunk;\n        this._queuedChunk = null;\n        return {\n          value: chunk,\n          done: false\n        };\n      }\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n      const requestCapability = Promise.withResolvers();\n      this._requests.push(requestCapability);\n      return requestCapability.promise;\n    }\n    cancel(reason) {\n      this._done = true;\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({\n          value: undefined,\n          done: true\n        });\n      }\n      this._requests.length = 0;\n      if (this._manager.isPendingRequest(this._requestId)) {\n        this._manager.abortRequest(this._requestId);\n      }\n      this._close();\n    }\n  }\n\n\n\n  const urlRegex = /^[a-z][a-z0-9\\-+.]+:/i;\n  function parseUrlOrPath(sourceUrl) {\n    if (urlRegex.test(sourceUrl)) {\n      return new URL(sourceUrl);\n    }\n    const url = NodePackages.get(\"url\");\n    return new URL(url.pathToFileURL(sourceUrl));\n  }\n  function createRequest(url, headers, callback) {\n    if (url.protocol === \"http:\") {\n      const http = NodePackages.get(\"http\");\n      return http.request(url, {\n        headers\n      }, callback);\n    }\n    const https = NodePackages.get(\"https\");\n    return https.request(url, {\n      headers\n    }, callback);\n  }\n  class PDFNodeStream {\n    constructor(source) {\n      this.source = source;\n      this.url = parseUrlOrPath(source.url);\n      this.isHttp = this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n      this.isFsUrl = this.url.protocol === \"file:\";\n      this.headers = createHeaders(this.isHttp, source.httpHeaders);\n      this._fullRequestReader = null;\n      this._rangeRequestReaders = [];\n    }\n    get _progressiveDataLength() {\n      return this._fullRequestReader?._loaded ?? 0;\n    }\n    getFullReader() {\n      assert(!this._fullRequestReader, \"PDFNodeStream.getFullReader can only be called once.\");\n      this._fullRequestReader = this.isFsUrl ? new PDFNodeStreamFsFullReader(this) : new PDFNodeStreamFullReader(this);\n      return this._fullRequestReader;\n    }\n    getRangeReader(start, end) {\n      if (end <= this._progressiveDataLength) {\n        return null;\n      }\n      const rangeReader = this.isFsUrl ? new PDFNodeStreamFsRangeReader(this, start, end) : new PDFNodeStreamRangeReader(this, start, end);\n      this._rangeRequestReaders.push(rangeReader);\n      return rangeReader;\n    }\n    cancelAllRequests(reason) {\n      this._fullRequestReader?.cancel(reason);\n      for (const reader of this._rangeRequestReaders.slice(0)) {\n        reader.cancel(reason);\n      }\n    }\n  }\n  class BaseFullReader {\n    constructor(stream) {\n      this._url = stream.url;\n      this._done = false;\n      this._storedError = null;\n      this.onProgress = null;\n      const source = stream.source;\n      this._contentLength = source.length;\n      this._loaded = 0;\n      this._filename = null;\n      this._disableRange = source.disableRange || false;\n      this._rangeChunkSize = source.rangeChunkSize;\n      if (!this._rangeChunkSize && !this._disableRange) {\n        this._disableRange = true;\n      }\n      this._isStreamingSupported = !source.disableStream;\n      this._isRangeSupported = !source.disableRange;\n      this._readableStream = null;\n      this._readCapability = Promise.withResolvers();\n      this._headersCapability = Promise.withResolvers();\n    }\n    get headersReady() {\n      return this._headersCapability.promise;\n    }\n    get filename() {\n      return this._filename;\n    }\n    get contentLength() {\n      return this._contentLength;\n    }\n    get isRangeSupported() {\n      return this._isRangeSupported;\n    }\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n    async read() {\n      await this._readCapability.promise;\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n      if (this._storedError) {\n        throw this._storedError;\n      }\n      const chunk = this._readableStream.read();\n      if (chunk === null) {\n        this._readCapability = Promise.withResolvers();\n        return this.read();\n      }\n      this._loaded += chunk.length;\n      this.onProgress?.({\n        loaded: this._loaded,\n        total: this._contentLength\n      });\n      const buffer = new Uint8Array(chunk).buffer;\n      return {\n        value: buffer,\n        done: false\n      };\n    }\n    cancel(reason) {\n      if (!this._readableStream) {\n        this._error(reason);\n        return;\n      }\n      this._readableStream.destroy(reason);\n    }\n    _error(reason) {\n      this._storedError = reason;\n      this._readCapability.resolve();\n    }\n    _setReadableStream(readableStream) {\n      this._readableStream = readableStream;\n      readableStream.on(\"readable\", () => {\n        this._readCapability.resolve();\n      });\n      readableStream.on(\"end\", () => {\n        readableStream.destroy();\n        this._done = true;\n        this._readCapability.resolve();\n      });\n      readableStream.on(\"error\", reason => {\n        this._error(reason);\n      });\n      if (!this._isStreamingSupported && this._isRangeSupported) {\n        this._error(new AbortException(\"streaming is disabled\"));\n      }\n      if (this._storedError) {\n        this._readableStream.destroy(this._storedError);\n      }\n    }\n  }\n  class BaseRangeReader {\n    constructor(stream) {\n      this._url = stream.url;\n      this._done = false;\n      this._storedError = null;\n      this.onProgress = null;\n      this._loaded = 0;\n      this._readableStream = null;\n      this._readCapability = Promise.withResolvers();\n      const source = stream.source;\n      this._isStreamingSupported = !source.disableStream;\n    }\n    get isStreamingSupported() {\n      return this._isStreamingSupported;\n    }\n    async read() {\n      await this._readCapability.promise;\n      if (this._done) {\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n      if (this._storedError) {\n        throw this._storedError;\n      }\n      const chunk = this._readableStream.read();\n      if (chunk === null) {\n        this._readCapability = Promise.withResolvers();\n        return this.read();\n      }\n      this._loaded += chunk.length;\n      this.onProgress?.({\n        loaded: this._loaded\n      });\n      const buffer = new Uint8Array(chunk).buffer;\n      return {\n        value: buffer,\n        done: false\n      };\n    }\n    cancel(reason) {\n      if (!this._readableStream) {\n        this._error(reason);\n        return;\n      }\n      this._readableStream.destroy(reason);\n    }\n    _error(reason) {\n      this._storedError = reason;\n      this._readCapability.resolve();\n    }\n    _setReadableStream(readableStream) {\n      this._readableStream = readableStream;\n      readableStream.on(\"readable\", () => {\n        this._readCapability.resolve();\n      });\n      readableStream.on(\"end\", () => {\n        readableStream.destroy();\n        this._done = true;\n        this._readCapability.resolve();\n      });\n      readableStream.on(\"error\", reason => {\n        this._error(reason);\n      });\n      if (this._storedError) {\n        this._readableStream.destroy(this._storedError);\n      }\n    }\n  }\n  class PDFNodeStreamFullReader extends BaseFullReader {\n    constructor(stream) {\n      super(stream);\n      const headers = Object.fromEntries(stream.headers);\n      const handleResponse = response => {\n        if (response.statusCode === 404) {\n          const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n          this._storedError = error;\n          this._headersCapability.reject(error);\n          return;\n        }\n        this._headersCapability.resolve();\n        this._setReadableStream(response);\n        const responseHeaders = new Headers(this._readableStream.headers);\n        const {\n          allowRangeRequests,\n          suggestedLength\n        } = validateRangeRequestCapabilities({\n          responseHeaders,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange\n        });\n        this._isRangeSupported = allowRangeRequests;\n        this._contentLength = suggestedLength || this._contentLength;\n        this._filename = extractFilenameFromHeader(responseHeaders);\n      };\n      this._request = createRequest(this._url, headers, handleResponse);\n      this._request.on(\"error\", reason => {\n        this._storedError = reason;\n        this._headersCapability.reject(reason);\n      });\n      this._request.end();\n    }\n  }\n  class PDFNodeStreamRangeReader extends BaseRangeReader {\n    constructor(stream, start, end) {\n      super(stream);\n      const headers = Object.fromEntries(stream.headers);\n      headers.Range = `bytes=${start}-${end - 1}`;\n      const handleResponse = response => {\n        if (response.statusCode === 404) {\n          const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n          this._storedError = error;\n          return;\n        }\n        this._setReadableStream(response);\n      };\n      this._request = createRequest(this._url, headers, handleResponse);\n      this._request.on(\"error\", reason => {\n        this._storedError = reason;\n      });\n      this._request.end();\n    }\n  }\n  class PDFNodeStreamFsFullReader extends BaseFullReader {\n    constructor(stream) {\n      super(stream);\n      const fs = NodePackages.get(\"fs\");\n      fs.promises.lstat(this._url).then(stat => {\n        this._contentLength = stat.size;\n        this._setReadableStream(fs.createReadStream(this._url));\n        this._headersCapability.resolve();\n      }, error => {\n        if (error.code === \"ENOENT\") {\n          error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        }\n        this._storedError = error;\n        this._headersCapability.reject(error);\n      });\n    }\n  }\n  class PDFNodeStreamFsRangeReader extends BaseRangeReader {\n    constructor(stream, start, end) {\n      super(stream);\n      const fs = NodePackages.get(\"fs\");\n      this._setReadableStream(fs.createReadStream(this._url, {\n        start,\n        end: end - 1\n      }));\n    }\n  }\n\n\n  const MAX_TEXT_DIVS_TO_RENDER = 100000;\n  const DEFAULT_FONT_SIZE = 30;\n  const DEFAULT_FONT_ASCENT = 0.8;\n  class TextLayer {\n    #capability = Promise.withResolvers();\n    #container = null;\n    #disableProcessItems = false;\n    #fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n    #lang = null;\n    #layoutTextParams = null;\n    #pageHeight = 0;\n    #pageWidth = 0;\n    #reader = null;\n    #rootContainer = null;\n    #rotation = 0;\n    #scale = 0;\n    #styleCache = Object.create(null);\n    #textContentItemsStr = [];\n    #textContentSource = null;\n    #textDivs = [];\n    #textDivProperties = new WeakMap();\n    #transform = null;\n    static #ascentCache = new Map();\n    static #canvasContexts = new Map();\n    static #canvasCtxFonts = new WeakMap();\n    static #minFontSize = null;\n    static #pendingTextLayers = new Set();\n    constructor({\n      textContentSource,\n      container,\n      viewport\n    }) {\n      if (textContentSource instanceof ReadableStream) {\n        this.#textContentSource = textContentSource;\n      } else if (typeof textContentSource === \"object\") {\n        this.#textContentSource = new ReadableStream({\n          start(controller) {\n            controller.enqueue(textContentSource);\n            controller.close();\n          }\n        });\n      } else {\n        throw new Error('No \"textContentSource\" parameter specified.');\n      }\n      this.#container = this.#rootContainer = container;\n      this.#scale = viewport.scale * (globalThis.devicePixelRatio || 1);\n      this.#rotation = viewport.rotation;\n      this.#layoutTextParams = {\n        div: null,\n        properties: null,\n        ctx: null\n      };\n      const {\n        pageWidth,\n        pageHeight,\n        pageX,\n        pageY\n      } = viewport.rawDims;\n      this.#transform = [1, 0, 0, -1, -pageX, pageY + pageHeight];\n      this.#pageWidth = pageWidth;\n      this.#pageHeight = pageHeight;\n      TextLayer.#ensureMinFontSizeComputed();\n      setLayerDimensions(container, viewport);\n      this.#capability.promise.finally(() => {\n        TextLayer.#pendingTextLayers.delete(this);\n        this.#layoutTextParams = null;\n        this.#styleCache = null;\n      }).catch(() => {});\n    }\n    static get fontFamilyMap() {\n      const {\n        isWindows,\n        isFirefox\n      } = util_FeatureTest.platform;\n      return shadow(this, \"fontFamilyMap\", new Map([[\"sans-serif\", `${isWindows && isFirefox ? \"Calibri, \" : \"\"}sans-serif`], [\"monospace\", `${isWindows && isFirefox ? \"Lucida Console, \" : \"\"}monospace`]]));\n    }\n    render() {\n      const pump = () => {\n        this.#reader.read().then(({\n          value,\n          done\n        }) => {\n          if (done) {\n            this.#capability.resolve();\n            return;\n          }\n          this.#lang ??= value.lang;\n          Object.assign(this.#styleCache, value.styles);\n          this.#processItems(value.items);\n          pump();\n        }, this.#capability.reject);\n      };\n      this.#reader = this.#textContentSource.getReader();\n      TextLayer.#pendingTextLayers.add(this);\n      pump();\n      return this.#capability.promise;\n    }\n    update({\n      viewport,\n      onBefore = null\n    }) {\n      const scale = viewport.scale * (globalThis.devicePixelRatio || 1);\n      const rotation = viewport.rotation;\n      if (rotation !== this.#rotation) {\n        onBefore?.();\n        this.#rotation = rotation;\n        setLayerDimensions(this.#rootContainer, {\n          rotation\n        });\n      }\n      if (scale !== this.#scale) {\n        onBefore?.();\n        this.#scale = scale;\n        const params = {\n          div: null,\n          properties: null,\n          ctx: TextLayer.#getCtx(this.#lang)\n        };\n        for (const div of this.#textDivs) {\n          params.properties = this.#textDivProperties.get(div);\n          params.div = div;\n          this.#layout(params);\n        }\n      }\n    }\n    cancel() {\n      const abortEx = new AbortException(\"TextLayer task cancelled.\");\n      this.#reader?.cancel(abortEx).catch(() => {});\n      this.#reader = null;\n      this.#capability.reject(abortEx);\n    }\n    get textDivs() {\n      return this.#textDivs;\n    }\n    get textContentItemsStr() {\n      return this.#textContentItemsStr;\n    }\n    #processItems(items) {\n      if (this.#disableProcessItems) {\n        return;\n      }\n      this.#layoutTextParams.ctx ??= TextLayer.#getCtx(this.#lang);\n      const textDivs = this.#textDivs,\n        textContentItemsStr = this.#textContentItemsStr;\n      for (const item of items) {\n        if (textDivs.length > MAX_TEXT_DIVS_TO_RENDER) {\n          warn(\"Ignoring additional textDivs for performance reasons.\");\n          this.#disableProcessItems = true;\n          return;\n        }\n        if (item.str === undefined) {\n          if (item.type === \"beginMarkedContentProps\" || item.type === \"beginMarkedContent\") {\n            const parent = this.#container;\n            this.#container = document.createElement(\"span\");\n            this.#container.classList.add(\"markedContent\");\n            if (item.id !== null) {\n              this.#container.setAttribute(\"id\", `${item.id}`);\n            }\n            parent.append(this.#container);\n          } else if (item.type === \"endMarkedContent\") {\n            this.#container = this.#container.parentNode;\n          }\n          continue;\n        }\n        textContentItemsStr.push(item.str);\n        this.#appendText(item);\n      }\n    }\n    #appendText(geom) {\n      const textDiv = document.createElement(\"span\");\n      const textDivProperties = {\n        angle: 0,\n        canvasWidth: 0,\n        hasText: geom.str !== \"\",\n        hasEOL: geom.hasEOL,\n        fontSize: 0\n      };\n      this.#textDivs.push(textDiv);\n      const tx = Util.transform(this.#transform, geom.transform);\n      let angle = Math.atan2(tx[1], tx[0]);\n      const style = this.#styleCache[geom.fontName];\n      if (style.vertical) {\n        angle += Math.PI / 2;\n      }\n      let fontFamily = this.#fontInspectorEnabled && style.fontSubstitution || style.fontFamily;\n      fontFamily = TextLayer.fontFamilyMap.get(fontFamily) || fontFamily;\n      const fontHeight = Math.hypot(tx[2], tx[3]);\n      const fontAscent = fontHeight * TextLayer.#getAscent(fontFamily, this.#lang);\n      let left, top;\n      if (angle === 0) {\n        left = tx[4];\n        top = tx[5] - fontAscent;\n      } else {\n        left = tx[4] + fontAscent * Math.sin(angle);\n        top = tx[5] - fontAscent * Math.cos(angle);\n      }\n      const scaleFactorStr = \"calc(var(--scale-factor)*\";\n      const divStyle = textDiv.style;\n      if (this.#container === this.#rootContainer) {\n        divStyle.left = `${(100 * left / this.#pageWidth).toFixed(2)}%`;\n        divStyle.top = `${(100 * top / this.#pageHeight).toFixed(2)}%`;\n      } else {\n        divStyle.left = `${scaleFactorStr}${left.toFixed(2)}px)`;\n        divStyle.top = `${scaleFactorStr}${top.toFixed(2)}px)`;\n      }\n      divStyle.fontSize = `${scaleFactorStr}${(TextLayer.#minFontSize * fontHeight).toFixed(2)}px)`;\n      divStyle.fontFamily = fontFamily;\n      textDivProperties.fontSize = fontHeight;\n      textDiv.setAttribute(\"role\", \"presentation\");\n      textDiv.textContent = geom.str;\n      textDiv.dir = geom.dir;\n      if (this.#fontInspectorEnabled) {\n        textDiv.dataset.fontName = style.fontSubstitutionLoadedName || geom.fontName;\n      }\n      if (angle !== 0) {\n        textDivProperties.angle = angle * (180 / Math.PI);\n      }\n      let shouldScaleText = false;\n      if (geom.str.length > 1) {\n        shouldScaleText = true;\n      } else if (geom.str !== \" \" && geom.transform[0] !== geom.transform[3]) {\n        const absScaleX = Math.abs(geom.transform[0]),\n          absScaleY = Math.abs(geom.transform[3]);\n        if (absScaleX !== absScaleY && Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5) {\n          shouldScaleText = true;\n        }\n      }\n      if (shouldScaleText) {\n        textDivProperties.canvasWidth = style.vertical ? geom.height : geom.width;\n      }\n      this.#textDivProperties.set(textDiv, textDivProperties);\n      this.#layoutTextParams.div = textDiv;\n      this.#layoutTextParams.properties = textDivProperties;\n      this.#layout(this.#layoutTextParams);\n      if (textDivProperties.hasText) {\n        this.#container.append(textDiv);\n      }\n      if (textDivProperties.hasEOL) {\n        const br = document.createElement(\"br\");\n        br.setAttribute(\"role\", \"presentation\");\n        this.#container.append(br);\n      }\n    }\n    #layout(params) {\n      const {\n        div,\n        properties,\n        ctx\n      } = params;\n      const {\n        style\n      } = div;\n      let transform = \"\";\n      if (TextLayer.#minFontSize > 1) {\n        transform = `scale(${1 / TextLayer.#minFontSize})`;\n      }\n      if (properties.canvasWidth !== 0 && properties.hasText) {\n        const {\n          fontFamily\n        } = style;\n        const {\n          canvasWidth,\n          fontSize\n        } = properties;\n        TextLayer.#ensureCtxFont(ctx, fontSize * this.#scale, fontFamily);\n        const {\n          width\n        } = ctx.measureText(div.textContent);\n        if (width > 0) {\n          transform = `scaleX(${canvasWidth * this.#scale / width}) ${transform}`;\n        }\n      }\n      if (properties.angle !== 0) {\n        transform = `rotate(${properties.angle}deg) ${transform}`;\n      }\n      if (transform.length > 0) {\n        style.transform = transform;\n      }\n    }\n    static cleanup() {\n      if (this.#pendingTextLayers.size > 0) {\n        return;\n      }\n      this.#ascentCache.clear();\n      for (const {\n        canvas\n      } of this.#canvasContexts.values()) {\n        canvas.remove();\n      }\n      this.#canvasContexts.clear();\n    }\n    static #getCtx(lang = null) {\n      let ctx = this.#canvasContexts.get(lang ||= \"\");\n      if (!ctx) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.className = \"hiddenCanvasElement\";\n        canvas.lang = lang;\n        document.body.append(canvas);\n        ctx = canvas.getContext(\"2d\", {\n          alpha: false,\n          willReadFrequently: true\n        });\n        this.#canvasContexts.set(lang, ctx);\n        this.#canvasCtxFonts.set(ctx, {\n          size: 0,\n          family: \"\"\n        });\n      }\n      return ctx;\n    }\n    static #ensureCtxFont(ctx, size, family) {\n      const cached = this.#canvasCtxFonts.get(ctx);\n      if (size === cached.size && family === cached.family) {\n        return;\n      }\n      ctx.font = `${size}px ${family}`;\n      cached.size = size;\n      cached.family = family;\n    }\n    static #ensureMinFontSizeComputed() {\n      if (this.#minFontSize !== null) {\n        return;\n      }\n      const div = document.createElement(\"div\");\n      div.style.opacity = 0;\n      div.style.lineHeight = 1;\n      div.style.fontSize = \"1px\";\n      div.style.position = \"absolute\";\n      div.textContent = \"X\";\n      document.body.append(div);\n      this.#minFontSize = div.getBoundingClientRect().height;\n      div.remove();\n    }\n    static #getAscent(fontFamily, lang) {\n      const cachedAscent = this.#ascentCache.get(fontFamily);\n      if (cachedAscent) {\n        return cachedAscent;\n      }\n      const ctx = this.#getCtx(lang);\n      ctx.canvas.width = ctx.canvas.height = DEFAULT_FONT_SIZE;\n      this.#ensureCtxFont(ctx, DEFAULT_FONT_SIZE, fontFamily);\n      const metrics = ctx.measureText(\"\");\n      let ascent = metrics.fontBoundingBoxAscent;\n      let descent = Math.abs(metrics.fontBoundingBoxDescent);\n      if (ascent) {\n        const ratio = ascent / (ascent + descent);\n        this.#ascentCache.set(fontFamily, ratio);\n        ctx.canvas.width = ctx.canvas.height = 0;\n        return ratio;\n      }\n      ctx.strokeStyle = \"red\";\n      ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n      ctx.strokeText(\"g\", 0, 0);\n      let pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n      descent = 0;\n      for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n        if (pixels[i] > 0) {\n          descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n          break;\n        }\n      }\n      ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n      ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n      pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n      ascent = 0;\n      for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n        if (pixels[i] > 0) {\n          ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n          break;\n        }\n      }\n      ctx.canvas.width = ctx.canvas.height = 0;\n      const ratio = ascent ? ascent / (ascent + descent) : DEFAULT_FONT_ASCENT;\n      this.#ascentCache.set(fontFamily, ratio);\n      return ratio;\n    }\n  }\n  class XfaText {\n    static textContent(xfa) {\n      const items = [];\n      const output = {\n        items,\n        styles: Object.create(null)\n      };\n      function walk(node) {\n        if (!node) {\n          return;\n        }\n        let str = null;\n        const name = node.name;\n        if (name === \"#text\") {\n          str = node.value;\n        } else if (!XfaText.shouldBuildText(name)) {\n          return;\n        } else if (node?.attributes?.textContent) {\n          str = node.attributes.textContent;\n        } else if (node.value) {\n          str = node.value;\n        }\n        if (str !== null) {\n          items.push({\n            str\n          });\n        }\n        if (!node.children) {\n          return;\n        }\n        for (const child of node.children) {\n          walk(child);\n        }\n      }\n      walk(xfa);\n      return output;\n    }\n    static shouldBuildText(name) {\n      return !(name === \"textarea\" || name === \"input\" || name === \"option\" || name === \"select\");\n    }\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  const DEFAULT_RANGE_CHUNK_SIZE = 65536;\n  const RENDERING_CANCELLED_TIMEOUT = 100;\n  const DELAYED_CLEANUP_TIMEOUT = 5000;\n  const DefaultCanvasFactory = isNodeJS ? NodeCanvasFactory : DOMCanvasFactory;\n  const DefaultCMapReaderFactory = isNodeJS ? NodeCMapReaderFactory : DOMCMapReaderFactory;\n  const DefaultFilterFactory = isNodeJS ? NodeFilterFactory : DOMFilterFactory;\n  const DefaultStandardFontDataFactory = isNodeJS ? NodeStandardFontDataFactory : DOMStandardFontDataFactory;\n  function getDocument(src = {}) {\n    if (typeof src === \"string\" || src instanceof URL) {\n      src = {\n        url: src\n      };\n    } else if (src instanceof ArrayBuffer || ArrayBuffer.isView(src)) {\n      src = {\n        data: src\n      };\n    }\n    const task = new PDFDocumentLoadingTask();\n    const {\n      docId\n    } = task;\n    const url = src.url ? getUrlProp(src.url) : null;\n    const data = src.data ? getDataProp(src.data) : null;\n    const httpHeaders = src.httpHeaders || null;\n    const withCredentials = src.withCredentials === true;\n    const password = src.password ?? null;\n    const rangeTransport = src.range instanceof PDFDataRangeTransport ? src.range : null;\n    const rangeChunkSize = Number.isInteger(src.rangeChunkSize) && src.rangeChunkSize > 0 ? src.rangeChunkSize : DEFAULT_RANGE_CHUNK_SIZE;\n    let worker = src.worker instanceof PDFWorker ? src.worker : null;\n    const verbosity = src.verbosity;\n    const docBaseUrl = typeof src.docBaseUrl === \"string\" && !isDataScheme(src.docBaseUrl) ? src.docBaseUrl : null;\n    const cMapUrl = typeof src.cMapUrl === \"string\" ? src.cMapUrl : null;\n    const cMapPacked = src.cMapPacked !== false;\n    const CMapReaderFactory = src.CMapReaderFactory || DefaultCMapReaderFactory;\n    const standardFontDataUrl = typeof src.standardFontDataUrl === \"string\" ? src.standardFontDataUrl : null;\n    const StandardFontDataFactory = src.StandardFontDataFactory || DefaultStandardFontDataFactory;\n    const ignoreErrors = src.stopAtErrors !== true;\n    const maxImageSize = Number.isInteger(src.maxImageSize) && src.maxImageSize > -1 ? src.maxImageSize : -1;\n    const isEvalSupported = src.isEvalSupported !== false;\n    const isOffscreenCanvasSupported = typeof src.isOffscreenCanvasSupported === \"boolean\" ? src.isOffscreenCanvasSupported : !isNodeJS;\n    const canvasMaxAreaInBytes = Number.isInteger(src.canvasMaxAreaInBytes) ? src.canvasMaxAreaInBytes : -1;\n    const disableFontFace = typeof src.disableFontFace === \"boolean\" ? src.disableFontFace : isNodeJS;\n    const fontExtraProperties = src.fontExtraProperties === true;\n    const enableXfa = src.enableXfa === true;\n    const ownerDocument = src.ownerDocument || globalThis.document;\n    const disableRange = src.disableRange === true;\n    const disableStream = src.disableStream === true;\n    const disableAutoFetch = src.disableAutoFetch === true;\n    const pdfBug = src.pdfBug === true;\n    const CanvasFactory = src.CanvasFactory || DefaultCanvasFactory;\n    const FilterFactory = src.FilterFactory || DefaultFilterFactory;\n    const enableHWA = src.enableHWA === true;\n    const length = rangeTransport ? rangeTransport.length : src.length ?? NaN;\n    const useSystemFonts = typeof src.useSystemFonts === \"boolean\" ? src.useSystemFonts : !isNodeJS && !disableFontFace;\n    const useWorkerFetch = typeof src.useWorkerFetch === \"boolean\" ? src.useWorkerFetch : CMapReaderFactory === DOMCMapReaderFactory && StandardFontDataFactory === DOMStandardFontDataFactory && cMapUrl && standardFontDataUrl && isValidFetchUrl(cMapUrl, document.baseURI) && isValidFetchUrl(standardFontDataUrl, document.baseURI);\n    if (src.canvasFactory) {\n      deprecated(\"`canvasFactory`-instance option, please use `CanvasFactory` instead.\");\n    }\n    if (src.filterFactory) {\n      deprecated(\"`filterFactory`-instance option, please use `FilterFactory` instead.\");\n    }\n    const styleElement = null;\n    setVerbosityLevel(verbosity);\n    const transportFactory = {\n      canvasFactory: new CanvasFactory({\n        ownerDocument,\n        enableHWA\n      }),\n      filterFactory: new FilterFactory({\n        docId,\n        ownerDocument\n      }),\n      cMapReaderFactory: useWorkerFetch ? null : new CMapReaderFactory({\n        baseUrl: cMapUrl,\n        isCompressed: cMapPacked\n      }),\n      standardFontDataFactory: useWorkerFetch ? null : new StandardFontDataFactory({\n        baseUrl: standardFontDataUrl\n      })\n    };\n    if (!worker) {\n      const workerParams = {\n        verbosity,\n        port: GlobalWorkerOptions.workerPort\n      };\n      worker = workerParams.port ? PDFWorker.fromPort(workerParams) : new PDFWorker(workerParams);\n      task._worker = worker;\n    }\n    const docParams = {\n      docId,\n      apiVersion: \"4.7.76\",\n      data,\n      password,\n      disableAutoFetch,\n      rangeChunkSize,\n      length,\n      docBaseUrl,\n      enableXfa,\n      evaluatorOptions: {\n        maxImageSize,\n        disableFontFace,\n        ignoreErrors,\n        isEvalSupported,\n        isOffscreenCanvasSupported,\n        canvasMaxAreaInBytes,\n        fontExtraProperties,\n        useSystemFonts,\n        cMapUrl: useWorkerFetch ? cMapUrl : null,\n        standardFontDataUrl: useWorkerFetch ? standardFontDataUrl : null\n      }\n    };\n    const transportParams = {\n      disableFontFace,\n      fontExtraProperties,\n      ownerDocument,\n      pdfBug,\n      styleElement,\n      loadingParams: {\n        disableAutoFetch,\n        enableXfa\n      }\n    };\n    worker.promise.then(function () {\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n      if (worker.destroyed) {\n        throw new Error(\"Worker was destroyed\");\n      }\n      const workerIdPromise = worker.messageHandler.sendWithPromise(\"GetDocRequest\", docParams, data ? [data.buffer] : null);\n      let networkStream;\n      if (rangeTransport) {\n        networkStream = new PDFDataTransportStream(rangeTransport, {\n          disableRange,\n          disableStream\n        });\n      } else if (!data) {\n        if (!url) {\n          throw new Error(\"getDocument - no `url` parameter provided.\");\n        }\n        let NetworkStream;\n        if (isNodeJS) {\n          const isFetchSupported = typeof fetch !== \"undefined\" && typeof Response !== \"undefined\" && \"body\" in Response.prototype;\n          NetworkStream = isFetchSupported && isValidFetchUrl(url) ? PDFFetchStream : PDFNodeStream;\n        } else {\n          NetworkStream = isValidFetchUrl(url) ? PDFFetchStream : PDFNetworkStream;\n        }\n        networkStream = new NetworkStream({\n          url,\n          length,\n          httpHeaders,\n          withCredentials,\n          rangeChunkSize,\n          disableRange,\n          disableStream\n        });\n      }\n      return workerIdPromise.then(workerId => {\n        if (task.destroyed) {\n          throw new Error(\"Loading aborted\");\n        }\n        if (worker.destroyed) {\n          throw new Error(\"Worker was destroyed\");\n        }\n        const messageHandler = new MessageHandler(docId, workerId, worker.port);\n        const transport = new WorkerTransport(messageHandler, task, networkStream, transportParams, transportFactory);\n        task._transport = transport;\n        messageHandler.send(\"Ready\", null);\n      });\n    }).catch(task._capability.reject);\n    return task;\n  }\n  function getUrlProp(val) {\n    if (val instanceof URL) {\n      return val.href;\n    }\n    try {\n      return new URL(val, window.location).href;\n    } catch {\n      if (isNodeJS && typeof val === \"string\") {\n        return val;\n      }\n    }\n    throw new Error(\"Invalid PDF url data: \" + \"either string or URL-object is expected in the url property.\");\n  }\n  function getDataProp(val) {\n    if (isNodeJS && typeof _polyfillNode_buffer.Buffer !== \"undefined\" && val instanceof _polyfillNode_buffer.Buffer) {\n      throw new Error(\"Please provide binary data as `Uint8Array`, rather than `Buffer`.\");\n    }\n    if (val instanceof Uint8Array && val.byteLength === val.buffer.byteLength) {\n      return val;\n    }\n    if (typeof val === \"string\") {\n      return stringToBytes(val);\n    }\n    if (val instanceof ArrayBuffer || ArrayBuffer.isView(val) || typeof val === \"object\" && !isNaN(val?.length)) {\n      return new Uint8Array(val);\n    }\n    throw new Error(\"Invalid PDF binary data: either TypedArray, \" + \"string, or array-like object is expected in the data property.\");\n  }\n  function isRefProxy(ref) {\n    return typeof ref === \"object\" && Number.isInteger(ref?.num) && ref.num >= 0 && Number.isInteger(ref?.gen) && ref.gen >= 0;\n  }\n  class PDFDocumentLoadingTask {\n    static #docId = 0;\n    constructor() {\n      this._capability = Promise.withResolvers();\n      this._transport = null;\n      this._worker = null;\n      this.docId = `d${PDFDocumentLoadingTask.#docId++}`;\n      this.destroyed = false;\n      this.onPassword = null;\n      this.onProgress = null;\n    }\n    get promise() {\n      return this._capability.promise;\n    }\n    async destroy() {\n      this.destroyed = true;\n      try {\n        if (this._worker?.port) {\n          this._worker._pendingDestroy = true;\n        }\n        await this._transport?.destroy();\n      } catch (ex) {\n        if (this._worker?.port) {\n          delete this._worker._pendingDestroy;\n        }\n        throw ex;\n      }\n      this._transport = null;\n      if (this._worker) {\n        this._worker.destroy();\n        this._worker = null;\n      }\n    }\n  }\n  class PDFDataRangeTransport {\n    constructor(length, initialData, progressiveDone = false, contentDispositionFilename = null) {\n      this.length = length;\n      this.initialData = initialData;\n      this.progressiveDone = progressiveDone;\n      this.contentDispositionFilename = contentDispositionFilename;\n      this._rangeListeners = [];\n      this._progressListeners = [];\n      this._progressiveReadListeners = [];\n      this._progressiveDoneListeners = [];\n      this._readyCapability = Promise.withResolvers();\n    }\n    addRangeListener(listener) {\n      this._rangeListeners.push(listener);\n    }\n    addProgressListener(listener) {\n      this._progressListeners.push(listener);\n    }\n    addProgressiveReadListener(listener) {\n      this._progressiveReadListeners.push(listener);\n    }\n    addProgressiveDoneListener(listener) {\n      this._progressiveDoneListeners.push(listener);\n    }\n    onDataRange(begin, chunk) {\n      for (const listener of this._rangeListeners) {\n        listener(begin, chunk);\n      }\n    }\n    onDataProgress(loaded, total) {\n      this._readyCapability.promise.then(() => {\n        for (const listener of this._progressListeners) {\n          listener(loaded, total);\n        }\n      });\n    }\n    onDataProgressiveRead(chunk) {\n      this._readyCapability.promise.then(() => {\n        for (const listener of this._progressiveReadListeners) {\n          listener(chunk);\n        }\n      });\n    }\n    onDataProgressiveDone() {\n      this._readyCapability.promise.then(() => {\n        for (const listener of this._progressiveDoneListeners) {\n          listener();\n        }\n      });\n    }\n    transportReady() {\n      this._readyCapability.resolve();\n    }\n    requestDataRange(begin, end) {\n      unreachable(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n    }\n    abort() {}\n  }\n  class PDFDocumentProxy {\n    constructor(pdfInfo, transport) {\n      this._pdfInfo = pdfInfo;\n      this._transport = transport;\n    }\n    get annotationStorage() {\n      return this._transport.annotationStorage;\n    }\n    get canvasFactory() {\n      return this._transport.canvasFactory;\n    }\n    get filterFactory() {\n      return this._transport.filterFactory;\n    }\n    get numPages() {\n      return this._pdfInfo.numPages;\n    }\n    get fingerprints() {\n      return this._pdfInfo.fingerprints;\n    }\n    get isPureXfa() {\n      return shadow(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n    }\n    get allXfaHtml() {\n      return this._transport._htmlForXfa;\n    }\n    getPage(pageNumber) {\n      return this._transport.getPage(pageNumber);\n    }\n    getPageIndex(ref) {\n      return this._transport.getPageIndex(ref);\n    }\n    getDestinations() {\n      return this._transport.getDestinations();\n    }\n    getDestination(id) {\n      return this._transport.getDestination(id);\n    }\n    getPageLabels() {\n      return this._transport.getPageLabels();\n    }\n    getPageLayout() {\n      return this._transport.getPageLayout();\n    }\n    getPageMode() {\n      return this._transport.getPageMode();\n    }\n    getViewerPreferences() {\n      return this._transport.getViewerPreferences();\n    }\n    getOpenAction() {\n      return this._transport.getOpenAction();\n    }\n    getAttachments() {\n      return this._transport.getAttachments();\n    }\n    getJSActions() {\n      return this._transport.getDocJSActions();\n    }\n    getOutline() {\n      return this._transport.getOutline();\n    }\n    getOptionalContentConfig({\n      intent = \"display\"\n    } = {}) {\n      const {\n        renderingIntent\n      } = this._transport.getRenderingIntent(intent);\n      return this._transport.getOptionalContentConfig(renderingIntent);\n    }\n    getPermissions() {\n      return this._transport.getPermissions();\n    }\n    getMetadata() {\n      return this._transport.getMetadata();\n    }\n    getMarkInfo() {\n      return this._transport.getMarkInfo();\n    }\n    getData() {\n      return this._transport.getData();\n    }\n    saveDocument() {\n      return this._transport.saveDocument();\n    }\n    getDownloadInfo() {\n      return this._transport.downloadInfoCapability.promise;\n    }\n    cleanup(keepLoadedFonts = false) {\n      return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n    }\n    destroy() {\n      return this.loadingTask.destroy();\n    }\n    cachedPageNumber(ref) {\n      return this._transport.cachedPageNumber(ref);\n    }\n    get loadingParams() {\n      return this._transport.loadingParams;\n    }\n    get loadingTask() {\n      return this._transport.loadingTask;\n    }\n    getFieldObjects() {\n      return this._transport.getFieldObjects();\n    }\n    hasJSActions() {\n      return this._transport.hasJSActions();\n    }\n    getCalculationOrderIds() {\n      return this._transport.getCalculationOrderIds();\n    }\n  }\n  class PDFPageProxy {\n    #delayedCleanupTimeout = null;\n    #pendingCleanup = false;\n    constructor(pageIndex, pageInfo, transport, pdfBug = false) {\n      this._pageIndex = pageIndex;\n      this._pageInfo = pageInfo;\n      this._transport = transport;\n      this._stats = pdfBug ? new StatTimer() : null;\n      this._pdfBug = pdfBug;\n      this.commonObjs = transport.commonObjs;\n      this.objs = new PDFObjects();\n      this._maybeCleanupAfterRender = false;\n      this._intentStates = new Map();\n      this.destroyed = false;\n    }\n    get pageNumber() {\n      return this._pageIndex + 1;\n    }\n    get rotate() {\n      return this._pageInfo.rotate;\n    }\n    get ref() {\n      return this._pageInfo.ref;\n    }\n    get userUnit() {\n      return this._pageInfo.userUnit;\n    }\n    get view() {\n      return this._pageInfo.view;\n    }\n    getViewport({\n      scale,\n      rotation = this.rotate,\n      offsetX = 0,\n      offsetY = 0,\n      dontFlip = false\n    } = {}) {\n      return new PageViewport({\n        viewBox: this.view,\n        scale,\n        rotation,\n        offsetX,\n        offsetY,\n        dontFlip\n      });\n    }\n    getAnnotations({\n      intent = \"display\"\n    } = {}) {\n      const {\n        renderingIntent\n      } = this._transport.getRenderingIntent(intent);\n      return this._transport.getAnnotations(this._pageIndex, renderingIntent);\n    }\n    getJSActions() {\n      return this._transport.getPageJSActions(this._pageIndex);\n    }\n    get filterFactory() {\n      return this._transport.filterFactory;\n    }\n    get isPureXfa() {\n      return shadow(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n    }\n    async getXfa() {\n      return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n    }\n    render({\n      canvasContext,\n      viewport,\n      intent = \"display\",\n      annotationMode = AnnotationMode.ENABLE,\n      transform = null,\n      background = null,\n      optionalContentConfigPromise = null,\n      annotationCanvasMap = null,\n      pageColors = null,\n      printAnnotationStorage = null,\n      isEditing = false\n    }) {\n      this._stats?.time(\"Overall\");\n      const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage, isEditing);\n      const {\n        renderingIntent,\n        cacheKey\n      } = intentArgs;\n      this.#pendingCleanup = false;\n      this.#abortDelayedCleanup();\n      optionalContentConfigPromise ||= this._transport.getOptionalContentConfig(renderingIntent);\n      let intentState = this._intentStates.get(cacheKey);\n      if (!intentState) {\n        intentState = Object.create(null);\n        this._intentStates.set(cacheKey, intentState);\n      }\n      if (intentState.streamReaderCancelTimeout) {\n        clearTimeout(intentState.streamReaderCancelTimeout);\n        intentState.streamReaderCancelTimeout = null;\n      }\n      const intentPrint = !!(renderingIntent & RenderingIntentFlag.PRINT);\n      if (!intentState.displayReadyCapability) {\n        intentState.displayReadyCapability = Promise.withResolvers();\n        intentState.operatorList = {\n          fnArray: [],\n          argsArray: [],\n          lastChunk: false,\n          separateAnnots: null\n        };\n        this._stats?.time(\"Page Request\");\n        this._pumpOperatorList(intentArgs);\n      }\n      const complete = error => {\n        intentState.renderTasks.delete(internalRenderTask);\n        if (this._maybeCleanupAfterRender || intentPrint) {\n          this.#pendingCleanup = true;\n        }\n        this.#tryCleanup(!intentPrint);\n        if (error) {\n          internalRenderTask.capability.reject(error);\n          this._abortOperatorList({\n            intentState,\n            reason: error instanceof Error ? error : new Error(error)\n          });\n        } else {\n          internalRenderTask.capability.resolve();\n        }\n        if (this._stats) {\n          this._stats.timeEnd(\"Rendering\");\n          this._stats.timeEnd(\"Overall\");\n          if (globalThis.Stats?.enabled) {\n            globalThis.Stats.add(this.pageNumber, this._stats);\n          }\n        }\n      };\n      const internalRenderTask = new InternalRenderTask({\n        callback: complete,\n        params: {\n          canvasContext,\n          viewport,\n          transform,\n          background\n        },\n        objs: this.objs,\n        commonObjs: this.commonObjs,\n        annotationCanvasMap,\n        operatorList: intentState.operatorList,\n        pageIndex: this._pageIndex,\n        canvasFactory: this._transport.canvasFactory,\n        filterFactory: this._transport.filterFactory,\n        useRequestAnimationFrame: !intentPrint,\n        pdfBug: this._pdfBug,\n        pageColors\n      });\n      (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n      const renderTask = internalRenderTask.task;\n      Promise.all([intentState.displayReadyCapability.promise, optionalContentConfigPromise]).then(([transparency, optionalContentConfig]) => {\n        if (this.destroyed) {\n          complete();\n          return;\n        }\n        this._stats?.time(\"Rendering\");\n        if (!(optionalContentConfig.renderingIntent & renderingIntent)) {\n          throw new Error(\"Must use the same `intent`-argument when calling the `PDFPageProxy.render` \" + \"and `PDFDocumentProxy.getOptionalContentConfig` methods.\");\n        }\n        internalRenderTask.initializeGraphics({\n          transparency,\n          optionalContentConfig\n        });\n        internalRenderTask.operatorListChanged();\n      }).catch(complete);\n      return renderTask;\n    }\n    getOperatorList({\n      intent = \"display\",\n      annotationMode = AnnotationMode.ENABLE,\n      printAnnotationStorage = null,\n      isEditing = false\n    } = {}) {\n      function operatorListChanged() {\n        if (intentState.operatorList.lastChunk) {\n          intentState.opListReadCapability.resolve(intentState.operatorList);\n          intentState.renderTasks.delete(opListTask);\n        }\n      }\n      const intentArgs = this._transport.getRenderingIntent(intent, annotationMode, printAnnotationStorage, isEditing, true);\n      let intentState = this._intentStates.get(intentArgs.cacheKey);\n      if (!intentState) {\n        intentState = Object.create(null);\n        this._intentStates.set(intentArgs.cacheKey, intentState);\n      }\n      let opListTask;\n      if (!intentState.opListReadCapability) {\n        opListTask = Object.create(null);\n        opListTask.operatorListChanged = operatorListChanged;\n        intentState.opListReadCapability = Promise.withResolvers();\n        (intentState.renderTasks ||= new Set()).add(opListTask);\n        intentState.operatorList = {\n          fnArray: [],\n          argsArray: [],\n          lastChunk: false,\n          separateAnnots: null\n        };\n        this._stats?.time(\"Page Request\");\n        this._pumpOperatorList(intentArgs);\n      }\n      return intentState.opListReadCapability.promise;\n    }\n    streamTextContent({\n      includeMarkedContent = false,\n      disableNormalization = false\n    } = {}) {\n      const TEXT_CONTENT_CHUNK_SIZE = 100;\n      return this._transport.messageHandler.sendWithStream(\"GetTextContent\", {\n        pageIndex: this._pageIndex,\n        includeMarkedContent: includeMarkedContent === true,\n        disableNormalization: disableNormalization === true\n      }, {\n        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n        size(textContent) {\n          return textContent.items.length;\n        }\n      });\n    }\n    getTextContent(params = {}) {\n      if (this._transport._htmlForXfa) {\n        return this.getXfa().then(xfa => XfaText.textContent(xfa));\n      }\n      const readableStream = this.streamTextContent(params);\n      return new Promise(function (resolve, reject) {\n        function pump() {\n          reader.read().then(function ({\n            value,\n            done\n          }) {\n            if (done) {\n              resolve(textContent);\n              return;\n            }\n            textContent.lang ??= value.lang;\n            Object.assign(textContent.styles, value.styles);\n            textContent.items.push(...value.items);\n            pump();\n          }, reject);\n        }\n        const reader = readableStream.getReader();\n        const textContent = {\n          items: [],\n          styles: Object.create(null),\n          lang: null\n        };\n        pump();\n      });\n    }\n    getStructTree() {\n      return this._transport.getStructTree(this._pageIndex);\n    }\n    _destroy() {\n      this.destroyed = true;\n      const waitOn = [];\n      for (const intentState of this._intentStates.values()) {\n        this._abortOperatorList({\n          intentState,\n          reason: new Error(\"Page was destroyed.\"),\n          force: true\n        });\n        if (intentState.opListReadCapability) {\n          continue;\n        }\n        for (const internalRenderTask of intentState.renderTasks) {\n          waitOn.push(internalRenderTask.completed);\n          internalRenderTask.cancel();\n        }\n      }\n      this.objs.clear();\n      this.#pendingCleanup = false;\n      this.#abortDelayedCleanup();\n      return Promise.all(waitOn);\n    }\n    cleanup(resetStats = false) {\n      this.#pendingCleanup = true;\n      const success = this.#tryCleanup(false);\n      if (resetStats && success) {\n        this._stats &&= new StatTimer();\n      }\n      return success;\n    }\n    #tryCleanup(delayed = false) {\n      this.#abortDelayedCleanup();\n      if (!this.#pendingCleanup || this.destroyed) {\n        return false;\n      }\n      if (delayed) {\n        this.#delayedCleanupTimeout = setTimeout(() => {\n          this.#delayedCleanupTimeout = null;\n          this.#tryCleanup(false);\n        }, DELAYED_CLEANUP_TIMEOUT);\n        return false;\n      }\n      for (const {\n        renderTasks,\n        operatorList\n      } of this._intentStates.values()) {\n        if (renderTasks.size > 0 || !operatorList.lastChunk) {\n          return false;\n        }\n      }\n      this._intentStates.clear();\n      this.objs.clear();\n      this.#pendingCleanup = false;\n      return true;\n    }\n    #abortDelayedCleanup() {\n      if (this.#delayedCleanupTimeout) {\n        clearTimeout(this.#delayedCleanupTimeout);\n        this.#delayedCleanupTimeout = null;\n      }\n    }\n    _startRenderPage(transparency, cacheKey) {\n      const intentState = this._intentStates.get(cacheKey);\n      if (!intentState) {\n        return;\n      }\n      this._stats?.timeEnd(\"Page Request\");\n      intentState.displayReadyCapability?.resolve(transparency);\n    }\n    _renderPageChunk(operatorListChunk, intentState) {\n      for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n        intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n        intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n      }\n      intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n      intentState.operatorList.separateAnnots = operatorListChunk.separateAnnots;\n      for (const internalRenderTask of intentState.renderTasks) {\n        internalRenderTask.operatorListChanged();\n      }\n      if (operatorListChunk.lastChunk) {\n        this.#tryCleanup(true);\n      }\n    }\n    _pumpOperatorList({\n      renderingIntent,\n      cacheKey,\n      annotationStorageSerializable,\n      modifiedIds\n    }) {\n      const {\n        map,\n        transfer\n      } = annotationStorageSerializable;\n      const readableStream = this._transport.messageHandler.sendWithStream(\"GetOperatorList\", {\n        pageIndex: this._pageIndex,\n        intent: renderingIntent,\n        cacheKey,\n        annotationStorage: map,\n        modifiedIds\n      }, transfer);\n      const reader = readableStream.getReader();\n      const intentState = this._intentStates.get(cacheKey);\n      intentState.streamReader = reader;\n      const pump = () => {\n        reader.read().then(({\n          value,\n          done\n        }) => {\n          if (done) {\n            intentState.streamReader = null;\n            return;\n          }\n          if (this._transport.destroyed) {\n            return;\n          }\n          this._renderPageChunk(value, intentState);\n          pump();\n        }, reason => {\n          intentState.streamReader = null;\n          if (this._transport.destroyed) {\n            return;\n          }\n          if (intentState.operatorList) {\n            intentState.operatorList.lastChunk = true;\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n            this.#tryCleanup(true);\n          }\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.reject(reason);\n          } else if (intentState.opListReadCapability) {\n            intentState.opListReadCapability.reject(reason);\n          } else {\n            throw reason;\n          }\n        });\n      };\n      pump();\n    }\n    _abortOperatorList({\n      intentState,\n      reason,\n      force = false\n    }) {\n      if (!intentState.streamReader) {\n        return;\n      }\n      if (intentState.streamReaderCancelTimeout) {\n        clearTimeout(intentState.streamReaderCancelTimeout);\n        intentState.streamReaderCancelTimeout = null;\n      }\n      if (!force) {\n        if (intentState.renderTasks.size > 0) {\n          return;\n        }\n        if (reason instanceof RenderingCancelledException) {\n          let delay = RENDERING_CANCELLED_TIMEOUT;\n          if (reason.extraDelay > 0 && reason.extraDelay < 1000) {\n            delay += reason.extraDelay;\n          }\n          intentState.streamReaderCancelTimeout = setTimeout(() => {\n            intentState.streamReaderCancelTimeout = null;\n            this._abortOperatorList({\n              intentState,\n              reason,\n              force: true\n            });\n          }, delay);\n          return;\n        }\n      }\n      intentState.streamReader.cancel(new AbortException(reason.message)).catch(() => {});\n      intentState.streamReader = null;\n      if (this._transport.destroyed) {\n        return;\n      }\n      for (const [curCacheKey, curIntentState] of this._intentStates) {\n        if (curIntentState === intentState) {\n          this._intentStates.delete(curCacheKey);\n          break;\n        }\n      }\n      this.cleanup();\n    }\n    get stats() {\n      return this._stats;\n    }\n  }\n  class LoopbackPort {\n    #listeners = new Set();\n    #deferred = Promise.resolve();\n    postMessage(obj, transfer) {\n      const event = {\n        data: structuredClone(obj, transfer ? {\n          transfer\n        } : null)\n      };\n      this.#deferred.then(() => {\n        for (const listener of this.#listeners) {\n          listener.call(this, event);\n        }\n      });\n    }\n    addEventListener(name, listener) {\n      this.#listeners.add(listener);\n    }\n    removeEventListener(name, listener) {\n      this.#listeners.delete(listener);\n    }\n    terminate() {\n      this.#listeners.clear();\n    }\n  }\n  class PDFWorker {\n    static #fakeWorkerId = 0;\n    static #isWorkerDisabled = false;\n    static #workerPorts;\n    static {\n      if (isNodeJS) {\n        this.#isWorkerDisabled = true;\n        GlobalWorkerOptions.workerSrc ||= \"./pdf.worker.mjs\";\n      }\n      this._isSameOrigin = (baseUrl, otherUrl) => {\n        let base;\n        try {\n          base = new URL(baseUrl);\n          if (!base.origin || base.origin === \"null\") {\n            return false;\n          }\n        } catch {\n          return false;\n        }\n        const other = new URL(otherUrl, base);\n        return base.origin === other.origin;\n      };\n      this._createCDNWrapper = url => {\n        const wrapper = `await import(\"${url}\");`;\n        return URL.createObjectURL(new Blob([wrapper], {\n          type: \"text/javascript\"\n        }));\n      };\n    }\n    constructor({\n      name = null,\n      port = null,\n      verbosity = getVerbosityLevel()\n    } = {}) {\n      this.name = name;\n      this.destroyed = false;\n      this.verbosity = verbosity;\n      this._readyCapability = Promise.withResolvers();\n      this._port = null;\n      this._webWorker = null;\n      this._messageHandler = null;\n      if (port) {\n        if (PDFWorker.#workerPorts?.has(port)) {\n          throw new Error(\"Cannot use more than one PDFWorker per port.\");\n        }\n        (PDFWorker.#workerPorts ||= new WeakMap()).set(port, this);\n        this._initializeFromPort(port);\n        return;\n      }\n      this._initialize();\n    }\n    get promise() {\n      if (isNodeJS) {\n        return Promise.all([NodePackages.promise, this._readyCapability.promise]);\n      }\n      return this._readyCapability.promise;\n    }\n    #resolve() {\n      this._readyCapability.resolve();\n      this._messageHandler.send(\"configure\", {\n        verbosity: this.verbosity\n      });\n    }\n    get port() {\n      return this._port;\n    }\n    get messageHandler() {\n      return this._messageHandler;\n    }\n    _initializeFromPort(port) {\n      this._port = port;\n      this._messageHandler = new MessageHandler(\"main\", \"worker\", port);\n      this._messageHandler.on(\"ready\", function () {});\n      this.#resolve();\n    }\n    _initialize() {\n      if (PDFWorker.#isWorkerDisabled || PDFWorker.#mainThreadWorkerMessageHandler) {\n        this._setupFakeWorker();\n        return;\n      }\n      let {\n        workerSrc\n      } = PDFWorker;\n      try {\n        if (!PDFWorker._isSameOrigin(window.location.href, workerSrc)) {\n          workerSrc = PDFWorker._createCDNWrapper(new URL(workerSrc, window.location).href);\n        }\n        const worker = new Worker(workerSrc, {\n          type: \"module\"\n        });\n        const messageHandler = new MessageHandler(\"main\", \"worker\", worker);\n        const terminateEarly = () => {\n          ac.abort();\n          messageHandler.destroy();\n          worker.terminate();\n          if (this.destroyed) {\n            this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          } else {\n            this._setupFakeWorker();\n          }\n        };\n        const ac = new AbortController();\n        worker.addEventListener(\"error\", () => {\n          if (!this._webWorker) {\n            terminateEarly();\n          }\n        }, {\n          signal: ac.signal\n        });\n        messageHandler.on(\"test\", data => {\n          ac.abort();\n          if (this.destroyed || !data) {\n            terminateEarly();\n            return;\n          }\n          this._messageHandler = messageHandler;\n          this._port = worker;\n          this._webWorker = worker;\n          this.#resolve();\n        });\n        messageHandler.on(\"ready\", data => {\n          ac.abort();\n          if (this.destroyed) {\n            terminateEarly();\n            return;\n          }\n          try {\n            sendTest();\n          } catch {\n            this._setupFakeWorker();\n          }\n        });\n        const sendTest = () => {\n          const testObj = new Uint8Array();\n          messageHandler.send(\"test\", testObj, [testObj.buffer]);\n        };\n        sendTest();\n        return;\n      } catch {\n        info(\"The worker has been disabled.\");\n      }\n      this._setupFakeWorker();\n    }\n    _setupFakeWorker() {\n      if (!PDFWorker.#isWorkerDisabled) {\n        warn(\"Setting up fake worker.\");\n        PDFWorker.#isWorkerDisabled = true;\n      }\n      PDFWorker._setupFakeWorkerGlobal.then(WorkerMessageHandler => {\n        if (this.destroyed) {\n          this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          return;\n        }\n        const port = new LoopbackPort();\n        this._port = port;\n        const id = `fake${PDFWorker.#fakeWorkerId++}`;\n        const workerHandler = new MessageHandler(id + \"_worker\", id, port);\n        WorkerMessageHandler.setup(workerHandler, port);\n        this._messageHandler = new MessageHandler(id, id + \"_worker\", port);\n        this.#resolve();\n      }).catch(reason => {\n        this._readyCapability.reject(new Error(`Setting up fake worker failed: \"${reason.message}\".`));\n      });\n    }\n    destroy() {\n      this.destroyed = true;\n      if (this._webWorker) {\n        this._webWorker.terminate();\n        this._webWorker = null;\n      }\n      PDFWorker.#workerPorts?.delete(this._port);\n      this._port = null;\n      if (this._messageHandler) {\n        this._messageHandler.destroy();\n        this._messageHandler = null;\n      }\n    }\n    static fromPort(params) {\n      if (!params?.port) {\n        throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n      }\n      const cachedPort = this.#workerPorts?.get(params.port);\n      if (cachedPort) {\n        if (cachedPort._pendingDestroy) {\n          throw new Error(\"PDFWorker.fromPort - the worker is being destroyed.\\n\" + \"Please remember to await `PDFDocumentLoadingTask.destroy()`-calls.\");\n        }\n        return cachedPort;\n      }\n      return new PDFWorker(params);\n    }\n    static get workerSrc() {\n      if (GlobalWorkerOptions.workerSrc) {\n        return GlobalWorkerOptions.workerSrc;\n      }\n      throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n    }\n    static get #mainThreadWorkerMessageHandler() {\n      try {\n        return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n      } catch {\n        return null;\n      }\n    }\n    static get _setupFakeWorkerGlobal() {\n      const loader = async () => {\n        if (this.#mainThreadWorkerMessageHandler) {\n          return this.#mainThreadWorkerMessageHandler;\n        }\n        const worker = await import(/*webpackIgnore: true*/this.workerSrc);\n        return worker.WorkerMessageHandler;\n      };\n      return shadow(this, \"_setupFakeWorkerGlobal\", loader());\n    }\n  }\n  class WorkerTransport {\n    #methodPromises = new Map();\n    #pageCache = new Map();\n    #pagePromises = new Map();\n    #pageRefCache = new Map();\n    #passwordCapability = null;\n    constructor(messageHandler, loadingTask, networkStream, params, factory) {\n      this.messageHandler = messageHandler;\n      this.loadingTask = loadingTask;\n      this.commonObjs = new PDFObjects();\n      this.fontLoader = new FontLoader({\n        ownerDocument: params.ownerDocument,\n        styleElement: params.styleElement\n      });\n      this.loadingParams = params.loadingParams;\n      this._params = params;\n      this.canvasFactory = factory.canvasFactory;\n      this.filterFactory = factory.filterFactory;\n      this.cMapReaderFactory = factory.cMapReaderFactory;\n      this.standardFontDataFactory = factory.standardFontDataFactory;\n      this.destroyed = false;\n      this.destroyCapability = null;\n      this._networkStream = networkStream;\n      this._fullReader = null;\n      this._lastProgress = null;\n      this.downloadInfoCapability = Promise.withResolvers();\n      this.setupMessageHandler();\n    }\n    #cacheSimpleMethod(name, data = null) {\n      const cachedPromise = this.#methodPromises.get(name);\n      if (cachedPromise) {\n        return cachedPromise;\n      }\n      const promise = this.messageHandler.sendWithPromise(name, data);\n      this.#methodPromises.set(name, promise);\n      return promise;\n    }\n    get annotationStorage() {\n      return shadow(this, \"annotationStorage\", new AnnotationStorage());\n    }\n    getRenderingIntent(intent, annotationMode = AnnotationMode.ENABLE, printAnnotationStorage = null, isEditing = false, isOpList = false) {\n      let renderingIntent = RenderingIntentFlag.DISPLAY;\n      let annotationStorageSerializable = SerializableEmpty;\n      switch (intent) {\n        case \"any\":\n          renderingIntent = RenderingIntentFlag.ANY;\n          break;\n        case \"display\":\n          break;\n        case \"print\":\n          renderingIntent = RenderingIntentFlag.PRINT;\n          break;\n        default:\n          warn(`getRenderingIntent - invalid intent: ${intent}`);\n      }\n      const annotationStorage = renderingIntent & RenderingIntentFlag.PRINT && printAnnotationStorage instanceof PrintAnnotationStorage ? printAnnotationStorage : this.annotationStorage;\n      switch (annotationMode) {\n        case AnnotationMode.DISABLE:\n          renderingIntent += RenderingIntentFlag.ANNOTATIONS_DISABLE;\n          break;\n        case AnnotationMode.ENABLE:\n          break;\n        case AnnotationMode.ENABLE_FORMS:\n          renderingIntent += RenderingIntentFlag.ANNOTATIONS_FORMS;\n          break;\n        case AnnotationMode.ENABLE_STORAGE:\n          renderingIntent += RenderingIntentFlag.ANNOTATIONS_STORAGE;\n          annotationStorageSerializable = annotationStorage.serializable;\n          break;\n        default:\n          warn(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n      }\n      if (isEditing) {\n        renderingIntent += RenderingIntentFlag.IS_EDITING;\n      }\n      if (isOpList) {\n        renderingIntent += RenderingIntentFlag.OPLIST;\n      }\n      const {\n        ids: modifiedIds,\n        hash: modifiedIdsHash\n      } = annotationStorage.modifiedIds;\n      const cacheKeyBuf = [renderingIntent, annotationStorageSerializable.hash, modifiedIdsHash];\n      return {\n        renderingIntent,\n        cacheKey: cacheKeyBuf.join(\"_\"),\n        annotationStorageSerializable,\n        modifiedIds\n      };\n    }\n    destroy() {\n      if (this.destroyCapability) {\n        return this.destroyCapability.promise;\n      }\n      this.destroyed = true;\n      this.destroyCapability = Promise.withResolvers();\n      this.#passwordCapability?.reject(new Error(\"Worker was destroyed during onPassword callback\"));\n      const waitOn = [];\n      for (const page of this.#pageCache.values()) {\n        waitOn.push(page._destroy());\n      }\n      this.#pageCache.clear();\n      this.#pagePromises.clear();\n      this.#pageRefCache.clear();\n      if (this.hasOwnProperty(\"annotationStorage\")) {\n        this.annotationStorage.resetModified();\n      }\n      const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n      waitOn.push(terminated);\n      Promise.all(waitOn).then(() => {\n        this.commonObjs.clear();\n        this.fontLoader.clear();\n        this.#methodPromises.clear();\n        this.filterFactory.destroy();\n        TextLayer.cleanup();\n        this._networkStream?.cancelAllRequests(new AbortException(\"Worker was terminated.\"));\n        if (this.messageHandler) {\n          this.messageHandler.destroy();\n          this.messageHandler = null;\n        }\n        this.destroyCapability.resolve();\n      }, this.destroyCapability.reject);\n      return this.destroyCapability.promise;\n    }\n    setupMessageHandler() {\n      const {\n        messageHandler,\n        loadingTask\n      } = this;\n      messageHandler.on(\"GetReader\", (data, sink) => {\n        assert(this._networkStream, \"GetReader - no `IPDFStream` instance available.\");\n        this._fullReader = this._networkStream.getFullReader();\n        this._fullReader.onProgress = evt => {\n          this._lastProgress = {\n            loaded: evt.loaded,\n            total: evt.total\n          };\n        };\n        sink.onPull = () => {\n          this._fullReader.read().then(function ({\n            value,\n            done\n          }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(value instanceof ArrayBuffer, \"GetReader - expected an ArrayBuffer.\");\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          }).catch(reason => {\n            sink.error(reason);\n          });\n        };\n        sink.onCancel = reason => {\n          this._fullReader.cancel(reason);\n          sink.ready.catch(readyReason => {\n            if (this.destroyed) {\n              return;\n            }\n            throw readyReason;\n          });\n        };\n      });\n      messageHandler.on(\"ReaderHeadersReady\", data => {\n        const headersCapability = Promise.withResolvers();\n        const fullReader = this._fullReader;\n        fullReader.headersReady.then(() => {\n          if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n            if (this._lastProgress) {\n              loadingTask.onProgress?.(this._lastProgress);\n            }\n            fullReader.onProgress = evt => {\n              loadingTask.onProgress?.({\n                loaded: evt.loaded,\n                total: evt.total\n              });\n            };\n          }\n          headersCapability.resolve({\n            isStreamingSupported: fullReader.isStreamingSupported,\n            isRangeSupported: fullReader.isRangeSupported,\n            contentLength: fullReader.contentLength\n          });\n        }, headersCapability.reject);\n        return headersCapability.promise;\n      });\n      messageHandler.on(\"GetRangeReader\", (data, sink) => {\n        assert(this._networkStream, \"GetRangeReader - no `IPDFStream` instance available.\");\n        const rangeReader = this._networkStream.getRangeReader(data.begin, data.end);\n        if (!rangeReader) {\n          sink.close();\n          return;\n        }\n        sink.onPull = () => {\n          rangeReader.read().then(function ({\n            value,\n            done\n          }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(value instanceof ArrayBuffer, \"GetRangeReader - expected an ArrayBuffer.\");\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          }).catch(reason => {\n            sink.error(reason);\n          });\n        };\n        sink.onCancel = reason => {\n          rangeReader.cancel(reason);\n          sink.ready.catch(readyReason => {\n            if (this.destroyed) {\n              return;\n            }\n            throw readyReason;\n          });\n        };\n      });\n      messageHandler.on(\"GetDoc\", ({\n        pdfInfo\n      }) => {\n        this._numPages = pdfInfo.numPages;\n        this._htmlForXfa = pdfInfo.htmlForXfa;\n        delete pdfInfo.htmlForXfa;\n        loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n      });\n      messageHandler.on(\"DocException\", function (ex) {\n        let reason;\n        switch (ex.name) {\n          case \"PasswordException\":\n            reason = new PasswordException(ex.message, ex.code);\n            break;\n          case \"InvalidPDFException\":\n            reason = new InvalidPDFException(ex.message);\n            break;\n          case \"MissingPDFException\":\n            reason = new MissingPDFException(ex.message);\n            break;\n          case \"UnexpectedResponseException\":\n            reason = new UnexpectedResponseException(ex.message, ex.status);\n            break;\n          case \"UnknownErrorException\":\n            reason = new UnknownErrorException(ex.message, ex.details);\n            break;\n          default:\n            unreachable(\"DocException - expected a valid Error.\");\n        }\n        loadingTask._capability.reject(reason);\n      });\n      messageHandler.on(\"PasswordRequest\", exception => {\n        this.#passwordCapability = Promise.withResolvers();\n        if (loadingTask.onPassword) {\n          const updatePassword = password => {\n            if (password instanceof Error) {\n              this.#passwordCapability.reject(password);\n            } else {\n              this.#passwordCapability.resolve({\n                password\n              });\n            }\n          };\n          try {\n            loadingTask.onPassword(updatePassword, exception.code);\n          } catch (ex) {\n            this.#passwordCapability.reject(ex);\n          }\n        } else {\n          this.#passwordCapability.reject(new PasswordException(exception.message, exception.code));\n        }\n        return this.#passwordCapability.promise;\n      });\n      messageHandler.on(\"DataLoaded\", data => {\n        loadingTask.onProgress?.({\n          loaded: data.length,\n          total: data.length\n        });\n        this.downloadInfoCapability.resolve(data);\n      });\n      messageHandler.on(\"StartRenderPage\", data => {\n        if (this.destroyed) {\n          return;\n        }\n        const page = this.#pageCache.get(data.pageIndex);\n        page._startRenderPage(data.transparency, data.cacheKey);\n      });\n      messageHandler.on(\"commonobj\", ([id, type, exportedData]) => {\n        if (this.destroyed) {\n          return null;\n        }\n        if (this.commonObjs.has(id)) {\n          return null;\n        }\n        switch (type) {\n          case \"Font\":\n            const {\n              disableFontFace,\n              fontExtraProperties,\n              pdfBug\n            } = this._params;\n            if (\"error\" in exportedData) {\n              const exportedError = exportedData.error;\n              warn(`Error during font loading: ${exportedError}`);\n              this.commonObjs.resolve(id, exportedError);\n              break;\n            }\n            const inspectFont = pdfBug && globalThis.FontInspector?.enabled ? (font, url) => globalThis.FontInspector.fontAdded(font, url) : null;\n            const font = new FontFaceObject(exportedData, {\n              disableFontFace,\n              inspectFont\n            });\n            this.fontLoader.bind(font).catch(() => messageHandler.sendWithPromise(\"FontFallback\", {\n              id\n            })).finally(() => {\n              if (!fontExtraProperties && font.data) {\n                font.data = null;\n              }\n              this.commonObjs.resolve(id, font);\n            });\n            break;\n          case \"CopyLocalImage\":\n            const {\n              imageRef\n            } = exportedData;\n            assert(imageRef, \"The imageRef must be defined.\");\n            for (const pageProxy of this.#pageCache.values()) {\n              for (const [, data] of pageProxy.objs) {\n                if (data?.ref !== imageRef) {\n                  continue;\n                }\n                if (!data.dataLen) {\n                  return null;\n                }\n                this.commonObjs.resolve(id, structuredClone(data));\n                return data.dataLen;\n              }\n            }\n            break;\n          case \"FontPath\":\n          case \"Image\":\n          case \"Pattern\":\n            this.commonObjs.resolve(id, exportedData);\n            break;\n          default:\n            throw new Error(`Got unknown common object type ${type}`);\n        }\n        return null;\n      });\n      messageHandler.on(\"obj\", ([id, pageIndex, type, imageData]) => {\n        if (this.destroyed) {\n          return;\n        }\n        const pageProxy = this.#pageCache.get(pageIndex);\n        if (pageProxy.objs.has(id)) {\n          return;\n        }\n        if (pageProxy._intentStates.size === 0) {\n          imageData?.bitmap?.close();\n          return;\n        }\n        switch (type) {\n          case \"Image\":\n            pageProxy.objs.resolve(id, imageData);\n            if (imageData?.dataLen > MAX_IMAGE_SIZE_TO_CACHE) {\n              pageProxy._maybeCleanupAfterRender = true;\n            }\n            break;\n          case \"Pattern\":\n            pageProxy.objs.resolve(id, imageData);\n            break;\n          default:\n            throw new Error(`Got unknown object type ${type}`);\n        }\n      });\n      messageHandler.on(\"DocProgress\", data => {\n        if (this.destroyed) {\n          return;\n        }\n        loadingTask.onProgress?.({\n          loaded: data.loaded,\n          total: data.total\n        });\n      });\n      messageHandler.on(\"FetchBuiltInCMap\", data => {\n        if (this.destroyed) {\n          return Promise.reject(new Error(\"Worker was destroyed.\"));\n        }\n        if (!this.cMapReaderFactory) {\n          return Promise.reject(new Error(\"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"));\n        }\n        return this.cMapReaderFactory.fetch(data);\n      });\n      messageHandler.on(\"FetchStandardFontData\", data => {\n        if (this.destroyed) {\n          return Promise.reject(new Error(\"Worker was destroyed.\"));\n        }\n        if (!this.standardFontDataFactory) {\n          return Promise.reject(new Error(\"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"));\n        }\n        return this.standardFontDataFactory.fetch(data);\n      });\n    }\n    getData() {\n      return this.messageHandler.sendWithPromise(\"GetData\", null);\n    }\n    saveDocument() {\n      if (this.annotationStorage.size <= 0) {\n        warn(\"saveDocument called while `annotationStorage` is empty, \" + \"please use the getData-method instead.\");\n      }\n      const {\n        map,\n        transfer\n      } = this.annotationStorage.serializable;\n      return this.messageHandler.sendWithPromise(\"SaveDocument\", {\n        isPureXfa: !!this._htmlForXfa,\n        numPages: this._numPages,\n        annotationStorage: map,\n        filename: this._fullReader?.filename ?? null\n      }, transfer).finally(() => {\n        this.annotationStorage.resetModified();\n      });\n    }\n    getPage(pageNumber) {\n      if (!Number.isInteger(pageNumber) || pageNumber <= 0 || pageNumber > this._numPages) {\n        return Promise.reject(new Error(\"Invalid page request.\"));\n      }\n      const pageIndex = pageNumber - 1,\n        cachedPromise = this.#pagePromises.get(pageIndex);\n      if (cachedPromise) {\n        return cachedPromise;\n      }\n      const promise = this.messageHandler.sendWithPromise(\"GetPage\", {\n        pageIndex\n      }).then(pageInfo => {\n        if (this.destroyed) {\n          throw new Error(\"Transport destroyed\");\n        }\n        if (pageInfo.refStr) {\n          this.#pageRefCache.set(pageInfo.refStr, pageNumber);\n        }\n        const page = new PDFPageProxy(pageIndex, pageInfo, this, this._params.pdfBug);\n        this.#pageCache.set(pageIndex, page);\n        return page;\n      });\n      this.#pagePromises.set(pageIndex, promise);\n      return promise;\n    }\n    getPageIndex(ref) {\n      if (!isRefProxy(ref)) {\n        return Promise.reject(new Error(\"Invalid pageIndex request.\"));\n      }\n      return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n        num: ref.num,\n        gen: ref.gen\n      });\n    }\n    getAnnotations(pageIndex, intent) {\n      return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n        pageIndex,\n        intent\n      });\n    }\n    getFieldObjects() {\n      return this.#cacheSimpleMethod(\"GetFieldObjects\");\n    }\n    hasJSActions() {\n      return this.#cacheSimpleMethod(\"HasJSActions\");\n    }\n    getCalculationOrderIds() {\n      return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n    }\n    getDestinations() {\n      return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n    }\n    getDestination(id) {\n      if (typeof id !== \"string\") {\n        return Promise.reject(new Error(\"Invalid destination request.\"));\n      }\n      return this.messageHandler.sendWithPromise(\"GetDestination\", {\n        id\n      });\n    }\n    getPageLabels() {\n      return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n    }\n    getPageLayout() {\n      return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n    }\n    getPageMode() {\n      return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n    }\n    getViewerPreferences() {\n      return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n    }\n    getOpenAction() {\n      return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n    }\n    getAttachments() {\n      return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n    }\n    getDocJSActions() {\n      return this.#cacheSimpleMethod(\"GetDocJSActions\");\n    }\n    getPageJSActions(pageIndex) {\n      return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n        pageIndex\n      });\n    }\n    getStructTree(pageIndex) {\n      return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n        pageIndex\n      });\n    }\n    getOutline() {\n      return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n    }\n    getOptionalContentConfig(renderingIntent) {\n      return this.#cacheSimpleMethod(\"GetOptionalContentConfig\").then(data => new OptionalContentConfig(data, renderingIntent));\n    }\n    getPermissions() {\n      return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n    }\n    getMetadata() {\n      const name = \"GetMetadata\",\n        cachedPromise = this.#methodPromises.get(name);\n      if (cachedPromise) {\n        return cachedPromise;\n      }\n      const promise = this.messageHandler.sendWithPromise(name, null).then(results => ({\n        info: results[0],\n        metadata: results[1] ? new Metadata(results[1]) : null,\n        contentDispositionFilename: this._fullReader?.filename ?? null,\n        contentLength: this._fullReader?.contentLength ?? null\n      }));\n      this.#methodPromises.set(name, promise);\n      return promise;\n    }\n    getMarkInfo() {\n      return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n    }\n    async startCleanup(keepLoadedFonts = false) {\n      if (this.destroyed) {\n        return;\n      }\n      await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n      for (const page of this.#pageCache.values()) {\n        const cleanupSuccessful = page.cleanup();\n        if (!cleanupSuccessful) {\n          throw new Error(`startCleanup: Page ${page.pageNumber} is currently rendering.`);\n        }\n      }\n      this.commonObjs.clear();\n      if (!keepLoadedFonts) {\n        this.fontLoader.clear();\n      }\n      this.#methodPromises.clear();\n      this.filterFactory.destroy(true);\n      TextLayer.cleanup();\n    }\n    cachedPageNumber(ref) {\n      if (!isRefProxy(ref)) {\n        return null;\n      }\n      const refStr = ref.gen === 0 ? `${ref.num}R` : `${ref.num}R${ref.gen}`;\n      return this.#pageRefCache.get(refStr) ?? null;\n    }\n  }\n  const INITIAL_DATA = Symbol(\"INITIAL_DATA\");\n  class PDFObjects {\n    #objs = Object.create(null);\n    #ensureObj(objId) {\n      return this.#objs[objId] ||= {\n        ...Promise.withResolvers(),\n        data: INITIAL_DATA\n      };\n    }\n    get(objId, callback = null) {\n      if (callback) {\n        const obj = this.#ensureObj(objId);\n        obj.promise.then(() => callback(obj.data));\n        return null;\n      }\n      const obj = this.#objs[objId];\n      if (!obj || obj.data === INITIAL_DATA) {\n        throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n      }\n      return obj.data;\n    }\n    has(objId) {\n      const obj = this.#objs[objId];\n      return !!obj && obj.data !== INITIAL_DATA;\n    }\n    resolve(objId, data = null) {\n      const obj = this.#ensureObj(objId);\n      obj.data = data;\n      obj.resolve();\n    }\n    clear() {\n      for (const objId in this.#objs) {\n        const {\n          data\n        } = this.#objs[objId];\n        data?.bitmap?.close();\n      }\n      this.#objs = Object.create(null);\n    }\n    *[Symbol.iterator]() {\n      for (const objId in this.#objs) {\n        const {\n          data\n        } = this.#objs[objId];\n        if (data === INITIAL_DATA) {\n          continue;\n        }\n        yield [objId, data];\n      }\n    }\n  }\n  class RenderTask {\n    #internalRenderTask = null;\n    constructor(internalRenderTask) {\n      this.#internalRenderTask = internalRenderTask;\n      this.onContinue = null;\n    }\n    get promise() {\n      return this.#internalRenderTask.capability.promise;\n    }\n    cancel(extraDelay = 0) {\n      this.#internalRenderTask.cancel(null, extraDelay);\n    }\n    get separateAnnots() {\n      const {\n        separateAnnots\n      } = this.#internalRenderTask.operatorList;\n      if (!separateAnnots) {\n        return false;\n      }\n      const {\n        annotationCanvasMap\n      } = this.#internalRenderTask;\n      return separateAnnots.form || separateAnnots.canvas && annotationCanvasMap?.size > 0;\n    }\n  }\n  class InternalRenderTask {\n    #rAF = null;\n    static #canvasInUse = new WeakSet();\n    constructor({\n      callback,\n      params,\n      objs,\n      commonObjs,\n      annotationCanvasMap,\n      operatorList,\n      pageIndex,\n      canvasFactory,\n      filterFactory,\n      useRequestAnimationFrame = false,\n      pdfBug = false,\n      pageColors = null\n    }) {\n      this.callback = callback;\n      this.params = params;\n      this.objs = objs;\n      this.commonObjs = commonObjs;\n      this.annotationCanvasMap = annotationCanvasMap;\n      this.operatorListIdx = null;\n      this.operatorList = operatorList;\n      this._pageIndex = pageIndex;\n      this.canvasFactory = canvasFactory;\n      this.filterFactory = filterFactory;\n      this._pdfBug = pdfBug;\n      this.pageColors = pageColors;\n      this.running = false;\n      this.graphicsReadyCallback = null;\n      this.graphicsReady = false;\n      this._useRequestAnimationFrame = useRequestAnimationFrame === true && typeof window !== \"undefined\";\n      this.cancelled = false;\n      this.capability = Promise.withResolvers();\n      this.task = new RenderTask(this);\n      this._cancelBound = this.cancel.bind(this);\n      this._continueBound = this._continue.bind(this);\n      this._scheduleNextBound = this._scheduleNext.bind(this);\n      this._nextBound = this._next.bind(this);\n      this._canvas = params.canvasContext.canvas;\n    }\n    get completed() {\n      return this.capability.promise.catch(function () {});\n    }\n    initializeGraphics({\n      transparency = false,\n      optionalContentConfig\n    }) {\n      if (this.cancelled) {\n        return;\n      }\n      if (this._canvas) {\n        if (InternalRenderTask.#canvasInUse.has(this._canvas)) {\n          throw new Error(\"Cannot use the same canvas during multiple render() operations. \" + \"Use different canvas or ensure previous operations were \" + \"cancelled or completed.\");\n        }\n        InternalRenderTask.#canvasInUse.add(this._canvas);\n      }\n      if (this._pdfBug && globalThis.StepperManager?.enabled) {\n        this.stepper = globalThis.StepperManager.create(this._pageIndex);\n        this.stepper.init(this.operatorList);\n        this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n      }\n      const {\n        canvasContext,\n        viewport,\n        transform,\n        background\n      } = this.params;\n      this.gfx = new CanvasGraphics(canvasContext, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {\n        optionalContentConfig\n      }, this.annotationCanvasMap, this.pageColors);\n      this.gfx.beginDrawing({\n        transform,\n        viewport,\n        transparency,\n        background\n      });\n      this.operatorListIdx = 0;\n      this.graphicsReady = true;\n      this.graphicsReadyCallback?.();\n    }\n    cancel(error = null, extraDelay = 0) {\n      this.running = false;\n      this.cancelled = true;\n      this.gfx?.endDrawing();\n      if (this.#rAF) {\n        window.cancelAnimationFrame(this.#rAF);\n        this.#rAF = null;\n      }\n      InternalRenderTask.#canvasInUse.delete(this._canvas);\n      this.callback(error || new RenderingCancelledException(`Rendering cancelled, page ${this._pageIndex + 1}`, extraDelay));\n    }\n    operatorListChanged() {\n      if (!this.graphicsReady) {\n        this.graphicsReadyCallback ||= this._continueBound;\n        return;\n      }\n      this.stepper?.updateOperatorList(this.operatorList);\n      if (this.running) {\n        return;\n      }\n      this._continue();\n    }\n    _continue() {\n      this.running = true;\n      if (this.cancelled) {\n        return;\n      }\n      if (this.task.onContinue) {\n        this.task.onContinue(this._scheduleNextBound);\n      } else {\n        this._scheduleNext();\n      }\n    }\n    _scheduleNext() {\n      if (this._useRequestAnimationFrame) {\n        this.#rAF = window.requestAnimationFrame(() => {\n          this.#rAF = null;\n          this._nextBound().catch(this._cancelBound);\n        });\n      } else {\n        Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n      }\n    }\n    async _next() {\n      if (this.cancelled) {\n        return;\n      }\n      this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper);\n      if (this.operatorListIdx === this.operatorList.argsArray.length) {\n        this.running = false;\n        if (this.operatorList.lastChunk) {\n          this.gfx.endDrawing();\n          InternalRenderTask.#canvasInUse.delete(this._canvas);\n          this.callback();\n        }\n      }\n    }\n  }\n  const version = \"4.7.76\";\n  const build = \"8b73b828b\";\n  function makeColorComp(n) {\n    return Math.floor(Math.max(0, Math.min(1, n)) * 255).toString(16).padStart(2, \"0\");\n  }\n  function scaleAndClamp(x) {\n    return Math.max(0, Math.min(255, 255 * x));\n  }\n  class ColorConverters {\n    static CMYK_G([c, y, m, k]) {\n      return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n    }\n    static G_CMYK([g]) {\n      return [\"CMYK\", 0, 0, 0, 1 - g];\n    }\n    static G_RGB([g]) {\n      return [\"RGB\", g, g, g];\n    }\n    static G_rgb([g]) {\n      g = scaleAndClamp(g);\n      return [g, g, g];\n    }\n    static G_HTML([g]) {\n      const G = makeColorComp(g);\n      return `#${G}${G}${G}`;\n    }\n    static RGB_G([r, g, b]) {\n      return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n    }\n    static RGB_rgb(color) {\n      return color.map(scaleAndClamp);\n    }\n    static RGB_HTML(color) {\n      return `#${color.map(makeColorComp).join(\"\")}`;\n    }\n    static T_HTML() {\n      return \"#00000000\";\n    }\n    static T_rgb() {\n      return [null];\n    }\n    static CMYK_RGB([c, y, m, k]) {\n      return [\"RGB\", 1 - Math.min(1, c + k), 1 - Math.min(1, m + k), 1 - Math.min(1, y + k)];\n    }\n    static CMYK_rgb([c, y, m, k]) {\n      return [scaleAndClamp(1 - Math.min(1, c + k)), scaleAndClamp(1 - Math.min(1, m + k)), scaleAndClamp(1 - Math.min(1, y + k))];\n    }\n    static CMYK_HTML(components) {\n      const rgb = this.CMYK_RGB(components).slice(1);\n      return this.RGB_HTML(rgb);\n    }\n    static RGB_CMYK([r, g, b]) {\n      const c = 1 - r;\n      const m = 1 - g;\n      const y = 1 - b;\n      const k = Math.min(c, m, y);\n      return [\"CMYK\", c, m, y, k];\n    }\n  }\n\n  class XfaLayer {\n    static setupStorage(html, id, element, storage, intent) {\n      const storedData = storage.getValue(id, {\n        value: null\n      });\n      switch (element.name) {\n        case \"textarea\":\n          if (storedData.value !== null) {\n            html.textContent = storedData.value;\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"input\", event => {\n            storage.setValue(id, {\n              value: event.target.value\n            });\n          });\n          break;\n        case \"input\":\n          if (element.attributes.type === \"radio\" || element.attributes.type === \"checkbox\") {\n            if (storedData.value === element.attributes.xfaOn) {\n              html.setAttribute(\"checked\", true);\n            } else if (storedData.value === element.attributes.xfaOff) {\n              html.removeAttribute(\"checked\");\n            }\n            if (intent === \"print\") {\n              break;\n            }\n            html.addEventListener(\"change\", event => {\n              storage.setValue(id, {\n                value: event.target.checked ? event.target.getAttribute(\"xfaOn\") : event.target.getAttribute(\"xfaOff\")\n              });\n            });\n          } else {\n            if (storedData.value !== null) {\n              html.setAttribute(\"value\", storedData.value);\n            }\n            if (intent === \"print\") {\n              break;\n            }\n            html.addEventListener(\"input\", event => {\n              storage.setValue(id, {\n                value: event.target.value\n              });\n            });\n          }\n          break;\n        case \"select\":\n          if (storedData.value !== null) {\n            html.setAttribute(\"value\", storedData.value);\n            for (const option of element.children) {\n              if (option.attributes.value === storedData.value) {\n                option.attributes.selected = true;\n              } else if (option.attributes.hasOwnProperty(\"selected\")) {\n                delete option.attributes.selected;\n              }\n            }\n          }\n          html.addEventListener(\"input\", event => {\n            const options = event.target.options;\n            const value = options.selectedIndex === -1 ? \"\" : options[options.selectedIndex].value;\n            storage.setValue(id, {\n              value\n            });\n          });\n          break;\n      }\n    }\n    static setAttributes({\n      html,\n      element,\n      storage = null,\n      intent,\n      linkService\n    }) {\n      const {\n        attributes\n      } = element;\n      const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n      if (attributes.type === \"radio\") {\n        attributes.name = `${attributes.name}-${intent}`;\n      }\n      for (const [key, value] of Object.entries(attributes)) {\n        if (value === null || value === undefined) {\n          continue;\n        }\n        switch (key) {\n          case \"class\":\n            if (value.length) {\n              html.setAttribute(key, value.join(\" \"));\n            }\n            break;\n          case \"dataId\":\n            break;\n          case \"id\":\n            html.setAttribute(\"data-element-id\", value);\n            break;\n          case \"style\":\n            Object.assign(html.style, value);\n            break;\n          case \"textContent\":\n            html.textContent = value;\n            break;\n          default:\n            if (!isHTMLAnchorElement || key !== \"href\" && key !== \"newWindow\") {\n              html.setAttribute(key, value);\n            }\n        }\n      }\n      if (isHTMLAnchorElement) {\n        linkService.addLinkAttributes(html, attributes.href, attributes.newWindow);\n      }\n      if (storage && attributes.dataId) {\n        this.setupStorage(html, attributes.dataId, element, storage);\n      }\n    }\n    static render(parameters) {\n      const storage = parameters.annotationStorage;\n      const linkService = parameters.linkService;\n      const root = parameters.xfaHtml;\n      const intent = parameters.intent || \"display\";\n      const rootHtml = document.createElement(root.name);\n      if (root.attributes) {\n        this.setAttributes({\n          html: rootHtml,\n          element: root,\n          intent,\n          linkService\n        });\n      }\n      const isNotForRichText = intent !== \"richText\";\n      const rootDiv = parameters.div;\n      rootDiv.append(rootHtml);\n      if (parameters.viewport) {\n        const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n        rootDiv.style.transform = transform;\n      }\n      if (isNotForRichText) {\n        rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n      }\n      const textDivs = [];\n      if (root.children.length === 0) {\n        if (root.value) {\n          const node = document.createTextNode(root.value);\n          rootHtml.append(node);\n          if (isNotForRichText && XfaText.shouldBuildText(root.name)) {\n            textDivs.push(node);\n          }\n        }\n        return {\n          textDivs\n        };\n      }\n      const stack = [[root, -1, rootHtml]];\n      while (stack.length > 0) {\n        const [parent, i, html] = stack.at(-1);\n        if (i + 1 === parent.children.length) {\n          stack.pop();\n          continue;\n        }\n        const child = parent.children[++stack.at(-1)[1]];\n        if (child === null) {\n          continue;\n        }\n        const {\n          name\n        } = child;\n        if (name === \"#text\") {\n          const node = document.createTextNode(child.value);\n          textDivs.push(node);\n          html.append(node);\n          continue;\n        }\n        const childHtml = child?.attributes?.xmlns ? document.createElementNS(child.attributes.xmlns, name) : document.createElement(name);\n        html.append(childHtml);\n        if (child.attributes) {\n          this.setAttributes({\n            html: childHtml,\n            element: child,\n            storage,\n            intent,\n            linkService\n          });\n        }\n        if (child.children?.length > 0) {\n          stack.push([child, -1, childHtml]);\n        } else if (child.value) {\n          const node = document.createTextNode(child.value);\n          if (isNotForRichText && XfaText.shouldBuildText(name)) {\n            textDivs.push(node);\n          }\n          childHtml.append(node);\n        }\n      }\n      for (const el of rootDiv.querySelectorAll(\".xfaNonInteractive input, .xfaNonInteractive textarea\")) {\n        el.setAttribute(\"readOnly\", true);\n      }\n      return {\n        textDivs\n      };\n    }\n    static update(parameters) {\n      const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n      parameters.div.style.transform = transform;\n      parameters.div.hidden = false;\n    }\n  }\n\n\n\n\n\n  const DEFAULT_TAB_INDEX = 1000;\n  const annotation_layer_DEFAULT_FONT_SIZE = 9;\n  const GetElementsByNameSet = new WeakSet();\n  function getRectDims(rect) {\n    return {\n      width: rect[2] - rect[0],\n      height: rect[3] - rect[1]\n    };\n  }\n  class AnnotationElementFactory {\n    static create(parameters) {\n      const subtype = parameters.data.annotationType;\n      switch (subtype) {\n        case AnnotationType.LINK:\n          return new LinkAnnotationElement(parameters);\n        case AnnotationType.TEXT:\n          return new TextAnnotationElement(parameters);\n        case AnnotationType.WIDGET:\n          const fieldType = parameters.data.fieldType;\n          switch (fieldType) {\n            case \"Tx\":\n              return new TextWidgetAnnotationElement(parameters);\n            case \"Btn\":\n              if (parameters.data.radioButton) {\n                return new RadioButtonWidgetAnnotationElement(parameters);\n              } else if (parameters.data.checkBox) {\n                return new CheckboxWidgetAnnotationElement(parameters);\n              }\n              return new PushButtonWidgetAnnotationElement(parameters);\n            case \"Ch\":\n              return new ChoiceWidgetAnnotationElement(parameters);\n            case \"Sig\":\n              return new SignatureWidgetAnnotationElement(parameters);\n          }\n          return new WidgetAnnotationElement(parameters);\n        case AnnotationType.POPUP:\n          return new PopupAnnotationElement(parameters);\n        case AnnotationType.FREETEXT:\n          return new FreeTextAnnotationElement(parameters);\n        case AnnotationType.LINE:\n          return new LineAnnotationElement(parameters);\n        case AnnotationType.SQUARE:\n          return new SquareAnnotationElement(parameters);\n        case AnnotationType.CIRCLE:\n          return new CircleAnnotationElement(parameters);\n        case AnnotationType.POLYLINE:\n          return new PolylineAnnotationElement(parameters);\n        case AnnotationType.CARET:\n          return new CaretAnnotationElement(parameters);\n        case AnnotationType.INK:\n          return new InkAnnotationElement(parameters);\n        case AnnotationType.POLYGON:\n          return new PolygonAnnotationElement(parameters);\n        case AnnotationType.HIGHLIGHT:\n          return new HighlightAnnotationElement(parameters);\n        case AnnotationType.UNDERLINE:\n          return new UnderlineAnnotationElement(parameters);\n        case AnnotationType.SQUIGGLY:\n          return new SquigglyAnnotationElement(parameters);\n        case AnnotationType.STRIKEOUT:\n          return new StrikeOutAnnotationElement(parameters);\n        case AnnotationType.STAMP:\n          return new StampAnnotationElement(parameters);\n        case AnnotationType.FILEATTACHMENT:\n          return new FileAttachmentAnnotationElement(parameters);\n        default:\n          return new AnnotationElement(parameters);\n      }\n    }\n  }\n  class AnnotationElement {\n    #updates = null;\n    #hasBorder = false;\n    #popupElement = null;\n    constructor(parameters, {\n      isRenderable = false,\n      ignoreBorder = false,\n      createQuadrilaterals = false\n    } = {}) {\n      this.isRenderable = isRenderable;\n      this.data = parameters.data;\n      this.layer = parameters.layer;\n      this.linkService = parameters.linkService;\n      this.downloadManager = parameters.downloadManager;\n      this.imageResourcesPath = parameters.imageResourcesPath;\n      this.renderForms = parameters.renderForms;\n      this.svgFactory = parameters.svgFactory;\n      this.annotationStorage = parameters.annotationStorage;\n      this.enableScripting = parameters.enableScripting;\n      this.hasJSActions = parameters.hasJSActions;\n      this._fieldObjects = parameters.fieldObjects;\n      this.parent = parameters.parent;\n      if (isRenderable) {\n        this.container = this._createContainer(ignoreBorder);\n      }\n      if (createQuadrilaterals) {\n        this._createQuadrilaterals();\n      }\n    }\n    static _hasPopupData({\n      titleObj,\n      contentsObj,\n      richText\n    }) {\n      return !!(titleObj?.str || contentsObj?.str || richText?.str);\n    }\n    get _isEditable() {\n      return this.data.isEditable;\n    }\n    get hasPopupData() {\n      return AnnotationElement._hasPopupData(this.data);\n    }\n    updateEdited(params) {\n      if (!this.container) {\n        return;\n      }\n      this.#updates ||= {\n        rect: this.data.rect.slice(0)\n      };\n      const {\n        rect\n      } = params;\n      if (rect) {\n        this.#setRectEdited(rect);\n      }\n      this.#popupElement?.popup.updateEdited(params);\n    }\n    resetEdited() {\n      if (!this.#updates) {\n        return;\n      }\n      this.#setRectEdited(this.#updates.rect);\n      this.#popupElement?.popup.resetEdited();\n      this.#updates = null;\n    }\n    #setRectEdited(rect) {\n      const {\n        container: {\n          style\n        },\n        data: {\n          rect: currentRect,\n          rotation\n        },\n        parent: {\n          viewport: {\n            rawDims: {\n              pageWidth,\n              pageHeight,\n              pageX,\n              pageY\n            }\n          }\n        }\n      } = this;\n      currentRect?.splice(0, 4, ...rect);\n      const {\n        width,\n        height\n      } = getRectDims(rect);\n      style.left = `${100 * (rect[0] - pageX) / pageWidth}%`;\n      style.top = `${100 * (pageHeight - rect[3] + pageY) / pageHeight}%`;\n      if (rotation === 0) {\n        style.width = `${100 * width / pageWidth}%`;\n        style.height = `${100 * height / pageHeight}%`;\n      } else {\n        this.setRotation(rotation);\n      }\n    }\n    _createContainer(ignoreBorder) {\n      const {\n        data,\n        parent: {\n          page,\n          viewport\n        }\n      } = this;\n      const container = document.createElement(\"section\");\n      container.setAttribute(\"data-annotation-id\", data.id);\n      if (!(this instanceof WidgetAnnotationElement)) {\n        container.tabIndex = DEFAULT_TAB_INDEX;\n      }\n      const {\n        style\n      } = container;\n      style.zIndex = this.parent.zIndex++;\n      if (data.popupRef) {\n        container.setAttribute(\"aria-haspopup\", \"dialog\");\n      }\n      if (data.alternativeText) {\n        container.title = data.alternativeText;\n      }\n      if (data.noRotate) {\n        container.classList.add(\"norotate\");\n      }\n      if (!data.rect || this instanceof PopupAnnotationElement) {\n        const {\n          rotation\n        } = data;\n        if (!data.hasOwnCanvas && rotation !== 0) {\n          this.setRotation(rotation, container);\n        }\n        return container;\n      }\n      const {\n        width,\n        height\n      } = getRectDims(data.rect);\n      if (!ignoreBorder && data.borderStyle.width > 0) {\n        style.borderWidth = `${data.borderStyle.width}px`;\n        const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n        const verticalRadius = data.borderStyle.verticalCornerRadius;\n        if (horizontalRadius > 0 || verticalRadius > 0) {\n          const radius = `calc(${horizontalRadius}px * var(--scale-factor)) / calc(${verticalRadius}px * var(--scale-factor))`;\n          style.borderRadius = radius;\n        } else if (this instanceof RadioButtonWidgetAnnotationElement) {\n          const radius = `calc(${width}px * var(--scale-factor)) / calc(${height}px * var(--scale-factor))`;\n          style.borderRadius = radius;\n        }\n        switch (data.borderStyle.style) {\n          case AnnotationBorderStyleType.SOLID:\n            style.borderStyle = \"solid\";\n            break;\n          case AnnotationBorderStyleType.DASHED:\n            style.borderStyle = \"dashed\";\n            break;\n          case AnnotationBorderStyleType.BEVELED:\n            warn(\"Unimplemented border style: beveled\");\n            break;\n          case AnnotationBorderStyleType.INSET:\n            warn(\"Unimplemented border style: inset\");\n            break;\n          case AnnotationBorderStyleType.UNDERLINE:\n            style.borderBottomStyle = \"solid\";\n            break;\n        }\n        const borderColor = data.borderColor || null;\n        if (borderColor) {\n          this.#hasBorder = true;\n          style.borderColor = Util.makeHexColor(borderColor[0] | 0, borderColor[1] | 0, borderColor[2] | 0);\n        } else {\n          style.borderWidth = 0;\n        }\n      }\n      const rect = Util.normalizeRect([data.rect[0], page.view[3] - data.rect[1] + page.view[1], data.rect[2], page.view[3] - data.rect[3] + page.view[1]]);\n      const {\n        pageWidth,\n        pageHeight,\n        pageX,\n        pageY\n      } = viewport.rawDims;\n      style.left = `${100 * (rect[0] - pageX) / pageWidth}%`;\n      style.top = `${100 * (rect[1] - pageY) / pageHeight}%`;\n      const {\n        rotation\n      } = data;\n      if (data.hasOwnCanvas || rotation === 0) {\n        style.width = `${100 * width / pageWidth}%`;\n        style.height = `${100 * height / pageHeight}%`;\n      } else {\n        this.setRotation(rotation, container);\n      }\n      return container;\n    }\n    setRotation(angle, container = this.container) {\n      if (!this.data.rect) {\n        return;\n      }\n      const {\n        pageWidth,\n        pageHeight\n      } = this.parent.viewport.rawDims;\n      const {\n        width,\n        height\n      } = getRectDims(this.data.rect);\n      let elementWidth, elementHeight;\n      if (angle % 180 === 0) {\n        elementWidth = 100 * width / pageWidth;\n        elementHeight = 100 * height / pageHeight;\n      } else {\n        elementWidth = 100 * height / pageWidth;\n        elementHeight = 100 * width / pageHeight;\n      }\n      container.style.width = `${elementWidth}%`;\n      container.style.height = `${elementHeight}%`;\n      container.setAttribute(\"data-main-rotation\", (360 - angle) % 360);\n    }\n    get _commonActions() {\n      const setColor = (jsName, styleName, event) => {\n        const color = event.detail[jsName];\n        const colorType = color[0];\n        const colorArray = color.slice(1);\n        event.target.style[styleName] = ColorConverters[`${colorType}_HTML`](colorArray);\n        this.annotationStorage.setValue(this.data.id, {\n          [styleName]: ColorConverters[`${colorType}_rgb`](colorArray)\n        });\n      };\n      return shadow(this, \"_commonActions\", {\n        display: event => {\n          const {\n            display\n          } = event.detail;\n          const hidden = display % 2 === 1;\n          this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\n          this.annotationStorage.setValue(this.data.id, {\n            noView: hidden,\n            noPrint: display === 1 || display === 2\n          });\n        },\n        print: event => {\n          this.annotationStorage.setValue(this.data.id, {\n            noPrint: !event.detail.print\n          });\n        },\n        hidden: event => {\n          const {\n            hidden\n          } = event.detail;\n          this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\n          this.annotationStorage.setValue(this.data.id, {\n            noPrint: hidden,\n            noView: hidden\n          });\n        },\n        focus: event => {\n          setTimeout(() => event.target.focus({\n            preventScroll: false\n          }), 0);\n        },\n        userName: event => {\n          event.target.title = event.detail.userName;\n        },\n        readonly: event => {\n          event.target.disabled = event.detail.readonly;\n        },\n        required: event => {\n          this._setRequired(event.target, event.detail.required);\n        },\n        bgColor: event => {\n          setColor(\"bgColor\", \"backgroundColor\", event);\n        },\n        fillColor: event => {\n          setColor(\"fillColor\", \"backgroundColor\", event);\n        },\n        fgColor: event => {\n          setColor(\"fgColor\", \"color\", event);\n        },\n        textColor: event => {\n          setColor(\"textColor\", \"color\", event);\n        },\n        borderColor: event => {\n          setColor(\"borderColor\", \"borderColor\", event);\n        },\n        strokeColor: event => {\n          setColor(\"strokeColor\", \"borderColor\", event);\n        },\n        rotation: event => {\n          const angle = event.detail.rotation;\n          this.setRotation(angle);\n          this.annotationStorage.setValue(this.data.id, {\n            rotation: angle\n          });\n        }\n      });\n    }\n    _dispatchEventFromSandbox(actions, jsEvent) {\n      const commonActions = this._commonActions;\n      for (const name of Object.keys(jsEvent.detail)) {\n        const action = actions[name] || commonActions[name];\n        action?.(jsEvent);\n      }\n    }\n    _setDefaultPropertiesFromJS(element) {\n      if (!this.enableScripting) {\n        return;\n      }\n      const storedData = this.annotationStorage.getRawValue(this.data.id);\n      if (!storedData) {\n        return;\n      }\n      const commonActions = this._commonActions;\n      for (const [actionName, detail] of Object.entries(storedData)) {\n        const action = commonActions[actionName];\n        if (action) {\n          const eventProxy = {\n            detail: {\n              [actionName]: detail\n            },\n            target: element\n          };\n          action(eventProxy);\n          delete storedData[actionName];\n        }\n      }\n    }\n    _createQuadrilaterals() {\n      if (!this.container) {\n        return;\n      }\n      const {\n        quadPoints\n      } = this.data;\n      if (!quadPoints) {\n        return;\n      }\n      const [rectBlX, rectBlY, rectTrX, rectTrY] = this.data.rect.map(x => Math.fround(x));\n      if (quadPoints.length === 8) {\n        const [trX, trY, blX, blY] = quadPoints.subarray(2, 6);\n        if (rectTrX === trX && rectTrY === trY && rectBlX === blX && rectBlY === blY) {\n          return;\n        }\n      }\n      const {\n        style\n      } = this.container;\n      let svgBuffer;\n      if (this.#hasBorder) {\n        const {\n          borderColor,\n          borderWidth\n        } = style;\n        style.borderWidth = 0;\n        svgBuffer = [\"url('data:image/svg+xml;utf8,\", `<svg xmlns=\"http://www.w3.org/2000/svg\"`, ` preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\">`, `<g fill=\"transparent\" stroke=\"${borderColor}\" stroke-width=\"${borderWidth}\">`];\n        this.container.classList.add(\"hasBorder\");\n      }\n      const width = rectTrX - rectBlX;\n      const height = rectTrY - rectBlY;\n      const {\n        svgFactory\n      } = this;\n      const svg = svgFactory.createElement(\"svg\");\n      svg.classList.add(\"quadrilateralsContainer\");\n      svg.setAttribute(\"width\", 0);\n      svg.setAttribute(\"height\", 0);\n      const defs = svgFactory.createElement(\"defs\");\n      svg.append(defs);\n      const clipPath = svgFactory.createElement(\"clipPath\");\n      const id = `clippath_${this.data.id}`;\n      clipPath.setAttribute(\"id\", id);\n      clipPath.setAttribute(\"clipPathUnits\", \"objectBoundingBox\");\n      defs.append(clipPath);\n      for (let i = 2, ii = quadPoints.length; i < ii; i += 8) {\n        const trX = quadPoints[i];\n        const trY = quadPoints[i + 1];\n        const blX = quadPoints[i + 2];\n        const blY = quadPoints[i + 3];\n        const rect = svgFactory.createElement(\"rect\");\n        const x = (blX - rectBlX) / width;\n        const y = (rectTrY - trY) / height;\n        const rectWidth = (trX - blX) / width;\n        const rectHeight = (trY - blY) / height;\n        rect.setAttribute(\"x\", x);\n        rect.setAttribute(\"y\", y);\n        rect.setAttribute(\"width\", rectWidth);\n        rect.setAttribute(\"height\", rectHeight);\n        clipPath.append(rect);\n        svgBuffer?.push(`<rect vector-effect=\"non-scaling-stroke\" x=\"${x}\" y=\"${y}\" width=\"${rectWidth}\" height=\"${rectHeight}\"/>`);\n      }\n      if (this.#hasBorder) {\n        svgBuffer.push(`</g></svg>')`);\n        style.backgroundImage = svgBuffer.join(\"\");\n      }\n      this.container.append(svg);\n      this.container.style.clipPath = `url(#${id})`;\n    }\n    _createPopup() {\n      const {\n        container,\n        data\n      } = this;\n      container.setAttribute(\"aria-haspopup\", \"dialog\");\n      const popup = this.#popupElement = new PopupAnnotationElement({\n        data: {\n          color: data.color,\n          titleObj: data.titleObj,\n          modificationDate: data.modificationDate,\n          contentsObj: data.contentsObj,\n          richText: data.richText,\n          parentRect: data.rect,\n          borderStyle: 0,\n          id: `popup_${data.id}`,\n          rotation: data.rotation\n        },\n        parent: this.parent,\n        elements: [this]\n      });\n      this.parent.div.append(popup.render());\n    }\n    render() {\n      unreachable(\"Abstract method `AnnotationElement.render` called\");\n    }\n    _getElementsByName(name, skipId = null) {\n      const fields = [];\n      if (this._fieldObjects) {\n        const fieldObj = this._fieldObjects[name];\n        if (fieldObj) {\n          for (const {\n            page,\n            id,\n            exportValues\n          } of fieldObj) {\n            if (page === -1) {\n              continue;\n            }\n            if (id === skipId) {\n              continue;\n            }\n            const exportValue = typeof exportValues === \"string\" ? exportValues : null;\n            const domElement = document.querySelector(`[data-element-id=\"${id}\"]`);\n            if (domElement && !GetElementsByNameSet.has(domElement)) {\n              warn(`_getElementsByName - element not allowed: ${id}`);\n              continue;\n            }\n            fields.push({\n              id,\n              exportValue,\n              domElement\n            });\n          }\n        }\n        return fields;\n      }\n      for (const domElement of document.getElementsByName(name)) {\n        const {\n          exportValue\n        } = domElement;\n        const id = domElement.getAttribute(\"data-element-id\");\n        if (id === skipId) {\n          continue;\n        }\n        if (!GetElementsByNameSet.has(domElement)) {\n          continue;\n        }\n        fields.push({\n          id,\n          exportValue,\n          domElement\n        });\n      }\n      return fields;\n    }\n    show() {\n      if (this.container) {\n        this.container.hidden = false;\n      }\n      this.popup?.maybeShow();\n    }\n    hide() {\n      if (this.container) {\n        this.container.hidden = true;\n      }\n      this.popup?.forceHide();\n    }\n    getElementsToTriggerPopup() {\n      return this.container;\n    }\n    addHighlightArea() {\n      const triggers = this.getElementsToTriggerPopup();\n      if (Array.isArray(triggers)) {\n        for (const element of triggers) {\n          element.classList.add(\"highlightArea\");\n        }\n      } else {\n        triggers.classList.add(\"highlightArea\");\n      }\n    }\n    _editOnDoubleClick() {\n      if (!this._isEditable) {\n        return;\n      }\n      const {\n        annotationEditorType: mode,\n        data: {\n          id: editId\n        }\n      } = this;\n      this.container.addEventListener(\"dblclick\", () => {\n        this.linkService.eventBus?.dispatch(\"switchannotationeditormode\", {\n          source: this,\n          mode,\n          editId\n        });\n      });\n    }\n  }\n  class LinkAnnotationElement extends AnnotationElement {\n    constructor(parameters, options = null) {\n      super(parameters, {\n        isRenderable: true,\n        ignoreBorder: !!options?.ignoreBorder,\n        createQuadrilaterals: true\n      });\n      this.isTooltipOnly = parameters.data.isTooltipOnly;\n    }\n    render() {\n      const {\n        data,\n        linkService\n      } = this;\n      const link = document.createElement(\"a\");\n      link.setAttribute(\"data-element-id\", data.id);\n      let isBound = false;\n      if (data.url) {\n        linkService.addLinkAttributes(link, data.url, data.newWindow);\n        isBound = true;\n      } else if (data.action) {\n        this._bindNamedAction(link, data.action);\n        isBound = true;\n      } else if (data.attachment) {\n        this.#bindAttachment(link, data.attachment, data.attachmentDest);\n        isBound = true;\n      } else if (data.setOCGState) {\n        this.#bindSetOCGState(link, data.setOCGState);\n        isBound = true;\n      } else if (data.dest) {\n        this._bindLink(link, data.dest);\n        isBound = true;\n      } else {\n        if (data.actions && (data.actions.Action || data.actions[\"Mouse Up\"] || data.actions[\"Mouse Down\"]) && this.enableScripting && this.hasJSActions) {\n          this._bindJSAction(link, data);\n          isBound = true;\n        }\n        if (data.resetForm) {\n          this._bindResetFormAction(link, data.resetForm);\n          isBound = true;\n        } else if (this.isTooltipOnly && !isBound) {\n          this._bindLink(link, \"\");\n          isBound = true;\n        }\n      }\n      this.container.classList.add(\"linkAnnotation\");\n      if (isBound) {\n        this.container.append(link);\n      }\n      return this.container;\n    }\n    #setInternalLink() {\n      this.container.setAttribute(\"data-internal-link\", \"\");\n    }\n    _bindLink(link, destination) {\n      link.href = this.linkService.getDestinationHash(destination);\n      link.onclick = () => {\n        if (destination) {\n          this.linkService.goToDestination(destination);\n        }\n        return false;\n      };\n      if (destination || destination === \"\") {\n        this.#setInternalLink();\n      }\n    }\n    _bindNamedAction(link, action) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n      link.onclick = () => {\n        this.linkService.executeNamedAction(action);\n        return false;\n      };\n      this.#setInternalLink();\n    }\n    #bindAttachment(link, attachment, dest = null) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n      if (attachment.description) {\n        link.title = attachment.description;\n      }\n      link.onclick = () => {\n        this.downloadManager?.openOrDownloadData(attachment.content, attachment.filename, dest);\n        return false;\n      };\n      this.#setInternalLink();\n    }\n    #bindSetOCGState(link, action) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n      link.onclick = () => {\n        this.linkService.executeSetOCGState(action);\n        return false;\n      };\n      this.#setInternalLink();\n    }\n    _bindJSAction(link, data) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n      const map = new Map([[\"Action\", \"onclick\"], [\"Mouse Up\", \"onmouseup\"], [\"Mouse Down\", \"onmousedown\"]]);\n      for (const name of Object.keys(data.actions)) {\n        const jsName = map.get(name);\n        if (!jsName) {\n          continue;\n        }\n        link[jsName] = () => {\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id: data.id,\n              name\n            }\n          });\n          return false;\n        };\n      }\n      if (!link.onclick) {\n        link.onclick = () => false;\n      }\n      this.#setInternalLink();\n    }\n    _bindResetFormAction(link, resetForm) {\n      const otherClickAction = link.onclick;\n      if (!otherClickAction) {\n        link.href = this.linkService.getAnchorUrl(\"\");\n      }\n      this.#setInternalLink();\n      if (!this._fieldObjects) {\n        warn(`_bindResetFormAction - \"resetForm\" action not supported, ` + \"ensure that the `fieldObjects` parameter is provided.\");\n        if (!otherClickAction) {\n          link.onclick = () => false;\n        }\n        return;\n      }\n      link.onclick = () => {\n        otherClickAction?.();\n        const {\n          fields: resetFormFields,\n          refs: resetFormRefs,\n          include\n        } = resetForm;\n        const allFields = [];\n        if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n          const fieldIds = new Set(resetFormRefs);\n          for (const fieldName of resetFormFields) {\n            const fields = this._fieldObjects[fieldName] || [];\n            for (const {\n              id\n            } of fields) {\n              fieldIds.add(id);\n            }\n          }\n          for (const fields of Object.values(this._fieldObjects)) {\n            for (const field of fields) {\n              if (fieldIds.has(field.id) === include) {\n                allFields.push(field);\n              }\n            }\n          }\n        } else {\n          for (const fields of Object.values(this._fieldObjects)) {\n            allFields.push(...fields);\n          }\n        }\n        const storage = this.annotationStorage;\n        const allIds = [];\n        for (const field of allFields) {\n          const {\n            id\n          } = field;\n          allIds.push(id);\n          switch (field.type) {\n            case \"text\":\n              {\n                const value = field.defaultValue || \"\";\n                storage.setValue(id, {\n                  value\n                });\n                break;\n              }\n            case \"checkbox\":\n            case \"radiobutton\":\n              {\n                const value = field.defaultValue === field.exportValues;\n                storage.setValue(id, {\n                  value\n                });\n                break;\n              }\n            case \"combobox\":\n            case \"listbox\":\n              {\n                const value = field.defaultValue || \"\";\n                storage.setValue(id, {\n                  value\n                });\n                break;\n              }\n            default:\n              continue;\n          }\n          const domElement = document.querySelector(`[data-element-id=\"${id}\"]`);\n          if (!domElement) {\n            continue;\n          } else if (!GetElementsByNameSet.has(domElement)) {\n            warn(`_bindResetFormAction - element not allowed: ${id}`);\n            continue;\n          }\n          domElement.dispatchEvent(new Event(\"resetform\"));\n        }\n        if (this.enableScripting) {\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id: \"app\",\n              ids: allIds,\n              name: \"ResetForm\"\n            }\n          });\n        }\n        return false;\n      };\n    }\n  }\n  class TextAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true\n      });\n    }\n    render() {\n      this.container.classList.add(\"textAnnotation\");\n      const image = document.createElement(\"img\");\n      image.src = this.imageResourcesPath + \"annotation-\" + this.data.name.toLowerCase() + \".svg\";\n      image.setAttribute(\"data-l10n-id\", \"pdfjs-text-annotation-type\");\n      image.setAttribute(\"data-l10n-args\", JSON.stringify({\n        type: this.data.name\n      }));\n      if (!this.data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n      this.container.append(image);\n      return this.container;\n    }\n  }\n  class WidgetAnnotationElement extends AnnotationElement {\n    render() {\n      return this.container;\n    }\n    showElementAndHideCanvas(element) {\n      if (this.data.hasOwnCanvas) {\n        if (element.previousSibling?.nodeName === \"CANVAS\") {\n          element.previousSibling.hidden = true;\n        }\n        element.hidden = false;\n      }\n    }\n    _getKeyModifier(event) {\n      return util_FeatureTest.platform.isMac ? event.metaKey : event.ctrlKey;\n    }\n    _setEventListener(element, elementData, baseName, eventName, valueGetter) {\n      if (baseName.includes(\"mouse\")) {\n        element.addEventListener(baseName, event => {\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id: this.data.id,\n              name: eventName,\n              value: valueGetter(event),\n              shift: event.shiftKey,\n              modifier: this._getKeyModifier(event)\n            }\n          });\n        });\n      } else {\n        element.addEventListener(baseName, event => {\n          if (baseName === \"blur\") {\n            if (!elementData.focused || !event.relatedTarget) {\n              return;\n            }\n            elementData.focused = false;\n          } else if (baseName === \"focus\") {\n            if (elementData.focused) {\n              return;\n            }\n            elementData.focused = true;\n          }\n          if (!valueGetter) {\n            return;\n          }\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id: this.data.id,\n              name: eventName,\n              value: valueGetter(event)\n            }\n          });\n        });\n      }\n    }\n    _setEventListeners(element, elementData, names, getter) {\n      for (const [baseName, eventName] of names) {\n        if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n          if (eventName === \"Focus\" || eventName === \"Blur\") {\n            elementData ||= {\n              focused: false\n            };\n          }\n          this._setEventListener(element, elementData, baseName, eventName, getter);\n          if (eventName === \"Focus\" && !this.data.actions?.Blur) {\n            this._setEventListener(element, elementData, \"blur\", \"Blur\", null);\n          } else if (eventName === \"Blur\" && !this.data.actions?.Focus) {\n            this._setEventListener(element, elementData, \"focus\", \"Focus\", null);\n          }\n        }\n      }\n    }\n    _setBackgroundColor(element) {\n      const color = this.data.backgroundColor || null;\n      element.style.backgroundColor = color === null ? \"transparent\" : Util.makeHexColor(color[0], color[1], color[2]);\n    }\n    _setTextStyle(element) {\n      const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n      const {\n        fontColor\n      } = this.data.defaultAppearanceData;\n      const fontSize = this.data.defaultAppearanceData.fontSize || annotation_layer_DEFAULT_FONT_SIZE;\n      const style = element.style;\n      let computedFontSize;\n      const BORDER_SIZE = 2;\n      const roundToOneDecimal = x => Math.round(10 * x) / 10;\n      if (this.data.multiLine) {\n        const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);\n        const numberOfLines = Math.round(height / (LINE_FACTOR * fontSize)) || 1;\n        const lineHeight = height / numberOfLines;\n        computedFontSize = Math.min(fontSize, roundToOneDecimal(lineHeight / LINE_FACTOR));\n      } else {\n        const height = Math.abs(this.data.rect[3] - this.data.rect[1] - BORDER_SIZE);\n        computedFontSize = Math.min(fontSize, roundToOneDecimal(height / LINE_FACTOR));\n      }\n      style.fontSize = `calc(${computedFontSize}px * var(--scale-factor))`;\n      style.color = Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n      if (this.data.textAlignment !== null) {\n        style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n      }\n    }\n    _setRequired(element, isRequired) {\n      if (isRequired) {\n        element.setAttribute(\"required\", true);\n      } else {\n        element.removeAttribute(\"required\");\n      }\n      element.setAttribute(\"aria-required\", isRequired);\n    }\n  }\n  class TextWidgetAnnotationElement extends WidgetAnnotationElement {\n    constructor(parameters) {\n      const isRenderable = parameters.renderForms || parameters.data.hasOwnCanvas || !parameters.data.hasAppearance && !!parameters.data.fieldValue;\n      super(parameters, {\n        isRenderable\n      });\n    }\n    setPropertyOnSiblings(base, key, value, keyInStorage) {\n      const storage = this.annotationStorage;\n      for (const element of this._getElementsByName(base.name, base.id)) {\n        if (element.domElement) {\n          element.domElement[key] = value;\n        }\n        storage.setValue(element.id, {\n          [keyInStorage]: value\n        });\n      }\n    }\n    render() {\n      const storage = this.annotationStorage;\n      const id = this.data.id;\n      this.container.classList.add(\"textWidgetAnnotation\");\n      let element = null;\n      if (this.renderForms) {\n        const storedData = storage.getValue(id, {\n          value: this.data.fieldValue\n        });\n        let textContent = storedData.value || \"\";\n        const maxLen = storage.getValue(id, {\n          charLimit: this.data.maxLen\n        }).charLimit;\n        if (maxLen && textContent.length > maxLen) {\n          textContent = textContent.slice(0, maxLen);\n        }\n        let fieldFormattedValues = storedData.formattedValue || this.data.textContent?.join(\"\\n\") || null;\n        if (fieldFormattedValues && this.data.comb) {\n          fieldFormattedValues = fieldFormattedValues.replaceAll(/\\s+/g, \"\");\n        }\n        const elementData = {\n          userValue: textContent,\n          formattedValue: fieldFormattedValues,\n          lastCommittedValue: null,\n          commitKey: 1,\n          focused: false\n        };\n        if (this.data.multiLine) {\n          element = document.createElement(\"textarea\");\n          element.textContent = fieldFormattedValues ?? textContent;\n          if (this.data.doNotScroll) {\n            element.style.overflowY = \"hidden\";\n          }\n        } else {\n          element = document.createElement(\"input\");\n          element.type = \"text\";\n          element.setAttribute(\"value\", fieldFormattedValues ?? textContent);\n          if (this.data.doNotScroll) {\n            element.style.overflowX = \"hidden\";\n          }\n        }\n        if (this.data.hasOwnCanvas) {\n          element.hidden = true;\n        }\n        GetElementsByNameSet.add(element);\n        element.setAttribute(\"data-element-id\", id);\n        element.disabled = this.data.readOnly;\n        element.name = this.data.fieldName;\n        element.tabIndex = DEFAULT_TAB_INDEX;\n        this._setRequired(element, this.data.required);\n        if (maxLen) {\n          element.maxLength = maxLen;\n        }\n        element.addEventListener(\"input\", event => {\n          storage.setValue(id, {\n            value: event.target.value\n          });\n          this.setPropertyOnSiblings(element, \"value\", event.target.value, \"value\");\n          elementData.formattedValue = null;\n        });\n        element.addEventListener(\"resetform\", event => {\n          const defaultValue = this.data.defaultFieldValue ?? \"\";\n          element.value = elementData.userValue = defaultValue;\n          elementData.formattedValue = null;\n        });\n        let blurListener = event => {\n          const {\n            formattedValue\n          } = elementData;\n          if (formattedValue !== null && formattedValue !== undefined) {\n            event.target.value = formattedValue;\n          }\n          event.target.scrollLeft = 0;\n        };\n        if (this.enableScripting && this.hasJSActions) {\n          element.addEventListener(\"focus\", event => {\n            if (elementData.focused) {\n              return;\n            }\n            const {\n              target\n            } = event;\n            if (elementData.userValue) {\n              target.value = elementData.userValue;\n            }\n            elementData.lastCommittedValue = target.value;\n            elementData.commitKey = 1;\n            if (!this.data.actions?.Focus) {\n              elementData.focused = true;\n            }\n          });\n          element.addEventListener(\"updatefromsandbox\", jsEvent => {\n            this.showElementAndHideCanvas(jsEvent.target);\n            const actions = {\n              value(event) {\n                elementData.userValue = event.detail.value ?? \"\";\n                storage.setValue(id, {\n                  value: elementData.userValue.toString()\n                });\n                event.target.value = elementData.userValue;\n              },\n              formattedValue(event) {\n                const {\n                  formattedValue\n                } = event.detail;\n                elementData.formattedValue = formattedValue;\n                if (formattedValue !== null && formattedValue !== undefined && event.target !== document.activeElement) {\n                  event.target.value = formattedValue;\n                }\n                storage.setValue(id, {\n                  formattedValue\n                });\n              },\n              selRange(event) {\n                event.target.setSelectionRange(...event.detail.selRange);\n              },\n              charLimit: event => {\n                const {\n                  charLimit\n                } = event.detail;\n                const {\n                  target\n                } = event;\n                if (charLimit === 0) {\n                  target.removeAttribute(\"maxLength\");\n                  return;\n                }\n                target.setAttribute(\"maxLength\", charLimit);\n                let value = elementData.userValue;\n                if (!value || value.length <= charLimit) {\n                  return;\n                }\n                value = value.slice(0, charLimit);\n                target.value = elementData.userValue = value;\n                storage.setValue(id, {\n                  value\n                });\n                this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                  source: this,\n                  detail: {\n                    id,\n                    name: \"Keystroke\",\n                    value,\n                    willCommit: true,\n                    commitKey: 1,\n                    selStart: target.selectionStart,\n                    selEnd: target.selectionEnd\n                  }\n                });\n              }\n            };\n            this._dispatchEventFromSandbox(actions, jsEvent);\n          });\n          element.addEventListener(\"keydown\", event => {\n            elementData.commitKey = 1;\n            let commitKey = -1;\n            if (event.key === \"Escape\") {\n              commitKey = 0;\n            } else if (event.key === \"Enter\" && !this.data.multiLine) {\n              commitKey = 2;\n            } else if (event.key === \"Tab\") {\n              elementData.commitKey = 3;\n            }\n            if (commitKey === -1) {\n              return;\n            }\n            const {\n              value\n            } = event.target;\n            if (elementData.lastCommittedValue === value) {\n              return;\n            }\n            elementData.lastCommittedValue = value;\n            elementData.userValue = value;\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value,\n                willCommit: true,\n                commitKey,\n                selStart: event.target.selectionStart,\n                selEnd: event.target.selectionEnd\n              }\n            });\n          });\n          const _blurListener = blurListener;\n          blurListener = null;\n          element.addEventListener(\"blur\", event => {\n            if (!elementData.focused || !event.relatedTarget) {\n              return;\n            }\n            if (!this.data.actions?.Blur) {\n              elementData.focused = false;\n            }\n            const {\n              value\n            } = event.target;\n            elementData.userValue = value;\n            if (elementData.lastCommittedValue !== value) {\n              this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                source: this,\n                detail: {\n                  id,\n                  name: \"Keystroke\",\n                  value,\n                  willCommit: true,\n                  commitKey: elementData.commitKey,\n                  selStart: event.target.selectionStart,\n                  selEnd: event.target.selectionEnd\n                }\n              });\n            }\n            _blurListener(event);\n          });\n          if (this.data.actions?.Keystroke) {\n            element.addEventListener(\"beforeinput\", event => {\n              elementData.lastCommittedValue = null;\n              const {\n                data,\n                target\n              } = event;\n              const {\n                value,\n                selectionStart,\n                selectionEnd\n              } = target;\n              let selStart = selectionStart,\n                selEnd = selectionEnd;\n              switch (event.inputType) {\n                case \"deleteWordBackward\":\n                  {\n                    const match = value.substring(0, selectionStart).match(/\\w*[^\\w]*$/);\n                    if (match) {\n                      selStart -= match[0].length;\n                    }\n                    break;\n                  }\n                case \"deleteWordForward\":\n                  {\n                    const match = value.substring(selectionStart).match(/^[^\\w]*\\w*/);\n                    if (match) {\n                      selEnd += match[0].length;\n                    }\n                    break;\n                  }\n                case \"deleteContentBackward\":\n                  if (selectionStart === selectionEnd) {\n                    selStart -= 1;\n                  }\n                  break;\n                case \"deleteContentForward\":\n                  if (selectionStart === selectionEnd) {\n                    selEnd += 1;\n                  }\n                  break;\n              }\n              event.preventDefault();\n              this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                source: this,\n                detail: {\n                  id,\n                  name: \"Keystroke\",\n                  value,\n                  change: data || \"\",\n                  willCommit: false,\n                  selStart,\n                  selEnd\n                }\n              });\n            });\n          }\n          this._setEventListeners(element, elementData, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.value);\n        }\n        if (blurListener) {\n          element.addEventListener(\"blur\", blurListener);\n        }\n        if (this.data.comb) {\n          const fieldWidth = this.data.rect[2] - this.data.rect[0];\n          const combWidth = fieldWidth / maxLen;\n          element.classList.add(\"comb\");\n          element.style.letterSpacing = `calc(${combWidth}px * var(--scale-factor) - 1ch)`;\n        }\n      } else {\n        element = document.createElement(\"div\");\n        element.textContent = this.data.fieldValue;\n        element.style.verticalAlign = \"middle\";\n        element.style.display = \"table-cell\";\n        if (this.data.hasOwnCanvas) {\n          element.hidden = true;\n        }\n      }\n      this._setTextStyle(element);\n      this._setBackgroundColor(element);\n      this._setDefaultPropertiesFromJS(element);\n      this.container.append(element);\n      return this.container;\n    }\n  }\n  class SignatureWidgetAnnotationElement extends WidgetAnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: !!parameters.data.hasOwnCanvas\n      });\n    }\n  }\n  class CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: parameters.renderForms\n      });\n    }\n    render() {\n      const storage = this.annotationStorage;\n      const data = this.data;\n      const id = data.id;\n      let value = storage.getValue(id, {\n        value: data.exportValue === data.fieldValue\n      }).value;\n      if (typeof value === \"string\") {\n        value = value !== \"Off\";\n        storage.setValue(id, {\n          value\n        });\n      }\n      this.container.classList.add(\"buttonWidgetAnnotation\", \"checkBox\");\n      const element = document.createElement(\"input\");\n      GetElementsByNameSet.add(element);\n      element.setAttribute(\"data-element-id\", id);\n      element.disabled = data.readOnly;\n      this._setRequired(element, this.data.required);\n      element.type = \"checkbox\";\n      element.name = data.fieldName;\n      if (value) {\n        element.setAttribute(\"checked\", true);\n      }\n      element.setAttribute(\"exportValue\", data.exportValue);\n      element.tabIndex = DEFAULT_TAB_INDEX;\n      element.addEventListener(\"change\", event => {\n        const {\n          name,\n          checked\n        } = event.target;\n        for (const checkbox of this._getElementsByName(name, id)) {\n          const curChecked = checked && checkbox.exportValue === data.exportValue;\n          if (checkbox.domElement) {\n            checkbox.domElement.checked = curChecked;\n          }\n          storage.setValue(checkbox.id, {\n            value: curChecked\n          });\n        }\n        storage.setValue(id, {\n          value: checked\n        });\n      });\n      element.addEventListener(\"resetform\", event => {\n        const defaultValue = data.defaultFieldValue || \"Off\";\n        event.target.checked = defaultValue === data.exportValue;\n      });\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"updatefromsandbox\", jsEvent => {\n          const actions = {\n            value(event) {\n              event.target.checked = event.detail.value !== \"Off\";\n              storage.setValue(id, {\n                value: event.target.checked\n              });\n            }\n          };\n          this._dispatchEventFromSandbox(actions, jsEvent);\n        });\n        this._setEventListeners(element, null, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n      }\n      this._setBackgroundColor(element);\n      this._setDefaultPropertiesFromJS(element);\n      this.container.append(element);\n      return this.container;\n    }\n  }\n  class RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: parameters.renderForms\n      });\n    }\n    render() {\n      this.container.classList.add(\"buttonWidgetAnnotation\", \"radioButton\");\n      const storage = this.annotationStorage;\n      const data = this.data;\n      const id = data.id;\n      let value = storage.getValue(id, {\n        value: data.fieldValue === data.buttonValue\n      }).value;\n      if (typeof value === \"string\") {\n        value = value !== data.buttonValue;\n        storage.setValue(id, {\n          value\n        });\n      }\n      if (value) {\n        for (const radio of this._getElementsByName(data.fieldName, id)) {\n          storage.setValue(radio.id, {\n            value: false\n          });\n        }\n      }\n      const element = document.createElement(\"input\");\n      GetElementsByNameSet.add(element);\n      element.setAttribute(\"data-element-id\", id);\n      element.disabled = data.readOnly;\n      this._setRequired(element, this.data.required);\n      element.type = \"radio\";\n      element.name = data.fieldName;\n      if (value) {\n        element.setAttribute(\"checked\", true);\n      }\n      element.tabIndex = DEFAULT_TAB_INDEX;\n      element.addEventListener(\"change\", event => {\n        const {\n          name,\n          checked\n        } = event.target;\n        for (const radio of this._getElementsByName(name, id)) {\n          storage.setValue(radio.id, {\n            value: false\n          });\n        }\n        storage.setValue(id, {\n          value: checked\n        });\n      });\n      element.addEventListener(\"resetform\", event => {\n        const defaultValue = data.defaultFieldValue;\n        event.target.checked = defaultValue !== null && defaultValue !== undefined && defaultValue === data.buttonValue;\n      });\n      if (this.enableScripting && this.hasJSActions) {\n        const pdfButtonValue = data.buttonValue;\n        element.addEventListener(\"updatefromsandbox\", jsEvent => {\n          const actions = {\n            value: event => {\n              const checked = pdfButtonValue === event.detail.value;\n              for (const radio of this._getElementsByName(event.target.name)) {\n                const curChecked = checked && radio.id === id;\n                if (radio.domElement) {\n                  radio.domElement.checked = curChecked;\n                }\n                storage.setValue(radio.id, {\n                  value: curChecked\n                });\n              }\n            }\n          };\n          this._dispatchEventFromSandbox(actions, jsEvent);\n        });\n        this._setEventListeners(element, null, [[\"change\", \"Validate\"], [\"change\", \"Action\"], [\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"]], event => event.target.checked);\n      }\n      this._setBackgroundColor(element);\n      this._setDefaultPropertiesFromJS(element);\n      this.container.append(element);\n      return this.container;\n    }\n  }\n  class PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        ignoreBorder: parameters.data.hasAppearance\n      });\n    }\n    render() {\n      const container = super.render();\n      container.classList.add(\"buttonWidgetAnnotation\", \"pushButton\");\n      const linkElement = container.lastChild;\n      if (this.enableScripting && this.hasJSActions && linkElement) {\n        this._setDefaultPropertiesFromJS(linkElement);\n        linkElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n          this._dispatchEventFromSandbox({}, jsEvent);\n        });\n      }\n      return container;\n    }\n  }\n  class ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: parameters.renderForms\n      });\n    }\n    render() {\n      this.container.classList.add(\"choiceWidgetAnnotation\");\n      const storage = this.annotationStorage;\n      const id = this.data.id;\n      const storedData = storage.getValue(id, {\n        value: this.data.fieldValue\n      });\n      const selectElement = document.createElement(\"select\");\n      GetElementsByNameSet.add(selectElement);\n      selectElement.setAttribute(\"data-element-id\", id);\n      selectElement.disabled = this.data.readOnly;\n      this._setRequired(selectElement, this.data.required);\n      selectElement.name = this.data.fieldName;\n      selectElement.tabIndex = DEFAULT_TAB_INDEX;\n      let addAnEmptyEntry = this.data.combo && this.data.options.length > 0;\n      if (!this.data.combo) {\n        selectElement.size = this.data.options.length;\n        if (this.data.multiSelect) {\n          selectElement.multiple = true;\n        }\n      }\n      selectElement.addEventListener(\"resetform\", event => {\n        const defaultValue = this.data.defaultFieldValue;\n        for (const option of selectElement.options) {\n          option.selected = option.value === defaultValue;\n        }\n      });\n      for (const option of this.data.options) {\n        const optionElement = document.createElement(\"option\");\n        optionElement.textContent = option.displayValue;\n        optionElement.value = option.exportValue;\n        if (storedData.value.includes(option.exportValue)) {\n          optionElement.setAttribute(\"selected\", true);\n          addAnEmptyEntry = false;\n        }\n        selectElement.append(optionElement);\n      }\n      let removeEmptyEntry = null;\n      if (addAnEmptyEntry) {\n        const noneOptionElement = document.createElement(\"option\");\n        noneOptionElement.value = \" \";\n        noneOptionElement.setAttribute(\"hidden\", true);\n        noneOptionElement.setAttribute(\"selected\", true);\n        selectElement.prepend(noneOptionElement);\n        removeEmptyEntry = () => {\n          noneOptionElement.remove();\n          selectElement.removeEventListener(\"input\", removeEmptyEntry);\n          removeEmptyEntry = null;\n        };\n        selectElement.addEventListener(\"input\", removeEmptyEntry);\n      }\n      const getValue = isExport => {\n        const name = isExport ? \"value\" : \"textContent\";\n        const {\n          options,\n          multiple\n        } = selectElement;\n        if (!multiple) {\n          return options.selectedIndex === -1 ? null : options[options.selectedIndex][name];\n        }\n        return Array.prototype.filter.call(options, option => option.selected).map(option => option[name]);\n      };\n      let selectedValues = getValue(false);\n      const getItems = event => {\n        const options = event.target.options;\n        return Array.prototype.map.call(options, option => ({\n          displayValue: option.textContent,\n          exportValue: option.value\n        }));\n      };\n      if (this.enableScripting && this.hasJSActions) {\n        selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n          const actions = {\n            value(event) {\n              removeEmptyEntry?.();\n              const value = event.detail.value;\n              const values = new Set(Array.isArray(value) ? value : [value]);\n              for (const option of selectElement.options) {\n                option.selected = values.has(option.value);\n              }\n              storage.setValue(id, {\n                value: getValue(true)\n              });\n              selectedValues = getValue(false);\n            },\n            multipleSelection(event) {\n              selectElement.multiple = true;\n            },\n            remove(event) {\n              const options = selectElement.options;\n              const index = event.detail.remove;\n              options[index].selected = false;\n              selectElement.remove(index);\n              if (options.length > 0) {\n                const i = Array.prototype.findIndex.call(options, option => option.selected);\n                if (i === -1) {\n                  options[0].selected = true;\n                }\n              }\n              storage.setValue(id, {\n                value: getValue(true),\n                items: getItems(event)\n              });\n              selectedValues = getValue(false);\n            },\n            clear(event) {\n              while (selectElement.length !== 0) {\n                selectElement.remove(0);\n              }\n              storage.setValue(id, {\n                value: null,\n                items: []\n              });\n              selectedValues = getValue(false);\n            },\n            insert(event) {\n              const {\n                index,\n                displayValue,\n                exportValue\n              } = event.detail.insert;\n              const selectChild = selectElement.children[index];\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = displayValue;\n              optionElement.value = exportValue;\n              if (selectChild) {\n                selectChild.before(optionElement);\n              } else {\n                selectElement.append(optionElement);\n              }\n              storage.setValue(id, {\n                value: getValue(true),\n                items: getItems(event)\n              });\n              selectedValues = getValue(false);\n            },\n            items(event) {\n              const {\n                items\n              } = event.detail;\n              while (selectElement.length !== 0) {\n                selectElement.remove(0);\n              }\n              for (const item of items) {\n                const {\n                  displayValue,\n                  exportValue\n                } = item;\n                const optionElement = document.createElement(\"option\");\n                optionElement.textContent = displayValue;\n                optionElement.value = exportValue;\n                selectElement.append(optionElement);\n              }\n              if (selectElement.options.length > 0) {\n                selectElement.options[0].selected = true;\n              }\n              storage.setValue(id, {\n                value: getValue(true),\n                items: getItems(event)\n              });\n              selectedValues = getValue(false);\n            },\n            indices(event) {\n              const indices = new Set(event.detail.indices);\n              for (const option of event.target.options) {\n                option.selected = indices.has(option.index);\n              }\n              storage.setValue(id, {\n                value: getValue(true)\n              });\n              selectedValues = getValue(false);\n            },\n            editable(event) {\n              event.target.disabled = !event.detail.editable;\n            }\n          };\n          this._dispatchEventFromSandbox(actions, jsEvent);\n        });\n        selectElement.addEventListener(\"input\", event => {\n          const exportValue = getValue(true);\n          const change = getValue(false);\n          storage.setValue(id, {\n            value: exportValue\n          });\n          event.preventDefault();\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id,\n              name: \"Keystroke\",\n              value: selectedValues,\n              change,\n              changeEx: exportValue,\n              willCommit: false,\n              commitKey: 1,\n              keyDown: false\n            }\n          });\n        });\n        this._setEventListeners(selectElement, null, [[\"focus\", \"Focus\"], [\"blur\", \"Blur\"], [\"mousedown\", \"Mouse Down\"], [\"mouseenter\", \"Mouse Enter\"], [\"mouseleave\", \"Mouse Exit\"], [\"mouseup\", \"Mouse Up\"], [\"input\", \"Action\"], [\"input\", \"Validate\"]], event => event.target.value);\n      } else {\n        selectElement.addEventListener(\"input\", function (event) {\n          storage.setValue(id, {\n            value: getValue(true)\n          });\n        });\n      }\n      if (this.data.combo) {\n        this._setTextStyle(selectElement);\n      }\n      this._setBackgroundColor(selectElement);\n      this._setDefaultPropertiesFromJS(selectElement);\n      this.container.append(selectElement);\n      return this.container;\n    }\n  }\n  class PopupAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      const {\n        data,\n        elements\n      } = parameters;\n      super(parameters, {\n        isRenderable: AnnotationElement._hasPopupData(data)\n      });\n      this.elements = elements;\n      this.popup = null;\n    }\n    render() {\n      this.container.classList.add(\"popupAnnotation\");\n      const popup = this.popup = new PopupElement({\n        container: this.container,\n        color: this.data.color,\n        titleObj: this.data.titleObj,\n        modificationDate: this.data.modificationDate,\n        contentsObj: this.data.contentsObj,\n        richText: this.data.richText,\n        rect: this.data.rect,\n        parentRect: this.data.parentRect || null,\n        parent: this.parent,\n        elements: this.elements,\n        open: this.data.open\n      });\n      const elementIds = [];\n      for (const element of this.elements) {\n        element.popup = popup;\n        elementIds.push(element.data.id);\n        element.addHighlightArea();\n      }\n      this.container.setAttribute(\"aria-controls\", elementIds.map(id => `${AnnotationPrefix}${id}`).join(\",\"));\n      return this.container;\n    }\n  }\n  class PopupElement {\n    #boundKeyDown = this.#keyDown.bind(this);\n    #boundHide = this.#hide.bind(this);\n    #boundShow = this.#show.bind(this);\n    #boundToggle = this.#toggle.bind(this);\n    #color = null;\n    #container = null;\n    #contentsObj = null;\n    #dateObj = null;\n    #elements = null;\n    #parent = null;\n    #parentRect = null;\n    #pinned = false;\n    #popup = null;\n    #position = null;\n    #rect = null;\n    #richText = null;\n    #titleObj = null;\n    #updates = null;\n    #wasVisible = false;\n    constructor({\n      container,\n      color,\n      elements,\n      titleObj,\n      modificationDate,\n      contentsObj,\n      richText,\n      parent,\n      rect,\n      parentRect,\n      open\n    }) {\n      this.#container = container;\n      this.#titleObj = titleObj;\n      this.#contentsObj = contentsObj;\n      this.#richText = richText;\n      this.#parent = parent;\n      this.#color = color;\n      this.#rect = rect;\n      this.#parentRect = parentRect;\n      this.#elements = elements;\n      this.#dateObj = PDFDateString.toDateObject(modificationDate);\n      this.trigger = elements.flatMap(e => e.getElementsToTriggerPopup());\n      for (const element of this.trigger) {\n        element.addEventListener(\"click\", this.#boundToggle);\n        element.addEventListener(\"mouseenter\", this.#boundShow);\n        element.addEventListener(\"mouseleave\", this.#boundHide);\n        element.classList.add(\"popupTriggerArea\");\n      }\n      for (const element of elements) {\n        element.container?.addEventListener(\"keydown\", this.#boundKeyDown);\n      }\n      this.#container.hidden = true;\n      if (open) {\n        this.#toggle();\n      }\n    }\n    render() {\n      if (this.#popup) {\n        return;\n      }\n      const popup = this.#popup = document.createElement(\"div\");\n      popup.className = \"popup\";\n      if (this.#color) {\n        const baseColor = popup.style.outlineColor = Util.makeHexColor(...this.#color);\n        if (CSS.supports(\"background-color\", \"color-mix(in srgb, red 30%, white)\")) {\n          popup.style.backgroundColor = `color-mix(in srgb, ${baseColor} 30%, white)`;\n        } else {\n          const BACKGROUND_ENLIGHT = 0.7;\n          popup.style.backgroundColor = Util.makeHexColor(...this.#color.map(c => Math.floor(BACKGROUND_ENLIGHT * (255 - c) + c)));\n        }\n      }\n      const header = document.createElement(\"span\");\n      header.className = \"header\";\n      const title = document.createElement(\"h1\");\n      header.append(title);\n      ({\n        dir: title.dir,\n        str: title.textContent\n      } = this.#titleObj);\n      popup.append(header);\n      if (this.#dateObj) {\n        const modificationDate = document.createElement(\"span\");\n        modificationDate.classList.add(\"popupDate\");\n        modificationDate.setAttribute(\"data-l10n-id\", \"pdfjs-annotation-date-time-string\");\n        modificationDate.setAttribute(\"data-l10n-args\", JSON.stringify({\n          dateObj: this.#dateObj.valueOf()\n        }));\n        header.append(modificationDate);\n      }\n      const html = this.#html;\n      if (html) {\n        XfaLayer.render({\n          xfaHtml: html,\n          intent: \"richText\",\n          div: popup\n        });\n        popup.lastChild.classList.add(\"richText\", \"popupContent\");\n      } else {\n        const contents = this._formatContents(this.#contentsObj);\n        popup.append(contents);\n      }\n      this.#container.append(popup);\n    }\n    get #html() {\n      const richText = this.#richText;\n      const contentsObj = this.#contentsObj;\n      if (richText?.str && (!contentsObj?.str || contentsObj.str === richText.str)) {\n        return this.#richText.html || null;\n      }\n      return null;\n    }\n    get #fontSize() {\n      return this.#html?.attributes?.style?.fontSize || 0;\n    }\n    get #fontColor() {\n      return this.#html?.attributes?.style?.color || null;\n    }\n    #makePopupContent(text) {\n      const popupLines = [];\n      const popupContent = {\n        str: text,\n        html: {\n          name: \"div\",\n          attributes: {\n            dir: \"auto\"\n          },\n          children: [{\n            name: \"p\",\n            children: popupLines\n          }]\n        }\n      };\n      const lineAttributes = {\n        style: {\n          color: this.#fontColor,\n          fontSize: this.#fontSize ? `calc(${this.#fontSize}px * var(--scale-factor))` : \"\"\n        }\n      };\n      for (const line of text.split(\"\\n\")) {\n        popupLines.push({\n          name: \"span\",\n          value: line,\n          attributes: lineAttributes\n        });\n      }\n      return popupContent;\n    }\n    _formatContents({\n      str,\n      dir\n    }) {\n      const p = document.createElement(\"p\");\n      p.classList.add(\"popupContent\");\n      p.dir = dir;\n      const lines = str.split(/(?:\\r\\n?|\\n)/);\n      for (let i = 0, ii = lines.length; i < ii; ++i) {\n        const line = lines[i];\n        p.append(document.createTextNode(line));\n        if (i < ii - 1) {\n          p.append(document.createElement(\"br\"));\n        }\n      }\n      return p;\n    }\n    #keyDown(event) {\n      if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey) {\n        return;\n      }\n      if (event.key === \"Enter\" || event.key === \"Escape\" && this.#pinned) {\n        this.#toggle();\n      }\n    }\n    updateEdited({\n      rect,\n      popupContent\n    }) {\n      this.#updates ||= {\n        contentsObj: this.#contentsObj,\n        richText: this.#richText\n      };\n      if (rect) {\n        this.#position = null;\n      }\n      if (popupContent) {\n        this.#richText = this.#makePopupContent(popupContent);\n        this.#contentsObj = null;\n      }\n      this.#popup?.remove();\n      this.#popup = null;\n    }\n    resetEdited() {\n      if (!this.#updates) {\n        return;\n      }\n      ({\n        contentsObj: this.#contentsObj,\n        richText: this.#richText\n      } = this.#updates);\n      this.#updates = null;\n      this.#popup?.remove();\n      this.#popup = null;\n      this.#position = null;\n    }\n    #setPosition() {\n      if (this.#position !== null) {\n        return;\n      }\n      const {\n        page: {\n          view\n        },\n        viewport: {\n          rawDims: {\n            pageWidth,\n            pageHeight,\n            pageX,\n            pageY\n          }\n        }\n      } = this.#parent;\n      let useParentRect = !!this.#parentRect;\n      let rect = useParentRect ? this.#parentRect : this.#rect;\n      for (const element of this.#elements) {\n        if (!rect || Util.intersect(element.data.rect, rect) !== null) {\n          rect = element.data.rect;\n          useParentRect = true;\n          break;\n        }\n      }\n      const normalizedRect = Util.normalizeRect([rect[0], view[3] - rect[1] + view[1], rect[2], view[3] - rect[3] + view[1]]);\n      const HORIZONTAL_SPACE_AFTER_ANNOTATION = 5;\n      const parentWidth = useParentRect ? rect[2] - rect[0] + HORIZONTAL_SPACE_AFTER_ANNOTATION : 0;\n      const popupLeft = normalizedRect[0] + parentWidth;\n      const popupTop = normalizedRect[1];\n      this.#position = [100 * (popupLeft - pageX) / pageWidth, 100 * (popupTop - pageY) / pageHeight];\n      const {\n        style\n      } = this.#container;\n      style.left = `${this.#position[0]}%`;\n      style.top = `${this.#position[1]}%`;\n    }\n    #toggle() {\n      this.#pinned = !this.#pinned;\n      if (this.#pinned) {\n        this.#show();\n        this.#container.addEventListener(\"click\", this.#boundToggle);\n        this.#container.addEventListener(\"keydown\", this.#boundKeyDown);\n      } else {\n        this.#hide();\n        this.#container.removeEventListener(\"click\", this.#boundToggle);\n        this.#container.removeEventListener(\"keydown\", this.#boundKeyDown);\n      }\n    }\n    #show() {\n      if (!this.#popup) {\n        this.render();\n      }\n      if (!this.isVisible) {\n        this.#setPosition();\n        this.#container.hidden = false;\n        this.#container.style.zIndex = parseInt(this.#container.style.zIndex) + 1000;\n      } else if (this.#pinned) {\n        this.#container.classList.add(\"focused\");\n      }\n    }\n    #hide() {\n      this.#container.classList.remove(\"focused\");\n      if (this.#pinned || !this.isVisible) {\n        return;\n      }\n      this.#container.hidden = true;\n      this.#container.style.zIndex = parseInt(this.#container.style.zIndex) - 1000;\n    }\n    forceHide() {\n      this.#wasVisible = this.isVisible;\n      if (!this.#wasVisible) {\n        return;\n      }\n      this.#container.hidden = true;\n    }\n    maybeShow() {\n      if (!this.#wasVisible) {\n        return;\n      }\n      if (!this.#popup) {\n        this.#show();\n      }\n      this.#wasVisible = false;\n      this.#container.hidden = false;\n    }\n    get isVisible() {\n      return this.#container.hidden === false;\n    }\n  }\n  class FreeTextAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true,\n        ignoreBorder: true\n      });\n      this.textContent = parameters.data.textContent;\n      this.textPosition = parameters.data.textPosition;\n      this.annotationEditorType = AnnotationEditorType.FREETEXT;\n    }\n    render() {\n      this.container.classList.add(\"freeTextAnnotation\");\n      if (this.textContent) {\n        const content = document.createElement(\"div\");\n        content.classList.add(\"annotationTextContent\");\n        content.setAttribute(\"role\", \"comment\");\n        for (const line of this.textContent) {\n          const lineSpan = document.createElement(\"span\");\n          lineSpan.textContent = line;\n          content.append(lineSpan);\n        }\n        this.container.append(content);\n      }\n      if (!this.data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n      this._editOnDoubleClick();\n      return this.container;\n    }\n  }\n  class LineAnnotationElement extends AnnotationElement {\n    #line = null;\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true,\n        ignoreBorder: true\n      });\n    }\n    render() {\n      this.container.classList.add(\"lineAnnotation\");\n      const data = this.data;\n      const {\n        width,\n        height\n      } = getRectDims(data.rect);\n      const svg = this.svgFactory.create(width, height, true);\n      const line = this.#line = this.svgFactory.createElement(\"svg:line\");\n      line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n      line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n      line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n      line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n      line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      line.setAttribute(\"stroke\", \"transparent\");\n      line.setAttribute(\"fill\", \"transparent\");\n      svg.append(line);\n      this.container.append(svg);\n      if (!data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n      return this.container;\n    }\n    getElementsToTriggerPopup() {\n      return this.#line;\n    }\n    addHighlightArea() {\n      this.container.classList.add(\"highlightArea\");\n    }\n  }\n  class SquareAnnotationElement extends AnnotationElement {\n    #square = null;\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true,\n        ignoreBorder: true\n      });\n    }\n    render() {\n      this.container.classList.add(\"squareAnnotation\");\n      const data = this.data;\n      const {\n        width,\n        height\n      } = getRectDims(data.rect);\n      const svg = this.svgFactory.create(width, height, true);\n      const borderWidth = data.borderStyle.width;\n      const square = this.#square = this.svgFactory.createElement(\"svg:rect\");\n      square.setAttribute(\"x\", borderWidth / 2);\n      square.setAttribute(\"y\", borderWidth / 2);\n      square.setAttribute(\"width\", width - borderWidth);\n      square.setAttribute(\"height\", height - borderWidth);\n      square.setAttribute(\"stroke-width\", borderWidth || 1);\n      square.setAttribute(\"stroke\", \"transparent\");\n      square.setAttribute(\"fill\", \"transparent\");\n      svg.append(square);\n      this.container.append(svg);\n      if (!data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n      return this.container;\n    }\n    getElementsToTriggerPopup() {\n      return this.#square;\n    }\n    addHighlightArea() {\n      this.container.classList.add(\"highlightArea\");\n    }\n  }\n  class CircleAnnotationElement extends AnnotationElement {\n    #circle = null;\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true,\n        ignoreBorder: true\n      });\n    }\n    render() {\n      this.container.classList.add(\"circleAnnotation\");\n      const data = this.data;\n      const {\n        width,\n        height\n      } = getRectDims(data.rect);\n      const svg = this.svgFactory.create(width, height, true);\n      const borderWidth = data.borderStyle.width;\n      const circle = this.#circle = this.svgFactory.createElement(\"svg:ellipse\");\n      circle.setAttribute(\"cx\", width / 2);\n      circle.setAttribute(\"cy\", height / 2);\n      circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n      circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n      circle.setAttribute(\"stroke-width\", borderWidth || 1);\n      circle.setAttribute(\"stroke\", \"transparent\");\n      circle.setAttribute(\"fill\", \"transparent\");\n      svg.append(circle);\n      this.container.append(svg);\n      if (!data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n      return this.container;\n    }\n    getElementsToTriggerPopup() {\n      return this.#circle;\n    }\n    addHighlightArea() {\n      this.container.classList.add(\"highlightArea\");\n    }\n  }\n  class PolylineAnnotationElement extends AnnotationElement {\n    #polyline = null;\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true,\n        ignoreBorder: true\n      });\n      this.containerClassName = \"polylineAnnotation\";\n      this.svgElementName = \"svg:polyline\";\n    }\n    render() {\n      this.container.classList.add(this.containerClassName);\n      const {\n        data: {\n          rect,\n          vertices,\n          borderStyle,\n          popupRef\n        }\n      } = this;\n      if (!vertices) {\n        return this.container;\n      }\n      const {\n        width,\n        height\n      } = getRectDims(rect);\n      const svg = this.svgFactory.create(width, height, true);\n      let points = [];\n      for (let i = 0, ii = vertices.length; i < ii; i += 2) {\n        const x = vertices[i] - rect[0];\n        const y = rect[3] - vertices[i + 1];\n        points.push(`${x},${y}`);\n      }\n      points = points.join(\" \");\n      const polyline = this.#polyline = this.svgFactory.createElement(this.svgElementName);\n      polyline.setAttribute(\"points\", points);\n      polyline.setAttribute(\"stroke-width\", borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"transparent\");\n      svg.append(polyline);\n      this.container.append(svg);\n      if (!popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n      return this.container;\n    }\n    getElementsToTriggerPopup() {\n      return this.#polyline;\n    }\n    addHighlightArea() {\n      this.container.classList.add(\"highlightArea\");\n    }\n  }\n  class PolygonAnnotationElement extends PolylineAnnotationElement {\n    constructor(parameters) {\n      super(parameters);\n      this.containerClassName = \"polygonAnnotation\";\n      this.svgElementName = \"svg:polygon\";\n    }\n  }\n  class CaretAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true,\n        ignoreBorder: true\n      });\n    }\n    render() {\n      this.container.classList.add(\"caretAnnotation\");\n      if (!this.data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n      return this.container;\n    }\n  }\n  class InkAnnotationElement extends AnnotationElement {\n    #polylines = [];\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true,\n        ignoreBorder: true\n      });\n      this.containerClassName = \"inkAnnotation\";\n      this.svgElementName = \"svg:polyline\";\n      this.annotationEditorType = this.data.it === \"InkHighlight\" ? AnnotationEditorType.HIGHLIGHT : AnnotationEditorType.INK;\n    }\n    render() {\n      this.container.classList.add(this.containerClassName);\n      const {\n        data: {\n          rect,\n          inkLists,\n          borderStyle,\n          popupRef\n        }\n      } = this;\n      const {\n        width,\n        height\n      } = getRectDims(rect);\n      const svg = this.svgFactory.create(width, height, true);\n      for (const inkList of inkLists) {\n        let points = [];\n        for (let i = 0, ii = inkList.length; i < ii; i += 2) {\n          const x = inkList[i] - rect[0];\n          const y = rect[3] - inkList[i + 1];\n          points.push(`${x},${y}`);\n        }\n        points = points.join(\" \");\n        const polyline = this.svgFactory.createElement(this.svgElementName);\n        this.#polylines.push(polyline);\n        polyline.setAttribute(\"points\", points);\n        polyline.setAttribute(\"stroke-width\", borderStyle.width || 1);\n        polyline.setAttribute(\"stroke\", \"transparent\");\n        polyline.setAttribute(\"fill\", \"transparent\");\n        if (!popupRef && this.hasPopupData) {\n          this._createPopup();\n        }\n        svg.append(polyline);\n      }\n      this.container.append(svg);\n      this._editOnDoubleClick();\n      return this.container;\n    }\n    getElementsToTriggerPopup() {\n      return this.#polylines;\n    }\n    addHighlightArea() {\n      this.container.classList.add(\"highlightArea\");\n    }\n  }\n  class HighlightAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true,\n        ignoreBorder: true,\n        createQuadrilaterals: true\n      });\n      this.annotationEditorType = AnnotationEditorType.HIGHLIGHT;\n    }\n    render() {\n      if (!this.data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n      this.container.classList.add(\"highlightAnnotation\");\n      this._editOnDoubleClick();\n      return this.container;\n    }\n  }\n  class UnderlineAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true,\n        ignoreBorder: true,\n        createQuadrilaterals: true\n      });\n    }\n    render() {\n      if (!this.data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n      this.container.classList.add(\"underlineAnnotation\");\n      return this.container;\n    }\n  }\n  class SquigglyAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true,\n        ignoreBorder: true,\n        createQuadrilaterals: true\n      });\n    }\n    render() {\n      if (!this.data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n      this.container.classList.add(\"squigglyAnnotation\");\n      return this.container;\n    }\n  }\n  class StrikeOutAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true,\n        ignoreBorder: true,\n        createQuadrilaterals: true\n      });\n    }\n    render() {\n      if (!this.data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n      this.container.classList.add(\"strikeoutAnnotation\");\n      return this.container;\n    }\n  }\n  class StampAnnotationElement extends AnnotationElement {\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true,\n        ignoreBorder: true\n      });\n      this.annotationEditorType = AnnotationEditorType.STAMP;\n    }\n    render() {\n      this.container.classList.add(\"stampAnnotation\");\n      this.container.setAttribute(\"role\", \"img\");\n      if (!this.data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n      this._editOnDoubleClick();\n      return this.container;\n    }\n  }\n  class FileAttachmentAnnotationElement extends AnnotationElement {\n    #trigger = null;\n    constructor(parameters) {\n      super(parameters, {\n        isRenderable: true\n      });\n      const {\n        file\n      } = this.data;\n      this.filename = file.filename;\n      this.content = file.content;\n      this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n        source: this,\n        ...file\n      });\n    }\n    render() {\n      this.container.classList.add(\"fileAttachmentAnnotation\");\n      const {\n        container,\n        data\n      } = this;\n      let trigger;\n      if (data.hasAppearance || data.fillAlpha === 0) {\n        trigger = document.createElement(\"div\");\n      } else {\n        trigger = document.createElement(\"img\");\n        trigger.src = `${this.imageResourcesPath}annotation-${/paperclip/i.test(data.name) ? \"paperclip\" : \"pushpin\"}.svg`;\n        if (data.fillAlpha && data.fillAlpha < 1) {\n          trigger.style = `filter: opacity(${Math.round(data.fillAlpha * 100)}%);`;\n        }\n      }\n      trigger.addEventListener(\"dblclick\", this.#download.bind(this));\n      this.#trigger = trigger;\n      const {\n        isMac\n      } = util_FeatureTest.platform;\n      container.addEventListener(\"keydown\", evt => {\n        if (evt.key === \"Enter\" && (isMac ? evt.metaKey : evt.ctrlKey)) {\n          this.#download();\n        }\n      });\n      if (!data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      } else {\n        trigger.classList.add(\"popupTriggerArea\");\n      }\n      container.append(trigger);\n      return container;\n    }\n    getElementsToTriggerPopup() {\n      return this.#trigger;\n    }\n    addHighlightArea() {\n      this.container.classList.add(\"highlightArea\");\n    }\n    #download() {\n      this.downloadManager?.openOrDownloadData(this.content, this.filename);\n    }\n  }\n  class AnnotationLayer {\n    #accessibilityManager = null;\n    #annotationCanvasMap = null;\n    #editableAnnotations = new Map();\n    #structTreeLayer = null;\n    constructor({\n      div,\n      accessibilityManager,\n      annotationCanvasMap,\n      annotationEditorUIManager,\n      page,\n      viewport,\n      structTreeLayer\n    }) {\n      this.div = div;\n      this.#accessibilityManager = accessibilityManager;\n      this.#annotationCanvasMap = annotationCanvasMap;\n      this.#structTreeLayer = structTreeLayer || null;\n      this.page = page;\n      this.viewport = viewport;\n      this.zIndex = 0;\n      this._annotationEditorUIManager = annotationEditorUIManager;\n    }\n    hasEditableAnnotations() {\n      return this.#editableAnnotations.size > 0;\n    }\n    async #appendElement(element, id) {\n      const contentElement = element.firstChild || element;\n      const annotationId = contentElement.id = `${AnnotationPrefix}${id}`;\n      const ariaAttributes = await this.#structTreeLayer?.getAriaAttributes(annotationId);\n      if (ariaAttributes) {\n        for (const [key, value] of ariaAttributes) {\n          contentElement.setAttribute(key, value);\n        }\n      }\n      this.div.append(element);\n      this.#accessibilityManager?.moveElementInDOM(this.div, element, contentElement, false);\n    }\n    async render(params) {\n      const {\n        annotations\n      } = params;\n      const layer = this.div;\n      setLayerDimensions(layer, this.viewport);\n      const popupToElements = new Map();\n      const elementParams = {\n        data: null,\n        layer,\n        linkService: params.linkService,\n        downloadManager: params.downloadManager,\n        imageResourcesPath: params.imageResourcesPath || \"\",\n        renderForms: params.renderForms !== false,\n        svgFactory: new DOMSVGFactory(),\n        annotationStorage: params.annotationStorage || new AnnotationStorage(),\n        enableScripting: params.enableScripting === true,\n        hasJSActions: params.hasJSActions,\n        fieldObjects: params.fieldObjects,\n        parent: this,\n        elements: null\n      };\n      for (const data of annotations) {\n        if (data.noHTML) {\n          continue;\n        }\n        const isPopupAnnotation = data.annotationType === AnnotationType.POPUP;\n        if (!isPopupAnnotation) {\n          const {\n            width,\n            height\n          } = getRectDims(data.rect);\n          if (width <= 0 || height <= 0) {\n            continue;\n          }\n        } else {\n          const elements = popupToElements.get(data.id);\n          if (!elements) {\n            continue;\n          }\n          elementParams.elements = elements;\n        }\n        elementParams.data = data;\n        const element = AnnotationElementFactory.create(elementParams);\n        if (!element.isRenderable) {\n          continue;\n        }\n        if (!isPopupAnnotation && data.popupRef) {\n          const elements = popupToElements.get(data.popupRef);\n          if (!elements) {\n            popupToElements.set(data.popupRef, [element]);\n          } else {\n            elements.push(element);\n          }\n        }\n        const rendered = element.render();\n        if (data.hidden) {\n          rendered.style.visibility = \"hidden\";\n        }\n        await this.#appendElement(rendered, data.id);\n        if (element._isEditable) {\n          this.#editableAnnotations.set(element.data.id, element);\n          this._annotationEditorUIManager?.renderAnnotationElement(element);\n        }\n      }\n      this.#setAnnotationCanvasMap();\n    }\n    update({\n      viewport\n    }) {\n      const layer = this.div;\n      this.viewport = viewport;\n      setLayerDimensions(layer, {\n        rotation: viewport.rotation\n      });\n      this.#setAnnotationCanvasMap();\n      layer.hidden = false;\n    }\n    #setAnnotationCanvasMap() {\n      if (!this.#annotationCanvasMap) {\n        return;\n      }\n      const layer = this.div;\n      for (const [id, canvas] of this.#annotationCanvasMap) {\n        const element = layer.querySelector(`[data-annotation-id=\"${id}\"]`);\n        if (!element) {\n          continue;\n        }\n        canvas.className = \"annotationContent\";\n        const {\n          firstChild\n        } = element;\n        if (!firstChild) {\n          element.append(canvas);\n        } else if (firstChild.nodeName === \"CANVAS\") {\n          firstChild.replaceWith(canvas);\n        } else if (!firstChild.classList.contains(\"annotationContent\")) {\n          firstChild.before(canvas);\n        } else {\n          firstChild.after(canvas);\n        }\n      }\n      this.#annotationCanvasMap.clear();\n    }\n    getEditableAnnotations() {\n      return Array.from(this.#editableAnnotations.values());\n    }\n    getEditableAnnotation(id) {\n      return this.#editableAnnotations.get(id);\n    }\n  }\n\n\n\n\n  const EOL_PATTERN = /\\r\\n?|\\n/g;\n  class FreeTextEditor extends AnnotationEditor {\n    #color;\n    #content = \"\";\n    #editorDivId = `${this.id}-editor`;\n    #editModeAC = null;\n    #fontSize;\n    static _freeTextDefaultContent = \"\";\n    static _internalPadding = 0;\n    static _defaultColor = null;\n    static _defaultFontSize = 10;\n    static get _keyboardManager() {\n      const proto = FreeTextEditor.prototype;\n      const arrowChecker = self => self.isEmpty();\n      const small = AnnotationEditorUIManager.TRANSLATE_SMALL;\n      const big = AnnotationEditorUIManager.TRANSLATE_BIG;\n      return shadow(this, \"_keyboardManager\", new KeyboardManager([[[\"ctrl+s\", \"mac+meta+s\", \"ctrl+p\", \"mac+meta+p\"], proto.commitOrRemove, {\n        bubbles: true\n      }], [[\"ctrl+Enter\", \"mac+meta+Enter\", \"Escape\", \"mac+Escape\"], proto.commitOrRemove], [[\"ArrowLeft\", \"mac+ArrowLeft\"], proto._translateEmpty, {\n        args: [-small, 0],\n        checker: arrowChecker\n      }], [[\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"], proto._translateEmpty, {\n        args: [-big, 0],\n        checker: arrowChecker\n      }], [[\"ArrowRight\", \"mac+ArrowRight\"], proto._translateEmpty, {\n        args: [small, 0],\n        checker: arrowChecker\n      }], [[\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"], proto._translateEmpty, {\n        args: [big, 0],\n        checker: arrowChecker\n      }], [[\"ArrowUp\", \"mac+ArrowUp\"], proto._translateEmpty, {\n        args: [0, -small],\n        checker: arrowChecker\n      }], [[\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"], proto._translateEmpty, {\n        args: [0, -big],\n        checker: arrowChecker\n      }], [[\"ArrowDown\", \"mac+ArrowDown\"], proto._translateEmpty, {\n        args: [0, small],\n        checker: arrowChecker\n      }], [[\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"], proto._translateEmpty, {\n        args: [0, big],\n        checker: arrowChecker\n      }]]));\n    }\n    static _type = \"freetext\";\n    static _editorType = AnnotationEditorType.FREETEXT;\n    constructor(params) {\n      super({\n        ...params,\n        name: \"freeTextEditor\"\n      });\n      this.#color = params.color || FreeTextEditor._defaultColor || AnnotationEditor._defaultLineColor;\n      this.#fontSize = params.fontSize || FreeTextEditor._defaultFontSize;\n    }\n    static initialize(l10n, uiManager) {\n      AnnotationEditor.initialize(l10n, uiManager, {\n        strings: [\"pdfjs-free-text-default-content\"]\n      });\n      const style = getComputedStyle(document.documentElement);\n      this._internalPadding = parseFloat(style.getPropertyValue(\"--freetext-padding\"));\n    }\n    static updateDefaultParams(type, value) {\n      switch (type) {\n        case AnnotationEditorParamsType.FREETEXT_SIZE:\n          FreeTextEditor._defaultFontSize = value;\n          break;\n        case AnnotationEditorParamsType.FREETEXT_COLOR:\n          FreeTextEditor._defaultColor = value;\n          break;\n      }\n    }\n    updateParams(type, value) {\n      switch (type) {\n        case AnnotationEditorParamsType.FREETEXT_SIZE:\n          this.#updateFontSize(value);\n          break;\n        case AnnotationEditorParamsType.FREETEXT_COLOR:\n          this.#updateColor(value);\n          break;\n      }\n    }\n    static get defaultPropertiesToUpdate() {\n      return [[AnnotationEditorParamsType.FREETEXT_SIZE, FreeTextEditor._defaultFontSize], [AnnotationEditorParamsType.FREETEXT_COLOR, FreeTextEditor._defaultColor || AnnotationEditor._defaultLineColor]];\n    }\n    get propertiesToUpdate() {\n      return [[AnnotationEditorParamsType.FREETEXT_SIZE, this.#fontSize], [AnnotationEditorParamsType.FREETEXT_COLOR, this.#color]];\n    }\n    #updateFontSize(fontSize) {\n      const setFontsize = size => {\n        this.editorDiv.style.fontSize = `calc(${size}px * var(--scale-factor))`;\n        this.translate(0, -(size - this.#fontSize) * this.parentScale);\n        this.#fontSize = size;\n        this.#setEditorDimensions();\n      };\n      const savedFontsize = this.#fontSize;\n      this.addCommands({\n        cmd: setFontsize.bind(this, fontSize),\n        undo: setFontsize.bind(this, savedFontsize),\n        post: this._uiManager.updateUI.bind(this._uiManager, this),\n        mustExec: true,\n        type: AnnotationEditorParamsType.FREETEXT_SIZE,\n        overwriteIfSameType: true,\n        keepUndo: true\n      });\n    }\n    #updateColor(color) {\n      const setColor = col => {\n        this.#color = this.editorDiv.style.color = col;\n      };\n      const savedColor = this.#color;\n      this.addCommands({\n        cmd: setColor.bind(this, color),\n        undo: setColor.bind(this, savedColor),\n        post: this._uiManager.updateUI.bind(this._uiManager, this),\n        mustExec: true,\n        type: AnnotationEditorParamsType.FREETEXT_COLOR,\n        overwriteIfSameType: true,\n        keepUndo: true\n      });\n    }\n    _translateEmpty(x, y) {\n      this._uiManager.translateSelectedEditors(x, y, true);\n    }\n    getInitialTranslation() {\n      const scale = this.parentScale;\n      return [-FreeTextEditor._internalPadding * scale, -(FreeTextEditor._internalPadding + this.#fontSize) * scale];\n    }\n    rebuild() {\n      if (!this.parent) {\n        return;\n      }\n      super.rebuild();\n      if (this.div === null) {\n        return;\n      }\n      if (!this.isAttachedToDOM) {\n        this.parent.add(this);\n      }\n    }\n    enableEditMode() {\n      if (this.isInEditMode()) {\n        return;\n      }\n      this.parent.setEditingState(false);\n      this.parent.updateToolbar(AnnotationEditorType.FREETEXT);\n      super.enableEditMode();\n      this.overlayDiv.classList.remove(\"enabled\");\n      this.editorDiv.contentEditable = true;\n      this._isDraggable = false;\n      this.div.removeAttribute(\"aria-activedescendant\");\n      this.#editModeAC = new AbortController();\n      const signal = this._uiManager.combinedSignal(this.#editModeAC);\n      this.editorDiv.addEventListener(\"keydown\", this.editorDivKeydown.bind(this), {\n        signal\n      });\n      this.editorDiv.addEventListener(\"focus\", this.editorDivFocus.bind(this), {\n        signal\n      });\n      this.editorDiv.addEventListener(\"blur\", this.editorDivBlur.bind(this), {\n        signal\n      });\n      this.editorDiv.addEventListener(\"input\", this.editorDivInput.bind(this), {\n        signal\n      });\n      this.editorDiv.addEventListener(\"paste\", this.editorDivPaste.bind(this), {\n        signal\n      });\n    }\n    disableEditMode() {\n      if (!this.isInEditMode()) {\n        return;\n      }\n      this.parent.setEditingState(true);\n      super.disableEditMode();\n      this.overlayDiv.classList.add(\"enabled\");\n      this.editorDiv.contentEditable = false;\n      this.div.setAttribute(\"aria-activedescendant\", this.#editorDivId);\n      this._isDraggable = true;\n      this.#editModeAC?.abort();\n      this.#editModeAC = null;\n      this.div.focus({\n        preventScroll: true\n      });\n      this.isEditing = false;\n      this.parent.div.classList.add(\"freetextEditing\");\n    }\n    focusin(event) {\n      if (!this._focusEventsAllowed) {\n        return;\n      }\n      super.focusin(event);\n      if (event.target !== this.editorDiv) {\n        this.editorDiv.focus();\n      }\n    }\n    onceAdded() {\n      if (this.width) {\n        return;\n      }\n      this.enableEditMode();\n      this.editorDiv.focus();\n      if (this._initialOptions?.isCentered) {\n        this.center();\n      }\n      this._initialOptions = null;\n    }\n    isEmpty() {\n      return !this.editorDiv || this.editorDiv.innerText.trim() === \"\";\n    }\n    remove() {\n      this.isEditing = false;\n      if (this.parent) {\n        this.parent.setEditingState(true);\n        this.parent.div.classList.add(\"freetextEditing\");\n      }\n      super.remove();\n    }\n    #extractText() {\n      const buffer = [];\n      this.editorDiv.normalize();\n      let prevChild = null;\n      for (const child of this.editorDiv.childNodes) {\n        if (prevChild?.nodeType === Node.TEXT_NODE && child.nodeName === \"BR\") {\n          continue;\n        }\n        buffer.push(FreeTextEditor.#getNodeContent(child));\n        prevChild = child;\n      }\n      return buffer.join(\"\\n\");\n    }\n    #setEditorDimensions() {\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      let rect;\n      if (this.isAttachedToDOM) {\n        rect = this.div.getBoundingClientRect();\n      } else {\n        const {\n          currentLayer,\n          div\n        } = this;\n        const savedDisplay = div.style.display;\n        const savedVisibility = div.classList.contains(\"hidden\");\n        div.classList.remove(\"hidden\");\n        div.style.display = \"hidden\";\n        currentLayer.div.append(this.div);\n        rect = div.getBoundingClientRect();\n        div.remove();\n        div.style.display = savedDisplay;\n        div.classList.toggle(\"hidden\", savedVisibility);\n      }\n      if (this.rotation % 180 === this.parentRotation % 180) {\n        this.width = rect.width / parentWidth;\n        this.height = rect.height / parentHeight;\n      } else {\n        this.width = rect.height / parentWidth;\n        this.height = rect.width / parentHeight;\n      }\n      this.fixAndSetPosition();\n    }\n    commit() {\n      if (!this.isInEditMode()) {\n        return;\n      }\n      super.commit();\n      this.disableEditMode();\n      const savedText = this.#content;\n      const newText = this.#content = this.#extractText().trimEnd();\n      if (savedText === newText) {\n        return;\n      }\n      const setText = text => {\n        this.#content = text;\n        if (!text) {\n          this.remove();\n          return;\n        }\n        this.#setContent();\n        this._uiManager.rebuild(this);\n        this.#setEditorDimensions();\n      };\n      this.addCommands({\n        cmd: () => {\n          setText(newText);\n        },\n        undo: () => {\n          setText(savedText);\n        },\n        mustExec: false\n      });\n      this.#setEditorDimensions();\n    }\n    shouldGetKeyboardEvents() {\n      return this.isInEditMode();\n    }\n    enterInEditMode() {\n      this.enableEditMode();\n      this.editorDiv.focus();\n    }\n    dblclick(event) {\n      this.enterInEditMode();\n    }\n    keydown(event) {\n      if (event.target === this.div && event.key === \"Enter\") {\n        this.enterInEditMode();\n        event.preventDefault();\n      }\n    }\n    editorDivKeydown(event) {\n      FreeTextEditor._keyboardManager.exec(this, event);\n    }\n    editorDivFocus(event) {\n      this.isEditing = true;\n    }\n    editorDivBlur(event) {\n      this.isEditing = false;\n    }\n    editorDivInput(event) {\n      this.parent.div.classList.toggle(\"freetextEditing\", this.isEmpty());\n    }\n    disableEditing() {\n      this.editorDiv.setAttribute(\"role\", \"comment\");\n      this.editorDiv.removeAttribute(\"aria-multiline\");\n    }\n    enableEditing() {\n      this.editorDiv.setAttribute(\"role\", \"textbox\");\n      this.editorDiv.setAttribute(\"aria-multiline\", true);\n    }\n    render() {\n      if (this.div) {\n        return this.div;\n      }\n      let baseX, baseY;\n      if (this.width) {\n        baseX = this.x;\n        baseY = this.y;\n      }\n      super.render();\n      this.editorDiv = document.createElement(\"div\");\n      this.editorDiv.className = \"internal\";\n      this.editorDiv.setAttribute(\"id\", this.#editorDivId);\n      this.editorDiv.setAttribute(\"data-l10n-id\", \"pdfjs-free-text\");\n      this.enableEditing();\n      AnnotationEditor._l10nPromise.get(\"pdfjs-free-text-default-content\").then(msg => this.editorDiv?.setAttribute(\"default-content\", msg));\n      this.editorDiv.contentEditable = true;\n      const {\n        style\n      } = this.editorDiv;\n      style.fontSize = `calc(${this.#fontSize}px * var(--scale-factor))`;\n      style.color = this.#color;\n      this.div.append(this.editorDiv);\n      this.overlayDiv = document.createElement(\"div\");\n      this.overlayDiv.classList.add(\"overlay\", \"enabled\");\n      this.div.append(this.overlayDiv);\n      bindEvents(this, this.div, [\"dblclick\", \"keydown\"]);\n      if (this.width) {\n        const [parentWidth, parentHeight] = this.parentDimensions;\n        if (this.annotationElementId) {\n          const {\n            position\n          } = this._initialData;\n          let [tx, ty] = this.getInitialTranslation();\n          [tx, ty] = this.pageTranslationToScreen(tx, ty);\n          const [pageWidth, pageHeight] = this.pageDimensions;\n          const [pageX, pageY] = this.pageTranslation;\n          let posX, posY;\n          switch (this.rotation) {\n            case 0:\n              posX = baseX + (position[0] - pageX) / pageWidth;\n              posY = baseY + this.height - (position[1] - pageY) / pageHeight;\n              break;\n            case 90:\n              posX = baseX + (position[0] - pageX) / pageWidth;\n              posY = baseY - (position[1] - pageY) / pageHeight;\n              [tx, ty] = [ty, -tx];\n              break;\n            case 180:\n              posX = baseX - this.width + (position[0] - pageX) / pageWidth;\n              posY = baseY - (position[1] - pageY) / pageHeight;\n              [tx, ty] = [-tx, -ty];\n              break;\n            case 270:\n              posX = baseX + (position[0] - pageX - this.height * pageHeight) / pageWidth;\n              posY = baseY + (position[1] - pageY - this.width * pageWidth) / pageHeight;\n              [tx, ty] = [-ty, tx];\n              break;\n          }\n          this.setAt(posX * parentWidth, posY * parentHeight, tx, ty);\n        } else {\n          this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\n        }\n        this.#setContent();\n        this._isDraggable = true;\n        this.editorDiv.contentEditable = false;\n      } else {\n        this._isDraggable = false;\n        this.editorDiv.contentEditable = true;\n      }\n      return this.div;\n    }\n    static #getNodeContent(node) {\n      return (node.nodeType === Node.TEXT_NODE ? node.nodeValue : node.innerText).replaceAll(EOL_PATTERN, \"\");\n    }\n    editorDivPaste(event) {\n      const clipboardData = event.clipboardData || window.clipboardData;\n      const {\n        types\n      } = clipboardData;\n      if (types.length === 1 && types[0] === \"text/plain\") {\n        return;\n      }\n      event.preventDefault();\n      const paste = FreeTextEditor.#deserializeContent(clipboardData.getData(\"text\") || \"\").replaceAll(EOL_PATTERN, \"\\n\");\n      if (!paste) {\n        return;\n      }\n      const selection = window.getSelection();\n      if (!selection.rangeCount) {\n        return;\n      }\n      this.editorDiv.normalize();\n      selection.deleteFromDocument();\n      const range = selection.getRangeAt(0);\n      if (!paste.includes(\"\\n\")) {\n        range.insertNode(document.createTextNode(paste));\n        this.editorDiv.normalize();\n        selection.collapseToStart();\n        return;\n      }\n      const {\n        startContainer,\n        startOffset\n      } = range;\n      const bufferBefore = [];\n      const bufferAfter = [];\n      if (startContainer.nodeType === Node.TEXT_NODE) {\n        const parent = startContainer.parentElement;\n        bufferAfter.push(startContainer.nodeValue.slice(startOffset).replaceAll(EOL_PATTERN, \"\"));\n        if (parent !== this.editorDiv) {\n          let buffer = bufferBefore;\n          for (const child of this.editorDiv.childNodes) {\n            if (child === parent) {\n              buffer = bufferAfter;\n              continue;\n            }\n            buffer.push(FreeTextEditor.#getNodeContent(child));\n          }\n        }\n        bufferBefore.push(startContainer.nodeValue.slice(0, startOffset).replaceAll(EOL_PATTERN, \"\"));\n      } else if (startContainer === this.editorDiv) {\n        let buffer = bufferBefore;\n        let i = 0;\n        for (const child of this.editorDiv.childNodes) {\n          if (i++ === startOffset) {\n            buffer = bufferAfter;\n          }\n          buffer.push(FreeTextEditor.#getNodeContent(child));\n        }\n      }\n      this.#content = `${bufferBefore.join(\"\\n\")}${paste}${bufferAfter.join(\"\\n\")}`;\n      this.#setContent();\n      const newRange = new Range();\n      let beforeLength = bufferBefore.reduce((acc, line) => acc + line.length, 0);\n      for (const {\n        firstChild\n      } of this.editorDiv.childNodes) {\n        if (firstChild.nodeType === Node.TEXT_NODE) {\n          const length = firstChild.nodeValue.length;\n          if (beforeLength <= length) {\n            newRange.setStart(firstChild, beforeLength);\n            newRange.setEnd(firstChild, beforeLength);\n            break;\n          }\n          beforeLength -= length;\n        }\n      }\n      selection.removeAllRanges();\n      selection.addRange(newRange);\n    }\n    #setContent() {\n      this.editorDiv.replaceChildren();\n      if (!this.#content) {\n        return;\n      }\n      for (const line of this.#content.split(\"\\n\")) {\n        const div = document.createElement(\"div\");\n        div.append(line ? document.createTextNode(line) : document.createElement(\"br\"));\n        this.editorDiv.append(div);\n      }\n    }\n    #serializeContent() {\n      return this.#content.replaceAll(\"\\xa0\", \" \");\n    }\n    static #deserializeContent(content) {\n      return content.replaceAll(\" \", \"\\xa0\");\n    }\n    get contentDiv() {\n      return this.editorDiv;\n    }\n    static async deserialize(data, parent, uiManager) {\n      let initialData = null;\n      if (data instanceof FreeTextAnnotationElement) {\n        const {\n          data: {\n            defaultAppearanceData: {\n              fontSize,\n              fontColor\n            },\n            rect,\n            rotation,\n            id,\n            popupRef\n          },\n          textContent,\n          textPosition,\n          parent: {\n            page: {\n              pageNumber\n            }\n          }\n        } = data;\n        if (!textContent || textContent.length === 0) {\n          return null;\n        }\n        initialData = data = {\n          annotationType: AnnotationEditorType.FREETEXT,\n          color: Array.from(fontColor),\n          fontSize,\n          value: textContent.join(\"\\n\"),\n          position: textPosition,\n          pageIndex: pageNumber - 1,\n          rect: rect.slice(0),\n          rotation,\n          id,\n          deleted: false,\n          popupRef\n        };\n      }\n      const editor = await super.deserialize(data, parent, uiManager);\n      editor.#fontSize = data.fontSize;\n      editor.#color = Util.makeHexColor(...data.color);\n      editor.#content = FreeTextEditor.#deserializeContent(data.value);\n      editor.annotationElementId = data.id || null;\n      editor._initialData = initialData;\n      return editor;\n    }\n    serialize(isForCopying = false) {\n      if (this.isEmpty()) {\n        return null;\n      }\n      if (this.deleted) {\n        return this.serializeDeleted();\n      }\n      const padding = FreeTextEditor._internalPadding * this.parentScale;\n      const rect = this.getRect(padding, padding);\n      const color = AnnotationEditor._colorManager.convert(this.isAttachedToDOM ? getComputedStyle(this.editorDiv).color : this.#color);\n      const serialized = {\n        annotationType: AnnotationEditorType.FREETEXT,\n        color,\n        fontSize: this.#fontSize,\n        value: this.#serializeContent(),\n        pageIndex: this.pageIndex,\n        rect,\n        rotation: this.rotation,\n        structTreeParentId: this._structTreeParentId\n      };\n      if (isForCopying) {\n        return serialized;\n      }\n      if (this.annotationElementId && !this.#hasElementChanged(serialized)) {\n        return null;\n      }\n      serialized.id = this.annotationElementId;\n      return serialized;\n    }\n    #hasElementChanged(serialized) {\n      const {\n        value,\n        fontSize,\n        color,\n        pageIndex\n      } = this._initialData;\n      return this._hasBeenMoved || serialized.value !== value || serialized.fontSize !== fontSize || serialized.color.some((c, i) => c !== color[i]) || serialized.pageIndex !== pageIndex;\n    }\n    renderAnnotationElement(annotation) {\n      const content = super.renderAnnotationElement(annotation);\n      if (this.deleted) {\n        return content;\n      }\n      const {\n        style\n      } = content;\n      style.fontSize = `calc(${this.#fontSize}px * var(--scale-factor))`;\n      style.color = this.#color;\n      content.replaceChildren();\n      for (const line of this.#content.split(\"\\n\")) {\n        const div = document.createElement(\"div\");\n        div.append(line ? document.createTextNode(line) : document.createElement(\"br\"));\n        content.append(div);\n      }\n      const padding = FreeTextEditor._internalPadding * this.parentScale;\n      annotation.updateEdited({\n        rect: this.getRect(padding, padding),\n        popupContent: this.#content\n      });\n      return content;\n    }\n    resetAnnotationElement(annotation) {\n      super.resetAnnotationElement(annotation);\n      annotation.resetEdited();\n    }\n  }\n\n  class Outliner {\n    #box;\n    #verticalEdges = [];\n    #intervals = [];\n    constructor(boxes, borderWidth = 0, innerMargin = 0, isLTR = true) {\n      let minX = Infinity;\n      let maxX = -Infinity;\n      let minY = Infinity;\n      let maxY = -Infinity;\n      const NUMBER_OF_DIGITS = 4;\n      const EPSILON = 10 ** -NUMBER_OF_DIGITS;\n      for (const {\n        x,\n        y,\n        width,\n        height\n      } of boxes) {\n        const x1 = Math.floor((x - borderWidth) / EPSILON) * EPSILON;\n        const x2 = Math.ceil((x + width + borderWidth) / EPSILON) * EPSILON;\n        const y1 = Math.floor((y - borderWidth) / EPSILON) * EPSILON;\n        const y2 = Math.ceil((y + height + borderWidth) / EPSILON) * EPSILON;\n        const left = [x1, y1, y2, true];\n        const right = [x2, y1, y2, false];\n        this.#verticalEdges.push(left, right);\n        minX = Math.min(minX, x1);\n        maxX = Math.max(maxX, x2);\n        minY = Math.min(minY, y1);\n        maxY = Math.max(maxY, y2);\n      }\n      const bboxWidth = maxX - minX + 2 * innerMargin;\n      const bboxHeight = maxY - minY + 2 * innerMargin;\n      const shiftedMinX = minX - innerMargin;\n      const shiftedMinY = minY - innerMargin;\n      const lastEdge = this.#verticalEdges.at(isLTR ? -1 : -2);\n      const lastPoint = [lastEdge[0], lastEdge[2]];\n      for (const edge of this.#verticalEdges) {\n        const [x, y1, y2] = edge;\n        edge[0] = (x - shiftedMinX) / bboxWidth;\n        edge[1] = (y1 - shiftedMinY) / bboxHeight;\n        edge[2] = (y2 - shiftedMinY) / bboxHeight;\n      }\n      this.#box = {\n        x: shiftedMinX,\n        y: shiftedMinY,\n        width: bboxWidth,\n        height: bboxHeight,\n        lastPoint\n      };\n    }\n    getOutlines() {\n      this.#verticalEdges.sort((a, b) => a[0] - b[0] || a[1] - b[1] || a[2] - b[2]);\n      const outlineVerticalEdges = [];\n      for (const edge of this.#verticalEdges) {\n        if (edge[3]) {\n          outlineVerticalEdges.push(...this.#breakEdge(edge));\n          this.#insert(edge);\n        } else {\n          this.#remove(edge);\n          outlineVerticalEdges.push(...this.#breakEdge(edge));\n        }\n      }\n      return this.#getOutlines(outlineVerticalEdges);\n    }\n    #getOutlines(outlineVerticalEdges) {\n      const edges = [];\n      const allEdges = new Set();\n      for (const edge of outlineVerticalEdges) {\n        const [x, y1, y2] = edge;\n        edges.push([x, y1, edge], [x, y2, edge]);\n      }\n      edges.sort((a, b) => a[1] - b[1] || a[0] - b[0]);\n      for (let i = 0, ii = edges.length; i < ii; i += 2) {\n        const edge1 = edges[i][2];\n        const edge2 = edges[i + 1][2];\n        edge1.push(edge2);\n        edge2.push(edge1);\n        allEdges.add(edge1);\n        allEdges.add(edge2);\n      }\n      const outlines = [];\n      let outline;\n      while (allEdges.size > 0) {\n        const edge = allEdges.values().next().value;\n        let [x, y1, y2, edge1, edge2] = edge;\n        allEdges.delete(edge);\n        let lastPointX = x;\n        let lastPointY = y1;\n        outline = [x, y2];\n        outlines.push(outline);\n        while (true) {\n          let e;\n          if (allEdges.has(edge1)) {\n            e = edge1;\n          } else if (allEdges.has(edge2)) {\n            e = edge2;\n          } else {\n            break;\n          }\n          allEdges.delete(e);\n          [x, y1, y2, edge1, edge2] = e;\n          if (lastPointX !== x) {\n            outline.push(lastPointX, lastPointY, x, lastPointY === y1 ? y1 : y2);\n            lastPointX = x;\n          }\n          lastPointY = lastPointY === y1 ? y2 : y1;\n        }\n        outline.push(lastPointX, lastPointY);\n      }\n      return new HighlightOutline(outlines, this.#box);\n    }\n    #binarySearch(y) {\n      const array = this.#intervals;\n      let start = 0;\n      let end = array.length - 1;\n      while (start <= end) {\n        const middle = start + end >> 1;\n        const y1 = array[middle][0];\n        if (y1 === y) {\n          return middle;\n        }\n        if (y1 < y) {\n          start = middle + 1;\n        } else {\n          end = middle - 1;\n        }\n      }\n      return end + 1;\n    }\n    #insert([, y1, y2]) {\n      const index = this.#binarySearch(y1);\n      this.#intervals.splice(index, 0, [y1, y2]);\n    }\n    #remove([, y1, y2]) {\n      const index = this.#binarySearch(y1);\n      for (let i = index; i < this.#intervals.length; i++) {\n        const [start, end] = this.#intervals[i];\n        if (start !== y1) {\n          break;\n        }\n        if (start === y1 && end === y2) {\n          this.#intervals.splice(i, 1);\n          return;\n        }\n      }\n      for (let i = index - 1; i >= 0; i--) {\n        const [start, end] = this.#intervals[i];\n        if (start !== y1) {\n          break;\n        }\n        if (start === y1 && end === y2) {\n          this.#intervals.splice(i, 1);\n          return;\n        }\n      }\n    }\n    #breakEdge(edge) {\n      const [x, y1, y2] = edge;\n      const results = [[x, y1, y2]];\n      const index = this.#binarySearch(y2);\n      for (let i = 0; i < index; i++) {\n        const [start, end] = this.#intervals[i];\n        for (let j = 0, jj = results.length; j < jj; j++) {\n          const [, y3, y4] = results[j];\n          if (end <= y3 || y4 <= start) {\n            continue;\n          }\n          if (y3 >= start) {\n            if (y4 > end) {\n              results[j][1] = end;\n            } else {\n              if (jj === 1) {\n                return [];\n              }\n              results.splice(j, 1);\n              j--;\n              jj--;\n            }\n            continue;\n          }\n          results[j][2] = start;\n          if (y4 > end) {\n            results.push([x, end, y4]);\n          }\n        }\n      }\n      return results;\n    }\n  }\n  class Outline {\n    toSVGPath() {\n      throw new Error(\"Abstract method `toSVGPath` must be implemented.\");\n    }\n    get box() {\n      throw new Error(\"Abstract getter `box` must be implemented.\");\n    }\n    serialize(_bbox, _rotation) {\n      throw new Error(\"Abstract method `serialize` must be implemented.\");\n    }\n    get free() {\n      return this instanceof FreeHighlightOutline;\n    }\n  }\n  class HighlightOutline extends Outline {\n    #box;\n    #outlines;\n    constructor(outlines, box) {\n      super();\n      this.#outlines = outlines;\n      this.#box = box;\n    }\n    toSVGPath() {\n      const buffer = [];\n      for (const polygon of this.#outlines) {\n        let [prevX, prevY] = polygon;\n        buffer.push(`M${prevX} ${prevY}`);\n        for (let i = 2; i < polygon.length; i += 2) {\n          const x = polygon[i];\n          const y = polygon[i + 1];\n          if (x === prevX) {\n            buffer.push(`V${y}`);\n            prevY = y;\n          } else if (y === prevY) {\n            buffer.push(`H${x}`);\n            prevX = x;\n          }\n        }\n        buffer.push(\"Z\");\n      }\n      return buffer.join(\" \");\n    }\n    serialize([blX, blY, trX, trY], _rotation) {\n      const outlines = [];\n      const width = trX - blX;\n      const height = trY - blY;\n      for (const outline of this.#outlines) {\n        const points = new Array(outline.length);\n        for (let i = 0; i < outline.length; i += 2) {\n          points[i] = blX + outline[i] * width;\n          points[i + 1] = trY - outline[i + 1] * height;\n        }\n        outlines.push(points);\n      }\n      return outlines;\n    }\n    get box() {\n      return this.#box;\n    }\n  }\n  class FreeOutliner {\n    #box;\n    #bottom = [];\n    #innerMargin;\n    #isLTR;\n    #top = [];\n    #last = new Float64Array(18);\n    #lastX;\n    #lastY;\n    #min;\n    #min_dist;\n    #scaleFactor;\n    #thickness;\n    #points = [];\n    static #MIN_DIST = 8;\n    static #MIN_DIFF = 2;\n    static #MIN = FreeOutliner.#MIN_DIST + FreeOutliner.#MIN_DIFF;\n    constructor({\n      x,\n      y\n    }, box, scaleFactor, thickness, isLTR, innerMargin = 0) {\n      this.#box = box;\n      this.#thickness = thickness * scaleFactor;\n      this.#isLTR = isLTR;\n      this.#last.set([NaN, NaN, NaN, NaN, x, y], 6);\n      this.#innerMargin = innerMargin;\n      this.#min_dist = FreeOutliner.#MIN_DIST * scaleFactor;\n      this.#min = FreeOutliner.#MIN * scaleFactor;\n      this.#scaleFactor = scaleFactor;\n      this.#points.push(x, y);\n    }\n    get free() {\n      return true;\n    }\n    isEmpty() {\n      return isNaN(this.#last[8]);\n    }\n    #getLastCoords() {\n      const lastTop = this.#last.subarray(4, 6);\n      const lastBottom = this.#last.subarray(16, 18);\n      const [x, y, width, height] = this.#box;\n      return [(this.#lastX + (lastTop[0] - lastBottom[0]) / 2 - x) / width, (this.#lastY + (lastTop[1] - lastBottom[1]) / 2 - y) / height, (this.#lastX + (lastBottom[0] - lastTop[0]) / 2 - x) / width, (this.#lastY + (lastBottom[1] - lastTop[1]) / 2 - y) / height];\n    }\n    add({\n      x,\n      y\n    }) {\n      this.#lastX = x;\n      this.#lastY = y;\n      const [layerX, layerY, layerWidth, layerHeight] = this.#box;\n      let [x1, y1, x2, y2] = this.#last.subarray(8, 12);\n      const diffX = x - x2;\n      const diffY = y - y2;\n      const d = Math.hypot(diffX, diffY);\n      if (d < this.#min) {\n        return false;\n      }\n      const diffD = d - this.#min_dist;\n      const K = diffD / d;\n      const shiftX = K * diffX;\n      const shiftY = K * diffY;\n      let x0 = x1;\n      let y0 = y1;\n      x1 = x2;\n      y1 = y2;\n      x2 += shiftX;\n      y2 += shiftY;\n      this.#points?.push(x, y);\n      const nX = -shiftY / diffD;\n      const nY = shiftX / diffD;\n      const thX = nX * this.#thickness;\n      const thY = nY * this.#thickness;\n      this.#last.set(this.#last.subarray(2, 8), 0);\n      this.#last.set([x2 + thX, y2 + thY], 4);\n      this.#last.set(this.#last.subarray(14, 18), 12);\n      this.#last.set([x2 - thX, y2 - thY], 16);\n      if (isNaN(this.#last[6])) {\n        if (this.#top.length === 0) {\n          this.#last.set([x1 + thX, y1 + thY], 2);\n          this.#top.push(NaN, NaN, NaN, NaN, (x1 + thX - layerX) / layerWidth, (y1 + thY - layerY) / layerHeight);\n          this.#last.set([x1 - thX, y1 - thY], 14);\n          this.#bottom.push(NaN, NaN, NaN, NaN, (x1 - thX - layerX) / layerWidth, (y1 - thY - layerY) / layerHeight);\n        }\n        this.#last.set([x0, y0, x1, y1, x2, y2], 6);\n        return !this.isEmpty();\n      }\n      this.#last.set([x0, y0, x1, y1, x2, y2], 6);\n      const angle = Math.abs(Math.atan2(y0 - y1, x0 - x1) - Math.atan2(shiftY, shiftX));\n      if (angle < Math.PI / 2) {\n        [x1, y1, x2, y2] = this.#last.subarray(2, 6);\n        this.#top.push(NaN, NaN, NaN, NaN, ((x1 + x2) / 2 - layerX) / layerWidth, ((y1 + y2) / 2 - layerY) / layerHeight);\n        [x1, y1, x0, y0] = this.#last.subarray(14, 18);\n        this.#bottom.push(NaN, NaN, NaN, NaN, ((x0 + x1) / 2 - layerX) / layerWidth, ((y0 + y1) / 2 - layerY) / layerHeight);\n        return true;\n      }\n      [x0, y0, x1, y1, x2, y2] = this.#last.subarray(0, 6);\n      this.#top.push(((x0 + 5 * x1) / 6 - layerX) / layerWidth, ((y0 + 5 * y1) / 6 - layerY) / layerHeight, ((5 * x1 + x2) / 6 - layerX) / layerWidth, ((5 * y1 + y2) / 6 - layerY) / layerHeight, ((x1 + x2) / 2 - layerX) / layerWidth, ((y1 + y2) / 2 - layerY) / layerHeight);\n      [x2, y2, x1, y1, x0, y0] = this.#last.subarray(12, 18);\n      this.#bottom.push(((x0 + 5 * x1) / 6 - layerX) / layerWidth, ((y0 + 5 * y1) / 6 - layerY) / layerHeight, ((5 * x1 + x2) / 6 - layerX) / layerWidth, ((5 * y1 + y2) / 6 - layerY) / layerHeight, ((x1 + x2) / 2 - layerX) / layerWidth, ((y1 + y2) / 2 - layerY) / layerHeight);\n      return true;\n    }\n    toSVGPath() {\n      if (this.isEmpty()) {\n        return \"\";\n      }\n      const top = this.#top;\n      const bottom = this.#bottom;\n      const lastTop = this.#last.subarray(4, 6);\n      const lastBottom = this.#last.subarray(16, 18);\n      const [x, y, width, height] = this.#box;\n      const [lastTopX, lastTopY, lastBottomX, lastBottomY] = this.#getLastCoords();\n      if (isNaN(this.#last[6]) && !this.isEmpty()) {\n        return `M${(this.#last[2] - x) / width} ${(this.#last[3] - y) / height} L${(this.#last[4] - x) / width} ${(this.#last[5] - y) / height} L${lastTopX} ${lastTopY} L${lastBottomX} ${lastBottomY} L${(this.#last[16] - x) / width} ${(this.#last[17] - y) / height} L${(this.#last[14] - x) / width} ${(this.#last[15] - y) / height} Z`;\n      }\n      const buffer = [];\n      buffer.push(`M${top[4]} ${top[5]}`);\n      for (let i = 6; i < top.length; i += 6) {\n        if (isNaN(top[i])) {\n          buffer.push(`L${top[i + 4]} ${top[i + 5]}`);\n        } else {\n          buffer.push(`C${top[i]} ${top[i + 1]} ${top[i + 2]} ${top[i + 3]} ${top[i + 4]} ${top[i + 5]}`);\n        }\n      }\n      buffer.push(`L${(lastTop[0] - x) / width} ${(lastTop[1] - y) / height} L${lastTopX} ${lastTopY} L${lastBottomX} ${lastBottomY} L${(lastBottom[0] - x) / width} ${(lastBottom[1] - y) / height}`);\n      for (let i = bottom.length - 6; i >= 6; i -= 6) {\n        if (isNaN(bottom[i])) {\n          buffer.push(`L${bottom[i + 4]} ${bottom[i + 5]}`);\n        } else {\n          buffer.push(`C${bottom[i]} ${bottom[i + 1]} ${bottom[i + 2]} ${bottom[i + 3]} ${bottom[i + 4]} ${bottom[i + 5]}`);\n        }\n      }\n      buffer.push(`L${bottom[4]} ${bottom[5]} Z`);\n      return buffer.join(\" \");\n    }\n    getOutlines() {\n      const top = this.#top;\n      const bottom = this.#bottom;\n      const last = this.#last;\n      const lastTop = last.subarray(4, 6);\n      const lastBottom = last.subarray(16, 18);\n      const [layerX, layerY, layerWidth, layerHeight] = this.#box;\n      const points = new Float64Array((this.#points?.length ?? 0) + 2);\n      for (let i = 0, ii = points.length - 2; i < ii; i += 2) {\n        points[i] = (this.#points[i] - layerX) / layerWidth;\n        points[i + 1] = (this.#points[i + 1] - layerY) / layerHeight;\n      }\n      points[points.length - 2] = (this.#lastX - layerX) / layerWidth;\n      points[points.length - 1] = (this.#lastY - layerY) / layerHeight;\n      const [lastTopX, lastTopY, lastBottomX, lastBottomY] = this.#getLastCoords();\n      if (isNaN(last[6]) && !this.isEmpty()) {\n        const outline = new Float64Array(36);\n        outline.set([NaN, NaN, NaN, NaN, (last[2] - layerX) / layerWidth, (last[3] - layerY) / layerHeight, NaN, NaN, NaN, NaN, (last[4] - layerX) / layerWidth, (last[5] - layerY) / layerHeight, NaN, NaN, NaN, NaN, lastTopX, lastTopY, NaN, NaN, NaN, NaN, lastBottomX, lastBottomY, NaN, NaN, NaN, NaN, (last[16] - layerX) / layerWidth, (last[17] - layerY) / layerHeight, NaN, NaN, NaN, NaN, (last[14] - layerX) / layerWidth, (last[15] - layerY) / layerHeight], 0);\n        return new FreeHighlightOutline(outline, points, this.#box, this.#scaleFactor, this.#innerMargin, this.#isLTR);\n      }\n      const outline = new Float64Array(this.#top.length + 24 + this.#bottom.length);\n      let N = top.length;\n      for (let i = 0; i < N; i += 2) {\n        if (isNaN(top[i])) {\n          outline[i] = outline[i + 1] = NaN;\n          continue;\n        }\n        outline[i] = top[i];\n        outline[i + 1] = top[i + 1];\n      }\n      outline.set([NaN, NaN, NaN, NaN, (lastTop[0] - layerX) / layerWidth, (lastTop[1] - layerY) / layerHeight, NaN, NaN, NaN, NaN, lastTopX, lastTopY, NaN, NaN, NaN, NaN, lastBottomX, lastBottomY, NaN, NaN, NaN, NaN, (lastBottom[0] - layerX) / layerWidth, (lastBottom[1] - layerY) / layerHeight], N);\n      N += 24;\n      for (let i = bottom.length - 6; i >= 6; i -= 6) {\n        for (let j = 0; j < 6; j += 2) {\n          if (isNaN(bottom[i + j])) {\n            outline[N] = outline[N + 1] = NaN;\n            N += 2;\n            continue;\n          }\n          outline[N] = bottom[i + j];\n          outline[N + 1] = bottom[i + j + 1];\n          N += 2;\n        }\n      }\n      outline.set([NaN, NaN, NaN, NaN, bottom[4], bottom[5]], N);\n      return new FreeHighlightOutline(outline, points, this.#box, this.#scaleFactor, this.#innerMargin, this.#isLTR);\n    }\n  }\n  class FreeHighlightOutline extends Outline {\n    #box;\n    #bbox = null;\n    #innerMargin;\n    #isLTR;\n    #points;\n    #scaleFactor;\n    #outline;\n    constructor(outline, points, box, scaleFactor, innerMargin, isLTR) {\n      super();\n      this.#outline = outline;\n      this.#points = points;\n      this.#box = box;\n      this.#scaleFactor = scaleFactor;\n      this.#innerMargin = innerMargin;\n      this.#isLTR = isLTR;\n      this.#computeMinMax(isLTR);\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.#bbox;\n      for (let i = 0, ii = outline.length; i < ii; i += 2) {\n        outline[i] = (outline[i] - x) / width;\n        outline[i + 1] = (outline[i + 1] - y) / height;\n      }\n      for (let i = 0, ii = points.length; i < ii; i += 2) {\n        points[i] = (points[i] - x) / width;\n        points[i + 1] = (points[i + 1] - y) / height;\n      }\n    }\n    toSVGPath() {\n      const buffer = [`M${this.#outline[4]} ${this.#outline[5]}`];\n      for (let i = 6, ii = this.#outline.length; i < ii; i += 6) {\n        if (isNaN(this.#outline[i])) {\n          buffer.push(`L${this.#outline[i + 4]} ${this.#outline[i + 5]}`);\n          continue;\n        }\n        buffer.push(`C${this.#outline[i]} ${this.#outline[i + 1]} ${this.#outline[i + 2]} ${this.#outline[i + 3]} ${this.#outline[i + 4]} ${this.#outline[i + 5]}`);\n      }\n      buffer.push(\"Z\");\n      return buffer.join(\" \");\n    }\n    serialize([blX, blY, trX, trY], rotation) {\n      const width = trX - blX;\n      const height = trY - blY;\n      let outline;\n      let points;\n      switch (rotation) {\n        case 0:\n          outline = this.#rescale(this.#outline, blX, trY, width, -height);\n          points = this.#rescale(this.#points, blX, trY, width, -height);\n          break;\n        case 90:\n          outline = this.#rescaleAndSwap(this.#outline, blX, blY, width, height);\n          points = this.#rescaleAndSwap(this.#points, blX, blY, width, height);\n          break;\n        case 180:\n          outline = this.#rescale(this.#outline, trX, blY, -width, height);\n          points = this.#rescale(this.#points, trX, blY, -width, height);\n          break;\n        case 270:\n          outline = this.#rescaleAndSwap(this.#outline, trX, trY, -width, -height);\n          points = this.#rescaleAndSwap(this.#points, trX, trY, -width, -height);\n          break;\n      }\n      return {\n        outline: Array.from(outline),\n        points: [Array.from(points)]\n      };\n    }\n    #rescale(src, tx, ty, sx, sy) {\n      const dest = new Float64Array(src.length);\n      for (let i = 0, ii = src.length; i < ii; i += 2) {\n        dest[i] = tx + src[i] * sx;\n        dest[i + 1] = ty + src[i + 1] * sy;\n      }\n      return dest;\n    }\n    #rescaleAndSwap(src, tx, ty, sx, sy) {\n      const dest = new Float64Array(src.length);\n      for (let i = 0, ii = src.length; i < ii; i += 2) {\n        dest[i] = tx + src[i + 1] * sx;\n        dest[i + 1] = ty + src[i] * sy;\n      }\n      return dest;\n    }\n    #computeMinMax(isLTR) {\n      const outline = this.#outline;\n      let lastX = outline[4];\n      let lastY = outline[5];\n      let minX = lastX;\n      let minY = lastY;\n      let maxX = lastX;\n      let maxY = lastY;\n      let lastPointX = lastX;\n      let lastPointY = lastY;\n      const ltrCallback = isLTR ? Math.max : Math.min;\n      for (let i = 6, ii = outline.length; i < ii; i += 6) {\n        if (isNaN(outline[i])) {\n          minX = Math.min(minX, outline[i + 4]);\n          minY = Math.min(minY, outline[i + 5]);\n          maxX = Math.max(maxX, outline[i + 4]);\n          maxY = Math.max(maxY, outline[i + 5]);\n          if (lastPointY < outline[i + 5]) {\n            lastPointX = outline[i + 4];\n            lastPointY = outline[i + 5];\n          } else if (lastPointY === outline[i + 5]) {\n            lastPointX = ltrCallback(lastPointX, outline[i + 4]);\n          }\n        } else {\n          const bbox = Util.bezierBoundingBox(lastX, lastY, ...outline.slice(i, i + 6));\n          minX = Math.min(minX, bbox[0]);\n          minY = Math.min(minY, bbox[1]);\n          maxX = Math.max(maxX, bbox[2]);\n          maxY = Math.max(maxY, bbox[3]);\n          if (lastPointY < bbox[3]) {\n            lastPointX = bbox[2];\n            lastPointY = bbox[3];\n          } else if (lastPointY === bbox[3]) {\n            lastPointX = ltrCallback(lastPointX, bbox[2]);\n          }\n        }\n        lastX = outline[i + 4];\n        lastY = outline[i + 5];\n      }\n      const x = minX - this.#innerMargin,\n        y = minY - this.#innerMargin,\n        width = maxX - minX + 2 * this.#innerMargin,\n        height = maxY - minY + 2 * this.#innerMargin;\n      this.#bbox = {\n        x,\n        y,\n        width,\n        height,\n        lastPoint: [lastPointX, lastPointY]\n      };\n    }\n    get box() {\n      return this.#bbox;\n    }\n    getNewOutline(thickness, innerMargin) {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.#bbox;\n      const [layerX, layerY, layerWidth, layerHeight] = this.#box;\n      const sx = width * layerWidth;\n      const sy = height * layerHeight;\n      const tx = x * layerWidth + layerX;\n      const ty = y * layerHeight + layerY;\n      const outliner = new FreeOutliner({\n        x: this.#points[0] * sx + tx,\n        y: this.#points[1] * sy + ty\n      }, this.#box, this.#scaleFactor, thickness, this.#isLTR, innerMargin ?? this.#innerMargin);\n      for (let i = 2; i < this.#points.length; i += 2) {\n        outliner.add({\n          x: this.#points[i] * sx + tx,\n          y: this.#points[i + 1] * sy + ty\n        });\n      }\n      return outliner.getOutlines();\n    }\n  }\n\n\n\n  class ColorPicker {\n    #boundKeyDown = this.#keyDown.bind(this);\n    #boundPointerDown = this.#pointerDown.bind(this);\n    #button = null;\n    #buttonSwatch = null;\n    #defaultColor;\n    #dropdown = null;\n    #dropdownWasFromKeyboard = false;\n    #isMainColorPicker = false;\n    #editor = null;\n    #eventBus;\n    #uiManager = null;\n    #type;\n    static #l10nColor = null;\n    static get _keyboardManager() {\n      return shadow(this, \"_keyboardManager\", new KeyboardManager([[[\"Escape\", \"mac+Escape\"], ColorPicker.prototype._hideDropdownFromKeyboard], [[\" \", \"mac+ \"], ColorPicker.prototype._colorSelectFromKeyboard], [[\"ArrowDown\", \"ArrowRight\", \"mac+ArrowDown\", \"mac+ArrowRight\"], ColorPicker.prototype._moveToNext], [[\"ArrowUp\", \"ArrowLeft\", \"mac+ArrowUp\", \"mac+ArrowLeft\"], ColorPicker.prototype._moveToPrevious], [[\"Home\", \"mac+Home\"], ColorPicker.prototype._moveToBeginning], [[\"End\", \"mac+End\"], ColorPicker.prototype._moveToEnd]]));\n    }\n    constructor({\n      editor = null,\n      uiManager = null\n    }) {\n      if (editor) {\n        this.#isMainColorPicker = false;\n        this.#type = AnnotationEditorParamsType.HIGHLIGHT_COLOR;\n        this.#editor = editor;\n      } else {\n        this.#isMainColorPicker = true;\n        this.#type = AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR;\n      }\n      this.#uiManager = editor?._uiManager || uiManager;\n      this.#eventBus = this.#uiManager._eventBus;\n      this.#defaultColor = editor?.color || this.#uiManager?.highlightColors.values().next().value || \"#FFFF98\";\n      ColorPicker.#l10nColor ||= Object.freeze({\n        blue: \"pdfjs-editor-colorpicker-blue\",\n        green: \"pdfjs-editor-colorpicker-green\",\n        pink: \"pdfjs-editor-colorpicker-pink\",\n        red: \"pdfjs-editor-colorpicker-red\",\n        yellow: \"pdfjs-editor-colorpicker-yellow\"\n      });\n    }\n    renderButton() {\n      const button = this.#button = document.createElement(\"button\");\n      button.className = \"colorPicker\";\n      button.tabIndex = \"0\";\n      button.setAttribute(\"data-l10n-id\", \"pdfjs-editor-colorpicker-button\");\n      button.setAttribute(\"aria-haspopup\", true);\n      const signal = this.#uiManager._signal;\n      button.addEventListener(\"click\", this.#openDropdown.bind(this), {\n        signal\n      });\n      button.addEventListener(\"keydown\", this.#boundKeyDown, {\n        signal\n      });\n      const swatch = this.#buttonSwatch = document.createElement(\"span\");\n      swatch.className = \"swatch\";\n      swatch.setAttribute(\"aria-hidden\", true);\n      swatch.style.backgroundColor = this.#defaultColor;\n      button.append(swatch);\n      return button;\n    }\n    renderMainDropdown() {\n      const dropdown = this.#dropdown = this.#getDropdownRoot();\n      dropdown.setAttribute(\"aria-orientation\", \"horizontal\");\n      dropdown.setAttribute(\"aria-labelledby\", \"highlightColorPickerLabel\");\n      return dropdown;\n    }\n    #getDropdownRoot() {\n      const div = document.createElement(\"div\");\n      const signal = this.#uiManager._signal;\n      div.addEventListener(\"contextmenu\", noContextMenu, {\n        signal\n      });\n      div.className = \"dropdown\";\n      div.role = \"listbox\";\n      div.setAttribute(\"aria-multiselectable\", false);\n      div.setAttribute(\"aria-orientation\", \"vertical\");\n      div.setAttribute(\"data-l10n-id\", \"pdfjs-editor-colorpicker-dropdown\");\n      for (const [name, color] of this.#uiManager.highlightColors) {\n        const button = document.createElement(\"button\");\n        button.tabIndex = \"0\";\n        button.role = \"option\";\n        button.setAttribute(\"data-color\", color);\n        button.title = name;\n        button.setAttribute(\"data-l10n-id\", ColorPicker.#l10nColor[name]);\n        const swatch = document.createElement(\"span\");\n        button.append(swatch);\n        swatch.className = \"swatch\";\n        swatch.style.backgroundColor = color;\n        button.setAttribute(\"aria-selected\", color === this.#defaultColor);\n        button.addEventListener(\"click\", this.#colorSelect.bind(this, color), {\n          signal\n        });\n        div.append(button);\n      }\n      div.addEventListener(\"keydown\", this.#boundKeyDown, {\n        signal\n      });\n      return div;\n    }\n    #colorSelect(color, event) {\n      event.stopPropagation();\n      this.#eventBus.dispatch(\"switchannotationeditorparams\", {\n        source: this,\n        type: this.#type,\n        value: color\n      });\n    }\n    _colorSelectFromKeyboard(event) {\n      if (event.target === this.#button) {\n        this.#openDropdown(event);\n        return;\n      }\n      const color = event.target.getAttribute(\"data-color\");\n      if (!color) {\n        return;\n      }\n      this.#colorSelect(color, event);\n    }\n    _moveToNext(event) {\n      if (!this.#isDropdownVisible) {\n        this.#openDropdown(event);\n        return;\n      }\n      if (event.target === this.#button) {\n        this.#dropdown.firstChild?.focus();\n        return;\n      }\n      event.target.nextSibling?.focus();\n    }\n    _moveToPrevious(event) {\n      if (event.target === this.#dropdown?.firstChild || event.target === this.#button) {\n        if (this.#isDropdownVisible) {\n          this._hideDropdownFromKeyboard();\n        }\n        return;\n      }\n      if (!this.#isDropdownVisible) {\n        this.#openDropdown(event);\n      }\n      event.target.previousSibling?.focus();\n    }\n    _moveToBeginning(event) {\n      if (!this.#isDropdownVisible) {\n        this.#openDropdown(event);\n        return;\n      }\n      this.#dropdown.firstChild?.focus();\n    }\n    _moveToEnd(event) {\n      if (!this.#isDropdownVisible) {\n        this.#openDropdown(event);\n        return;\n      }\n      this.#dropdown.lastChild?.focus();\n    }\n    #keyDown(event) {\n      ColorPicker._keyboardManager.exec(this, event);\n    }\n    #openDropdown(event) {\n      if (this.#isDropdownVisible) {\n        this.hideDropdown();\n        return;\n      }\n      this.#dropdownWasFromKeyboard = event.detail === 0;\n      window.addEventListener(\"pointerdown\", this.#boundPointerDown, {\n        signal: this.#uiManager._signal\n      });\n      if (this.#dropdown) {\n        this.#dropdown.classList.remove(\"hidden\");\n        return;\n      }\n      const root = this.#dropdown = this.#getDropdownRoot();\n      this.#button.append(root);\n    }\n    #pointerDown(event) {\n      if (this.#dropdown?.contains(event.target)) {\n        return;\n      }\n      this.hideDropdown();\n    }\n    hideDropdown() {\n      this.#dropdown?.classList.add(\"hidden\");\n      window.removeEventListener(\"pointerdown\", this.#boundPointerDown);\n    }\n    get #isDropdownVisible() {\n      return this.#dropdown && !this.#dropdown.classList.contains(\"hidden\");\n    }\n    _hideDropdownFromKeyboard() {\n      if (this.#isMainColorPicker) {\n        return;\n      }\n      if (!this.#isDropdownVisible) {\n        this.#editor?.unselect();\n        return;\n      }\n      this.hideDropdown();\n      this.#button.focus({\n        preventScroll: true,\n        focusVisible: this.#dropdownWasFromKeyboard\n      });\n    }\n    updateColor(color) {\n      if (this.#buttonSwatch) {\n        this.#buttonSwatch.style.backgroundColor = color;\n      }\n      if (!this.#dropdown) {\n        return;\n      }\n      const i = this.#uiManager.highlightColors.values();\n      for (const child of this.#dropdown.children) {\n        child.setAttribute(\"aria-selected\", i.next().value === color);\n      }\n    }\n    destroy() {\n      this.#button?.remove();\n      this.#button = null;\n      this.#buttonSwatch = null;\n      this.#dropdown?.remove();\n      this.#dropdown = null;\n    }\n  }\n\n\n\n\n\n\n\n  class HighlightEditor extends AnnotationEditor {\n    #anchorNode = null;\n    #anchorOffset = 0;\n    #boxes;\n    #clipPathId = null;\n    #colorPicker = null;\n    #focusOutlines = null;\n    #focusNode = null;\n    #focusOffset = 0;\n    #highlightDiv = null;\n    #highlightOutlines = null;\n    #id = null;\n    #isFreeHighlight = false;\n    #lastPoint = null;\n    #opacity;\n    #outlineId = null;\n    #text = \"\";\n    #thickness;\n    #methodOfCreation = \"\";\n    static _defaultColor = null;\n    static _defaultOpacity = 1;\n    static _defaultThickness = 12;\n    static _type = \"highlight\";\n    static _editorType = AnnotationEditorType.HIGHLIGHT;\n    static _freeHighlightId = -1;\n    static _freeHighlight = null;\n    static _freeHighlightClipId = \"\";\n    static get _keyboardManager() {\n      const proto = HighlightEditor.prototype;\n      return shadow(this, \"_keyboardManager\", new KeyboardManager([[[\"ArrowLeft\", \"mac+ArrowLeft\"], proto._moveCaret, {\n        args: [0]\n      }], [[\"ArrowRight\", \"mac+ArrowRight\"], proto._moveCaret, {\n        args: [1]\n      }], [[\"ArrowUp\", \"mac+ArrowUp\"], proto._moveCaret, {\n        args: [2]\n      }], [[\"ArrowDown\", \"mac+ArrowDown\"], proto._moveCaret, {\n        args: [3]\n      }]]));\n    }\n    constructor(params) {\n      super({\n        ...params,\n        name: \"highlightEditor\"\n      });\n      this.color = params.color || HighlightEditor._defaultColor;\n      this.#thickness = params.thickness || HighlightEditor._defaultThickness;\n      this.#opacity = params.opacity || HighlightEditor._defaultOpacity;\n      this.#boxes = params.boxes || null;\n      this.#methodOfCreation = params.methodOfCreation || \"\";\n      this.#text = params.text || \"\";\n      this._isDraggable = false;\n      if (params.highlightId > -1) {\n        this.#isFreeHighlight = true;\n        this.#createFreeOutlines(params);\n        this.#addToDrawLayer();\n      } else if (this.#boxes) {\n        this.#anchorNode = params.anchorNode;\n        this.#anchorOffset = params.anchorOffset;\n        this.#focusNode = params.focusNode;\n        this.#focusOffset = params.focusOffset;\n        this.#createOutlines();\n        this.#addToDrawLayer();\n        this.rotate(this.rotation);\n      }\n    }\n    get telemetryInitialData() {\n      return {\n        action: \"added\",\n        type: this.#isFreeHighlight ? \"free_highlight\" : \"highlight\",\n        color: this._uiManager.highlightColorNames.get(this.color),\n        thickness: this.#thickness,\n        methodOfCreation: this.#methodOfCreation\n      };\n    }\n    get telemetryFinalData() {\n      return {\n        type: \"highlight\",\n        color: this._uiManager.highlightColorNames.get(this.color)\n      };\n    }\n    static computeTelemetryFinalData(data) {\n      return {\n        numberOfColors: data.get(\"color\").size\n      };\n    }\n    #createOutlines() {\n      const outliner = new Outliner(this.#boxes, 0.001);\n      this.#highlightOutlines = outliner.getOutlines();\n      ({\n        x: this.x,\n        y: this.y,\n        width: this.width,\n        height: this.height\n      } = this.#highlightOutlines.box);\n      const outlinerForOutline = new Outliner(this.#boxes, 0.0025, 0.001, this._uiManager.direction === \"ltr\");\n      this.#focusOutlines = outlinerForOutline.getOutlines();\n      const {\n        lastPoint\n      } = this.#focusOutlines.box;\n      this.#lastPoint = [(lastPoint[0] - this.x) / this.width, (lastPoint[1] - this.y) / this.height];\n    }\n    #createFreeOutlines({\n      highlightOutlines,\n      highlightId,\n      clipPathId\n    }) {\n      this.#highlightOutlines = highlightOutlines;\n      const extraThickness = 1.5;\n      this.#focusOutlines = highlightOutlines.getNewOutline(this.#thickness / 2 + extraThickness, 0.0025);\n      if (highlightId >= 0) {\n        this.#id = highlightId;\n        this.#clipPathId = clipPathId;\n        this.parent.drawLayer.finalizeLine(highlightId, highlightOutlines);\n        this.#outlineId = this.parent.drawLayer.highlightOutline(this.#focusOutlines);\n      } else if (this.parent) {\n        const angle = this.parent.viewport.rotation;\n        this.parent.drawLayer.updateLine(this.#id, highlightOutlines);\n        this.parent.drawLayer.updateBox(this.#id, HighlightEditor.#rotateBbox(this.#highlightOutlines.box, (angle - this.rotation + 360) % 360));\n        this.parent.drawLayer.updateLine(this.#outlineId, this.#focusOutlines);\n        this.parent.drawLayer.updateBox(this.#outlineId, HighlightEditor.#rotateBbox(this.#focusOutlines.box, angle));\n      }\n      const {\n        x,\n        y,\n        width,\n        height\n      } = highlightOutlines.box;\n      switch (this.rotation) {\n        case 0:\n          this.x = x;\n          this.y = y;\n          this.width = width;\n          this.height = height;\n          break;\n        case 90:\n          {\n            const [pageWidth, pageHeight] = this.parentDimensions;\n            this.x = y;\n            this.y = 1 - x;\n            this.width = width * pageHeight / pageWidth;\n            this.height = height * pageWidth / pageHeight;\n            break;\n          }\n        case 180:\n          this.x = 1 - x;\n          this.y = 1 - y;\n          this.width = width;\n          this.height = height;\n          break;\n        case 270:\n          {\n            const [pageWidth, pageHeight] = this.parentDimensions;\n            this.x = 1 - y;\n            this.y = x;\n            this.width = width * pageHeight / pageWidth;\n            this.height = height * pageWidth / pageHeight;\n            break;\n          }\n      }\n      const {\n        lastPoint\n      } = this.#focusOutlines.box;\n      this.#lastPoint = [(lastPoint[0] - x) / width, (lastPoint[1] - y) / height];\n    }\n    static initialize(l10n, uiManager) {\n      AnnotationEditor.initialize(l10n, uiManager);\n      HighlightEditor._defaultColor ||= uiManager.highlightColors?.values().next().value || \"#fff066\";\n    }\n    static updateDefaultParams(type, value) {\n      switch (type) {\n        case AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR:\n          HighlightEditor._defaultColor = value;\n          break;\n        case AnnotationEditorParamsType.HIGHLIGHT_THICKNESS:\n          HighlightEditor._defaultThickness = value;\n          break;\n      }\n    }\n    translateInPage(x, y) {}\n    get toolbarPosition() {\n      return this.#lastPoint;\n    }\n    updateParams(type, value) {\n      switch (type) {\n        case AnnotationEditorParamsType.HIGHLIGHT_COLOR:\n          this.#updateColor(value);\n          break;\n        case AnnotationEditorParamsType.HIGHLIGHT_THICKNESS:\n          this.#updateThickness(value);\n          break;\n      }\n    }\n    static get defaultPropertiesToUpdate() {\n      return [[AnnotationEditorParamsType.HIGHLIGHT_DEFAULT_COLOR, HighlightEditor._defaultColor], [AnnotationEditorParamsType.HIGHLIGHT_THICKNESS, HighlightEditor._defaultThickness]];\n    }\n    get propertiesToUpdate() {\n      return [[AnnotationEditorParamsType.HIGHLIGHT_COLOR, this.color || HighlightEditor._defaultColor], [AnnotationEditorParamsType.HIGHLIGHT_THICKNESS, this.#thickness || HighlightEditor._defaultThickness], [AnnotationEditorParamsType.HIGHLIGHT_FREE, this.#isFreeHighlight]];\n    }\n    #updateColor(color) {\n      const setColorAndOpacity = (col, opa) => {\n        this.color = col;\n        this.parent?.drawLayer.changeColor(this.#id, col);\n        this.#colorPicker?.updateColor(col);\n        this.#opacity = opa;\n        this.parent?.drawLayer.changeOpacity(this.#id, opa);\n      };\n      const savedColor = this.color;\n      const savedOpacity = this.#opacity;\n      this.addCommands({\n        cmd: setColorAndOpacity.bind(this, color, HighlightEditor._defaultOpacity),\n        undo: setColorAndOpacity.bind(this, savedColor, savedOpacity),\n        post: this._uiManager.updateUI.bind(this._uiManager, this),\n        mustExec: true,\n        type: AnnotationEditorParamsType.HIGHLIGHT_COLOR,\n        overwriteIfSameType: true,\n        keepUndo: true\n      });\n      this._reportTelemetry({\n        action: \"color_changed\",\n        color: this._uiManager.highlightColorNames.get(color)\n      }, true);\n    }\n    #updateThickness(thickness) {\n      const savedThickness = this.#thickness;\n      const setThickness = th => {\n        this.#thickness = th;\n        this.#changeThickness(th);\n      };\n      this.addCommands({\n        cmd: setThickness.bind(this, thickness),\n        undo: setThickness.bind(this, savedThickness),\n        post: this._uiManager.updateUI.bind(this._uiManager, this),\n        mustExec: true,\n        type: AnnotationEditorParamsType.INK_THICKNESS,\n        overwriteIfSameType: true,\n        keepUndo: true\n      });\n      this._reportTelemetry({\n        action: \"thickness_changed\",\n        thickness\n      }, true);\n    }\n    async addEditToolbar() {\n      const toolbar = await super.addEditToolbar();\n      if (!toolbar) {\n        return null;\n      }\n      if (this._uiManager.highlightColors) {\n        this.#colorPicker = new ColorPicker({\n          editor: this\n        });\n        toolbar.addColorPicker(this.#colorPicker);\n      }\n      return toolbar;\n    }\n    disableEditing() {\n      super.disableEditing();\n      this.div.classList.toggle(\"disabled\", true);\n    }\n    enableEditing() {\n      super.enableEditing();\n      this.div.classList.toggle(\"disabled\", false);\n    }\n    fixAndSetPosition() {\n      return super.fixAndSetPosition(this.#getRotation());\n    }\n    getBaseTranslation() {\n      return [0, 0];\n    }\n    getRect(tx, ty) {\n      return super.getRect(tx, ty, this.#getRotation());\n    }\n    onceAdded() {\n      if (!this.annotationElementId) {\n        this.parent.addUndoableEditor(this);\n      }\n      this.div.focus();\n    }\n    remove() {\n      this.#cleanDrawLayer();\n      this._reportTelemetry({\n        action: \"deleted\"\n      });\n      super.remove();\n    }\n    rebuild() {\n      if (!this.parent) {\n        return;\n      }\n      super.rebuild();\n      if (this.div === null) {\n        return;\n      }\n      this.#addToDrawLayer();\n      if (!this.isAttachedToDOM) {\n        this.parent.add(this);\n      }\n    }\n    setParent(parent) {\n      let mustBeSelected = false;\n      if (this.parent && !parent) {\n        this.#cleanDrawLayer();\n      } else if (parent) {\n        this.#addToDrawLayer(parent);\n        mustBeSelected = !this.parent && this.div?.classList.contains(\"selectedEditor\");\n      }\n      super.setParent(parent);\n      this.show(this._isVisible);\n      if (mustBeSelected) {\n        this.select();\n      }\n    }\n    #changeThickness(thickness) {\n      if (!this.#isFreeHighlight) {\n        return;\n      }\n      this.#createFreeOutlines({\n        highlightOutlines: this.#highlightOutlines.getNewOutline(thickness / 2)\n      });\n      this.fixAndSetPosition();\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.setDims(this.width * parentWidth, this.height * parentHeight);\n    }\n    #cleanDrawLayer() {\n      if (this.#id === null || !this.parent) {\n        return;\n      }\n      this.parent.drawLayer.remove(this.#id);\n      this.#id = null;\n      this.parent.drawLayer.remove(this.#outlineId);\n      this.#outlineId = null;\n    }\n    #addToDrawLayer(parent = this.parent) {\n      if (this.#id !== null) {\n        return;\n      }\n      ({\n        id: this.#id,\n        clipPathId: this.#clipPathId\n      } = parent.drawLayer.highlight(this.#highlightOutlines, this.color, this.#opacity));\n      this.#outlineId = parent.drawLayer.highlightOutline(this.#focusOutlines);\n      if (this.#highlightDiv) {\n        this.#highlightDiv.style.clipPath = this.#clipPathId;\n      }\n    }\n    static #rotateBbox({\n      x,\n      y,\n      width,\n      height\n    }, angle) {\n      switch (angle) {\n        case 90:\n          return {\n            x: 1 - y - height,\n            y: x,\n            width: height,\n            height: width\n          };\n        case 180:\n          return {\n            x: 1 - x - width,\n            y: 1 - y - height,\n            width,\n            height\n          };\n        case 270:\n          return {\n            x: y,\n            y: 1 - x - width,\n            width: height,\n            height: width\n          };\n      }\n      return {\n        x,\n        y,\n        width,\n        height\n      };\n    }\n    rotate(angle) {\n      const {\n        drawLayer\n      } = this.parent;\n      let box;\n      if (this.#isFreeHighlight) {\n        angle = (angle - this.rotation + 360) % 360;\n        box = HighlightEditor.#rotateBbox(this.#highlightOutlines.box, angle);\n      } else {\n        box = HighlightEditor.#rotateBbox(this, angle);\n      }\n      drawLayer.rotate(this.#id, angle);\n      drawLayer.rotate(this.#outlineId, angle);\n      drawLayer.updateBox(this.#id, box);\n      drawLayer.updateBox(this.#outlineId, HighlightEditor.#rotateBbox(this.#focusOutlines.box, angle));\n    }\n    render() {\n      if (this.div) {\n        return this.div;\n      }\n      const div = super.render();\n      if (this.#text) {\n        div.setAttribute(\"aria-label\", this.#text);\n        div.setAttribute(\"role\", \"mark\");\n      }\n      if (this.#isFreeHighlight) {\n        div.classList.add(\"free\");\n      } else {\n        this.div.addEventListener(\"keydown\", this.#keydown.bind(this), {\n          signal: this._uiManager._signal\n        });\n      }\n      const highlightDiv = this.#highlightDiv = document.createElement(\"div\");\n      div.append(highlightDiv);\n      highlightDiv.setAttribute(\"aria-hidden\", \"true\");\n      highlightDiv.className = \"internal\";\n      highlightDiv.style.clipPath = this.#clipPathId;\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.setDims(this.width * parentWidth, this.height * parentHeight);\n      bindEvents(this, this.#highlightDiv, [\"pointerover\", \"pointerleave\"]);\n      this.enableEditing();\n      return div;\n    }\n    pointerover() {\n      this.parent.drawLayer.addClass(this.#outlineId, \"hovered\");\n    }\n    pointerleave() {\n      this.parent.drawLayer.removeClass(this.#outlineId, \"hovered\");\n    }\n    #keydown(event) {\n      HighlightEditor._keyboardManager.exec(this, event);\n    }\n    _moveCaret(direction) {\n      this.parent.unselect(this);\n      switch (direction) {\n        case 0:\n        case 2:\n          this.#setCaret(true);\n          break;\n        case 1:\n        case 3:\n          this.#setCaret(false);\n          break;\n      }\n    }\n    #setCaret(start) {\n      if (!this.#anchorNode) {\n        return;\n      }\n      const selection = window.getSelection();\n      if (start) {\n        selection.setPosition(this.#anchorNode, this.#anchorOffset);\n      } else {\n        selection.setPosition(this.#focusNode, this.#focusOffset);\n      }\n    }\n    select() {\n      super.select();\n      if (!this.#outlineId) {\n        return;\n      }\n      this.parent?.drawLayer.removeClass(this.#outlineId, \"hovered\");\n      this.parent?.drawLayer.addClass(this.#outlineId, \"selected\");\n    }\n    unselect() {\n      super.unselect();\n      if (!this.#outlineId) {\n        return;\n      }\n      this.parent?.drawLayer.removeClass(this.#outlineId, \"selected\");\n      if (!this.#isFreeHighlight) {\n        this.#setCaret(false);\n      }\n    }\n    get _mustFixPosition() {\n      return !this.#isFreeHighlight;\n    }\n    show(visible = this._isVisible) {\n      super.show(visible);\n      if (this.parent) {\n        this.parent.drawLayer.show(this.#id, visible);\n        this.parent.drawLayer.show(this.#outlineId, visible);\n      }\n    }\n    #getRotation() {\n      return this.#isFreeHighlight ? this.rotation : 0;\n    }\n    #serializeBoxes() {\n      if (this.#isFreeHighlight) {\n        return null;\n      }\n      const [pageWidth, pageHeight] = this.pageDimensions;\n      const [pageX, pageY] = this.pageTranslation;\n      const boxes = this.#boxes;\n      const quadPoints = new Float32Array(boxes.length * 8);\n      let i = 0;\n      for (const {\n        x,\n        y,\n        width,\n        height\n      } of boxes) {\n        const sx = x * pageWidth + pageX;\n        const sy = (1 - y - height) * pageHeight + pageY;\n        quadPoints[i] = quadPoints[i + 4] = sx;\n        quadPoints[i + 1] = quadPoints[i + 3] = sy;\n        quadPoints[i + 2] = quadPoints[i + 6] = sx + width * pageWidth;\n        quadPoints[i + 5] = quadPoints[i + 7] = sy + height * pageHeight;\n        i += 8;\n      }\n      return quadPoints;\n    }\n    #serializeOutlines(rect) {\n      return this.#highlightOutlines.serialize(rect, this.#getRotation());\n    }\n    static startHighlighting(parent, isLTR, {\n      target: textLayer,\n      x,\n      y\n    }) {\n      const {\n        x: layerX,\n        y: layerY,\n        width: parentWidth,\n        height: parentHeight\n      } = textLayer.getBoundingClientRect();\n      const ac = new AbortController();\n      const signal = parent.combinedSignal(ac);\n      const pointerDown = e => {\n        e.preventDefault();\n        e.stopPropagation();\n      };\n      const pointerUpCallback = e => {\n        ac.abort();\n        this.#endHighlight(parent, e);\n      };\n      window.addEventListener(\"blur\", pointerUpCallback, {\n        signal\n      });\n      window.addEventListener(\"pointerup\", pointerUpCallback, {\n        signal\n      });\n      window.addEventListener(\"pointerdown\", pointerDown, {\n        capture: true,\n        passive: false,\n        signal\n      });\n      window.addEventListener(\"contextmenu\", noContextMenu, {\n        signal\n      });\n      textLayer.addEventListener(\"pointermove\", this.#highlightMove.bind(this, parent), {\n        signal\n      });\n      this._freeHighlight = new FreeOutliner({\n        x,\n        y\n      }, [layerX, layerY, parentWidth, parentHeight], parent.scale, this._defaultThickness / 2, isLTR, 0.001);\n      ({\n        id: this._freeHighlightId,\n        clipPathId: this._freeHighlightClipId\n      } = parent.drawLayer.highlight(this._freeHighlight, this._defaultColor, this._defaultOpacity, true));\n    }\n    static #highlightMove(parent, event) {\n      if (this._freeHighlight.add(event)) {\n        parent.drawLayer.updatePath(this._freeHighlightId, this._freeHighlight);\n      }\n    }\n    static #endHighlight(parent, event) {\n      if (!this._freeHighlight.isEmpty()) {\n        parent.createAndAddNewEditor(event, false, {\n          highlightId: this._freeHighlightId,\n          highlightOutlines: this._freeHighlight.getOutlines(),\n          clipPathId: this._freeHighlightClipId,\n          methodOfCreation: \"main_toolbar\"\n        });\n      } else {\n        parent.drawLayer.removeFreeHighlight(this._freeHighlightId);\n      }\n      this._freeHighlightId = -1;\n      this._freeHighlight = null;\n      this._freeHighlightClipId = \"\";\n    }\n    static async deserialize(data, parent, uiManager) {\n      let initialData = null;\n      if (data instanceof HighlightAnnotationElement) {\n        const {\n          data: {\n            quadPoints,\n            rect,\n            rotation,\n            id,\n            color,\n            opacity,\n            popupRef\n          },\n          parent: {\n            page: {\n              pageNumber\n            }\n          }\n        } = data;\n        initialData = data = {\n          annotationType: AnnotationEditorType.HIGHLIGHT,\n          color: Array.from(color),\n          opacity,\n          quadPoints,\n          boxes: null,\n          pageIndex: pageNumber - 1,\n          rect: rect.slice(0),\n          rotation,\n          id,\n          deleted: false,\n          popupRef\n        };\n      } else if (data instanceof InkAnnotationElement) {\n        const {\n          data: {\n            inkLists,\n            rect,\n            rotation,\n            id,\n            color,\n            borderStyle: {\n              rawWidth: thickness\n            },\n            popupRef\n          },\n          parent: {\n            page: {\n              pageNumber\n            }\n          }\n        } = data;\n        initialData = data = {\n          annotationType: AnnotationEditorType.HIGHLIGHT,\n          color: Array.from(color),\n          thickness,\n          inkLists,\n          boxes: null,\n          pageIndex: pageNumber - 1,\n          rect: rect.slice(0),\n          rotation,\n          id,\n          deleted: false,\n          popupRef\n        };\n      }\n      const {\n        color,\n        quadPoints,\n        inkLists,\n        opacity\n      } = data;\n      const editor = await super.deserialize(data, parent, uiManager);\n      editor.color = Util.makeHexColor(...color);\n      editor.#opacity = opacity || 1;\n      if (inkLists) {\n        editor.#thickness = data.thickness;\n      }\n      editor.annotationElementId = data.id || null;\n      editor._initialData = initialData;\n      const [pageWidth, pageHeight] = editor.pageDimensions;\n      const [pageX, pageY] = editor.pageTranslation;\n      if (quadPoints) {\n        const boxes = editor.#boxes = [];\n        for (let i = 0; i < quadPoints.length; i += 8) {\n          boxes.push({\n            x: (quadPoints[i] - pageX) / pageWidth,\n            y: 1 - (quadPoints[i + 1] - pageY) / pageHeight,\n            width: (quadPoints[i + 2] - quadPoints[i]) / pageWidth,\n            height: (quadPoints[i + 1] - quadPoints[i + 5]) / pageHeight\n          });\n        }\n        editor.#createOutlines();\n        editor.#addToDrawLayer();\n        editor.rotate(editor.rotation);\n      } else if (inkLists) {\n        editor.#isFreeHighlight = true;\n        const points = inkLists[0];\n        const point = {\n          x: points[0] - pageX,\n          y: pageHeight - (points[1] - pageY)\n        };\n        const outliner = new FreeOutliner(point, [0, 0, pageWidth, pageHeight], 1, editor.#thickness / 2, true, 0.001);\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          point.x = points[i] - pageX;\n          point.y = pageHeight - (points[i + 1] - pageY);\n          outliner.add(point);\n        }\n        const {\n          id,\n          clipPathId\n        } = parent.drawLayer.highlight(outliner, editor.color, editor._defaultOpacity, true);\n        editor.#createFreeOutlines({\n          highlightOutlines: outliner.getOutlines(),\n          highlightId: id,\n          clipPathId\n        });\n        editor.#addToDrawLayer();\n      }\n      return editor;\n    }\n    serialize(isForCopying = false) {\n      if (this.isEmpty() || isForCopying) {\n        return null;\n      }\n      if (this.deleted) {\n        return this.serializeDeleted();\n      }\n      const rect = this.getRect(0, 0);\n      const color = AnnotationEditor._colorManager.convert(this.color);\n      const serialized = {\n        annotationType: AnnotationEditorType.HIGHLIGHT,\n        color,\n        opacity: this.#opacity,\n        thickness: this.#thickness,\n        quadPoints: this.#serializeBoxes(),\n        outlines: this.#serializeOutlines(rect),\n        pageIndex: this.pageIndex,\n        rect,\n        rotation: this.#getRotation(),\n        structTreeParentId: this._structTreeParentId\n      };\n      if (this.annotationElementId && !this.#hasElementChanged(serialized)) {\n        return null;\n      }\n      serialized.id = this.annotationElementId;\n      return serialized;\n    }\n    #hasElementChanged(serialized) {\n      const {\n        color\n      } = this._initialData;\n      return serialized.color.some((c, i) => c !== color[i]);\n    }\n    renderAnnotationElement(annotation) {\n      annotation.updateEdited({\n        rect: this.getRect(0, 0)\n      });\n      return null;\n    }\n    static canCreateNewEmptyEditor() {\n      return false;\n    }\n  }\n\n\n\n\n\n  class InkEditor extends AnnotationEditor {\n    #baseHeight = 0;\n    #baseWidth = 0;\n    #canvasContextMenuTimeoutId = null;\n    #currentPath2D = new Path2D();\n    #disableEditing = false;\n    #drawingAC = null;\n    #hasSomethingToDraw = false;\n    #isCanvasInitialized = false;\n    #observer = null;\n    #pointerdownAC = null;\n    #realWidth = 0;\n    #realHeight = 0;\n    #requestFrameCallback = null;\n    static _defaultColor = null;\n    static _defaultOpacity = 1;\n    static _defaultThickness = 1;\n    static _type = \"ink\";\n    static _editorType = AnnotationEditorType.INK;\n    constructor(params) {\n      super({\n        ...params,\n        name: \"inkEditor\"\n      });\n      this.color = params.color || null;\n      this.thickness = params.thickness || null;\n      this.opacity = params.opacity || null;\n      this.paths = [];\n      this.bezierPath2D = [];\n      this.allRawPaths = [];\n      this.currentPath = [];\n      this.scaleFactor = 1;\n      this.translationX = this.translationY = 0;\n      this.x = 0;\n      this.y = 0;\n      this._willKeepAspectRatio = true;\n    }\n    static initialize(l10n, uiManager) {\n      AnnotationEditor.initialize(l10n, uiManager);\n    }\n    static updateDefaultParams(type, value) {\n      switch (type) {\n        case AnnotationEditorParamsType.INK_THICKNESS:\n          InkEditor._defaultThickness = value;\n          break;\n        case AnnotationEditorParamsType.INK_COLOR:\n          InkEditor._defaultColor = value;\n          break;\n        case AnnotationEditorParamsType.INK_OPACITY:\n          InkEditor._defaultOpacity = value / 100;\n          break;\n      }\n    }\n    updateParams(type, value) {\n      switch (type) {\n        case AnnotationEditorParamsType.INK_THICKNESS:\n          this.#updateThickness(value);\n          break;\n        case AnnotationEditorParamsType.INK_COLOR:\n          this.#updateColor(value);\n          break;\n        case AnnotationEditorParamsType.INK_OPACITY:\n          this.#updateOpacity(value);\n          break;\n      }\n    }\n    static get defaultPropertiesToUpdate() {\n      return [[AnnotationEditorParamsType.INK_THICKNESS, InkEditor._defaultThickness], [AnnotationEditorParamsType.INK_COLOR, InkEditor._defaultColor || AnnotationEditor._defaultLineColor], [AnnotationEditorParamsType.INK_OPACITY, Math.round(InkEditor._defaultOpacity * 100)]];\n    }\n    get propertiesToUpdate() {\n      return [[AnnotationEditorParamsType.INK_THICKNESS, this.thickness || InkEditor._defaultThickness], [AnnotationEditorParamsType.INK_COLOR, this.color || InkEditor._defaultColor || AnnotationEditor._defaultLineColor], [AnnotationEditorParamsType.INK_OPACITY, Math.round(100 * (this.opacity ?? InkEditor._defaultOpacity))]];\n    }\n    #updateThickness(thickness) {\n      const setThickness = th => {\n        this.thickness = th;\n        this.#fitToContent();\n      };\n      const savedThickness = this.thickness;\n      this.addCommands({\n        cmd: setThickness.bind(this, thickness),\n        undo: setThickness.bind(this, savedThickness),\n        post: this._uiManager.updateUI.bind(this._uiManager, this),\n        mustExec: true,\n        type: AnnotationEditorParamsType.INK_THICKNESS,\n        overwriteIfSameType: true,\n        keepUndo: true\n      });\n    }\n    #updateColor(color) {\n      const setColor = col => {\n        this.color = col;\n        this.#redraw();\n      };\n      const savedColor = this.color;\n      this.addCommands({\n        cmd: setColor.bind(this, color),\n        undo: setColor.bind(this, savedColor),\n        post: this._uiManager.updateUI.bind(this._uiManager, this),\n        mustExec: true,\n        type: AnnotationEditorParamsType.INK_COLOR,\n        overwriteIfSameType: true,\n        keepUndo: true\n      });\n    }\n    #updateOpacity(opacity) {\n      const setOpacity = op => {\n        this.opacity = op;\n        this.#redraw();\n      };\n      opacity /= 100;\n      const savedOpacity = this.opacity;\n      this.addCommands({\n        cmd: setOpacity.bind(this, opacity),\n        undo: setOpacity.bind(this, savedOpacity),\n        post: this._uiManager.updateUI.bind(this._uiManager, this),\n        mustExec: true,\n        type: AnnotationEditorParamsType.INK_OPACITY,\n        overwriteIfSameType: true,\n        keepUndo: true\n      });\n    }\n    rebuild() {\n      if (!this.parent) {\n        return;\n      }\n      super.rebuild();\n      if (this.div === null) {\n        return;\n      }\n      if (!this.canvas) {\n        this.#createCanvas();\n        this.#createObserver();\n      }\n      if (!this.isAttachedToDOM) {\n        this.parent.add(this);\n        this.#setCanvasDims();\n      }\n      this.#fitToContent();\n    }\n    remove() {\n      if (this.canvas === null) {\n        return;\n      }\n      if (!this.isEmpty()) {\n        this.commit();\n      }\n      this.canvas.width = this.canvas.height = 0;\n      this.canvas.remove();\n      this.canvas = null;\n      if (this.#canvasContextMenuTimeoutId) {\n        clearTimeout(this.#canvasContextMenuTimeoutId);\n        this.#canvasContextMenuTimeoutId = null;\n      }\n      this.#observer?.disconnect();\n      this.#observer = null;\n      super.remove();\n    }\n    setParent(parent) {\n      if (!this.parent && parent) {\n        this._uiManager.removeShouldRescale(this);\n      } else if (this.parent && parent === null) {\n        this._uiManager.addShouldRescale(this);\n      }\n      super.setParent(parent);\n    }\n    onScaleChanging() {\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      const width = this.width * parentWidth;\n      const height = this.height * parentHeight;\n      this.setDimensions(width, height);\n    }\n    enableEditMode() {\n      if (this.#disableEditing || this.canvas === null) {\n        return;\n      }\n      super.enableEditMode();\n      this._isDraggable = false;\n      this.#addPointerdownListener();\n    }\n    disableEditMode() {\n      if (!this.isInEditMode() || this.canvas === null) {\n        return;\n      }\n      super.disableEditMode();\n      this._isDraggable = !this.isEmpty();\n      this.div.classList.remove(\"editing\");\n      this.#removePointerdownListener();\n    }\n    onceAdded() {\n      this._isDraggable = !this.isEmpty();\n    }\n    isEmpty() {\n      return this.paths.length === 0 || this.paths.length === 1 && this.paths[0].length === 0;\n    }\n    #getInitialBBox() {\n      const {\n        parentRotation,\n        parentDimensions: [width, height]\n      } = this;\n      switch (parentRotation) {\n        case 90:\n          return [0, height, height, width];\n        case 180:\n          return [width, height, width, height];\n        case 270:\n          return [width, 0, height, width];\n        default:\n          return [0, 0, width, height];\n      }\n    }\n    #setStroke() {\n      const {\n        ctx,\n        color,\n        opacity,\n        thickness,\n        parentScale,\n        scaleFactor\n      } = this;\n      ctx.lineWidth = thickness * parentScale / scaleFactor;\n      ctx.lineCap = \"round\";\n      ctx.lineJoin = \"round\";\n      ctx.miterLimit = 10;\n      ctx.strokeStyle = `${color}${opacityToHex(opacity)}`;\n    }\n    #startDrawing(x, y) {\n      this.canvas.addEventListener(\"contextmenu\", noContextMenu, {\n        signal: this._uiManager._signal\n      });\n      this.#removePointerdownListener();\n      this.#drawingAC = new AbortController();\n      const signal = this._uiManager.combinedSignal(this.#drawingAC);\n      this.canvas.addEventListener(\"pointerleave\", this.canvasPointerleave.bind(this), {\n        signal\n      });\n      this.canvas.addEventListener(\"pointermove\", this.canvasPointermove.bind(this), {\n        signal\n      });\n      this.canvas.addEventListener(\"pointerup\", this.canvasPointerup.bind(this), {\n        signal\n      });\n      this.isEditing = true;\n      if (!this.#isCanvasInitialized) {\n        this.#isCanvasInitialized = true;\n        this.#setCanvasDims();\n        this.thickness ||= InkEditor._defaultThickness;\n        this.color ||= InkEditor._defaultColor || AnnotationEditor._defaultLineColor;\n        this.opacity ??= InkEditor._defaultOpacity;\n      }\n      this.currentPath.push([x, y]);\n      this.#hasSomethingToDraw = false;\n      this.#setStroke();\n      this.#requestFrameCallback = () => {\n        this.#drawPoints();\n        if (this.#requestFrameCallback) {\n          window.requestAnimationFrame(this.#requestFrameCallback);\n        }\n      };\n      window.requestAnimationFrame(this.#requestFrameCallback);\n    }\n    #draw(x, y) {\n      const [lastX, lastY] = this.currentPath.at(-1);\n      if (this.currentPath.length > 1 && x === lastX && y === lastY) {\n        return;\n      }\n      const currentPath = this.currentPath;\n      let path2D = this.#currentPath2D;\n      currentPath.push([x, y]);\n      this.#hasSomethingToDraw = true;\n      if (currentPath.length <= 2) {\n        path2D.moveTo(...currentPath[0]);\n        path2D.lineTo(x, y);\n        return;\n      }\n      if (currentPath.length === 3) {\n        this.#currentPath2D = path2D = new Path2D();\n        path2D.moveTo(...currentPath[0]);\n      }\n      this.#makeBezierCurve(path2D, ...currentPath.at(-3), ...currentPath.at(-2), x, y);\n    }\n    #endPath() {\n      if (this.currentPath.length === 0) {\n        return;\n      }\n      const lastPoint = this.currentPath.at(-1);\n      this.#currentPath2D.lineTo(...lastPoint);\n    }\n    #stopDrawing(x, y) {\n      this.#requestFrameCallback = null;\n      x = Math.min(Math.max(x, 0), this.canvas.width);\n      y = Math.min(Math.max(y, 0), this.canvas.height);\n      this.#draw(x, y);\n      this.#endPath();\n      let bezier;\n      if (this.currentPath.length !== 1) {\n        bezier = this.#generateBezierPoints();\n      } else {\n        const xy = [x, y];\n        bezier = [[xy, xy.slice(), xy.slice(), xy]];\n      }\n      const path2D = this.#currentPath2D;\n      const currentPath = this.currentPath;\n      this.currentPath = [];\n      this.#currentPath2D = new Path2D();\n      const cmd = () => {\n        this.allRawPaths.push(currentPath);\n        this.paths.push(bezier);\n        this.bezierPath2D.push(path2D);\n        this._uiManager.rebuild(this);\n      };\n      const undo = () => {\n        this.allRawPaths.pop();\n        this.paths.pop();\n        this.bezierPath2D.pop();\n        if (this.paths.length === 0) {\n          this.remove();\n        } else {\n          if (!this.canvas) {\n            this.#createCanvas();\n            this.#createObserver();\n          }\n          this.#fitToContent();\n        }\n      };\n      this.addCommands({\n        cmd,\n        undo,\n        mustExec: true\n      });\n    }\n    #drawPoints() {\n      if (!this.#hasSomethingToDraw) {\n        return;\n      }\n      this.#hasSomethingToDraw = false;\n      const thickness = Math.ceil(this.thickness * this.parentScale);\n      const lastPoints = this.currentPath.slice(-3);\n      const x = lastPoints.map(xy => xy[0]);\n      const y = lastPoints.map(xy => xy[1]);\n      Math.min(...x) - thickness;\n      Math.max(...x) + thickness;\n      Math.min(...y) - thickness;\n      Math.max(...y) + thickness;\n      const {\n        ctx\n      } = this;\n      ctx.save();\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      for (const path of this.bezierPath2D) {\n        ctx.stroke(path);\n      }\n      ctx.stroke(this.#currentPath2D);\n      ctx.restore();\n    }\n    #makeBezierCurve(path2D, x0, y0, x1, y1, x2, y2) {\n      const prevX = (x0 + x1) / 2;\n      const prevY = (y0 + y1) / 2;\n      const x3 = (x1 + x2) / 2;\n      const y3 = (y1 + y2) / 2;\n      path2D.bezierCurveTo(prevX + 2 * (x1 - prevX) / 3, prevY + 2 * (y1 - prevY) / 3, x3 + 2 * (x1 - x3) / 3, y3 + 2 * (y1 - y3) / 3, x3, y3);\n    }\n    #generateBezierPoints() {\n      const path = this.currentPath;\n      if (path.length <= 2) {\n        return [[path[0], path[0], path.at(-1), path.at(-1)]];\n      }\n      const bezierPoints = [];\n      let i;\n      let [x0, y0] = path[0];\n      for (i = 1; i < path.length - 2; i++) {\n        const [x1, y1] = path[i];\n        const [x2, y2] = path[i + 1];\n        const x3 = (x1 + x2) / 2;\n        const y3 = (y1 + y2) / 2;\n        const control1 = [x0 + 2 * (x1 - x0) / 3, y0 + 2 * (y1 - y0) / 3];\n        const control2 = [x3 + 2 * (x1 - x3) / 3, y3 + 2 * (y1 - y3) / 3];\n        bezierPoints.push([[x0, y0], control1, control2, [x3, y3]]);\n        [x0, y0] = [x3, y3];\n      }\n      const [x1, y1] = path[i];\n      const [x2, y2] = path[i + 1];\n      const control1 = [x0 + 2 * (x1 - x0) / 3, y0 + 2 * (y1 - y0) / 3];\n      const control2 = [x2 + 2 * (x1 - x2) / 3, y2 + 2 * (y1 - y2) / 3];\n      bezierPoints.push([[x0, y0], control1, control2, [x2, y2]]);\n      return bezierPoints;\n    }\n    #redraw() {\n      if (this.isEmpty()) {\n        this.#updateTransform();\n        return;\n      }\n      this.#setStroke();\n      const {\n        canvas,\n        ctx\n      } = this;\n      ctx.setTransform(1, 0, 0, 1, 0, 0);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      this.#updateTransform();\n      for (const path of this.bezierPath2D) {\n        ctx.stroke(path);\n      }\n    }\n    commit() {\n      if (this.#disableEditing) {\n        return;\n      }\n      super.commit();\n      this.isEditing = false;\n      this.disableEditMode();\n      this.setInForeground();\n      this.#disableEditing = true;\n      this.div.classList.add(\"disabled\");\n      this.#fitToContent(true);\n      this.select();\n      this.parent.addInkEditorIfNeeded(true);\n      this.moveInDOM();\n      this.div.focus({\n        preventScroll: true\n      });\n    }\n    focusin(event) {\n      if (!this._focusEventsAllowed) {\n        return;\n      }\n      super.focusin(event);\n      this.enableEditMode();\n    }\n    #addPointerdownListener() {\n      if (this.#pointerdownAC) {\n        return;\n      }\n      this.#pointerdownAC = new AbortController();\n      const signal = this._uiManager.combinedSignal(this.#pointerdownAC);\n      this.canvas.addEventListener(\"pointerdown\", this.canvasPointerdown.bind(this), {\n        signal\n      });\n    }\n    #removePointerdownListener() {\n      this.pointerdownAC?.abort();\n      this.pointerdownAC = null;\n    }\n    canvasPointerdown(event) {\n      if (event.button !== 0 || !this.isInEditMode() || this.#disableEditing) {\n        return;\n      }\n      this.setInForeground();\n      event.preventDefault();\n      if (!this.div.contains(document.activeElement)) {\n        this.div.focus({\n          preventScroll: true\n        });\n      }\n      this.#startDrawing(event.offsetX, event.offsetY);\n    }\n    canvasPointermove(event) {\n      event.preventDefault();\n      this.#draw(event.offsetX, event.offsetY);\n    }\n    canvasPointerup(event) {\n      event.preventDefault();\n      this.#endDrawing(event);\n    }\n    canvasPointerleave(event) {\n      this.#endDrawing(event);\n    }\n    #endDrawing(event) {\n      this.#drawingAC?.abort();\n      this.#drawingAC = null;\n      this.#addPointerdownListener();\n      if (this.#canvasContextMenuTimeoutId) {\n        clearTimeout(this.#canvasContextMenuTimeoutId);\n      }\n      this.#canvasContextMenuTimeoutId = setTimeout(() => {\n        this.#canvasContextMenuTimeoutId = null;\n        this.canvas.removeEventListener(\"contextmenu\", noContextMenu);\n      }, 10);\n      this.#stopDrawing(event.offsetX, event.offsetY);\n      this.addToAnnotationStorage();\n      this.setInBackground();\n    }\n    #createCanvas() {\n      this.canvas = document.createElement(\"canvas\");\n      this.canvas.width = this.canvas.height = 0;\n      this.canvas.className = \"inkEditorCanvas\";\n      this.canvas.setAttribute(\"data-l10n-id\", \"pdfjs-ink-canvas\");\n      this.div.append(this.canvas);\n      this.ctx = this.canvas.getContext(\"2d\");\n    }\n    #createObserver() {\n      this.#observer = new ResizeObserver(entries => {\n        const rect = entries[0].contentRect;\n        if (rect.width && rect.height) {\n          this.setDimensions(rect.width, rect.height);\n        }\n      });\n      this.#observer.observe(this.div);\n      this._uiManager._signal.addEventListener(\"abort\", () => {\n        this.#observer?.disconnect();\n        this.#observer = null;\n      }, {\n        once: true\n      });\n    }\n    get isResizable() {\n      return !this.isEmpty() && this.#disableEditing;\n    }\n    render() {\n      if (this.div) {\n        return this.div;\n      }\n      let baseX, baseY;\n      if (this.width) {\n        baseX = this.x;\n        baseY = this.y;\n      }\n      super.render();\n      this.div.setAttribute(\"data-l10n-id\", \"pdfjs-ink\");\n      const [x, y, w, h] = this.#getInitialBBox();\n      this.setAt(x, y, 0, 0);\n      this.setDims(w, h);\n      this.#createCanvas();\n      if (this.width) {\n        const [parentWidth, parentHeight] = this.parentDimensions;\n        this.setAspectRatio(this.width * parentWidth, this.height * parentHeight);\n        this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\n        this.#isCanvasInitialized = true;\n        this.#setCanvasDims();\n        this.setDims(this.width * parentWidth, this.height * parentHeight);\n        this.#redraw();\n        this.div.classList.add(\"disabled\");\n      } else {\n        this.div.classList.add(\"editing\");\n        this.enableEditMode();\n      }\n      this.#createObserver();\n      return this.div;\n    }\n    #setCanvasDims() {\n      if (!this.#isCanvasInitialized) {\n        return;\n      }\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.canvas.width = Math.ceil(this.width * parentWidth);\n      this.canvas.height = Math.ceil(this.height * parentHeight);\n      this.#updateTransform();\n    }\n    setDimensions(width, height) {\n      const roundedWidth = Math.round(width);\n      const roundedHeight = Math.round(height);\n      if (this.#realWidth === roundedWidth && this.#realHeight === roundedHeight) {\n        return;\n      }\n      this.#realWidth = roundedWidth;\n      this.#realHeight = roundedHeight;\n      this.canvas.style.visibility = \"hidden\";\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.width = width / parentWidth;\n      this.height = height / parentHeight;\n      this.fixAndSetPosition();\n      if (this.#disableEditing) {\n        this.#setScaleFactor(width, height);\n      }\n      this.#setCanvasDims();\n      this.#redraw();\n      this.canvas.style.visibility = \"visible\";\n      this.fixDims();\n    }\n    #setScaleFactor(width, height) {\n      const padding = this.#getPadding();\n      const scaleFactorW = (width - padding) / this.#baseWidth;\n      const scaleFactorH = (height - padding) / this.#baseHeight;\n      this.scaleFactor = Math.min(scaleFactorW, scaleFactorH);\n    }\n    #updateTransform() {\n      const padding = this.#getPadding() / 2;\n      this.ctx.setTransform(this.scaleFactor, 0, 0, this.scaleFactor, this.translationX * this.scaleFactor + padding, this.translationY * this.scaleFactor + padding);\n    }\n    static #buildPath2D(bezier) {\n      const path2D = new Path2D();\n      for (let i = 0, ii = bezier.length; i < ii; i++) {\n        const [first, control1, control2, second] = bezier[i];\n        if (i === 0) {\n          path2D.moveTo(...first);\n        }\n        path2D.bezierCurveTo(control1[0], control1[1], control2[0], control2[1], second[0], second[1]);\n      }\n      return path2D;\n    }\n    static #toPDFCoordinates(points, rect, rotation) {\n      const [blX, blY, trX, trY] = rect;\n      switch (rotation) {\n        case 0:\n          for (let i = 0, ii = points.length; i < ii; i += 2) {\n            points[i] += blX;\n            points[i + 1] = trY - points[i + 1];\n          }\n          break;\n        case 90:\n          for (let i = 0, ii = points.length; i < ii; i += 2) {\n            const x = points[i];\n            points[i] = points[i + 1] + blX;\n            points[i + 1] = x + blY;\n          }\n          break;\n        case 180:\n          for (let i = 0, ii = points.length; i < ii; i += 2) {\n            points[i] = trX - points[i];\n            points[i + 1] += blY;\n          }\n          break;\n        case 270:\n          for (let i = 0, ii = points.length; i < ii; i += 2) {\n            const x = points[i];\n            points[i] = trX - points[i + 1];\n            points[i + 1] = trY - x;\n          }\n          break;\n        default:\n          throw new Error(\"Invalid rotation\");\n      }\n      return points;\n    }\n    static #fromPDFCoordinates(points, rect, rotation) {\n      const [blX, blY, trX, trY] = rect;\n      switch (rotation) {\n        case 0:\n          for (let i = 0, ii = points.length; i < ii; i += 2) {\n            points[i] -= blX;\n            points[i + 1] = trY - points[i + 1];\n          }\n          break;\n        case 90:\n          for (let i = 0, ii = points.length; i < ii; i += 2) {\n            const x = points[i];\n            points[i] = points[i + 1] - blY;\n            points[i + 1] = x - blX;\n          }\n          break;\n        case 180:\n          for (let i = 0, ii = points.length; i < ii; i += 2) {\n            points[i] = trX - points[i];\n            points[i + 1] -= blY;\n          }\n          break;\n        case 270:\n          for (let i = 0, ii = points.length; i < ii; i += 2) {\n            const x = points[i];\n            points[i] = trY - points[i + 1];\n            points[i + 1] = trX - x;\n          }\n          break;\n        default:\n          throw new Error(\"Invalid rotation\");\n      }\n      return points;\n    }\n    #serializePaths(s, tx, ty, rect) {\n      const paths = [];\n      const padding = this.thickness / 2;\n      const shiftX = s * tx + padding;\n      const shiftY = s * ty + padding;\n      for (const bezier of this.paths) {\n        const buffer = [];\n        const points = [];\n        for (let j = 0, jj = bezier.length; j < jj; j++) {\n          const [first, control1, control2, second] = bezier[j];\n          if (first[0] === second[0] && first[1] === second[1] && jj === 1) {\n            const p0 = s * first[0] + shiftX;\n            const p1 = s * first[1] + shiftY;\n            buffer.push(p0, p1);\n            points.push(p0, p1);\n            break;\n          }\n          const p10 = s * first[0] + shiftX;\n          const p11 = s * first[1] + shiftY;\n          const p20 = s * control1[0] + shiftX;\n          const p21 = s * control1[1] + shiftY;\n          const p30 = s * control2[0] + shiftX;\n          const p31 = s * control2[1] + shiftY;\n          const p40 = s * second[0] + shiftX;\n          const p41 = s * second[1] + shiftY;\n          if (j === 0) {\n            buffer.push(p10, p11);\n            points.push(p10, p11);\n          }\n          buffer.push(p20, p21, p30, p31, p40, p41);\n          points.push(p20, p21);\n          if (j === jj - 1) {\n            points.push(p40, p41);\n          }\n        }\n        paths.push({\n          bezier: InkEditor.#toPDFCoordinates(buffer, rect, this.rotation),\n          points: InkEditor.#toPDFCoordinates(points, rect, this.rotation)\n        });\n      }\n      return paths;\n    }\n    #getBbox() {\n      let xMin = Infinity;\n      let xMax = -Infinity;\n      let yMin = Infinity;\n      let yMax = -Infinity;\n      for (const path of this.paths) {\n        for (const [first, control1, control2, second] of path) {\n          const bbox = Util.bezierBoundingBox(...first, ...control1, ...control2, ...second);\n          xMin = Math.min(xMin, bbox[0]);\n          yMin = Math.min(yMin, bbox[1]);\n          xMax = Math.max(xMax, bbox[2]);\n          yMax = Math.max(yMax, bbox[3]);\n        }\n      }\n      return [xMin, yMin, xMax, yMax];\n    }\n    #getPadding() {\n      return this.#disableEditing ? Math.ceil(this.thickness * this.parentScale) : 0;\n    }\n    #fitToContent(firstTime = false) {\n      if (this.isEmpty()) {\n        return;\n      }\n      if (!this.#disableEditing) {\n        this.#redraw();\n        return;\n      }\n      const bbox = this.#getBbox();\n      const padding = this.#getPadding();\n      this.#baseWidth = Math.max(AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\n      this.#baseHeight = Math.max(AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\n      const width = Math.ceil(padding + this.#baseWidth * this.scaleFactor);\n      const height = Math.ceil(padding + this.#baseHeight * this.scaleFactor);\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.width = width / parentWidth;\n      this.height = height / parentHeight;\n      this.setAspectRatio(width, height);\n      const prevTranslationX = this.translationX;\n      const prevTranslationY = this.translationY;\n      this.translationX = -bbox[0];\n      this.translationY = -bbox[1];\n      this.#setCanvasDims();\n      this.#redraw();\n      this.#realWidth = width;\n      this.#realHeight = height;\n      this.setDims(width, height);\n      const unscaledPadding = firstTime ? padding / this.scaleFactor / 2 : 0;\n      this.translate(prevTranslationX - this.translationX - unscaledPadding, prevTranslationY - this.translationY - unscaledPadding);\n    }\n    static async deserialize(data, parent, uiManager) {\n      if (data instanceof InkAnnotationElement) {\n        return null;\n      }\n      const editor = await super.deserialize(data, parent, uiManager);\n      editor.thickness = data.thickness;\n      editor.color = Util.makeHexColor(...data.color);\n      editor.opacity = data.opacity;\n      const [pageWidth, pageHeight] = editor.pageDimensions;\n      const width = editor.width * pageWidth;\n      const height = editor.height * pageHeight;\n      const scaleFactor = editor.parentScale;\n      const padding = data.thickness / 2;\n      editor.#disableEditing = true;\n      editor.#realWidth = Math.round(width);\n      editor.#realHeight = Math.round(height);\n      const {\n        paths,\n        rect,\n        rotation\n      } = data;\n      for (let {\n        bezier\n      } of paths) {\n        bezier = InkEditor.#fromPDFCoordinates(bezier, rect, rotation);\n        const path = [];\n        editor.paths.push(path);\n        let p0 = scaleFactor * (bezier[0] - padding);\n        let p1 = scaleFactor * (bezier[1] - padding);\n        for (let i = 2, ii = bezier.length; i < ii; i += 6) {\n          const p10 = scaleFactor * (bezier[i] - padding);\n          const p11 = scaleFactor * (bezier[i + 1] - padding);\n          const p20 = scaleFactor * (bezier[i + 2] - padding);\n          const p21 = scaleFactor * (bezier[i + 3] - padding);\n          const p30 = scaleFactor * (bezier[i + 4] - padding);\n          const p31 = scaleFactor * (bezier[i + 5] - padding);\n          path.push([[p0, p1], [p10, p11], [p20, p21], [p30, p31]]);\n          p0 = p30;\n          p1 = p31;\n        }\n        const path2D = this.#buildPath2D(path);\n        editor.bezierPath2D.push(path2D);\n      }\n      const bbox = editor.#getBbox();\n      editor.#baseWidth = Math.max(AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\n      editor.#baseHeight = Math.max(AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\n      editor.#setScaleFactor(width, height);\n      return editor;\n    }\n    serialize() {\n      if (this.isEmpty()) {\n        return null;\n      }\n      const rect = this.getRect(0, 0);\n      const color = AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);\n      return {\n        annotationType: AnnotationEditorType.INK,\n        color,\n        thickness: this.thickness,\n        opacity: this.opacity,\n        paths: this.#serializePaths(this.scaleFactor / this.parentScale, this.translationX, this.translationY, rect),\n        pageIndex: this.pageIndex,\n        rect,\n        rotation: this.rotation,\n        structTreeParentId: this._structTreeParentId\n      };\n    }\n  }\n\n\n\n\n  class StampEditor extends AnnotationEditor {\n    #bitmap = null;\n    #bitmapId = null;\n    #bitmapPromise = null;\n    #bitmapUrl = null;\n    #bitmapFile = null;\n    #bitmapFileName = \"\";\n    #canvas = null;\n    #observer = null;\n    #resizeTimeoutId = null;\n    #isSvg = false;\n    #hasBeenAddedInUndoStack = false;\n    static _type = \"stamp\";\n    static _editorType = AnnotationEditorType.STAMP;\n    constructor(params) {\n      super({\n        ...params,\n        name: \"stampEditor\"\n      });\n      this.#bitmapUrl = params.bitmapUrl;\n      this.#bitmapFile = params.bitmapFile;\n    }\n    static initialize(l10n, uiManager) {\n      AnnotationEditor.initialize(l10n, uiManager);\n    }\n    static get supportedTypes() {\n      const types = [\"apng\", \"avif\", \"bmp\", \"gif\", \"jpeg\", \"png\", \"svg+xml\", \"webp\", \"x-icon\"];\n      return shadow(this, \"supportedTypes\", types.map(type => `image/${type}`));\n    }\n    static get supportedTypesStr() {\n      return shadow(this, \"supportedTypesStr\", this.supportedTypes.join(\",\"));\n    }\n    static isHandlingMimeForPasting(mime) {\n      return this.supportedTypes.includes(mime);\n    }\n    static paste(item, parent) {\n      parent.pasteEditor(AnnotationEditorType.STAMP, {\n        bitmapFile: item.getAsFile()\n      });\n    }\n    altTextFinish() {\n      if (this._uiManager.useNewAltTextFlow) {\n        this.div.hidden = false;\n      }\n      super.altTextFinish();\n    }\n    get telemetryFinalData() {\n      return {\n        type: \"stamp\",\n        hasAltText: !!this.altTextData?.altText\n      };\n    }\n    static computeTelemetryFinalData(data) {\n      const hasAltTextStats = data.get(\"hasAltText\");\n      return {\n        hasAltText: hasAltTextStats.get(true) ?? 0,\n        hasNoAltText: hasAltTextStats.get(false) ?? 0\n      };\n    }\n    #getBitmapFetched(data, fromId = false) {\n      if (!data) {\n        this.remove();\n        return;\n      }\n      this.#bitmap = data.bitmap;\n      if (!fromId) {\n        this.#bitmapId = data.id;\n        this.#isSvg = data.isSvg;\n      }\n      if (data.file) {\n        this.#bitmapFileName = data.file.name;\n      }\n      this.#createCanvas();\n    }\n    #getBitmapDone() {\n      this.#bitmapPromise = null;\n      this._uiManager.enableWaiting(false);\n      if (!this.#canvas) {\n        return;\n      }\n      if (this._uiManager.useNewAltTextWhenAddingImage && this._uiManager.useNewAltTextFlow && this.#bitmap) {\n        this._editToolbar.hide();\n        this._uiManager.editAltText(this, true);\n        return;\n      }\n      if (!this._uiManager.useNewAltTextWhenAddingImage && this._uiManager.useNewAltTextFlow && this.#bitmap) {\n        this._reportTelemetry({\n          action: \"pdfjs.image.image_added\",\n          data: {\n            alt_text_modal: false,\n            alt_text_type: \"empty\"\n          }\n        });\n        try {\n          this.mlGuessAltText();\n        } catch {}\n      }\n      this.div.focus();\n    }\n    async mlGuessAltText(imageData = null, updateAltTextData = true) {\n      if (this.hasAltTextData()) {\n        return null;\n      }\n      const {\n        mlManager\n      } = this._uiManager;\n      if (!mlManager) {\n        throw new Error(\"No ML.\");\n      }\n      if (!(await mlManager.isEnabledFor(\"altText\"))) {\n        throw new Error(\"ML isn't enabled for alt text.\");\n      }\n      const {\n        data,\n        width,\n        height\n      } = imageData || this.copyCanvas(null, null, true).imageData;\n      const response = await mlManager.guess({\n        name: \"altText\",\n        request: {\n          data,\n          width,\n          height,\n          channels: data.length / (width * height)\n        }\n      });\n      if (!response) {\n        throw new Error(\"No response from the AI service.\");\n      }\n      if (response.error) {\n        throw new Error(\"Error from the AI service.\");\n      }\n      if (response.cancel) {\n        return null;\n      }\n      if (!response.output) {\n        throw new Error(\"No valid response from the AI service.\");\n      }\n      const altText = response.output;\n      await this.setGuessedAltText(altText);\n      if (updateAltTextData && !this.hasAltTextData()) {\n        this.altTextData = {\n          alt: altText,\n          decorative: false\n        };\n      }\n      return altText;\n    }\n    #getBitmap() {\n      if (this.#bitmapId) {\n        this._uiManager.enableWaiting(true);\n        this._uiManager.imageManager.getFromId(this.#bitmapId).then(data => this.#getBitmapFetched(data, true)).finally(() => this.#getBitmapDone());\n        return;\n      }\n      if (this.#bitmapUrl) {\n        const url = this.#bitmapUrl;\n        this.#bitmapUrl = null;\n        this._uiManager.enableWaiting(true);\n        this.#bitmapPromise = this._uiManager.imageManager.getFromUrl(url).then(data => this.#getBitmapFetched(data)).finally(() => this.#getBitmapDone());\n        return;\n      }\n      if (this.#bitmapFile) {\n        const file = this.#bitmapFile;\n        this.#bitmapFile = null;\n        this._uiManager.enableWaiting(true);\n        this.#bitmapPromise = this._uiManager.imageManager.getFromFile(file).then(data => this.#getBitmapFetched(data)).finally(() => this.#getBitmapDone());\n        return;\n      }\n      const input = document.createElement(\"input\");\n      input.type = \"file\";\n      input.accept = StampEditor.supportedTypesStr;\n      const signal = this._uiManager._signal;\n      this.#bitmapPromise = new Promise(resolve => {\n        input.addEventListener(\"change\", async () => {\n          if (!input.files || input.files.length === 0) {\n            this.remove();\n          } else {\n            this._uiManager.enableWaiting(true);\n            const data = await this._uiManager.imageManager.getFromFile(input.files[0]);\n            this._reportTelemetry({\n              action: \"pdfjs.image.image_selected\",\n              data: {\n                alt_text_modal: this._uiManager.useNewAltTextFlow\n              }\n            });\n            this.#getBitmapFetched(data);\n          }\n          resolve();\n        }, {\n          signal\n        });\n        input.addEventListener(\"cancel\", () => {\n          this.remove();\n          resolve();\n        }, {\n          signal\n        });\n      }).finally(() => this.#getBitmapDone());\n      input.click();\n    }\n    remove() {\n      if (this.#bitmapId) {\n        this.#bitmap = null;\n        this._uiManager.imageManager.deleteId(this.#bitmapId);\n        this.#canvas?.remove();\n        this.#canvas = null;\n        this.#observer?.disconnect();\n        this.#observer = null;\n        if (this.#resizeTimeoutId) {\n          clearTimeout(this.#resizeTimeoutId);\n          this.#resizeTimeoutId = null;\n        }\n      }\n      super.remove();\n    }\n    rebuild() {\n      if (!this.parent) {\n        if (this.#bitmapId) {\n          this.#getBitmap();\n        }\n        return;\n      }\n      super.rebuild();\n      if (this.div === null) {\n        return;\n      }\n      if (this.#bitmapId && this.#canvas === null) {\n        this.#getBitmap();\n      }\n      if (!this.isAttachedToDOM) {\n        this.parent.add(this);\n      }\n    }\n    onceAdded() {\n      this._isDraggable = true;\n      this.div.focus();\n    }\n    isEmpty() {\n      return !(this.#bitmapPromise || this.#bitmap || this.#bitmapUrl || this.#bitmapFile || this.#bitmapId);\n    }\n    get isResizable() {\n      return true;\n    }\n    render() {\n      if (this.div) {\n        return this.div;\n      }\n      let baseX, baseY;\n      if (this.width) {\n        baseX = this.x;\n        baseY = this.y;\n      }\n      super.render();\n      this.div.hidden = true;\n      this.div.setAttribute(\"role\", \"figure\");\n      this.addAltTextButton();\n      if (this.#bitmap) {\n        this.#createCanvas();\n      } else {\n        this.#getBitmap();\n      }\n      if (this.width && !this.annotationElementId) {\n        const [parentWidth, parentHeight] = this.parentDimensions;\n        this.setAt(baseX * parentWidth, baseY * parentHeight, this.width * parentWidth, this.height * parentHeight);\n      }\n      return this.div;\n    }\n    #createCanvas() {\n      const {\n        div\n      } = this;\n      let {\n        width,\n        height\n      } = this.#bitmap;\n      const [pageWidth, pageHeight] = this.pageDimensions;\n      const MAX_RATIO = 0.75;\n      if (this.width) {\n        width = this.width * pageWidth;\n        height = this.height * pageHeight;\n      } else if (width > MAX_RATIO * pageWidth || height > MAX_RATIO * pageHeight) {\n        const factor = Math.min(MAX_RATIO * pageWidth / width, MAX_RATIO * pageHeight / height);\n        width *= factor;\n        height *= factor;\n      }\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.setDims(width * parentWidth / pageWidth, height * parentHeight / pageHeight);\n      this._uiManager.enableWaiting(false);\n      const canvas = this.#canvas = document.createElement(\"canvas\");\n      canvas.setAttribute(\"role\", \"img\");\n      this.addContainer(canvas);\n      if (!this._uiManager.useNewAltTextWhenAddingImage || !this._uiManager.useNewAltTextFlow || this.annotationElementId) {\n        div.hidden = false;\n      }\n      this.#drawBitmap(width, height);\n      this.#createObserver();\n      if (!this.#hasBeenAddedInUndoStack) {\n        this.parent.addUndoableEditor(this);\n        this.#hasBeenAddedInUndoStack = true;\n      }\n      this._reportTelemetry({\n        action: \"inserted_image\"\n      });\n      if (this.#bitmapFileName) {\n        canvas.setAttribute(\"aria-label\", this.#bitmapFileName);\n      }\n    }\n    copyCanvas(maxDataDimension, maxPreviewDimension, createImageData = false) {\n      if (!maxDataDimension) {\n        maxDataDimension = 224;\n      }\n      const {\n        width: bitmapWidth,\n        height: bitmapHeight\n      } = this.#bitmap;\n      const outputScale = new OutputScale();\n      let bitmap = this.#bitmap;\n      let width = bitmapWidth,\n        height = bitmapHeight;\n      let canvas = null;\n      if (maxPreviewDimension) {\n        if (bitmapWidth > maxPreviewDimension || bitmapHeight > maxPreviewDimension) {\n          const ratio = Math.min(maxPreviewDimension / bitmapWidth, maxPreviewDimension / bitmapHeight);\n          width = Math.floor(bitmapWidth * ratio);\n          height = Math.floor(bitmapHeight * ratio);\n        }\n        canvas = document.createElement(\"canvas\");\n        const scaledWidth = canvas.width = Math.ceil(width * outputScale.sx);\n        const scaledHeight = canvas.height = Math.ceil(height * outputScale.sy);\n        if (!this.#isSvg) {\n          bitmap = this.#scaleBitmap(scaledWidth, scaledHeight);\n        }\n        const ctx = canvas.getContext(\"2d\");\n        ctx.filter = this._uiManager.hcmFilter;\n        let white = \"white\",\n          black = \"#cfcfd8\";\n        if (this._uiManager.hcmFilter !== \"none\") {\n          black = \"black\";\n        } else if (window.matchMedia?.(\"(prefers-color-scheme: dark)\").matches) {\n          white = \"#8f8f9d\";\n          black = \"#42414d\";\n        }\n        const boxDim = 15;\n        const boxDimWidth = boxDim * outputScale.sx;\n        const boxDimHeight = boxDim * outputScale.sy;\n        const pattern = new OffscreenCanvas(boxDimWidth * 2, boxDimHeight * 2);\n        const patternCtx = pattern.getContext(\"2d\");\n        patternCtx.fillStyle = white;\n        patternCtx.fillRect(0, 0, boxDimWidth * 2, boxDimHeight * 2);\n        patternCtx.fillStyle = black;\n        patternCtx.fillRect(0, 0, boxDimWidth, boxDimHeight);\n        patternCtx.fillRect(boxDimWidth, boxDimHeight, boxDimWidth, boxDimHeight);\n        ctx.fillStyle = ctx.createPattern(pattern, \"repeat\");\n        ctx.fillRect(0, 0, scaledWidth, scaledHeight);\n        ctx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, scaledWidth, scaledHeight);\n      }\n      let imageData = null;\n      if (createImageData) {\n        let dataWidth, dataHeight;\n        if (outputScale.symmetric && bitmap.width < maxDataDimension && bitmap.height < maxDataDimension) {\n          dataWidth = bitmap.width;\n          dataHeight = bitmap.height;\n        } else {\n          bitmap = this.#bitmap;\n          if (bitmapWidth > maxDataDimension || bitmapHeight > maxDataDimension) {\n            const ratio = Math.min(maxDataDimension / bitmapWidth, maxDataDimension / bitmapHeight);\n            dataWidth = Math.floor(bitmapWidth * ratio);\n            dataHeight = Math.floor(bitmapHeight * ratio);\n            if (!this.#isSvg) {\n              bitmap = this.#scaleBitmap(dataWidth, dataHeight);\n            }\n          }\n        }\n        const offscreen = new OffscreenCanvas(dataWidth, dataHeight);\n        const offscreenCtx = offscreen.getContext(\"2d\", {\n          willReadFrequently: true\n        });\n        offscreenCtx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, dataWidth, dataHeight);\n        imageData = {\n          width: dataWidth,\n          height: dataHeight,\n          data: offscreenCtx.getImageData(0, 0, dataWidth, dataHeight).data\n        };\n      }\n      return {\n        canvas,\n        width,\n        height,\n        imageData\n      };\n    }\n    #setDimensions(width, height) {\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.width = width / parentWidth;\n      this.height = height / parentHeight;\n      if (this._initialOptions?.isCentered) {\n        this.center();\n      } else {\n        this.fixAndSetPosition();\n      }\n      this._initialOptions = null;\n      if (this.#resizeTimeoutId !== null) {\n        clearTimeout(this.#resizeTimeoutId);\n      }\n      const TIME_TO_WAIT = 200;\n      this.#resizeTimeoutId = setTimeout(() => {\n        this.#resizeTimeoutId = null;\n        this.#drawBitmap(width, height);\n      }, TIME_TO_WAIT);\n    }\n    #scaleBitmap(width, height) {\n      const {\n        width: bitmapWidth,\n        height: bitmapHeight\n      } = this.#bitmap;\n      let newWidth = bitmapWidth;\n      let newHeight = bitmapHeight;\n      let bitmap = this.#bitmap;\n      while (newWidth > 2 * width || newHeight > 2 * height) {\n        const prevWidth = newWidth;\n        const prevHeight = newHeight;\n        if (newWidth > 2 * width) {\n          newWidth = newWidth >= 16384 ? Math.floor(newWidth / 2) - 1 : Math.ceil(newWidth / 2);\n        }\n        if (newHeight > 2 * height) {\n          newHeight = newHeight >= 16384 ? Math.floor(newHeight / 2) - 1 : Math.ceil(newHeight / 2);\n        }\n        const offscreen = new OffscreenCanvas(newWidth, newHeight);\n        const ctx = offscreen.getContext(\"2d\");\n        ctx.drawImage(bitmap, 0, 0, prevWidth, prevHeight, 0, 0, newWidth, newHeight);\n        bitmap = offscreen.transferToImageBitmap();\n      }\n      return bitmap;\n    }\n    #drawBitmap(width, height) {\n      const outputScale = new OutputScale();\n      const scaledWidth = Math.ceil(width * outputScale.sx);\n      const scaledHeight = Math.ceil(height * outputScale.sy);\n      const canvas = this.#canvas;\n      if (!canvas || canvas.width === scaledWidth && canvas.height === scaledHeight) {\n        return;\n      }\n      canvas.width = scaledWidth;\n      canvas.height = scaledHeight;\n      const bitmap = this.#isSvg ? this.#bitmap : this.#scaleBitmap(scaledWidth, scaledHeight);\n      const ctx = canvas.getContext(\"2d\");\n      ctx.filter = this._uiManager.hcmFilter;\n      ctx.drawImage(bitmap, 0, 0, bitmap.width, bitmap.height, 0, 0, scaledWidth, scaledHeight);\n    }\n    getImageForAltText() {\n      return this.#canvas;\n    }\n    #serializeBitmap(toUrl) {\n      if (toUrl) {\n        if (this.#isSvg) {\n          const url = this._uiManager.imageManager.getSvgUrl(this.#bitmapId);\n          if (url) {\n            return url;\n          }\n        }\n        const canvas = document.createElement(\"canvas\");\n        ({\n          width: canvas.width,\n          height: canvas.height\n        } = this.#bitmap);\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(this.#bitmap, 0, 0);\n        return canvas.toDataURL();\n      }\n      if (this.#isSvg) {\n        const [pageWidth, pageHeight] = this.pageDimensions;\n        const width = Math.round(this.width * pageWidth * PixelsPerInch.PDF_TO_CSS_UNITS);\n        const height = Math.round(this.height * pageHeight * PixelsPerInch.PDF_TO_CSS_UNITS);\n        const offscreen = new OffscreenCanvas(width, height);\n        const ctx = offscreen.getContext(\"2d\");\n        ctx.drawImage(this.#bitmap, 0, 0, this.#bitmap.width, this.#bitmap.height, 0, 0, width, height);\n        return offscreen.transferToImageBitmap();\n      }\n      return structuredClone(this.#bitmap);\n    }\n    #createObserver() {\n      if (!this._uiManager._signal) {\n        return;\n      }\n      this.#observer = new ResizeObserver(entries => {\n        const rect = entries[0].contentRect;\n        if (rect.width && rect.height) {\n          this.#setDimensions(rect.width, rect.height);\n        }\n      });\n      this.#observer.observe(this.div);\n      this._uiManager._signal.addEventListener(\"abort\", () => {\n        this.#observer?.disconnect();\n        this.#observer = null;\n      }, {\n        once: true\n      });\n    }\n    static async deserialize(data, parent, uiManager) {\n      let initialData = null;\n      if (data instanceof StampAnnotationElement) {\n        const {\n          data: {\n            rect,\n            rotation,\n            id,\n            structParent,\n            popupRef\n          },\n          container,\n          parent: {\n            page: {\n              pageNumber\n            }\n          }\n        } = data;\n        const canvas = container.querySelector(\"canvas\");\n        const imageData = uiManager.imageManager.getFromCanvas(container.id, canvas);\n        canvas.remove();\n        const altText = (await parent._structTree.getAriaAttributes(`${AnnotationPrefix}${id}`))?.get(\"aria-label\") || \"\";\n        initialData = data = {\n          annotationType: AnnotationEditorType.STAMP,\n          bitmapId: imageData.id,\n          bitmap: imageData.bitmap,\n          pageIndex: pageNumber - 1,\n          rect: rect.slice(0),\n          rotation,\n          id,\n          deleted: false,\n          accessibilityData: {\n            decorative: false,\n            altText\n          },\n          isSvg: false,\n          structParent,\n          popupRef\n        };\n      }\n      const editor = await super.deserialize(data, parent, uiManager);\n      const {\n        rect,\n        bitmap,\n        bitmapUrl,\n        bitmapId,\n        isSvg,\n        accessibilityData\n      } = data;\n      if (bitmapId && uiManager.imageManager.isValidId(bitmapId)) {\n        editor.#bitmapId = bitmapId;\n        if (bitmap) {\n          editor.#bitmap = bitmap;\n        }\n      } else {\n        editor.#bitmapUrl = bitmapUrl;\n      }\n      editor.#isSvg = isSvg;\n      const [parentWidth, parentHeight] = editor.pageDimensions;\n      editor.width = (rect[2] - rect[0]) / parentWidth;\n      editor.height = (rect[3] - rect[1]) / parentHeight;\n      editor.annotationElementId = data.id || null;\n      if (accessibilityData) {\n        editor.altTextData = accessibilityData;\n      }\n      editor._initialData = initialData;\n      editor.#hasBeenAddedInUndoStack = !!initialData;\n      return editor;\n    }\n    serialize(isForCopying = false, context = null) {\n      if (this.isEmpty()) {\n        return null;\n      }\n      if (this.deleted) {\n        return this.serializeDeleted();\n      }\n      const serialized = {\n        annotationType: AnnotationEditorType.STAMP,\n        bitmapId: this.#bitmapId,\n        pageIndex: this.pageIndex,\n        rect: this.getRect(0, 0),\n        rotation: this.rotation,\n        isSvg: this.#isSvg,\n        structTreeParentId: this._structTreeParentId\n      };\n      if (isForCopying) {\n        serialized.bitmapUrl = this.#serializeBitmap(true);\n        serialized.accessibilityData = this.serializeAltText(true);\n        return serialized;\n      }\n      const {\n        decorative,\n        altText\n      } = this.serializeAltText(false);\n      if (!decorative && altText) {\n        serialized.accessibilityData = {\n          type: \"Figure\",\n          alt: altText\n        };\n      }\n      if (this.annotationElementId) {\n        const changes = this.#hasElementChanged(serialized);\n        if (changes.isSame) {\n          return null;\n        }\n        if (changes.isSameAltText) {\n          delete serialized.accessibilityData;\n        } else {\n          serialized.accessibilityData.structParent = this._initialData.structParent ?? -1;\n        }\n      }\n      serialized.id = this.annotationElementId;\n      if (context === null) {\n        return serialized;\n      }\n      context.stamps ||= new Map();\n      const area = this.#isSvg ? (serialized.rect[2] - serialized.rect[0]) * (serialized.rect[3] - serialized.rect[1]) : null;\n      if (!context.stamps.has(this.#bitmapId)) {\n        context.stamps.set(this.#bitmapId, {\n          area,\n          serialized\n        });\n        serialized.bitmap = this.#serializeBitmap(false);\n      } else if (this.#isSvg) {\n        const prevData = context.stamps.get(this.#bitmapId);\n        if (area > prevData.area) {\n          prevData.area = area;\n          prevData.serialized.bitmap.close();\n          prevData.serialized.bitmap = this.#serializeBitmap(false);\n        }\n      }\n      return serialized;\n    }\n    #hasElementChanged(serialized) {\n      const {\n        rect,\n        pageIndex,\n        accessibilityData: {\n          altText\n        }\n      } = this._initialData;\n      const isSameRect = serialized.rect.every((x, i) => Math.abs(x - rect[i]) < 1);\n      const isSamePageIndex = serialized.pageIndex === pageIndex;\n      const isSameAltText = (serialized.accessibilityData?.alt || \"\") === altText;\n      return {\n        isSame: isSameRect && isSamePageIndex && isSameAltText,\n        isSameAltText\n      };\n    }\n    renderAnnotationElement(annotation) {\n      annotation.updateEdited({\n        rect: this.getRect(0, 0)\n      });\n      return null;\n    }\n  }\n\n\n\n\n\n\n\n  class AnnotationEditorLayer {\n    #accessibilityManager;\n    #allowClick = false;\n    #annotationLayer = null;\n    #clickAC = null;\n    #editorFocusTimeoutId = null;\n    #editors = new Map();\n    #hadPointerDown = false;\n    #isCleaningUp = false;\n    #isDisabling = false;\n    #textLayer = null;\n    #textSelectionAC = null;\n    #uiManager;\n    static _initialized = false;\n    static #editorTypes = new Map([FreeTextEditor, InkEditor, StampEditor, HighlightEditor].map(type => [type._editorType, type]));\n    constructor({\n      uiManager,\n      pageIndex,\n      div,\n      structTreeLayer,\n      accessibilityManager,\n      annotationLayer,\n      drawLayer,\n      textLayer,\n      viewport,\n      l10n\n    }) {\n      const editorTypes = [...AnnotationEditorLayer.#editorTypes.values()];\n      if (!AnnotationEditorLayer._initialized) {\n        AnnotationEditorLayer._initialized = true;\n        for (const editorType of editorTypes) {\n          editorType.initialize(l10n, uiManager);\n        }\n      }\n      uiManager.registerEditorTypes(editorTypes);\n      this.#uiManager = uiManager;\n      this.pageIndex = pageIndex;\n      this.div = div;\n      this.#accessibilityManager = accessibilityManager;\n      this.#annotationLayer = annotationLayer;\n      this.viewport = viewport;\n      this.#textLayer = textLayer;\n      this.drawLayer = drawLayer;\n      this._structTree = structTreeLayer;\n      this.#uiManager.addLayer(this);\n    }\n    get isEmpty() {\n      return this.#editors.size === 0;\n    }\n    get isInvisible() {\n      return this.isEmpty && this.#uiManager.getMode() === AnnotationEditorType.NONE;\n    }\n    updateToolbar(mode) {\n      this.#uiManager.updateToolbar(mode);\n    }\n    updateMode(mode = this.#uiManager.getMode()) {\n      this.#cleanup();\n      switch (mode) {\n        case AnnotationEditorType.NONE:\n          this.disableTextSelection();\n          this.togglePointerEvents(false);\n          this.toggleAnnotationLayerPointerEvents(true);\n          this.disableClick();\n          return;\n        case AnnotationEditorType.INK:\n          this.addInkEditorIfNeeded(false);\n          this.disableTextSelection();\n          this.togglePointerEvents(true);\n          this.disableClick();\n          break;\n        case AnnotationEditorType.HIGHLIGHT:\n          this.enableTextSelection();\n          this.togglePointerEvents(false);\n          this.disableClick();\n          break;\n        default:\n          this.disableTextSelection();\n          this.togglePointerEvents(true);\n          this.enableClick();\n      }\n      this.toggleAnnotationLayerPointerEvents(false);\n      const {\n        classList\n      } = this.div;\n      for (const editorType of AnnotationEditorLayer.#editorTypes.values()) {\n        classList.toggle(`${editorType._type}Editing`, mode === editorType._editorType);\n      }\n      this.div.hidden = false;\n    }\n    hasTextLayer(textLayer) {\n      return textLayer === this.#textLayer?.div;\n    }\n    addInkEditorIfNeeded(isCommitting) {\n      if (this.#uiManager.getMode() !== AnnotationEditorType.INK) {\n        return;\n      }\n      if (!isCommitting) {\n        for (const editor of this.#editors.values()) {\n          if (editor.isEmpty()) {\n            editor.setInBackground();\n            return;\n          }\n        }\n      }\n      const editor = this.createAndAddNewEditor({\n        offsetX: 0,\n        offsetY: 0\n      }, false);\n      editor.setInBackground();\n    }\n    setEditingState(isEditing) {\n      this.#uiManager.setEditingState(isEditing);\n    }\n    addCommands(params) {\n      this.#uiManager.addCommands(params);\n    }\n    toggleDrawing(enabled = false) {\n      this.div.classList.toggle(\"drawing\", !enabled);\n    }\n    togglePointerEvents(enabled = false) {\n      this.div.classList.toggle(\"disabled\", !enabled);\n    }\n    toggleAnnotationLayerPointerEvents(enabled = false) {\n      this.#annotationLayer?.div.classList.toggle(\"disabled\", !enabled);\n    }\n    async enable() {\n      this.div.tabIndex = 0;\n      this.togglePointerEvents(true);\n      const annotationElementIds = new Set();\n      for (const editor of this.#editors.values()) {\n        editor.enableEditing();\n        editor.show(true);\n        if (editor.annotationElementId) {\n          this.#uiManager.removeChangedExistingAnnotation(editor);\n          annotationElementIds.add(editor.annotationElementId);\n        }\n      }\n      if (!this.#annotationLayer) {\n        return;\n      }\n      const editables = this.#annotationLayer.getEditableAnnotations();\n      for (const editable of editables) {\n        editable.hide();\n        if (this.#uiManager.isDeletedAnnotationElement(editable.data.id)) {\n          continue;\n        }\n        if (annotationElementIds.has(editable.data.id)) {\n          continue;\n        }\n        const editor = await this.deserialize(editable);\n        if (!editor) {\n          continue;\n        }\n        this.addOrRebuild(editor);\n        editor.enableEditing();\n      }\n    }\n    disable() {\n      this.#isDisabling = true;\n      this.div.tabIndex = -1;\n      this.togglePointerEvents(false);\n      const changedAnnotations = new Map();\n      const resetAnnotations = new Map();\n      for (const editor of this.#editors.values()) {\n        editor.disableEditing();\n        if (!editor.annotationElementId) {\n          continue;\n        }\n        if (editor.serialize() !== null) {\n          changedAnnotations.set(editor.annotationElementId, editor);\n          continue;\n        } else {\n          resetAnnotations.set(editor.annotationElementId, editor);\n        }\n        this.getEditableAnnotation(editor.annotationElementId)?.show();\n        editor.remove();\n      }\n      if (this.#annotationLayer) {\n        const editables = this.#annotationLayer.getEditableAnnotations();\n        for (const editable of editables) {\n          const {\n            id\n          } = editable.data;\n          if (this.#uiManager.isDeletedAnnotationElement(id)) {\n            continue;\n          }\n          let editor = resetAnnotations.get(id);\n          if (editor) {\n            editor.resetAnnotationElement(editable);\n            editor.show(false);\n            editable.show();\n            continue;\n          }\n          editor = changedAnnotations.get(id);\n          if (editor) {\n            this.#uiManager.addChangedExistingAnnotation(editor);\n            if (editor.renderAnnotationElement(editable)) {\n              editor.show(false);\n            }\n          }\n          editable.show();\n        }\n      }\n      this.#cleanup();\n      if (this.isEmpty) {\n        this.div.hidden = true;\n      }\n      const {\n        classList\n      } = this.div;\n      for (const editorType of AnnotationEditorLayer.#editorTypes.values()) {\n        classList.remove(`${editorType._type}Editing`);\n      }\n      this.disableTextSelection();\n      this.toggleAnnotationLayerPointerEvents(true);\n      this.#isDisabling = false;\n    }\n    getEditableAnnotation(id) {\n      return this.#annotationLayer?.getEditableAnnotation(id) || null;\n    }\n    setActiveEditor(editor) {\n      const currentActive = this.#uiManager.getActive();\n      if (currentActive === editor) {\n        return;\n      }\n      this.#uiManager.setActiveEditor(editor);\n    }\n    enableTextSelection() {\n      this.div.tabIndex = -1;\n      if (this.#textLayer?.div && !this.#textSelectionAC) {\n        this.#textSelectionAC = new AbortController();\n        const signal = this.#uiManager.combinedSignal(this.#textSelectionAC);\n        this.#textLayer.div.addEventListener(\"pointerdown\", this.#textLayerPointerDown.bind(this), {\n          signal\n        });\n        this.#textLayer.div.classList.add(\"highlighting\");\n      }\n    }\n    disableTextSelection() {\n      this.div.tabIndex = 0;\n      if (this.#textLayer?.div && this.#textSelectionAC) {\n        this.#textSelectionAC.abort();\n        this.#textSelectionAC = null;\n        this.#textLayer.div.classList.remove(\"highlighting\");\n      }\n    }\n    #textLayerPointerDown(event) {\n      this.#uiManager.unselectAll();\n      const {\n        target\n      } = event;\n      if (target === this.#textLayer.div || (target.getAttribute(\"role\") === \"img\" || target.classList.contains(\"endOfContent\")) && this.#textLayer.div.contains(target)) {\n        const {\n          isMac\n        } = util_FeatureTest.platform;\n        if (event.button !== 0 || event.ctrlKey && isMac) {\n          return;\n        }\n        this.#uiManager.showAllEditors(\"highlight\", true, true);\n        this.#textLayer.div.classList.add(\"free\");\n        this.toggleDrawing();\n        HighlightEditor.startHighlighting(this, this.#uiManager.direction === \"ltr\", {\n          target: this.#textLayer.div,\n          x: event.x,\n          y: event.y\n        });\n        this.#textLayer.div.addEventListener(\"pointerup\", () => {\n          this.#textLayer.div.classList.remove(\"free\");\n          this.toggleDrawing(true);\n        }, {\n          once: true,\n          signal: this.#uiManager._signal\n        });\n        event.preventDefault();\n      }\n    }\n    enableClick() {\n      if (this.#clickAC) {\n        return;\n      }\n      this.#clickAC = new AbortController();\n      const signal = this.#uiManager.combinedSignal(this.#clickAC);\n      this.div.addEventListener(\"pointerdown\", this.pointerdown.bind(this), {\n        signal\n      });\n      this.div.addEventListener(\"pointerup\", this.pointerup.bind(this), {\n        signal\n      });\n    }\n    disableClick() {\n      this.#clickAC?.abort();\n      this.#clickAC = null;\n    }\n    attach(editor) {\n      this.#editors.set(editor.id, editor);\n      const {\n        annotationElementId\n      } = editor;\n      if (annotationElementId && this.#uiManager.isDeletedAnnotationElement(annotationElementId)) {\n        this.#uiManager.removeDeletedAnnotationElement(editor);\n      }\n    }\n    detach(editor) {\n      this.#editors.delete(editor.id);\n      this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\n      if (!this.#isDisabling && editor.annotationElementId) {\n        this.#uiManager.addDeletedAnnotationElement(editor);\n      }\n    }\n    remove(editor) {\n      this.detach(editor);\n      this.#uiManager.removeEditor(editor);\n      editor.div.remove();\n      editor.isAttachedToDOM = false;\n      if (!this.#isCleaningUp) {\n        this.addInkEditorIfNeeded(false);\n      }\n    }\n    changeParent(editor) {\n      if (editor.parent === this) {\n        return;\n      }\n      if (editor.parent && editor.annotationElementId) {\n        this.#uiManager.addDeletedAnnotationElement(editor.annotationElementId);\n        AnnotationEditor.deleteAnnotationElement(editor);\n        editor.annotationElementId = null;\n      }\n      this.attach(editor);\n      editor.parent?.detach(editor);\n      editor.setParent(this);\n      if (editor.div && editor.isAttachedToDOM) {\n        editor.div.remove();\n        this.div.append(editor.div);\n      }\n    }\n    add(editor) {\n      if (editor.parent === this && editor.isAttachedToDOM) {\n        return;\n      }\n      this.changeParent(editor);\n      this.#uiManager.addEditor(editor);\n      this.attach(editor);\n      if (!editor.isAttachedToDOM) {\n        const div = editor.render();\n        this.div.append(div);\n        editor.isAttachedToDOM = true;\n      }\n      editor.fixAndSetPosition();\n      editor.onceAdded();\n      this.#uiManager.addToAnnotationStorage(editor);\n      editor._reportTelemetry(editor.telemetryInitialData);\n    }\n    moveEditorInDOM(editor) {\n      if (!editor.isAttachedToDOM) {\n        return;\n      }\n      const {\n        activeElement\n      } = document;\n      if (editor.div.contains(activeElement) && !this.#editorFocusTimeoutId) {\n        editor._focusEventsAllowed = false;\n        this.#editorFocusTimeoutId = setTimeout(() => {\n          this.#editorFocusTimeoutId = null;\n          if (!editor.div.contains(document.activeElement)) {\n            editor.div.addEventListener(\"focusin\", () => {\n              editor._focusEventsAllowed = true;\n            }, {\n              once: true,\n              signal: this.#uiManager._signal\n            });\n            activeElement.focus();\n          } else {\n            editor._focusEventsAllowed = true;\n          }\n        }, 0);\n      }\n      editor._structTreeParentId = this.#accessibilityManager?.moveElementInDOM(this.div, editor.div, editor.contentDiv, true);\n    }\n    addOrRebuild(editor) {\n      if (editor.needsToBeRebuilt()) {\n        editor.parent ||= this;\n        editor.rebuild();\n        editor.show();\n      } else {\n        this.add(editor);\n      }\n    }\n    addUndoableEditor(editor) {\n      const cmd = () => editor._uiManager.rebuild(editor);\n      const undo = () => {\n        editor.remove();\n      };\n      this.addCommands({\n        cmd,\n        undo,\n        mustExec: false\n      });\n    }\n    getNextId() {\n      return this.#uiManager.getId();\n    }\n    get #currentEditorType() {\n      return AnnotationEditorLayer.#editorTypes.get(this.#uiManager.getMode());\n    }\n    combinedSignal(ac) {\n      return this.#uiManager.combinedSignal(ac);\n    }\n    #createNewEditor(params) {\n      const editorType = this.#currentEditorType;\n      return editorType ? new editorType.prototype.constructor(params) : null;\n    }\n    canCreateNewEmptyEditor() {\n      return this.#currentEditorType?.canCreateNewEmptyEditor();\n    }\n    pasteEditor(mode, params) {\n      this.#uiManager.updateToolbar(mode);\n      this.#uiManager.updateMode(mode);\n      const {\n        offsetX,\n        offsetY\n      } = this.#getCenterPoint();\n      const id = this.getNextId();\n      const editor = this.#createNewEditor({\n        parent: this,\n        id,\n        x: offsetX,\n        y: offsetY,\n        uiManager: this.#uiManager,\n        isCentered: true,\n        ...params\n      });\n      if (editor) {\n        this.add(editor);\n      }\n    }\n    async deserialize(data) {\n      return (await AnnotationEditorLayer.#editorTypes.get(data.annotationType ?? data.annotationEditorType)?.deserialize(data, this, this.#uiManager)) || null;\n    }\n    createAndAddNewEditor(event, isCentered, data = {}) {\n      const id = this.getNextId();\n      const editor = this.#createNewEditor({\n        parent: this,\n        id,\n        x: event.offsetX,\n        y: event.offsetY,\n        uiManager: this.#uiManager,\n        isCentered,\n        ...data\n      });\n      if (editor) {\n        this.add(editor);\n      }\n      return editor;\n    }\n    #getCenterPoint() {\n      const {\n        x,\n        y,\n        width,\n        height\n      } = this.div.getBoundingClientRect();\n      const tlX = Math.max(0, x);\n      const tlY = Math.max(0, y);\n      const brX = Math.min(window.innerWidth, x + width);\n      const brY = Math.min(window.innerHeight, y + height);\n      const centerX = (tlX + brX) / 2 - x;\n      const centerY = (tlY + brY) / 2 - y;\n      const [offsetX, offsetY] = this.viewport.rotation % 180 === 0 ? [centerX, centerY] : [centerY, centerX];\n      return {\n        offsetX,\n        offsetY\n      };\n    }\n    addNewEditor() {\n      this.createAndAddNewEditor(this.#getCenterPoint(), true);\n    }\n    setSelected(editor) {\n      this.#uiManager.setSelected(editor);\n    }\n    toggleSelected(editor) {\n      this.#uiManager.toggleSelected(editor);\n    }\n    isSelected(editor) {\n      return this.#uiManager.isSelected(editor);\n    }\n    unselect(editor) {\n      this.#uiManager.unselect(editor);\n    }\n    pointerup(event) {\n      const {\n        isMac\n      } = util_FeatureTest.platform;\n      if (event.button !== 0 || event.ctrlKey && isMac) {\n        return;\n      }\n      if (event.target !== this.div) {\n        return;\n      }\n      if (!this.#hadPointerDown) {\n        return;\n      }\n      this.#hadPointerDown = false;\n      if (!this.#allowClick) {\n        this.#allowClick = true;\n        return;\n      }\n      if (this.#uiManager.getMode() === AnnotationEditorType.STAMP) {\n        this.#uiManager.unselectAll();\n        return;\n      }\n      this.createAndAddNewEditor(event, false);\n    }\n    pointerdown(event) {\n      if (this.#uiManager.getMode() === AnnotationEditorType.HIGHLIGHT) {\n        this.enableTextSelection();\n      }\n      if (this.#hadPointerDown) {\n        this.#hadPointerDown = false;\n        return;\n      }\n      const {\n        isMac\n      } = util_FeatureTest.platform;\n      if (event.button !== 0 || event.ctrlKey && isMac) {\n        return;\n      }\n      if (event.target !== this.div) {\n        return;\n      }\n      this.#hadPointerDown = true;\n      const editor = this.#uiManager.getActive();\n      this.#allowClick = !editor || editor.isEmpty();\n    }\n    findNewParent(editor, x, y) {\n      const layer = this.#uiManager.findParent(x, y);\n      if (layer === null || layer === this) {\n        return false;\n      }\n      layer.changeParent(editor);\n      return true;\n    }\n    destroy() {\n      if (this.#uiManager.getActive()?.parent === this) {\n        this.#uiManager.commitOrRemove();\n        this.#uiManager.setActiveEditor(null);\n      }\n      if (this.#editorFocusTimeoutId) {\n        clearTimeout(this.#editorFocusTimeoutId);\n        this.#editorFocusTimeoutId = null;\n      }\n      for (const editor of this.#editors.values()) {\n        this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\n        editor.setParent(null);\n        editor.isAttachedToDOM = false;\n        editor.div.remove();\n      }\n      this.div = null;\n      this.#editors.clear();\n      this.#uiManager.removeLayer(this);\n    }\n    #cleanup() {\n      this.#isCleaningUp = true;\n      for (const editor of this.#editors.values()) {\n        if (editor.isEmpty()) {\n          editor.remove();\n        }\n      }\n      this.#isCleaningUp = false;\n    }\n    render({\n      viewport\n    }) {\n      this.viewport = viewport;\n      setLayerDimensions(this.div, viewport);\n      for (const editor of this.#uiManager.getEditors(this.pageIndex)) {\n        this.add(editor);\n        editor.rebuild();\n      }\n      this.updateMode();\n    }\n    update({\n      viewport\n    }) {\n      this.#uiManager.commitOrRemove();\n      this.#cleanup();\n      const oldRotation = this.viewport.rotation;\n      const rotation = viewport.rotation;\n      this.viewport = viewport;\n      setLayerDimensions(this.div, {\n        rotation\n      });\n      if (oldRotation !== rotation) {\n        for (const editor of this.#editors.values()) {\n          editor.rotate(rotation);\n        }\n      }\n      this.addInkEditorIfNeeded(false);\n    }\n    get pageDimensions() {\n      const {\n        pageWidth,\n        pageHeight\n      } = this.viewport.rawDims;\n      return [pageWidth, pageHeight];\n    }\n    get scale() {\n      return this.#uiManager.viewParameters.realScale;\n    }\n  }\n\n\n  class DrawLayer {\n    #parent = null;\n    #id = 0;\n    #mapping = new Map();\n    #toUpdate = new Map();\n    constructor({\n      pageIndex\n    }) {\n      this.pageIndex = pageIndex;\n    }\n    setParent(parent) {\n      if (!this.#parent) {\n        this.#parent = parent;\n        return;\n      }\n      if (this.#parent !== parent) {\n        if (this.#mapping.size > 0) {\n          for (const root of this.#mapping.values()) {\n            root.remove();\n            parent.append(root);\n          }\n        }\n        this.#parent = parent;\n      }\n    }\n    static get _svgFactory() {\n      return shadow(this, \"_svgFactory\", new DOMSVGFactory());\n    }\n    static #setBox(element, {\n      x = 0,\n      y = 0,\n      width = 1,\n      height = 1\n    } = {}) {\n      const {\n        style\n      } = element;\n      style.top = `${100 * y}%`;\n      style.left = `${100 * x}%`;\n      style.width = `${100 * width}%`;\n      style.height = `${100 * height}%`;\n    }\n    #createSVG(box) {\n      const svg = DrawLayer._svgFactory.create(1, 1, true);\n      this.#parent.append(svg);\n      svg.setAttribute(\"aria-hidden\", true);\n      DrawLayer.#setBox(svg, box);\n      return svg;\n    }\n    #createClipPath(defs, pathId) {\n      const clipPath = DrawLayer._svgFactory.createElement(\"clipPath\");\n      defs.append(clipPath);\n      const clipPathId = `clip_${pathId}`;\n      clipPath.setAttribute(\"id\", clipPathId);\n      clipPath.setAttribute(\"clipPathUnits\", \"objectBoundingBox\");\n      const clipPathUse = DrawLayer._svgFactory.createElement(\"use\");\n      clipPath.append(clipPathUse);\n      clipPathUse.setAttribute(\"href\", `#${pathId}`);\n      clipPathUse.classList.add(\"clip\");\n      return clipPathId;\n    }\n    highlight(outlines, color, opacity, isPathUpdatable = false) {\n      const id = this.#id++;\n      const root = this.#createSVG(outlines.box);\n      root.classList.add(\"highlight\");\n      if (outlines.free) {\n        root.classList.add(\"free\");\n      }\n      const defs = DrawLayer._svgFactory.createElement(\"defs\");\n      root.append(defs);\n      const path = DrawLayer._svgFactory.createElement(\"path\");\n      defs.append(path);\n      const pathId = `path_p${this.pageIndex}_${id}`;\n      path.setAttribute(\"id\", pathId);\n      path.setAttribute(\"d\", outlines.toSVGPath());\n      if (isPathUpdatable) {\n        this.#toUpdate.set(id, path);\n      }\n      const clipPathId = this.#createClipPath(defs, pathId);\n      const use = DrawLayer._svgFactory.createElement(\"use\");\n      root.append(use);\n      root.setAttribute(\"fill\", color);\n      root.setAttribute(\"fill-opacity\", opacity);\n      use.setAttribute(\"href\", `#${pathId}`);\n      this.#mapping.set(id, root);\n      return {\n        id,\n        clipPathId: `url(#${clipPathId})`\n      };\n    }\n    highlightOutline(outlines) {\n      const id = this.#id++;\n      const root = this.#createSVG(outlines.box);\n      root.classList.add(\"highlightOutline\");\n      const defs = DrawLayer._svgFactory.createElement(\"defs\");\n      root.append(defs);\n      const path = DrawLayer._svgFactory.createElement(\"path\");\n      defs.append(path);\n      const pathId = `path_p${this.pageIndex}_${id}`;\n      path.setAttribute(\"id\", pathId);\n      path.setAttribute(\"d\", outlines.toSVGPath());\n      path.setAttribute(\"vector-effect\", \"non-scaling-stroke\");\n      let maskId;\n      if (outlines.free) {\n        root.classList.add(\"free\");\n        const mask = DrawLayer._svgFactory.createElement(\"mask\");\n        defs.append(mask);\n        maskId = `mask_p${this.pageIndex}_${id}`;\n        mask.setAttribute(\"id\", maskId);\n        mask.setAttribute(\"maskUnits\", \"objectBoundingBox\");\n        const rect = DrawLayer._svgFactory.createElement(\"rect\");\n        mask.append(rect);\n        rect.setAttribute(\"width\", \"1\");\n        rect.setAttribute(\"height\", \"1\");\n        rect.setAttribute(\"fill\", \"white\");\n        const use = DrawLayer._svgFactory.createElement(\"use\");\n        mask.append(use);\n        use.setAttribute(\"href\", `#${pathId}`);\n        use.setAttribute(\"stroke\", \"none\");\n        use.setAttribute(\"fill\", \"black\");\n        use.setAttribute(\"fill-rule\", \"nonzero\");\n        use.classList.add(\"mask\");\n      }\n      const use1 = DrawLayer._svgFactory.createElement(\"use\");\n      root.append(use1);\n      use1.setAttribute(\"href\", `#${pathId}`);\n      if (maskId) {\n        use1.setAttribute(\"mask\", `url(#${maskId})`);\n      }\n      const use2 = use1.cloneNode();\n      root.append(use2);\n      use1.classList.add(\"mainOutline\");\n      use2.classList.add(\"secondaryOutline\");\n      this.#mapping.set(id, root);\n      return id;\n    }\n    finalizeLine(id, line) {\n      const path = this.#toUpdate.get(id);\n      this.#toUpdate.delete(id);\n      this.updateBox(id, line.box);\n      path.setAttribute(\"d\", line.toSVGPath());\n    }\n    updateLine(id, line) {\n      const root = this.#mapping.get(id);\n      const defs = root.firstChild;\n      const path = defs.firstChild;\n      path.setAttribute(\"d\", line.toSVGPath());\n    }\n    removeFreeHighlight(id) {\n      this.remove(id);\n      this.#toUpdate.delete(id);\n    }\n    updatePath(id, line) {\n      this.#toUpdate.get(id).setAttribute(\"d\", line.toSVGPath());\n    }\n    updateBox(id, box) {\n      DrawLayer.#setBox(this.#mapping.get(id), box);\n    }\n    show(id, visible) {\n      this.#mapping.get(id).classList.toggle(\"hidden\", !visible);\n    }\n    rotate(id, angle) {\n      this.#mapping.get(id).setAttribute(\"data-main-rotation\", angle);\n    }\n    changeColor(id, color) {\n      this.#mapping.get(id).setAttribute(\"fill\", color);\n    }\n    changeOpacity(id, opacity) {\n      this.#mapping.get(id).setAttribute(\"fill-opacity\", opacity);\n    }\n    addClass(id, className) {\n      this.#mapping.get(id).classList.add(className);\n    }\n    removeClass(id, className) {\n      this.#mapping.get(id).classList.remove(className);\n    }\n    getSVGRoot(id) {\n      return this.#mapping.get(id);\n    }\n    remove(id) {\n      if (this.#parent === null) {\n        return;\n      }\n      this.#mapping.get(id).remove();\n      this.#mapping.delete(id);\n    }\n    destroy() {\n      this.#parent = null;\n      for (const root of this.#mapping.values()) {\n        root.remove();\n      }\n      this.#mapping.clear();\n    }\n  }\n\n  var __webpack_exports__AbortException = __webpack_exports__.AbortException;\n  var __webpack_exports__AnnotationEditorLayer = __webpack_exports__.AnnotationEditorLayer;\n  var __webpack_exports__AnnotationEditorParamsType = __webpack_exports__.AnnotationEditorParamsType;\n  var __webpack_exports__AnnotationEditorType = __webpack_exports__.AnnotationEditorType;\n  var __webpack_exports__AnnotationEditorUIManager = __webpack_exports__.AnnotationEditorUIManager;\n  var __webpack_exports__AnnotationLayer = __webpack_exports__.AnnotationLayer;\n  var __webpack_exports__AnnotationMode = __webpack_exports__.AnnotationMode;\n  var __webpack_exports__CMapCompressionType = __webpack_exports__.CMapCompressionType;\n  var __webpack_exports__ColorPicker = __webpack_exports__.ColorPicker;\n  var __webpack_exports__DOMSVGFactory = __webpack_exports__.DOMSVGFactory;\n  var __webpack_exports__DrawLayer = __webpack_exports__.DrawLayer;\n  var __webpack_exports__FeatureTest = __webpack_exports__.FeatureTest;\n  var __webpack_exports__GlobalWorkerOptions = __webpack_exports__.GlobalWorkerOptions;\n  var __webpack_exports__ImageKind = __webpack_exports__.ImageKind;\n  var __webpack_exports__InvalidPDFException = __webpack_exports__.InvalidPDFException;\n  var __webpack_exports__MissingPDFException = __webpack_exports__.MissingPDFException;\n  var __webpack_exports__OPS = __webpack_exports__.OPS;\n  var __webpack_exports__OutputScale = __webpack_exports__.OutputScale;\n  var __webpack_exports__PDFDataRangeTransport = __webpack_exports__.PDFDataRangeTransport;\n  var __webpack_exports__PDFDateString = __webpack_exports__.PDFDateString;\n  var __webpack_exports__PDFWorker = __webpack_exports__.PDFWorker;\n  var __webpack_exports__PasswordResponses = __webpack_exports__.PasswordResponses;\n  var __webpack_exports__PermissionFlag = __webpack_exports__.PermissionFlag;\n  var __webpack_exports__PixelsPerInch = __webpack_exports__.PixelsPerInch;\n  var __webpack_exports__RenderingCancelledException = __webpack_exports__.RenderingCancelledException;\n  var __webpack_exports__TextLayer = __webpack_exports__.TextLayer;\n  var __webpack_exports__UnexpectedResponseException = __webpack_exports__.UnexpectedResponseException;\n  var __webpack_exports__Util = __webpack_exports__.Util;\n  var __webpack_exports__VerbosityLevel = __webpack_exports__.VerbosityLevel;\n  var __webpack_exports__XfaLayer = __webpack_exports__.XfaLayer;\n  var __webpack_exports__build = __webpack_exports__.build;\n  var __webpack_exports__createValidAbsoluteUrl = __webpack_exports__.createValidAbsoluteUrl;\n  var __webpack_exports__fetchData = __webpack_exports__.fetchData;\n  var __webpack_exports__getDocument = __webpack_exports__.getDocument;\n  var __webpack_exports__getFilenameFromUrl = __webpack_exports__.getFilenameFromUrl;\n  var __webpack_exports__getPdfFilenameFromUrl = __webpack_exports__.getPdfFilenameFromUrl;\n  var __webpack_exports__getXfaPageViewport = __webpack_exports__.getXfaPageViewport;\n  var __webpack_exports__isDataScheme = __webpack_exports__.isDataScheme;\n  var __webpack_exports__isPdfFile = __webpack_exports__.isPdfFile;\n  var __webpack_exports__noContextMenu = __webpack_exports__.noContextMenu;\n  var __webpack_exports__normalizeUnicode = __webpack_exports__.normalizeUnicode;\n  var __webpack_exports__setLayerDimensions = __webpack_exports__.setLayerDimensions;\n  var __webpack_exports__shadow = __webpack_exports__.shadow;\n  var __webpack_exports__version = __webpack_exports__.version;\n\n  const __esModule = true;\n\n  exports.AbortException = __webpack_exports__AbortException;\n  exports.AnnotationEditorLayer = __webpack_exports__AnnotationEditorLayer;\n  exports.AnnotationEditorParamsType = __webpack_exports__AnnotationEditorParamsType;\n  exports.AnnotationEditorType = __webpack_exports__AnnotationEditorType;\n  exports.AnnotationEditorUIManager = __webpack_exports__AnnotationEditorUIManager;\n  exports.AnnotationLayer = __webpack_exports__AnnotationLayer;\n  exports.AnnotationMode = __webpack_exports__AnnotationMode;\n  exports.CMapCompressionType = __webpack_exports__CMapCompressionType;\n  exports.ColorPicker = __webpack_exports__ColorPicker;\n  exports.DOMSVGFactory = __webpack_exports__DOMSVGFactory;\n  exports.DrawLayer = __webpack_exports__DrawLayer;\n  exports.FeatureTest = __webpack_exports__FeatureTest;\n  exports.GlobalWorkerOptions = __webpack_exports__GlobalWorkerOptions;\n  exports.ImageKind = __webpack_exports__ImageKind;\n  exports.InvalidPDFException = __webpack_exports__InvalidPDFException;\n  exports.MissingPDFException = __webpack_exports__MissingPDFException;\n  exports.OPS = __webpack_exports__OPS;\n  exports.OutputScale = __webpack_exports__OutputScale;\n  exports.PDFDataRangeTransport = __webpack_exports__PDFDataRangeTransport;\n  exports.PDFDateString = __webpack_exports__PDFDateString;\n  exports.PDFWorker = __webpack_exports__PDFWorker;\n  exports.PasswordResponses = __webpack_exports__PasswordResponses;\n  exports.PermissionFlag = __webpack_exports__PermissionFlag;\n  exports.PixelsPerInch = __webpack_exports__PixelsPerInch;\n  exports.RenderingCancelledException = __webpack_exports__RenderingCancelledException;\n  exports.TextLayer = __webpack_exports__TextLayer;\n  exports.UnexpectedResponseException = __webpack_exports__UnexpectedResponseException;\n  exports.Util = __webpack_exports__Util;\n  exports.VerbosityLevel = __webpack_exports__VerbosityLevel;\n  exports.XfaLayer = __webpack_exports__XfaLayer;\n  exports.__esModule = __esModule;\n  exports.build = __webpack_exports__build;\n  exports.createValidAbsoluteUrl = __webpack_exports__createValidAbsoluteUrl;\n  exports.fetchData = __webpack_exports__fetchData;\n  exports.getDocument = __webpack_exports__getDocument;\n  exports.getFilenameFromUrl = __webpack_exports__getFilenameFromUrl;\n  exports.getPdfFilenameFromUrl = __webpack_exports__getPdfFilenameFromUrl;\n  exports.getXfaPageViewport = __webpack_exports__getXfaPageViewport;\n  exports.isDataScheme = __webpack_exports__isDataScheme;\n  exports.isPdfFile = __webpack_exports__isPdfFile;\n  exports.noContextMenu = __webpack_exports__noContextMenu;\n  exports.normalizeUnicode = __webpack_exports__normalizeUnicode;\n  exports.setLayerDimensions = __webpack_exports__setLayerDimensions;\n  exports.shadow = __webpack_exports__shadow;\n  exports.version = __webpack_exports__version;\n\n}));\n"
    },
    {
      "name": "jsonwebtoken",
      "path": "C:\\Users\\Asus\\OneDrive\\Developments\\kmsa\\com.kmsa.dashboard\\node_modules\\jsonwebtoken\\index.js",
      "lastModified": 1730271498879,
      "type": "module",
      "code": "sap.ui.define(['com/kmsa/dashboard/resources/node.buffer', 'com/kmsa/dashboard/resources/_commonjsHelpers', 'com/kmsa/dashboard/resources/node.stream', 'com/kmsa/dashboard/resources/node.util'], (function (_polyfillNode_buffer, _commonjsHelpers, _polyfillNode_stream, _polyfillNode_util) { 'use strict';\n\n  var jws$3 = {};\n\n  var safeBuffer = {exports: {}};\n\n  var require$$0 = /*@__PURE__*/_commonjsHelpers.getAugmentedNamespace(_polyfillNode_buffer._polyfillNode_buffer);\n\n  /* eslint-disable node/no-deprecated-api */\n\n  (function (module, exports) {\n  \tvar buffer = require$$0;\n  \tvar Buffer = buffer.Buffer;\n\n  \t// alternative to using Object.keys for old browsers\n  \tfunction copyProps (src, dst) {\n  \t  for (var key in src) {\n  \t    dst[key] = src[key];\n  \t  }\n  \t}\n  \tif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  \t  module.exports = buffer;\n  \t} else {\n  \t  // Copy properties from require('buffer')\n  \t  copyProps(buffer, exports);\n  \t  exports.Buffer = SafeBuffer;\n  \t}\n\n  \tfunction SafeBuffer (arg, encodingOrOffset, length) {\n  \t  return Buffer(arg, encodingOrOffset, length)\n  \t}\n\n  \t// Copy static methods from Buffer\n  \tcopyProps(Buffer, SafeBuffer);\n\n  \tSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  \t  if (typeof arg === 'number') {\n  \t    throw new TypeError('Argument must not be a number')\n  \t  }\n  \t  return Buffer(arg, encodingOrOffset, length)\n  \t};\n\n  \tSafeBuffer.alloc = function (size, fill, encoding) {\n  \t  if (typeof size !== 'number') {\n  \t    throw new TypeError('Argument must be a number')\n  \t  }\n  \t  var buf = Buffer(size);\n  \t  if (fill !== undefined) {\n  \t    if (typeof encoding === 'string') {\n  \t      buf.fill(fill, encoding);\n  \t    } else {\n  \t      buf.fill(fill);\n  \t    }\n  \t  } else {\n  \t    buf.fill(0);\n  \t  }\n  \t  return buf\n  \t};\n\n  \tSafeBuffer.allocUnsafe = function (size) {\n  \t  if (typeof size !== 'number') {\n  \t    throw new TypeError('Argument must be a number')\n  \t  }\n  \t  return Buffer(size)\n  \t};\n\n  \tSafeBuffer.allocUnsafeSlow = function (size) {\n  \t  if (typeof size !== 'number') {\n  \t    throw new TypeError('Argument must be a number')\n  \t  }\n  \t  return buffer.SlowBuffer(size)\n  \t}; \n  } (safeBuffer, safeBuffer.exports));\n\n  var safeBufferExports = safeBuffer.exports;\n\n  var require$$3 = /*@__PURE__*/_commonjsHelpers.getAugmentedNamespace(_polyfillNode_stream._polyfillNode_stream);\n\n  var require$$5 = /*@__PURE__*/_commonjsHelpers.getAugmentedNamespace(_polyfillNode_util._polyfillNode_util);\n\n  var Buffer$6 = safeBufferExports.Buffer;\n  var Stream$2 = require$$3;\n  var util$3 = require$$5;\n\n  function DataStream$2(data) {\n    this.buffer = null;\n    this.writable = true;\n    this.readable = true;\n\n    // No input\n    if (!data) {\n      this.buffer = Buffer$6.alloc(0);\n      return this;\n    }\n\n    // Stream\n    if (typeof data.pipe === 'function') {\n      this.buffer = Buffer$6.alloc(0);\n      data.pipe(this);\n      return this;\n    }\n\n    // Buffer or String\n    // or Object (assumedly a passworded key)\n    if (data.length || typeof data === 'object') {\n      this.buffer = data;\n      this.writable = false;\n      _polyfillNode_buffer.browser$1.nextTick(function () {\n        this.emit('end', data);\n        this.readable = false;\n        this.emit('close');\n      }.bind(this));\n      return this;\n    }\n\n    throw new TypeError('Unexpected data type ('+ typeof data + ')');\n  }\n  util$3.inherits(DataStream$2, Stream$2);\n\n  DataStream$2.prototype.write = function write(data) {\n    this.buffer = Buffer$6.concat([this.buffer, Buffer$6.from(data)]);\n    this.emit('data', data);\n  };\n\n  DataStream$2.prototype.end = function end(data) {\n    if (data)\n      this.write(data);\n    this.emit('end', data);\n    this.emit('close');\n    this.writable = false;\n    this.readable = false;\n  };\n\n  var dataStream = DataStream$2;\n\n  /*jshint node:true */\n  var Buffer$5 = require$$0.Buffer; // browserify\n  var SlowBuffer = require$$0.SlowBuffer;\n\n  var bufferEqualConstantTime = bufferEq;\n\n  function bufferEq(a, b) {\n\n    // shortcutting on type is necessary for correctness\n    if (!Buffer$5.isBuffer(a) || !Buffer$5.isBuffer(b)) {\n      return false;\n    }\n\n    // buffer sizes should be well-known information, so despite this\n    // shortcutting, it doesn't leak any information about the *contents* of the\n    // buffers.\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    var c = 0;\n    for (var i = 0; i < a.length; i++) {\n      /*jshint bitwise:false */\n      c |= a[i] ^ b[i]; // XOR\n    }\n    return c === 0;\n  }\n\n  bufferEq.install = function() {\n    Buffer$5.prototype.equal = SlowBuffer.prototype.equal = function equal(that) {\n      return bufferEq(this, that);\n    };\n  };\n\n  var origBufEqual = Buffer$5.prototype.equal;\n  var origSlowBufEqual = SlowBuffer.prototype.equal;\n  bufferEq.restore = function() {\n    Buffer$5.prototype.equal = origBufEqual;\n    SlowBuffer.prototype.equal = origSlowBufEqual;\n  };\n\n  var _polyfillNode_crypto = {};\n\n  var _polyfillNode_crypto$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    default: _polyfillNode_crypto\n  });\n\n  var require$$11 = /*@__PURE__*/_commonjsHelpers.getAugmentedNamespace(_polyfillNode_crypto$1);\n\n  function getParamSize(keySize) {\n  \tvar result = ((keySize / 8) | 0) + (keySize % 8 === 0 ? 0 : 1);\n  \treturn result;\n  }\n\n  var paramBytesForAlg = {\n  \tES256: getParamSize(256),\n  \tES384: getParamSize(384),\n  \tES512: getParamSize(521)\n  };\n\n  function getParamBytesForAlg$1(alg) {\n  \tvar paramBytes = paramBytesForAlg[alg];\n  \tif (paramBytes) {\n  \t\treturn paramBytes;\n  \t}\n\n  \tthrow new Error('Unknown algorithm \"' + alg + '\"');\n  }\n\n  var paramBytesForAlg_1 = getParamBytesForAlg$1;\n\n  var Buffer$4 = safeBufferExports.Buffer;\n\n  var getParamBytesForAlg = paramBytesForAlg_1;\n\n  var MAX_OCTET = 0x80,\n  \tCLASS_UNIVERSAL = 0,\n  \tPRIMITIVE_BIT = 0x20,\n  \tTAG_SEQ = 0x10,\n  \tTAG_INT = 0x02,\n  \tENCODED_TAG_SEQ = (TAG_SEQ | PRIMITIVE_BIT) | (CLASS_UNIVERSAL << 6),\n  \tENCODED_TAG_INT = TAG_INT | (CLASS_UNIVERSAL << 6);\n\n  function base64Url(base64) {\n  \treturn base64\n  \t\t.replace(/=/g, '')\n  \t\t.replace(/\\+/g, '-')\n  \t\t.replace(/\\//g, '_');\n  }\n\n  function signatureAsBuffer(signature) {\n  \tif (Buffer$4.isBuffer(signature)) {\n  \t\treturn signature;\n  \t} else if ('string' === typeof signature) {\n  \t\treturn Buffer$4.from(signature, 'base64');\n  \t}\n\n  \tthrow new TypeError('ECDSA signature must be a Base64 string or a Buffer');\n  }\n\n  function derToJose(signature, alg) {\n  \tsignature = signatureAsBuffer(signature);\n  \tvar paramBytes = getParamBytesForAlg(alg);\n\n  \t// the DER encoded param should at most be the param size, plus a padding\n  \t// zero, since due to being a signed integer\n  \tvar maxEncodedParamLength = paramBytes + 1;\n\n  \tvar inputLength = signature.length;\n\n  \tvar offset = 0;\n  \tif (signature[offset++] !== ENCODED_TAG_SEQ) {\n  \t\tthrow new Error('Could not find expected \"seq\"');\n  \t}\n\n  \tvar seqLength = signature[offset++];\n  \tif (seqLength === (MAX_OCTET | 1)) {\n  \t\tseqLength = signature[offset++];\n  \t}\n\n  \tif (inputLength - offset < seqLength) {\n  \t\tthrow new Error('\"seq\" specified length of \"' + seqLength + '\", only \"' + (inputLength - offset) + '\" remaining');\n  \t}\n\n  \tif (signature[offset++] !== ENCODED_TAG_INT) {\n  \t\tthrow new Error('Could not find expected \"int\" for \"r\"');\n  \t}\n\n  \tvar rLength = signature[offset++];\n\n  \tif (inputLength - offset - 2 < rLength) {\n  \t\tthrow new Error('\"r\" specified length of \"' + rLength + '\", only \"' + (inputLength - offset - 2) + '\" available');\n  \t}\n\n  \tif (maxEncodedParamLength < rLength) {\n  \t\tthrow new Error('\"r\" specified length of \"' + rLength + '\", max of \"' + maxEncodedParamLength + '\" is acceptable');\n  \t}\n\n  \tvar rOffset = offset;\n  \toffset += rLength;\n\n  \tif (signature[offset++] !== ENCODED_TAG_INT) {\n  \t\tthrow new Error('Could not find expected \"int\" for \"s\"');\n  \t}\n\n  \tvar sLength = signature[offset++];\n\n  \tif (inputLength - offset !== sLength) {\n  \t\tthrow new Error('\"s\" specified length of \"' + sLength + '\", expected \"' + (inputLength - offset) + '\"');\n  \t}\n\n  \tif (maxEncodedParamLength < sLength) {\n  \t\tthrow new Error('\"s\" specified length of \"' + sLength + '\", max of \"' + maxEncodedParamLength + '\" is acceptable');\n  \t}\n\n  \tvar sOffset = offset;\n  \toffset += sLength;\n\n  \tif (offset !== inputLength) {\n  \t\tthrow new Error('Expected to consume entire buffer, but \"' + (inputLength - offset) + '\" bytes remain');\n  \t}\n\n  \tvar rPadding = paramBytes - rLength,\n  \t\tsPadding = paramBytes - sLength;\n\n  \tvar dst = Buffer$4.allocUnsafe(rPadding + rLength + sPadding + sLength);\n\n  \tfor (offset = 0; offset < rPadding; ++offset) {\n  \t\tdst[offset] = 0;\n  \t}\n  \tsignature.copy(dst, offset, rOffset + Math.max(-rPadding, 0), rOffset + rLength);\n\n  \toffset = paramBytes;\n\n  \tfor (var o = offset; offset < o + sPadding; ++offset) {\n  \t\tdst[offset] = 0;\n  \t}\n  \tsignature.copy(dst, offset, sOffset + Math.max(-sPadding, 0), sOffset + sLength);\n\n  \tdst = dst.toString('base64');\n  \tdst = base64Url(dst);\n\n  \treturn dst;\n  }\n\n  function countPadding(buf, start, stop) {\n  \tvar padding = 0;\n  \twhile (start + padding < stop && buf[start + padding] === 0) {\n  \t\t++padding;\n  \t}\n\n  \tvar needsSign = buf[start + padding] >= MAX_OCTET;\n  \tif (needsSign) {\n  \t\t--padding;\n  \t}\n\n  \treturn padding;\n  }\n\n  function joseToDer(signature, alg) {\n  \tsignature = signatureAsBuffer(signature);\n  \tvar paramBytes = getParamBytesForAlg(alg);\n\n  \tvar signatureBytes = signature.length;\n  \tif (signatureBytes !== paramBytes * 2) {\n  \t\tthrow new TypeError('\"' + alg + '\" signatures must be \"' + paramBytes * 2 + '\" bytes, saw \"' + signatureBytes + '\"');\n  \t}\n\n  \tvar rPadding = countPadding(signature, 0, paramBytes);\n  \tvar sPadding = countPadding(signature, paramBytes, signature.length);\n  \tvar rLength = paramBytes - rPadding;\n  \tvar sLength = paramBytes - sPadding;\n\n  \tvar rsBytes = 1 + 1 + rLength + 1 + 1 + sLength;\n\n  \tvar shortLength = rsBytes < MAX_OCTET;\n\n  \tvar dst = Buffer$4.allocUnsafe((shortLength ? 2 : 3) + rsBytes);\n\n  \tvar offset = 0;\n  \tdst[offset++] = ENCODED_TAG_SEQ;\n  \tif (shortLength) {\n  \t\t// Bit 8 has value \"0\"\n  \t\t// bits 7-1 give the length.\n  \t\tdst[offset++] = rsBytes;\n  \t} else {\n  \t\t// Bit 8 of first octet has value \"1\"\n  \t\t// bits 7-1 give the number of additional length octets.\n  \t\tdst[offset++] = MAX_OCTET\t| 1;\n  \t\t// length, base 256\n  \t\tdst[offset++] = rsBytes & 0xff;\n  \t}\n  \tdst[offset++] = ENCODED_TAG_INT;\n  \tdst[offset++] = rLength;\n  \tif (rPadding < 0) {\n  \t\tdst[offset++] = 0;\n  \t\toffset += signature.copy(dst, offset, 0, paramBytes);\n  \t} else {\n  \t\toffset += signature.copy(dst, offset, rPadding, paramBytes);\n  \t}\n  \tdst[offset++] = ENCODED_TAG_INT;\n  \tdst[offset++] = sLength;\n  \tif (sPadding < 0) {\n  \t\tdst[offset++] = 0;\n  \t\tsignature.copy(dst, offset, paramBytes);\n  \t} else {\n  \t\tsignature.copy(dst, offset, paramBytes + sPadding);\n  \t}\n\n  \treturn dst;\n  }\n\n  var ecdsaSigFormatter = {\n  \tderToJose: derToJose,\n  \tjoseToDer: joseToDer\n  };\n\n  var bufferEqual = bufferEqualConstantTime;\n  var Buffer$3 = safeBufferExports.Buffer;\n  var crypto = require$$11;\n  var formatEcdsa = ecdsaSigFormatter;\n  var util$2 = require$$5;\n\n  var MSG_INVALID_ALGORITHM = '\"%s\" is not a valid algorithm.\\n  Supported algorithms are:\\n  \"HS256\", \"HS384\", \"HS512\", \"RS256\", \"RS384\", \"RS512\", \"PS256\", \"PS384\", \"PS512\", \"ES256\", \"ES384\", \"ES512\" and \"none\".';\n  var MSG_INVALID_SECRET = 'secret must be a string or buffer';\n  var MSG_INVALID_VERIFIER_KEY = 'key must be a string or a buffer';\n  var MSG_INVALID_SIGNER_KEY = 'key must be a string, a buffer or an object';\n\n  var supportsKeyObjects = typeof crypto.createPublicKey === 'function';\n  if (supportsKeyObjects) {\n    MSG_INVALID_VERIFIER_KEY += ' or a KeyObject';\n    MSG_INVALID_SECRET += 'or a KeyObject';\n  }\n\n  function checkIsPublicKey(key) {\n    if (Buffer$3.isBuffer(key)) {\n      return;\n    }\n\n    if (typeof key === 'string') {\n      return;\n    }\n\n    if (!supportsKeyObjects) {\n      throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n\n    if (typeof key !== 'object') {\n      throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n\n    if (typeof key.type !== 'string') {\n      throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n\n    if (typeof key.asymmetricKeyType !== 'string') {\n      throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n\n    if (typeof key.export !== 'function') {\n      throw typeError(MSG_INVALID_VERIFIER_KEY);\n    }\n  }\n  function checkIsPrivateKey(key) {\n    if (Buffer$3.isBuffer(key)) {\n      return;\n    }\n\n    if (typeof key === 'string') {\n      return;\n    }\n\n    if (typeof key === 'object') {\n      return;\n    }\n\n    throw typeError(MSG_INVALID_SIGNER_KEY);\n  }\n  function checkIsSecretKey(key) {\n    if (Buffer$3.isBuffer(key)) {\n      return;\n    }\n\n    if (typeof key === 'string') {\n      return key;\n    }\n\n    if (!supportsKeyObjects) {\n      throw typeError(MSG_INVALID_SECRET);\n    }\n\n    if (typeof key !== 'object') {\n      throw typeError(MSG_INVALID_SECRET);\n    }\n\n    if (key.type !== 'secret') {\n      throw typeError(MSG_INVALID_SECRET);\n    }\n\n    if (typeof key.export !== 'function') {\n      throw typeError(MSG_INVALID_SECRET);\n    }\n  }\n\n  function fromBase64(base64) {\n    return base64\n      .replace(/=/g, '')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_');\n  }\n\n  function toBase64(base64url) {\n    base64url = base64url.toString();\n\n    var padding = 4 - base64url.length % 4;\n    if (padding !== 4) {\n      for (var i = 0; i < padding; ++i) {\n        base64url += '=';\n      }\n    }\n\n    return base64url\n      .replace(/\\-/g, '+')\n      .replace(/_/g, '/');\n  }\n\n  function typeError(template) {\n    var args = [].slice.call(arguments, 1);\n    var errMsg = util$2.format.bind(util$2, template).apply(null, args);\n    return new TypeError(errMsg);\n  }\n\n  function bufferOrString(obj) {\n    return Buffer$3.isBuffer(obj) || typeof obj === 'string';\n  }\n\n  function normalizeInput(thing) {\n    if (!bufferOrString(thing))\n      thing = JSON.stringify(thing);\n    return thing;\n  }\n\n  function createHmacSigner(bits) {\n    return function sign(thing, secret) {\n      checkIsSecretKey(secret);\n      thing = normalizeInput(thing);\n      var hmac = crypto.createHmac('sha' + bits, secret);\n      var sig = (hmac.update(thing), hmac.digest('base64'));\n      return fromBase64(sig);\n    }\n  }\n\n  function createHmacVerifier(bits) {\n    return function verify(thing, signature, secret) {\n      var computedSig = createHmacSigner(bits)(thing, secret);\n      return bufferEqual(Buffer$3.from(signature), Buffer$3.from(computedSig));\n    }\n  }\n\n  function createKeySigner(bits) {\n   return function sign(thing, privateKey) {\n      checkIsPrivateKey(privateKey);\n      thing = normalizeInput(thing);\n      // Even though we are specifying \"RSA\" here, this works with ECDSA\n      // keys as well.\n      var signer = crypto.createSign('RSA-SHA' + bits);\n      var sig = (signer.update(thing), signer.sign(privateKey, 'base64'));\n      return fromBase64(sig);\n    }\n  }\n\n  function createKeyVerifier(bits) {\n    return function verify(thing, signature, publicKey) {\n      checkIsPublicKey(publicKey);\n      thing = normalizeInput(thing);\n      signature = toBase64(signature);\n      var verifier = crypto.createVerify('RSA-SHA' + bits);\n      verifier.update(thing);\n      return verifier.verify(publicKey, signature, 'base64');\n    }\n  }\n\n  function createPSSKeySigner(bits) {\n    return function sign(thing, privateKey) {\n      checkIsPrivateKey(privateKey);\n      thing = normalizeInput(thing);\n      var signer = crypto.createSign('RSA-SHA' + bits);\n      var sig = (signer.update(thing), signer.sign({\n        key: privateKey,\n        padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n        saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST\n      }, 'base64'));\n      return fromBase64(sig);\n    }\n  }\n\n  function createPSSKeyVerifier(bits) {\n    return function verify(thing, signature, publicKey) {\n      checkIsPublicKey(publicKey);\n      thing = normalizeInput(thing);\n      signature = toBase64(signature);\n      var verifier = crypto.createVerify('RSA-SHA' + bits);\n      verifier.update(thing);\n      return verifier.verify({\n        key: publicKey,\n        padding: crypto.constants.RSA_PKCS1_PSS_PADDING,\n        saltLength: crypto.constants.RSA_PSS_SALTLEN_DIGEST\n      }, signature, 'base64');\n    }\n  }\n\n  function createECDSASigner(bits) {\n    var inner = createKeySigner(bits);\n    return function sign() {\n      var signature = inner.apply(null, arguments);\n      signature = formatEcdsa.derToJose(signature, 'ES' + bits);\n      return signature;\n    };\n  }\n\n  function createECDSAVerifer(bits) {\n    var inner = createKeyVerifier(bits);\n    return function verify(thing, signature, publicKey) {\n      signature = formatEcdsa.joseToDer(signature, 'ES' + bits).toString('base64');\n      var result = inner(thing, signature, publicKey);\n      return result;\n    };\n  }\n\n  function createNoneSigner() {\n    return function sign() {\n      return '';\n    }\n  }\n\n  function createNoneVerifier() {\n    return function verify(thing, signature) {\n      return signature === '';\n    }\n  }\n\n  var jwa$2 = function jwa(algorithm) {\n    var signerFactories = {\n      hs: createHmacSigner,\n      rs: createKeySigner,\n      ps: createPSSKeySigner,\n      es: createECDSASigner,\n      none: createNoneSigner,\n    };\n    var verifierFactories = {\n      hs: createHmacVerifier,\n      rs: createKeyVerifier,\n      ps: createPSSKeyVerifier,\n      es: createECDSAVerifer,\n      none: createNoneVerifier,\n    };\n    var match = algorithm.match(/^(RS|PS|ES|HS)(256|384|512)$|^(none)$/i);\n    if (!match)\n      throw typeError(MSG_INVALID_ALGORITHM, algorithm);\n    var algo = (match[1] || match[3]).toLowerCase();\n    var bits = match[2];\n\n    return {\n      sign: signerFactories[algo](bits),\n      verify: verifierFactories[algo](bits),\n    }\n  };\n\n  /*global module*/\n\n  var Buffer$2 = require$$0.Buffer;\n\n  var tostring = function toString(obj) {\n    if (typeof obj === 'string')\n      return obj;\n    if (typeof obj === 'number' || Buffer$2.isBuffer(obj))\n      return obj.toString();\n    return JSON.stringify(obj);\n  };\n\n  /*global module*/\n\n  var Buffer$1 = safeBufferExports.Buffer;\n  var DataStream$1 = dataStream;\n  var jwa$1 = jwa$2;\n  var Stream$1 = require$$3;\n  var toString$1 = tostring;\n  var util$1 = require$$5;\n\n  function base64url(string, encoding) {\n    return Buffer$1\n      .from(string, encoding)\n      .toString('base64')\n      .replace(/=/g, '')\n      .replace(/\\+/g, '-')\n      .replace(/\\//g, '_');\n  }\n\n  function jwsSecuredInput(header, payload, encoding) {\n    encoding = encoding || 'utf8';\n    var encodedHeader = base64url(toString$1(header), 'binary');\n    var encodedPayload = base64url(toString$1(payload), encoding);\n    return util$1.format('%s.%s', encodedHeader, encodedPayload);\n  }\n\n  function jwsSign(opts) {\n    var header = opts.header;\n    var payload = opts.payload;\n    var secretOrKey = opts.secret || opts.privateKey;\n    var encoding = opts.encoding;\n    var algo = jwa$1(header.alg);\n    var securedInput = jwsSecuredInput(header, payload, encoding);\n    var signature = algo.sign(securedInput, secretOrKey);\n    return util$1.format('%s.%s', securedInput, signature);\n  }\n\n  function SignStream$1(opts) {\n    var secret = opts.secret||opts.privateKey||opts.key;\n    var secretStream = new DataStream$1(secret);\n    this.readable = true;\n    this.header = opts.header;\n    this.encoding = opts.encoding;\n    this.secret = this.privateKey = this.key = secretStream;\n    this.payload = new DataStream$1(opts.payload);\n    this.secret.once('close', function () {\n      if (!this.payload.writable && this.readable)\n        this.sign();\n    }.bind(this));\n\n    this.payload.once('close', function () {\n      if (!this.secret.writable && this.readable)\n        this.sign();\n    }.bind(this));\n  }\n  util$1.inherits(SignStream$1, Stream$1);\n\n  SignStream$1.prototype.sign = function sign() {\n    try {\n      var signature = jwsSign({\n        header: this.header,\n        payload: this.payload.buffer,\n        secret: this.secret.buffer,\n        encoding: this.encoding\n      });\n      this.emit('done', signature);\n      this.emit('data', signature);\n      this.emit('end');\n      this.readable = false;\n      return signature;\n    } catch (e) {\n      this.readable = false;\n      this.emit('error', e);\n      this.emit('close');\n    }\n  };\n\n  SignStream$1.sign = jwsSign;\n\n  var signStream = SignStream$1;\n\n  /*global module*/\n\n  var Buffer = safeBufferExports.Buffer;\n  var DataStream = dataStream;\n  var jwa = jwa$2;\n  var Stream = require$$3;\n  var toString = tostring;\n  var util = require$$5;\n  var JWS_REGEX = /^[a-zA-Z0-9\\-_]+?\\.[a-zA-Z0-9\\-_]+?\\.([a-zA-Z0-9\\-_]+)?$/;\n\n  function isObject$3(thing) {\n    return Object.prototype.toString.call(thing) === '[object Object]';\n  }\n\n  function safeJsonParse(thing) {\n    if (isObject$3(thing))\n      return thing;\n    try { return JSON.parse(thing); }\n    catch (e) { return undefined; }\n  }\n\n  function headerFromJWS(jwsSig) {\n    var encodedHeader = jwsSig.split('.', 1)[0];\n    return safeJsonParse(Buffer.from(encodedHeader, 'base64').toString('binary'));\n  }\n\n  function securedInputFromJWS(jwsSig) {\n    return jwsSig.split('.', 2).join('.');\n  }\n\n  function signatureFromJWS(jwsSig) {\n    return jwsSig.split('.')[2];\n  }\n\n  function payloadFromJWS(jwsSig, encoding) {\n    encoding = encoding || 'utf8';\n    var payload = jwsSig.split('.')[1];\n    return Buffer.from(payload, 'base64').toString(encoding);\n  }\n\n  function isValidJws(string) {\n    return JWS_REGEX.test(string) && !!headerFromJWS(string);\n  }\n\n  function jwsVerify(jwsSig, algorithm, secretOrKey) {\n    if (!algorithm) {\n      var err = new Error(\"Missing algorithm parameter for jws.verify\");\n      err.code = \"MISSING_ALGORITHM\";\n      throw err;\n    }\n    jwsSig = toString(jwsSig);\n    var signature = signatureFromJWS(jwsSig);\n    var securedInput = securedInputFromJWS(jwsSig);\n    var algo = jwa(algorithm);\n    return algo.verify(securedInput, signature, secretOrKey);\n  }\n\n  function jwsDecode(jwsSig, opts) {\n    opts = opts || {};\n    jwsSig = toString(jwsSig);\n\n    if (!isValidJws(jwsSig))\n      return null;\n\n    var header = headerFromJWS(jwsSig);\n\n    if (!header)\n      return null;\n\n    var payload = payloadFromJWS(jwsSig);\n    if (header.typ === 'JWT' || opts.json)\n      payload = JSON.parse(payload, opts.encoding);\n\n    return {\n      header: header,\n      payload: payload,\n      signature: signatureFromJWS(jwsSig)\n    };\n  }\n\n  function VerifyStream$1(opts) {\n    opts = opts || {};\n    var secretOrKey = opts.secret||opts.publicKey||opts.key;\n    var secretStream = new DataStream(secretOrKey);\n    this.readable = true;\n    this.algorithm = opts.algorithm;\n    this.encoding = opts.encoding;\n    this.secret = this.publicKey = this.key = secretStream;\n    this.signature = new DataStream(opts.signature);\n    this.secret.once('close', function () {\n      if (!this.signature.writable && this.readable)\n        this.verify();\n    }.bind(this));\n\n    this.signature.once('close', function () {\n      if (!this.secret.writable && this.readable)\n        this.verify();\n    }.bind(this));\n  }\n  util.inherits(VerifyStream$1, Stream);\n  VerifyStream$1.prototype.verify = function verify() {\n    try {\n      var valid = jwsVerify(this.signature.buffer, this.algorithm, this.key.buffer);\n      var obj = jwsDecode(this.signature.buffer, this.encoding);\n      this.emit('done', valid, obj);\n      this.emit('data', valid);\n      this.emit('end');\n      this.readable = false;\n      return valid;\n    } catch (e) {\n      this.readable = false;\n      this.emit('error', e);\n      this.emit('close');\n    }\n  };\n\n  VerifyStream$1.decode = jwsDecode;\n  VerifyStream$1.isValid = isValidJws;\n  VerifyStream$1.verify = jwsVerify;\n\n  var verifyStream = VerifyStream$1;\n\n  /*global exports*/\n\n  var SignStream = signStream;\n  var VerifyStream = verifyStream;\n\n  var ALGORITHMS = [\n    'HS256', 'HS384', 'HS512',\n    'RS256', 'RS384', 'RS512',\n    'PS256', 'PS384', 'PS512',\n    'ES256', 'ES384', 'ES512'\n  ];\n\n  jws$3.ALGORITHMS = ALGORITHMS;\n  jws$3.sign = SignStream.sign;\n  jws$3.verify = VerifyStream.verify;\n  jws$3.decode = VerifyStream.decode;\n  jws$3.isValid = VerifyStream.isValid;\n  jws$3.createSign = function createSign(opts) {\n    return new SignStream(opts);\n  };\n  jws$3.createVerify = function createVerify(opts) {\n    return new VerifyStream(opts);\n  };\n\n  var jws$2 = jws$3;\n\n  var decode$1 = function (jwt, options) {\n    options = options || {};\n    var decoded = jws$2.decode(jwt, options);\n    if (!decoded) { return null; }\n    var payload = decoded.payload;\n\n    //try parse the payload\n    if(typeof payload === 'string') {\n      try {\n        var obj = JSON.parse(payload);\n        if(obj !== null && typeof obj === 'object') {\n          payload = obj;\n        }\n      } catch (e) { }\n    }\n\n    //return header if `complete` option is enabled.  header includes claims\n    //such as `kid` and `alg` used to select the key within a JWKS needed to\n    //verify the signature\n    if (options.complete === true) {\n      return {\n        header: decoded.header,\n        payload: payload,\n        signature: decoded.signature\n      };\n    }\n    return payload;\n  };\n\n  var JsonWebTokenError$3 = function (message, error) {\n    Error.call(this, message);\n    if(Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n    this.name = 'JsonWebTokenError';\n    this.message = message;\n    if (error) this.inner = error;\n  };\n\n  JsonWebTokenError$3.prototype = Object.create(Error.prototype);\n  JsonWebTokenError$3.prototype.constructor = JsonWebTokenError$3;\n\n  var JsonWebTokenError_1 = JsonWebTokenError$3;\n\n  var JsonWebTokenError$2 = JsonWebTokenError_1;\n\n  var NotBeforeError$1 = function (message, date) {\n    JsonWebTokenError$2.call(this, message);\n    this.name = 'NotBeforeError';\n    this.date = date;\n  };\n\n  NotBeforeError$1.prototype = Object.create(JsonWebTokenError$2.prototype);\n\n  NotBeforeError$1.prototype.constructor = NotBeforeError$1;\n\n  var NotBeforeError_1 = NotBeforeError$1;\n\n  var JsonWebTokenError$1 = JsonWebTokenError_1;\n\n  var TokenExpiredError$1 = function (message, expiredAt) {\n    JsonWebTokenError$1.call(this, message);\n    this.name = 'TokenExpiredError';\n    this.expiredAt = expiredAt;\n  };\n\n  TokenExpiredError$1.prototype = Object.create(JsonWebTokenError$1.prototype);\n\n  TokenExpiredError$1.prototype.constructor = TokenExpiredError$1;\n\n  var TokenExpiredError_1 = TokenExpiredError$1;\n\n  /**\n   * Helpers.\n   */\n\n  var s = 1000;\n  var m = s * 60;\n  var h = m * 60;\n  var d = h * 24;\n  var y = d * 365.25;\n\n  /**\n   * Parse or format the given `val`.\n   *\n   * Options:\n   *\n   *  - `long` verbose formatting [false]\n   *\n   * @param {String|Number} val\n   * @param {Object} [options]\n   * @throws {Error} throw an error if val is not a non-empty string or a number\n   * @return {String|Number}\n   * @api public\n   */\n\n  var ms$1 = function(val, options) {\n    options = options || {};\n    var type = typeof val;\n    if (type === 'string' && val.length > 0) {\n      return parse$7(val);\n    } else if (type === 'number' && isNaN(val) === false) {\n      return options.long ? fmtLong(val) : fmtShort(val);\n    }\n    throw new Error(\n      'val is not a non-empty string or a valid number. val=' +\n        JSON.stringify(val)\n    );\n  };\n\n  /**\n   * Parse the given `str` and return milliseconds.\n   *\n   * @param {String} str\n   * @return {Number}\n   * @api private\n   */\n\n  function parse$7(str) {\n    str = String(str);\n    if (str.length > 100) {\n      return;\n    }\n    var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(\n      str\n    );\n    if (!match) {\n      return;\n    }\n    var n = parseFloat(match[1]);\n    var type = (match[2] || 'ms').toLowerCase();\n    switch (type) {\n      case 'years':\n      case 'year':\n      case 'yrs':\n      case 'yr':\n      case 'y':\n        return n * y;\n      case 'days':\n      case 'day':\n      case 'd':\n        return n * d;\n      case 'hours':\n      case 'hour':\n      case 'hrs':\n      case 'hr':\n      case 'h':\n        return n * h;\n      case 'minutes':\n      case 'minute':\n      case 'mins':\n      case 'min':\n      case 'm':\n        return n * m;\n      case 'seconds':\n      case 'second':\n      case 'secs':\n      case 'sec':\n      case 's':\n        return n * s;\n      case 'milliseconds':\n      case 'millisecond':\n      case 'msecs':\n      case 'msec':\n      case 'ms':\n        return n;\n      default:\n        return undefined;\n    }\n  }\n\n  /**\n   * Short format for `ms`.\n   *\n   * @param {Number} ms\n   * @return {String}\n   * @api private\n   */\n\n  function fmtShort(ms) {\n    if (ms >= d) {\n      return Math.round(ms / d) + 'd';\n    }\n    if (ms >= h) {\n      return Math.round(ms / h) + 'h';\n    }\n    if (ms >= m) {\n      return Math.round(ms / m) + 'm';\n    }\n    if (ms >= s) {\n      return Math.round(ms / s) + 's';\n    }\n    return ms + 'ms';\n  }\n\n  /**\n   * Long format for `ms`.\n   *\n   * @param {Number} ms\n   * @return {String}\n   * @api private\n   */\n\n  function fmtLong(ms) {\n    return plural(ms, d, 'day') ||\n      plural(ms, h, 'hour') ||\n      plural(ms, m, 'minute') ||\n      plural(ms, s, 'second') ||\n      ms + ' ms';\n  }\n\n  /**\n   * Pluralization helper.\n   */\n\n  function plural(ms, n, name) {\n    if (ms < n) {\n      return;\n    }\n    if (ms < n * 1.5) {\n      return Math.floor(ms / n) + ' ' + name;\n    }\n    return Math.ceil(ms / n) + ' ' + name + 's';\n  }\n\n  var ms = ms$1;\n\n  var timespan$2 = function (time, iat) {\n    var timestamp = iat || Math.floor(Date.now() / 1000);\n\n    if (typeof time === 'string') {\n      var milliseconds = ms(time);\n      if (typeof milliseconds === 'undefined') {\n        return;\n      }\n      return Math.floor(timestamp + milliseconds / 1000);\n    } else if (typeof time === 'number') {\n      return timestamp + time;\n    } else {\n      return;\n    }\n\n  };\n\n  var re$2 = {exports: {}};\n\n  // Note: this is the semver.org version of the spec that it implements\n  // Not necessarily the package version of this code.\n  const SEMVER_SPEC_VERSION = '2.0.0';\n\n  const MAX_LENGTH$1 = 256;\n  const MAX_SAFE_INTEGER$2 = Number.MAX_SAFE_INTEGER ||\n  /* istanbul ignore next */ 9007199254740991;\n\n  // Max safe segment length for coercion.\n  const MAX_SAFE_COMPONENT_LENGTH = 16;\n\n  // Max safe length for a build identifier. The max length minus 6 characters for\n  // the shortest version with a build 0.0.0+BUILD.\n  const MAX_SAFE_BUILD_LENGTH = MAX_LENGTH$1 - 6;\n\n  const RELEASE_TYPES = [\n    'major',\n    'premajor',\n    'minor',\n    'preminor',\n    'patch',\n    'prepatch',\n    'prerelease',\n  ];\n\n  var constants$1 = {\n    MAX_LENGTH: MAX_LENGTH$1,\n    MAX_SAFE_COMPONENT_LENGTH,\n    MAX_SAFE_BUILD_LENGTH,\n    MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$2,\n    RELEASE_TYPES,\n    SEMVER_SPEC_VERSION,\n    FLAG_INCLUDE_PRERELEASE: 0b001,\n    FLAG_LOOSE: 0b010,\n  };\n\n  const debug$1 = (\n    typeof _polyfillNode_buffer.browser$1 === 'object' &&\n    _polyfillNode_buffer.browser$1.env &&\n    _polyfillNode_buffer.browser$1.env.NODE_DEBUG &&\n    /\\bsemver\\b/i.test(_polyfillNode_buffer.browser$1.env.NODE_DEBUG)\n  ) ? (...args) => console.error('SEMVER', ...args)\n    : () => {};\n\n  var debug_1 = debug$1;\n\n  (function (module, exports) {\n  \tconst {\n  \t  MAX_SAFE_COMPONENT_LENGTH,\n  \t  MAX_SAFE_BUILD_LENGTH,\n  \t  MAX_LENGTH,\n  \t} = constants$1;\n  \tconst debug = debug_1;\n  \texports = module.exports = {};\n\n  \t// The actual regexps go on exports.re\n  \tconst re = exports.re = [];\n  \tconst safeRe = exports.safeRe = [];\n  \tconst src = exports.src = [];\n  \tconst t = exports.t = {};\n  \tlet R = 0;\n\n  \tconst LETTERDASHNUMBER = '[a-zA-Z0-9-]';\n\n  \t// Replace some greedy regex tokens to prevent regex dos issues. These regex are\n  \t// used internally via the safeRe object since all inputs in this library get\n  \t// normalized first to trim and collapse all extra whitespace. The original\n  \t// regexes are exported for userland consumption and lower level usage. A\n  \t// future breaking change could export the safer regex only with a note that\n  \t// all input should have extra whitespace removed.\n  \tconst safeRegexReplacements = [\n  \t  ['\\\\s', 1],\n  \t  ['\\\\d', MAX_LENGTH],\n  \t  [LETTERDASHNUMBER, MAX_SAFE_BUILD_LENGTH],\n  \t];\n\n  \tconst makeSafeRegex = (value) => {\n  \t  for (const [token, max] of safeRegexReplacements) {\n  \t    value = value\n  \t      .split(`${token}*`).join(`${token}{0,${max}}`)\n  \t      .split(`${token}+`).join(`${token}{1,${max}}`);\n  \t  }\n  \t  return value\n  \t};\n\n  \tconst createToken = (name, value, isGlobal) => {\n  \t  const safe = makeSafeRegex(value);\n  \t  const index = R++;\n  \t  debug(name, index, value);\n  \t  t[name] = index;\n  \t  src[index] = value;\n  \t  re[index] = new RegExp(value, isGlobal ? 'g' : undefined);\n  \t  safeRe[index] = new RegExp(safe, isGlobal ? 'g' : undefined);\n  \t};\n\n  \t// The following Regular Expressions can be used for tokenizing,\n  \t// validating, and parsing SemVer version strings.\n\n  \t// ## Numeric Identifier\n  \t// A single `0`, or a non-zero digit followed by zero or more digits.\n\n  \tcreateToken('NUMERICIDENTIFIER', '0|[1-9]\\\\d*');\n  \tcreateToken('NUMERICIDENTIFIERLOOSE', '\\\\d+');\n\n  \t// ## Non-numeric Identifier\n  \t// Zero or more digits, followed by a letter or hyphen, and then zero or\n  \t// more letters, digits, or hyphens.\n\n  \tcreateToken('NONNUMERICIDENTIFIER', `\\\\d*[a-zA-Z-]${LETTERDASHNUMBER}*`);\n\n  \t// ## Main Version\n  \t// Three dot-separated numeric identifiers.\n\n  \tcreateToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n  \t                   `(${src[t.NUMERICIDENTIFIER]})\\\\.` +\n  \t                   `(${src[t.NUMERICIDENTIFIER]})`);\n\n  \tcreateToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n  \t                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\\\.` +\n  \t                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`);\n\n  \t// ## Pre-release Version Identifier\n  \t// A numeric identifier, or a non-numeric identifier.\n\n  \tcreateToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]\n\t}|${src[t.NONNUMERICIDENTIFIER]})`);\n\n  \tcreateToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]\n\t}|${src[t.NONNUMERICIDENTIFIER]})`);\n\n  \t// ## Pre-release Version\n  \t// Hyphen, followed by one or more dot-separated pre-release version\n  \t// identifiers.\n\n  \tcreateToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]\n\t}(?:\\\\.${src[t.PRERELEASEIDENTIFIER]})*))`);\n\n  \tcreateToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]\n\t}(?:\\\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);\n\n  \t// ## Build Metadata Identifier\n  \t// Any combination of digits, letters, or hyphens.\n\n  \tcreateToken('BUILDIDENTIFIER', `${LETTERDASHNUMBER}+`);\n\n  \t// ## Build Metadata\n  \t// Plus sign, followed by one or more period-separated build metadata\n  \t// identifiers.\n\n  \tcreateToken('BUILD', `(?:\\\\+(${src[t.BUILDIDENTIFIER]\n\t}(?:\\\\.${src[t.BUILDIDENTIFIER]})*))`);\n\n  \t// ## Full Version String\n  \t// A main version, followed optionally by a pre-release version and\n  \t// build metadata.\n\n  \t// Note that the only major, minor, patch, and pre-release sections of\n  \t// the version string are capturing groups.  The build metadata is not a\n  \t// capturing group, because it should not ever be used in version\n  \t// comparison.\n\n  \tcreateToken('FULLPLAIN', `v?${src[t.MAINVERSION]\n\t}${src[t.PRERELEASE]}?${\n\t  src[t.BUILD]}?`);\n\n  \tcreateToken('FULL', `^${src[t.FULLPLAIN]}$`);\n\n  \t// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n  \t// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n  \t// common in the npm registry.\n  \tcreateToken('LOOSEPLAIN', `[v=\\\\s]*${src[t.MAINVERSIONLOOSE]\n\t}${src[t.PRERELEASELOOSE]}?${\n\t  src[t.BUILD]}?`);\n\n  \tcreateToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`);\n\n  \tcreateToken('GTLT', '((?:<|>)?=?)');\n\n  \t// Something like \"2.*\" or \"1.2.x\".\n  \t// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n  \t// Only the first item is strictly required.\n  \tcreateToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\\\*`);\n  \tcreateToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\\\*`);\n\n  \tcreateToken('XRANGEPLAIN', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIER]})` +\n  \t                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n  \t                   `(?:\\\\.(${src[t.XRANGEIDENTIFIER]})` +\n  \t                   `(?:${src[t.PRERELEASE]})?${\n\t                     src[t.BUILD]}?` +\n  \t                   `)?)?`);\n\n  \tcreateToken('XRANGEPLAINLOOSE', `[v=\\\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n  \t                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n  \t                        `(?:\\\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +\n  \t                        `(?:${src[t.PRERELEASELOOSE]})?${\n\t                          src[t.BUILD]}?` +\n  \t                        `)?)?`);\n\n  \tcreateToken('XRANGE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAIN]}$`);\n  \tcreateToken('XRANGELOOSE', `^${src[t.GTLT]}\\\\s*${src[t.XRANGEPLAINLOOSE]}$`);\n\n  \t// Coercion.\n  \t// Extract anything that could conceivably be a part of a valid semver\n  \tcreateToken('COERCEPLAIN', `${'(^|[^\\\\d])' +\n\t              '(\\\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +\n  \t              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +\n  \t              `(?:\\\\.(\\\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?`);\n  \tcreateToken('COERCE', `${src[t.COERCEPLAIN]}(?:$|[^\\\\d])`);\n  \tcreateToken('COERCEFULL', src[t.COERCEPLAIN] +\n  \t              `(?:${src[t.PRERELEASE]})?` +\n  \t              `(?:${src[t.BUILD]})?` +\n  \t              `(?:$|[^\\\\d])`);\n  \tcreateToken('COERCERTL', src[t.COERCE], true);\n  \tcreateToken('COERCERTLFULL', src[t.COERCEFULL], true);\n\n  \t// Tilde ranges.\n  \t// Meaning is \"reasonably at or greater than\"\n  \tcreateToken('LONETILDE', '(?:~>?)');\n\n  \tcreateToken('TILDETRIM', `(\\\\s*)${src[t.LONETILDE]}\\\\s+`, true);\n  \texports.tildeTrimReplace = '$1~';\n\n  \tcreateToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);\n  \tcreateToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);\n\n  \t// Caret ranges.\n  \t// Meaning is \"at least and backwards compatible with\"\n  \tcreateToken('LONECARET', '(?:\\\\^)');\n\n  \tcreateToken('CARETTRIM', `(\\\\s*)${src[t.LONECARET]}\\\\s+`, true);\n  \texports.caretTrimReplace = '$1^';\n\n  \tcreateToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);\n  \tcreateToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);\n\n  \t// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\n  \tcreateToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\\\s*(${src[t.LOOSEPLAIN]})$|^$`);\n  \tcreateToken('COMPARATOR', `^${src[t.GTLT]}\\\\s*(${src[t.FULLPLAIN]})$|^$`);\n\n  \t// An expression to strip any whitespace between the gtlt and the thing\n  \t// it modifies, so that `> 1.2.3` ==> `>1.2.3`\n  \tcreateToken('COMPARATORTRIM', `(\\\\s*)${src[t.GTLT]\n\t}\\\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);\n  \texports.comparatorTrimReplace = '$1$2$3';\n\n  \t// Something like `1.2.3 - 1.2.4`\n  \t// Note that these all use the loose form, because they'll be\n  \t// checked against either the strict or loose comparator form\n  \t// later.\n  \tcreateToken('HYPHENRANGE', `^\\\\s*(${src[t.XRANGEPLAIN]})` +\n  \t                   `\\\\s+-\\\\s+` +\n  \t                   `(${src[t.XRANGEPLAIN]})` +\n  \t                   `\\\\s*$`);\n\n  \tcreateToken('HYPHENRANGELOOSE', `^\\\\s*(${src[t.XRANGEPLAINLOOSE]})` +\n  \t                        `\\\\s+-\\\\s+` +\n  \t                        `(${src[t.XRANGEPLAINLOOSE]})` +\n  \t                        `\\\\s*$`);\n\n  \t// Star ranges basically just allow anything at all.\n  \tcreateToken('STAR', '(<|>)?=?\\\\s*\\\\*');\n  \t// >=0.0.0 is like a star\n  \tcreateToken('GTE0', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0\\\\s*$');\n  \tcreateToken('GTE0PRE', '^\\\\s*>=\\\\s*0\\\\.0\\\\.0-0\\\\s*$'); \n  } (re$2, re$2.exports));\n\n  var reExports = re$2.exports;\n\n  // parse out just the options we care about\n  const looseOption = Object.freeze({ loose: true });\n  const emptyOpts = Object.freeze({ });\n  const parseOptions$1 = options => {\n    if (!options) {\n      return emptyOpts\n    }\n\n    if (typeof options !== 'object') {\n      return looseOption\n    }\n\n    return options\n  };\n  var parseOptions_1 = parseOptions$1;\n\n  const numeric = /^[0-9]+$/;\n  const compareIdentifiers$1 = (a, b) => {\n    const anum = numeric.test(a);\n    const bnum = numeric.test(b);\n\n    if (anum && bnum) {\n      a = +a;\n      b = +b;\n    }\n\n    return a === b ? 0\n      : (anum && !bnum) ? -1\n      : (bnum && !anum) ? 1\n      : a < b ? -1\n      : 1\n  };\n\n  const rcompareIdentifiers = (a, b) => compareIdentifiers$1(b, a);\n\n  var identifiers$1 = {\n    compareIdentifiers: compareIdentifiers$1,\n    rcompareIdentifiers,\n  };\n\n  const debug = debug_1;\n  const { MAX_LENGTH, MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$1 } = constants$1;\n  const { safeRe: re$1, t: t$1 } = reExports;\n\n  const parseOptions = parseOptions_1;\n  const { compareIdentifiers } = identifiers$1;\n  let SemVer$d = class SemVer {\n    constructor (version, options) {\n      options = parseOptions(options);\n\n      if (version instanceof SemVer) {\n        if (version.loose === !!options.loose &&\n            version.includePrerelease === !!options.includePrerelease) {\n          return version\n        } else {\n          version = version.version;\n        }\n      } else if (typeof version !== 'string') {\n        throw new TypeError(`Invalid version. Must be a string. Got type \"${typeof version}\".`)\n      }\n\n      if (version.length > MAX_LENGTH) {\n        throw new TypeError(\n          `version is longer than ${MAX_LENGTH} characters`\n        )\n      }\n\n      debug('SemVer', version, options);\n      this.options = options;\n      this.loose = !!options.loose;\n      // this isn't actually relevant for versions, but keep it so that we\n      // don't run into trouble passing this.options around.\n      this.includePrerelease = !!options.includePrerelease;\n\n      const m = version.trim().match(options.loose ? re$1[t$1.LOOSE] : re$1[t$1.FULL]);\n\n      if (!m) {\n        throw new TypeError(`Invalid Version: ${version}`)\n      }\n\n      this.raw = version;\n\n      // these are actually numbers\n      this.major = +m[1];\n      this.minor = +m[2];\n      this.patch = +m[3];\n\n      if (this.major > MAX_SAFE_INTEGER$1 || this.major < 0) {\n        throw new TypeError('Invalid major version')\n      }\n\n      if (this.minor > MAX_SAFE_INTEGER$1 || this.minor < 0) {\n        throw new TypeError('Invalid minor version')\n      }\n\n      if (this.patch > MAX_SAFE_INTEGER$1 || this.patch < 0) {\n        throw new TypeError('Invalid patch version')\n      }\n\n      // numberify any prerelease numeric ids\n      if (!m[4]) {\n        this.prerelease = [];\n      } else {\n        this.prerelease = m[4].split('.').map((id) => {\n          if (/^[0-9]+$/.test(id)) {\n            const num = +id;\n            if (num >= 0 && num < MAX_SAFE_INTEGER$1) {\n              return num\n            }\n          }\n          return id\n        });\n      }\n\n      this.build = m[5] ? m[5].split('.') : [];\n      this.format();\n    }\n\n    format () {\n      this.version = `${this.major}.${this.minor}.${this.patch}`;\n      if (this.prerelease.length) {\n        this.version += `-${this.prerelease.join('.')}`;\n      }\n      return this.version\n    }\n\n    toString () {\n      return this.version\n    }\n\n    compare (other) {\n      debug('SemVer.compare', this.version, this.options, other);\n      if (!(other instanceof SemVer)) {\n        if (typeof other === 'string' && other === this.version) {\n          return 0\n        }\n        other = new SemVer(other, this.options);\n      }\n\n      if (other.version === this.version) {\n        return 0\n      }\n\n      return this.compareMain(other) || this.comparePre(other)\n    }\n\n    compareMain (other) {\n      if (!(other instanceof SemVer)) {\n        other = new SemVer(other, this.options);\n      }\n\n      return (\n        compareIdentifiers(this.major, other.major) ||\n        compareIdentifiers(this.minor, other.minor) ||\n        compareIdentifiers(this.patch, other.patch)\n      )\n    }\n\n    comparePre (other) {\n      if (!(other instanceof SemVer)) {\n        other = new SemVer(other, this.options);\n      }\n\n      // NOT having a prerelease is > having one\n      if (this.prerelease.length && !other.prerelease.length) {\n        return -1\n      } else if (!this.prerelease.length && other.prerelease.length) {\n        return 1\n      } else if (!this.prerelease.length && !other.prerelease.length) {\n        return 0\n      }\n\n      let i = 0;\n      do {\n        const a = this.prerelease[i];\n        const b = other.prerelease[i];\n        debug('prerelease compare', i, a, b);\n        if (a === undefined && b === undefined) {\n          return 0\n        } else if (b === undefined) {\n          return 1\n        } else if (a === undefined) {\n          return -1\n        } else if (a === b) {\n          continue\n        } else {\n          return compareIdentifiers(a, b)\n        }\n      } while (++i)\n    }\n\n    compareBuild (other) {\n      if (!(other instanceof SemVer)) {\n        other = new SemVer(other, this.options);\n      }\n\n      let i = 0;\n      do {\n        const a = this.build[i];\n        const b = other.build[i];\n        debug('build compare', i, a, b);\n        if (a === undefined && b === undefined) {\n          return 0\n        } else if (b === undefined) {\n          return 1\n        } else if (a === undefined) {\n          return -1\n        } else if (a === b) {\n          continue\n        } else {\n          return compareIdentifiers(a, b)\n        }\n      } while (++i)\n    }\n\n    // preminor will bump the version up to the next minor release, and immediately\n    // down to pre-release. premajor and prepatch work the same way.\n    inc (release, identifier, identifierBase) {\n      switch (release) {\n        case 'premajor':\n          this.prerelease.length = 0;\n          this.patch = 0;\n          this.minor = 0;\n          this.major++;\n          this.inc('pre', identifier, identifierBase);\n          break\n        case 'preminor':\n          this.prerelease.length = 0;\n          this.patch = 0;\n          this.minor++;\n          this.inc('pre', identifier, identifierBase);\n          break\n        case 'prepatch':\n          // If this is already a prerelease, it will bump to the next version\n          // drop any prereleases that might already exist, since they are not\n          // relevant at this point.\n          this.prerelease.length = 0;\n          this.inc('patch', identifier, identifierBase);\n          this.inc('pre', identifier, identifierBase);\n          break\n        // If the input is a non-prerelease version, this acts the same as\n        // prepatch.\n        case 'prerelease':\n          if (this.prerelease.length === 0) {\n            this.inc('patch', identifier, identifierBase);\n          }\n          this.inc('pre', identifier, identifierBase);\n          break\n\n        case 'major':\n          // If this is a pre-major version, bump up to the same major version.\n          // Otherwise increment major.\n          // 1.0.0-5 bumps to 1.0.0\n          // 1.1.0 bumps to 2.0.0\n          if (\n            this.minor !== 0 ||\n            this.patch !== 0 ||\n            this.prerelease.length === 0\n          ) {\n            this.major++;\n          }\n          this.minor = 0;\n          this.patch = 0;\n          this.prerelease = [];\n          break\n        case 'minor':\n          // If this is a pre-minor version, bump up to the same minor version.\n          // Otherwise increment minor.\n          // 1.2.0-5 bumps to 1.2.0\n          // 1.2.1 bumps to 1.3.0\n          if (this.patch !== 0 || this.prerelease.length === 0) {\n            this.minor++;\n          }\n          this.patch = 0;\n          this.prerelease = [];\n          break\n        case 'patch':\n          // If this is not a pre-release version, it will increment the patch.\n          // If it is a pre-release it will bump up to the same patch version.\n          // 1.2.0-5 patches to 1.2.0\n          // 1.2.0 patches to 1.2.1\n          if (this.prerelease.length === 0) {\n            this.patch++;\n          }\n          this.prerelease = [];\n          break\n        // This probably shouldn't be used publicly.\n        // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.\n        case 'pre': {\n          const base = Number(identifierBase) ? 1 : 0;\n\n          if (!identifier && identifierBase === false) {\n            throw new Error('invalid increment argument: identifier is empty')\n          }\n\n          if (this.prerelease.length === 0) {\n            this.prerelease = [base];\n          } else {\n            let i = this.prerelease.length;\n            while (--i >= 0) {\n              if (typeof this.prerelease[i] === 'number') {\n                this.prerelease[i]++;\n                i = -2;\n              }\n            }\n            if (i === -1) {\n              // didn't increment anything\n              if (identifier === this.prerelease.join('.') && identifierBase === false) {\n                throw new Error('invalid increment argument: identifier already exists')\n              }\n              this.prerelease.push(base);\n            }\n          }\n          if (identifier) {\n            // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n            // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n            let prerelease = [identifier, base];\n            if (identifierBase === false) {\n              prerelease = [identifier];\n            }\n            if (compareIdentifiers(this.prerelease[0], identifier) === 0) {\n              if (isNaN(this.prerelease[1])) {\n                this.prerelease = prerelease;\n              }\n            } else {\n              this.prerelease = prerelease;\n            }\n          }\n          break\n        }\n        default:\n          throw new Error(`invalid increment argument: ${release}`)\n      }\n      this.raw = this.format();\n      if (this.build.length) {\n        this.raw += `+${this.build.join('.')}`;\n      }\n      return this\n    }\n  };\n\n  var semver$4 = SemVer$d;\n\n  const SemVer$c = semver$4;\n  const parse$6 = (version, options, throwErrors = false) => {\n    if (version instanceof SemVer$c) {\n      return version\n    }\n    try {\n      return new SemVer$c(version, options)\n    } catch (er) {\n      if (!throwErrors) {\n        return null\n      }\n      throw er\n    }\n  };\n\n  var parse_1 = parse$6;\n\n  const parse$5 = parse_1;\n  const valid$2 = (version, options) => {\n    const v = parse$5(version, options);\n    return v ? v.version : null\n  };\n  var valid_1 = valid$2;\n\n  const parse$4 = parse_1;\n  const clean$1 = (version, options) => {\n    const s = parse$4(version.trim().replace(/^[=v]+/, ''), options);\n    return s ? s.version : null\n  };\n  var clean_1 = clean$1;\n\n  const SemVer$b = semver$4;\n\n  const inc$1 = (version, release, options, identifier, identifierBase) => {\n    if (typeof (options) === 'string') {\n      identifierBase = identifier;\n      identifier = options;\n      options = undefined;\n    }\n\n    try {\n      return new SemVer$b(\n        version instanceof SemVer$b ? version.version : version,\n        options\n      ).inc(release, identifier, identifierBase).version\n    } catch (er) {\n      return null\n    }\n  };\n  var inc_1 = inc$1;\n\n  const parse$3 = parse_1;\n\n  const diff$1 = (version1, version2) => {\n    const v1 = parse$3(version1, null, true);\n    const v2 = parse$3(version2, null, true);\n    const comparison = v1.compare(v2);\n\n    if (comparison === 0) {\n      return null\n    }\n\n    const v1Higher = comparison > 0;\n    const highVersion = v1Higher ? v1 : v2;\n    const lowVersion = v1Higher ? v2 : v1;\n    const highHasPre = !!highVersion.prerelease.length;\n    const lowHasPre = !!lowVersion.prerelease.length;\n\n    if (lowHasPre && !highHasPre) {\n      // Going from prerelease -> no prerelease requires some special casing\n\n      // If the low version has only a major, then it will always be a major\n      // Some examples:\n      // 1.0.0-1 -> 1.0.0\n      // 1.0.0-1 -> 1.1.1\n      // 1.0.0-1 -> 2.0.0\n      if (!lowVersion.patch && !lowVersion.minor) {\n        return 'major'\n      }\n\n      // Otherwise it can be determined by checking the high version\n\n      if (highVersion.patch) {\n        // anything higher than a patch bump would result in the wrong version\n        return 'patch'\n      }\n\n      if (highVersion.minor) {\n        // anything higher than a minor bump would result in the wrong version\n        return 'minor'\n      }\n\n      // bumping major/minor/patch all have same result\n      return 'major'\n    }\n\n    // add the `pre` prefix if we are going to a prerelease version\n    const prefix = highHasPre ? 'pre' : '';\n\n    if (v1.major !== v2.major) {\n      return prefix + 'major'\n    }\n\n    if (v1.minor !== v2.minor) {\n      return prefix + 'minor'\n    }\n\n    if (v1.patch !== v2.patch) {\n      return prefix + 'patch'\n    }\n\n    // high and low are preleases\n    return 'prerelease'\n  };\n\n  var diff_1 = diff$1;\n\n  const SemVer$a = semver$4;\n  const major$1 = (a, loose) => new SemVer$a(a, loose).major;\n  var major_1 = major$1;\n\n  const SemVer$9 = semver$4;\n  const minor$1 = (a, loose) => new SemVer$9(a, loose).minor;\n  var minor_1 = minor$1;\n\n  const SemVer$8 = semver$4;\n  const patch$1 = (a, loose) => new SemVer$8(a, loose).patch;\n  var patch_1 = patch$1;\n\n  const parse$2 = parse_1;\n  const prerelease$1 = (version, options) => {\n    const parsed = parse$2(version, options);\n    return (parsed && parsed.prerelease.length) ? parsed.prerelease : null\n  };\n  var prerelease_1 = prerelease$1;\n\n  const SemVer$7 = semver$4;\n  const compare$b = (a, b, loose) =>\n    new SemVer$7(a, loose).compare(new SemVer$7(b, loose));\n\n  var compare_1 = compare$b;\n\n  const compare$a = compare_1;\n  const rcompare$1 = (a, b, loose) => compare$a(b, a, loose);\n  var rcompare_1 = rcompare$1;\n\n  const compare$9 = compare_1;\n  const compareLoose$1 = (a, b) => compare$9(a, b, true);\n  var compareLoose_1 = compareLoose$1;\n\n  const SemVer$6 = semver$4;\n  const compareBuild$3 = (a, b, loose) => {\n    const versionA = new SemVer$6(a, loose);\n    const versionB = new SemVer$6(b, loose);\n    return versionA.compare(versionB) || versionA.compareBuild(versionB)\n  };\n  var compareBuild_1 = compareBuild$3;\n\n  const compareBuild$2 = compareBuild_1;\n  const sort$1 = (list, loose) => list.sort((a, b) => compareBuild$2(a, b, loose));\n  var sort_1 = sort$1;\n\n  const compareBuild$1 = compareBuild_1;\n  const rsort$1 = (list, loose) => list.sort((a, b) => compareBuild$1(b, a, loose));\n  var rsort_1 = rsort$1;\n\n  const compare$8 = compare_1;\n  const gt$4 = (a, b, loose) => compare$8(a, b, loose) > 0;\n  var gt_1 = gt$4;\n\n  const compare$7 = compare_1;\n  const lt$3 = (a, b, loose) => compare$7(a, b, loose) < 0;\n  var lt_1 = lt$3;\n\n  const compare$6 = compare_1;\n  const eq$2 = (a, b, loose) => compare$6(a, b, loose) === 0;\n  var eq_1 = eq$2;\n\n  const compare$5 = compare_1;\n  const neq$2 = (a, b, loose) => compare$5(a, b, loose) !== 0;\n  var neq_1 = neq$2;\n\n  const compare$4 = compare_1;\n  const gte$3 = (a, b, loose) => compare$4(a, b, loose) >= 0;\n  var gte_1 = gte$3;\n\n  const compare$3 = compare_1;\n  const lte$3 = (a, b, loose) => compare$3(a, b, loose) <= 0;\n  var lte_1 = lte$3;\n\n  const eq$1 = eq_1;\n  const neq$1 = neq_1;\n  const gt$3 = gt_1;\n  const gte$2 = gte_1;\n  const lt$2 = lt_1;\n  const lte$2 = lte_1;\n\n  const cmp$1 = (a, op, b, loose) => {\n    switch (op) {\n      case '===':\n        if (typeof a === 'object') {\n          a = a.version;\n        }\n        if (typeof b === 'object') {\n          b = b.version;\n        }\n        return a === b\n\n      case '!==':\n        if (typeof a === 'object') {\n          a = a.version;\n        }\n        if (typeof b === 'object') {\n          b = b.version;\n        }\n        return a !== b\n\n      case '':\n      case '=':\n      case '==':\n        return eq$1(a, b, loose)\n\n      case '!=':\n        return neq$1(a, b, loose)\n\n      case '>':\n        return gt$3(a, b, loose)\n\n      case '>=':\n        return gte$2(a, b, loose)\n\n      case '<':\n        return lt$2(a, b, loose)\n\n      case '<=':\n        return lte$2(a, b, loose)\n\n      default:\n        throw new TypeError(`Invalid operator: ${op}`)\n    }\n  };\n  var cmp_1 = cmp$1;\n\n  const SemVer$5 = semver$4;\n  const parse$1 = parse_1;\n  const { safeRe: re, t } = reExports;\n\n  const coerce$1 = (version, options) => {\n    if (version instanceof SemVer$5) {\n      return version\n    }\n\n    if (typeof version === 'number') {\n      version = String(version);\n    }\n\n    if (typeof version !== 'string') {\n      return null\n    }\n\n    options = options || {};\n\n    let match = null;\n    if (!options.rtl) {\n      match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);\n    } else {\n      // Find the right-most coercible string that does not share\n      // a terminus with a more left-ward coercible string.\n      // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n      // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'\n      //\n      // Walk through the string checking with a /g regexp\n      // Manually set the index so as to pick up overlapping matches.\n      // Stop when we get a match that ends at the string end, since no\n      // coercible string can be more right-ward without the same terminus.\n      const coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];\n      let next;\n      while ((next = coerceRtlRegex.exec(version)) &&\n          (!match || match.index + match[0].length !== version.length)\n      ) {\n        if (!match ||\n              next.index + next[0].length !== match.index + match[0].length) {\n          match = next;\n        }\n        coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;\n      }\n      // leave it in a clean state\n      coerceRtlRegex.lastIndex = -1;\n    }\n\n    if (match === null) {\n      return null\n    }\n\n    const major = match[2];\n    const minor = match[3] || '0';\n    const patch = match[4] || '0';\n    const prerelease = options.includePrerelease && match[5] ? `-${match[5]}` : '';\n    const build = options.includePrerelease && match[6] ? `+${match[6]}` : '';\n\n    return parse$1(`${major}.${minor}.${patch}${prerelease}${build}`, options)\n  };\n  var coerce_1 = coerce$1;\n\n  class LRUCache {\n    constructor () {\n      this.max = 1000;\n      this.map = new Map();\n    }\n\n    get (key) {\n      const value = this.map.get(key);\n      if (value === undefined) {\n        return undefined\n      } else {\n        // Remove the key from the map and add it to the end\n        this.map.delete(key);\n        this.map.set(key, value);\n        return value\n      }\n    }\n\n    delete (key) {\n      return this.map.delete(key)\n    }\n\n    set (key, value) {\n      const deleted = this.delete(key);\n\n      if (!deleted && value !== undefined) {\n        // If cache is full, delete the least recently used item\n        if (this.map.size >= this.max) {\n          const firstKey = this.map.keys().next().value;\n          this.delete(firstKey);\n        }\n\n        this.map.set(key, value);\n      }\n\n      return this\n    }\n  }\n\n  var lrucache = LRUCache;\n\n  var range;\n  var hasRequiredRange;\n\n  function requireRange () {\n  \tif (hasRequiredRange) return range;\n  \thasRequiredRange = 1;\n  \tconst SPACE_CHARACTERS = /\\s+/g;\n\n  \t// hoisted class for cyclic dependency\n  \tclass Range {\n  \t  constructor (range, options) {\n  \t    options = parseOptions(options);\n\n  \t    if (range instanceof Range) {\n  \t      if (\n  \t        range.loose === !!options.loose &&\n  \t        range.includePrerelease === !!options.includePrerelease\n  \t      ) {\n  \t        return range\n  \t      } else {\n  \t        return new Range(range.raw, options)\n  \t      }\n  \t    }\n\n  \t    if (range instanceof Comparator) {\n  \t      // just put it in the set and return\n  \t      this.raw = range.value;\n  \t      this.set = [[range]];\n  \t      this.formatted = undefined;\n  \t      return this\n  \t    }\n\n  \t    this.options = options;\n  \t    this.loose = !!options.loose;\n  \t    this.includePrerelease = !!options.includePrerelease;\n\n  \t    // First reduce all whitespace as much as possible so we do not have to rely\n  \t    // on potentially slow regexes like \\s*. This is then stored and used for\n  \t    // future error messages as well.\n  \t    this.raw = range.trim().replace(SPACE_CHARACTERS, ' ');\n\n  \t    // First, split on ||\n  \t    this.set = this.raw\n  \t      .split('||')\n  \t      // map the range to a 2d array of comparators\n  \t      .map(r => this.parseRange(r.trim()))\n  \t      // throw out any comparator lists that are empty\n  \t      // this generally means that it was not a valid range, which is allowed\n  \t      // in loose mode, but will still throw if the WHOLE range is invalid.\n  \t      .filter(c => c.length);\n\n  \t    if (!this.set.length) {\n  \t      throw new TypeError(`Invalid SemVer Range: ${this.raw}`)\n  \t    }\n\n  \t    // if we have any that are not the null set, throw out null sets.\n  \t    if (this.set.length > 1) {\n  \t      // keep the first one, in case they're all null sets\n  \t      const first = this.set[0];\n  \t      this.set = this.set.filter(c => !isNullSet(c[0]));\n  \t      if (this.set.length === 0) {\n  \t        this.set = [first];\n  \t      } else if (this.set.length > 1) {\n  \t        // if we have any that are *, then the range is just *\n  \t        for (const c of this.set) {\n  \t          if (c.length === 1 && isAny(c[0])) {\n  \t            this.set = [c];\n  \t            break\n  \t          }\n  \t        }\n  \t      }\n  \t    }\n\n  \t    this.formatted = undefined;\n  \t  }\n\n  \t  get range () {\n  \t    if (this.formatted === undefined) {\n  \t      this.formatted = '';\n  \t      for (let i = 0; i < this.set.length; i++) {\n  \t        if (i > 0) {\n  \t          this.formatted += '||';\n  \t        }\n  \t        const comps = this.set[i];\n  \t        for (let k = 0; k < comps.length; k++) {\n  \t          if (k > 0) {\n  \t            this.formatted += ' ';\n  \t          }\n  \t          this.formatted += comps[k].toString().trim();\n  \t        }\n  \t      }\n  \t    }\n  \t    return this.formatted\n  \t  }\n\n  \t  format () {\n  \t    return this.range\n  \t  }\n\n  \t  toString () {\n  \t    return this.range\n  \t  }\n\n  \t  parseRange (range) {\n  \t    // memoize range parsing for performance.\n  \t    // this is a very hot path, and fully deterministic.\n  \t    const memoOpts =\n  \t      (this.options.includePrerelease && FLAG_INCLUDE_PRERELEASE) |\n  \t      (this.options.loose && FLAG_LOOSE);\n  \t    const memoKey = memoOpts + ':' + range;\n  \t    const cached = cache.get(memoKey);\n  \t    if (cached) {\n  \t      return cached\n  \t    }\n\n  \t    const loose = this.options.loose;\n  \t    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n  \t    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];\n  \t    range = range.replace(hr, hyphenReplace(this.options.includePrerelease));\n  \t    debug('hyphen replace', range);\n\n  \t    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n  \t    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);\n  \t    debug('comparator trim', range);\n\n  \t    // `~ 1.2.3` => `~1.2.3`\n  \t    range = range.replace(re[t.TILDETRIM], tildeTrimReplace);\n  \t    debug('tilde trim', range);\n\n  \t    // `^ 1.2.3` => `^1.2.3`\n  \t    range = range.replace(re[t.CARETTRIM], caretTrimReplace);\n  \t    debug('caret trim', range);\n\n  \t    // At this point, the range is completely trimmed and\n  \t    // ready to be split into comparators.\n\n  \t    let rangeList = range\n  \t      .split(' ')\n  \t      .map(comp => parseComparator(comp, this.options))\n  \t      .join(' ')\n  \t      .split(/\\s+/)\n  \t      // >=0.0.0 is equivalent to *\n  \t      .map(comp => replaceGTE0(comp, this.options));\n\n  \t    if (loose) {\n  \t      // in loose mode, throw out any that are not valid comparators\n  \t      rangeList = rangeList.filter(comp => {\n  \t        debug('loose invalid filter', comp, this.options);\n  \t        return !!comp.match(re[t.COMPARATORLOOSE])\n  \t      });\n  \t    }\n  \t    debug('range list', rangeList);\n\n  \t    // if any comparators are the null set, then replace with JUST null set\n  \t    // if more than one comparator, remove any * comparators\n  \t    // also, don't include the same comparator more than once\n  \t    const rangeMap = new Map();\n  \t    const comparators = rangeList.map(comp => new Comparator(comp, this.options));\n  \t    for (const comp of comparators) {\n  \t      if (isNullSet(comp)) {\n  \t        return [comp]\n  \t      }\n  \t      rangeMap.set(comp.value, comp);\n  \t    }\n  \t    if (rangeMap.size > 1 && rangeMap.has('')) {\n  \t      rangeMap.delete('');\n  \t    }\n\n  \t    const result = [...rangeMap.values()];\n  \t    cache.set(memoKey, result);\n  \t    return result\n  \t  }\n\n  \t  intersects (range, options) {\n  \t    if (!(range instanceof Range)) {\n  \t      throw new TypeError('a Range is required')\n  \t    }\n\n  \t    return this.set.some((thisComparators) => {\n  \t      return (\n  \t        isSatisfiable(thisComparators, options) &&\n  \t        range.set.some((rangeComparators) => {\n  \t          return (\n  \t            isSatisfiable(rangeComparators, options) &&\n  \t            thisComparators.every((thisComparator) => {\n  \t              return rangeComparators.every((rangeComparator) => {\n  \t                return thisComparator.intersects(rangeComparator, options)\n  \t              })\n  \t            })\n  \t          )\n  \t        })\n  \t      )\n  \t    })\n  \t  }\n\n  \t  // if ANY of the sets match ALL of its comparators, then pass\n  \t  test (version) {\n  \t    if (!version) {\n  \t      return false\n  \t    }\n\n  \t    if (typeof version === 'string') {\n  \t      try {\n  \t        version = new SemVer(version, this.options);\n  \t      } catch (er) {\n  \t        return false\n  \t      }\n  \t    }\n\n  \t    for (let i = 0; i < this.set.length; i++) {\n  \t      if (testSet(this.set[i], version, this.options)) {\n  \t        return true\n  \t      }\n  \t    }\n  \t    return false\n  \t  }\n  \t}\n\n  \trange = Range;\n\n  \tconst LRU = lrucache;\n  \tconst cache = new LRU();\n\n  \tconst parseOptions = parseOptions_1;\n  \tconst Comparator = requireComparator();\n  \tconst debug = debug_1;\n  \tconst SemVer = semver$4;\n  \tconst {\n  \t  safeRe: re,\n  \t  t,\n  \t  comparatorTrimReplace,\n  \t  tildeTrimReplace,\n  \t  caretTrimReplace,\n  \t} = reExports;\n  \tconst { FLAG_INCLUDE_PRERELEASE, FLAG_LOOSE } = constants$1;\n\n  \tconst isNullSet = c => c.value === '<0.0.0-0';\n  \tconst isAny = c => c.value === '';\n\n  \t// take a set of comparators and determine whether there\n  \t// exists a version which can satisfy it\n  \tconst isSatisfiable = (comparators, options) => {\n  \t  let result = true;\n  \t  const remainingComparators = comparators.slice();\n  \t  let testComparator = remainingComparators.pop();\n\n  \t  while (result && remainingComparators.length) {\n  \t    result = remainingComparators.every((otherComparator) => {\n  \t      return testComparator.intersects(otherComparator, options)\n  \t    });\n\n  \t    testComparator = remainingComparators.pop();\n  \t  }\n\n  \t  return result\n  \t};\n\n  \t// comprised of xranges, tildes, stars, and gtlt's at this point.\n  \t// already replaced the hyphen ranges\n  \t// turn into a set of JUST comparators.\n  \tconst parseComparator = (comp, options) => {\n  \t  debug('comp', comp, options);\n  \t  comp = replaceCarets(comp, options);\n  \t  debug('caret', comp);\n  \t  comp = replaceTildes(comp, options);\n  \t  debug('tildes', comp);\n  \t  comp = replaceXRanges(comp, options);\n  \t  debug('xrange', comp);\n  \t  comp = replaceStars(comp, options);\n  \t  debug('stars', comp);\n  \t  return comp\n  \t};\n\n  \tconst isX = id => !id || id.toLowerCase() === 'x' || id === '*';\n\n  \t// ~, ~> --> * (any, kinda silly)\n  \t// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0\n  \t// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0\n  \t// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0\n  \t// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0\n  \t// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0\n  \t// ~0.0.1 --> >=0.0.1 <0.1.0-0\n  \tconst replaceTildes = (comp, options) => {\n  \t  return comp\n  \t    .trim()\n  \t    .split(/\\s+/)\n  \t    .map((c) => replaceTilde(c, options))\n  \t    .join(' ')\n  \t};\n\n  \tconst replaceTilde = (comp, options) => {\n  \t  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];\n  \t  return comp.replace(r, (_, M, m, p, pr) => {\n  \t    debug('tilde', comp, _, M, m, p, pr);\n  \t    let ret;\n\n  \t    if (isX(M)) {\n  \t      ret = '';\n  \t    } else if (isX(m)) {\n  \t      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;\n  \t    } else if (isX(p)) {\n  \t      // ~1.2 == >=1.2.0 <1.3.0-0\n  \t      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;\n  \t    } else if (pr) {\n  \t      debug('replaceTilde pr', pr);\n  \t      ret = `>=${M}.${m}.${p}-${pr\n\t      } <${M}.${+m + 1}.0-0`;\n  \t    } else {\n  \t      // ~1.2.3 == >=1.2.3 <1.3.0-0\n  \t      ret = `>=${M}.${m}.${p\n\t      } <${M}.${+m + 1}.0-0`;\n  \t    }\n\n  \t    debug('tilde return', ret);\n  \t    return ret\n  \t  })\n  \t};\n\n  \t// ^ --> * (any, kinda silly)\n  \t// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0\n  \t// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0\n  \t// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0\n  \t// ^1.2.3 --> >=1.2.3 <2.0.0-0\n  \t// ^1.2.0 --> >=1.2.0 <2.0.0-0\n  \t// ^0.0.1 --> >=0.0.1 <0.0.2-0\n  \t// ^0.1.0 --> >=0.1.0 <0.2.0-0\n  \tconst replaceCarets = (comp, options) => {\n  \t  return comp\n  \t    .trim()\n  \t    .split(/\\s+/)\n  \t    .map((c) => replaceCaret(c, options))\n  \t    .join(' ')\n  \t};\n\n  \tconst replaceCaret = (comp, options) => {\n  \t  debug('caret', comp, options);\n  \t  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET];\n  \t  const z = options.includePrerelease ? '-0' : '';\n  \t  return comp.replace(r, (_, M, m, p, pr) => {\n  \t    debug('caret', comp, _, M, m, p, pr);\n  \t    let ret;\n\n  \t    if (isX(M)) {\n  \t      ret = '';\n  \t    } else if (isX(m)) {\n  \t      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;\n  \t    } else if (isX(p)) {\n  \t      if (M === '0') {\n  \t        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;\n  \t      } else {\n  \t        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;\n  \t      }\n  \t    } else if (pr) {\n  \t      debug('replaceCaret pr', pr);\n  \t      if (M === '0') {\n  \t        if (m === '0') {\n  \t          ret = `>=${M}.${m}.${p}-${pr\n\t          } <${M}.${m}.${+p + 1}-0`;\n  \t        } else {\n  \t          ret = `>=${M}.${m}.${p}-${pr\n\t          } <${M}.${+m + 1}.0-0`;\n  \t        }\n  \t      } else {\n  \t        ret = `>=${M}.${m}.${p}-${pr\n\t        } <${+M + 1}.0.0-0`;\n  \t      }\n  \t    } else {\n  \t      debug('no pr');\n  \t      if (M === '0') {\n  \t        if (m === '0') {\n  \t          ret = `>=${M}.${m}.${p\n\t          }${z} <${M}.${m}.${+p + 1}-0`;\n  \t        } else {\n  \t          ret = `>=${M}.${m}.${p\n\t          }${z} <${M}.${+m + 1}.0-0`;\n  \t        }\n  \t      } else {\n  \t        ret = `>=${M}.${m}.${p\n\t        } <${+M + 1}.0.0-0`;\n  \t      }\n  \t    }\n\n  \t    debug('caret return', ret);\n  \t    return ret\n  \t  })\n  \t};\n\n  \tconst replaceXRanges = (comp, options) => {\n  \t  debug('replaceXRanges', comp, options);\n  \t  return comp\n  \t    .split(/\\s+/)\n  \t    .map((c) => replaceXRange(c, options))\n  \t    .join(' ')\n  \t};\n\n  \tconst replaceXRange = (comp, options) => {\n  \t  comp = comp.trim();\n  \t  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];\n  \t  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {\n  \t    debug('xRange', comp, ret, gtlt, M, m, p, pr);\n  \t    const xM = isX(M);\n  \t    const xm = xM || isX(m);\n  \t    const xp = xm || isX(p);\n  \t    const anyX = xp;\n\n  \t    if (gtlt === '=' && anyX) {\n  \t      gtlt = '';\n  \t    }\n\n  \t    // if we're including prereleases in the match, then we need\n  \t    // to fix this to -0, the lowest possible prerelease value\n  \t    pr = options.includePrerelease ? '-0' : '';\n\n  \t    if (xM) {\n  \t      if (gtlt === '>' || gtlt === '<') {\n  \t        // nothing is allowed\n  \t        ret = '<0.0.0-0';\n  \t      } else {\n  \t        // nothing is forbidden\n  \t        ret = '*';\n  \t      }\n  \t    } else if (gtlt && anyX) {\n  \t      // we know patch is an x, because we have any x at all.\n  \t      // replace X with 0\n  \t      if (xm) {\n  \t        m = 0;\n  \t      }\n  \t      p = 0;\n\n  \t      if (gtlt === '>') {\n  \t        // >1 => >=2.0.0\n  \t        // >1.2 => >=1.3.0\n  \t        gtlt = '>=';\n  \t        if (xm) {\n  \t          M = +M + 1;\n  \t          m = 0;\n  \t          p = 0;\n  \t        } else {\n  \t          m = +m + 1;\n  \t          p = 0;\n  \t        }\n  \t      } else if (gtlt === '<=') {\n  \t        // <=0.7.x is actually <0.8.0, since any 0.7.x should\n  \t        // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n  \t        gtlt = '<';\n  \t        if (xm) {\n  \t          M = +M + 1;\n  \t        } else {\n  \t          m = +m + 1;\n  \t        }\n  \t      }\n\n  \t      if (gtlt === '<') {\n  \t        pr = '-0';\n  \t      }\n\n  \t      ret = `${gtlt + M}.${m}.${p}${pr}`;\n  \t    } else if (xm) {\n  \t      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;\n  \t    } else if (xp) {\n  \t      ret = `>=${M}.${m}.0${pr\n\t      } <${M}.${+m + 1}.0-0`;\n  \t    }\n\n  \t    debug('xRange return', ret);\n\n  \t    return ret\n  \t  })\n  \t};\n\n  \t// Because * is AND-ed with everything else in the comparator,\n  \t// and '' means \"any version\", just remove the *s entirely.\n  \tconst replaceStars = (comp, options) => {\n  \t  debug('replaceStars', comp, options);\n  \t  // Looseness is ignored here.  star is always as loose as it gets!\n  \t  return comp\n  \t    .trim()\n  \t    .replace(re[t.STAR], '')\n  \t};\n\n  \tconst replaceGTE0 = (comp, options) => {\n  \t  debug('replaceGTE0', comp, options);\n  \t  return comp\n  \t    .trim()\n  \t    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')\n  \t};\n\n  \t// This function is passed to string.replace(re[t.HYPHENRANGE])\n  \t// M, m, patch, prerelease, build\n  \t// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n  \t// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do\n  \t// 1.2 - 3.4 => >=1.2.0 <3.5.0-0\n  \t// TODO build?\n  \tconst hyphenReplace = incPr => ($0,\n  \t  from, fM, fm, fp, fpr, fb,\n  \t  to, tM, tm, tp, tpr) => {\n  \t  if (isX(fM)) {\n  \t    from = '';\n  \t  } else if (isX(fm)) {\n  \t    from = `>=${fM}.0.0${incPr ? '-0' : ''}`;\n  \t  } else if (isX(fp)) {\n  \t    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`;\n  \t  } else if (fpr) {\n  \t    from = `>=${from}`;\n  \t  } else {\n  \t    from = `>=${from}${incPr ? '-0' : ''}`;\n  \t  }\n\n  \t  if (isX(tM)) {\n  \t    to = '';\n  \t  } else if (isX(tm)) {\n  \t    to = `<${+tM + 1}.0.0-0`;\n  \t  } else if (isX(tp)) {\n  \t    to = `<${tM}.${+tm + 1}.0-0`;\n  \t  } else if (tpr) {\n  \t    to = `<=${tM}.${tm}.${tp}-${tpr}`;\n  \t  } else if (incPr) {\n  \t    to = `<${tM}.${tm}.${+tp + 1}-0`;\n  \t  } else {\n  \t    to = `<=${to}`;\n  \t  }\n\n  \t  return `${from} ${to}`.trim()\n  \t};\n\n  \tconst testSet = (set, version, options) => {\n  \t  for (let i = 0; i < set.length; i++) {\n  \t    if (!set[i].test(version)) {\n  \t      return false\n  \t    }\n  \t  }\n\n  \t  if (version.prerelease.length && !options.includePrerelease) {\n  \t    // Find the set of versions that are allowed to have prereleases\n  \t    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n  \t    // That should allow `1.2.3-pr.2` to pass.\n  \t    // However, `1.2.4-alpha.notready` should NOT be allowed,\n  \t    // even though it's within the range set by the comparators.\n  \t    for (let i = 0; i < set.length; i++) {\n  \t      debug(set[i].semver);\n  \t      if (set[i].semver === Comparator.ANY) {\n  \t        continue\n  \t      }\n\n  \t      if (set[i].semver.prerelease.length > 0) {\n  \t        const allowed = set[i].semver;\n  \t        if (allowed.major === version.major &&\n  \t            allowed.minor === version.minor &&\n  \t            allowed.patch === version.patch) {\n  \t          return true\n  \t        }\n  \t      }\n  \t    }\n\n  \t    // Version has a -pre, but it's not one of the ones we like.\n  \t    return false\n  \t  }\n\n  \t  return true\n  \t};\n  \treturn range;\n  }\n\n  var comparator;\n  var hasRequiredComparator;\n\n  function requireComparator () {\n  \tif (hasRequiredComparator) return comparator;\n  \thasRequiredComparator = 1;\n  \tconst ANY = Symbol('SemVer ANY');\n  \t// hoisted class for cyclic dependency\n  \tclass Comparator {\n  \t  static get ANY () {\n  \t    return ANY\n  \t  }\n\n  \t  constructor (comp, options) {\n  \t    options = parseOptions(options);\n\n  \t    if (comp instanceof Comparator) {\n  \t      if (comp.loose === !!options.loose) {\n  \t        return comp\n  \t      } else {\n  \t        comp = comp.value;\n  \t      }\n  \t    }\n\n  \t    comp = comp.trim().split(/\\s+/).join(' ');\n  \t    debug('comparator', comp, options);\n  \t    this.options = options;\n  \t    this.loose = !!options.loose;\n  \t    this.parse(comp);\n\n  \t    if (this.semver === ANY) {\n  \t      this.value = '';\n  \t    } else {\n  \t      this.value = this.operator + this.semver.version;\n  \t    }\n\n  \t    debug('comp', this);\n  \t  }\n\n  \t  parse (comp) {\n  \t    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];\n  \t    const m = comp.match(r);\n\n  \t    if (!m) {\n  \t      throw new TypeError(`Invalid comparator: ${comp}`)\n  \t    }\n\n  \t    this.operator = m[1] !== undefined ? m[1] : '';\n  \t    if (this.operator === '=') {\n  \t      this.operator = '';\n  \t    }\n\n  \t    // if it literally is just '>' or '' then allow anything.\n  \t    if (!m[2]) {\n  \t      this.semver = ANY;\n  \t    } else {\n  \t      this.semver = new SemVer(m[2], this.options.loose);\n  \t    }\n  \t  }\n\n  \t  toString () {\n  \t    return this.value\n  \t  }\n\n  \t  test (version) {\n  \t    debug('Comparator.test', version, this.options.loose);\n\n  \t    if (this.semver === ANY || version === ANY) {\n  \t      return true\n  \t    }\n\n  \t    if (typeof version === 'string') {\n  \t      try {\n  \t        version = new SemVer(version, this.options);\n  \t      } catch (er) {\n  \t        return false\n  \t      }\n  \t    }\n\n  \t    return cmp(version, this.operator, this.semver, this.options)\n  \t  }\n\n  \t  intersects (comp, options) {\n  \t    if (!(comp instanceof Comparator)) {\n  \t      throw new TypeError('a Comparator is required')\n  \t    }\n\n  \t    if (this.operator === '') {\n  \t      if (this.value === '') {\n  \t        return true\n  \t      }\n  \t      return new Range(comp.value, options).test(this.value)\n  \t    } else if (comp.operator === '') {\n  \t      if (comp.value === '') {\n  \t        return true\n  \t      }\n  \t      return new Range(this.value, options).test(comp.semver)\n  \t    }\n\n  \t    options = parseOptions(options);\n\n  \t    // Special cases where nothing can possibly be lower\n  \t    if (options.includePrerelease &&\n  \t      (this.value === '<0.0.0-0' || comp.value === '<0.0.0-0')) {\n  \t      return false\n  \t    }\n  \t    if (!options.includePrerelease &&\n  \t      (this.value.startsWith('<0.0.0') || comp.value.startsWith('<0.0.0'))) {\n  \t      return false\n  \t    }\n\n  \t    // Same direction increasing (> or >=)\n  \t    if (this.operator.startsWith('>') && comp.operator.startsWith('>')) {\n  \t      return true\n  \t    }\n  \t    // Same direction decreasing (< or <=)\n  \t    if (this.operator.startsWith('<') && comp.operator.startsWith('<')) {\n  \t      return true\n  \t    }\n  \t    // same SemVer and both sides are inclusive (<= or >=)\n  \t    if (\n  \t      (this.semver.version === comp.semver.version) &&\n  \t      this.operator.includes('=') && comp.operator.includes('=')) {\n  \t      return true\n  \t    }\n  \t    // opposite directions less than\n  \t    if (cmp(this.semver, '<', comp.semver, options) &&\n  \t      this.operator.startsWith('>') && comp.operator.startsWith('<')) {\n  \t      return true\n  \t    }\n  \t    // opposite directions greater than\n  \t    if (cmp(this.semver, '>', comp.semver, options) &&\n  \t      this.operator.startsWith('<') && comp.operator.startsWith('>')) {\n  \t      return true\n  \t    }\n  \t    return false\n  \t  }\n  \t}\n\n  \tcomparator = Comparator;\n\n  \tconst parseOptions = parseOptions_1;\n  \tconst { safeRe: re, t } = reExports;\n  \tconst cmp = cmp_1;\n  \tconst debug = debug_1;\n  \tconst SemVer = semver$4;\n  \tconst Range = requireRange();\n  \treturn comparator;\n  }\n\n  const Range$9 = requireRange();\n  const satisfies$4 = (version, range, options) => {\n    try {\n      range = new Range$9(range, options);\n    } catch (er) {\n      return false\n    }\n    return range.test(version)\n  };\n  var satisfies_1 = satisfies$4;\n\n  const Range$8 = requireRange();\n\n  // Mostly just for testing and legacy API reasons\n  const toComparators$1 = (range, options) =>\n    new Range$8(range, options).set\n      .map(comp => comp.map(c => c.value).join(' ').trim().split(' '));\n\n  var toComparators_1 = toComparators$1;\n\n  const SemVer$4 = semver$4;\n  const Range$7 = requireRange();\n\n  const maxSatisfying$1 = (versions, range, options) => {\n    let max = null;\n    let maxSV = null;\n    let rangeObj = null;\n    try {\n      rangeObj = new Range$7(range, options);\n    } catch (er) {\n      return null\n    }\n    versions.forEach((v) => {\n      if (rangeObj.test(v)) {\n        // satisfies(v, range, options)\n        if (!max || maxSV.compare(v) === -1) {\n          // compare(max, v, true)\n          max = v;\n          maxSV = new SemVer$4(max, options);\n        }\n      }\n    });\n    return max\n  };\n  var maxSatisfying_1 = maxSatisfying$1;\n\n  const SemVer$3 = semver$4;\n  const Range$6 = requireRange();\n  const minSatisfying$1 = (versions, range, options) => {\n    let min = null;\n    let minSV = null;\n    let rangeObj = null;\n    try {\n      rangeObj = new Range$6(range, options);\n    } catch (er) {\n      return null\n    }\n    versions.forEach((v) => {\n      if (rangeObj.test(v)) {\n        // satisfies(v, range, options)\n        if (!min || minSV.compare(v) === 1) {\n          // compare(min, v, true)\n          min = v;\n          minSV = new SemVer$3(min, options);\n        }\n      }\n    });\n    return min\n  };\n  var minSatisfying_1 = minSatisfying$1;\n\n  const SemVer$2 = semver$4;\n  const Range$5 = requireRange();\n  const gt$2 = gt_1;\n\n  const minVersion$1 = (range, loose) => {\n    range = new Range$5(range, loose);\n\n    let minver = new SemVer$2('0.0.0');\n    if (range.test(minver)) {\n      return minver\n    }\n\n    minver = new SemVer$2('0.0.0-0');\n    if (range.test(minver)) {\n      return minver\n    }\n\n    minver = null;\n    for (let i = 0; i < range.set.length; ++i) {\n      const comparators = range.set[i];\n\n      let setMin = null;\n      comparators.forEach((comparator) => {\n        // Clone to avoid manipulating the comparator's semver object.\n        const compver = new SemVer$2(comparator.semver.version);\n        switch (comparator.operator) {\n          case '>':\n            if (compver.prerelease.length === 0) {\n              compver.patch++;\n            } else {\n              compver.prerelease.push(0);\n            }\n            compver.raw = compver.format();\n            /* fallthrough */\n          case '':\n          case '>=':\n            if (!setMin || gt$2(compver, setMin)) {\n              setMin = compver;\n            }\n            break\n          case '<':\n          case '<=':\n            /* Ignore maximum versions */\n            break\n          /* istanbul ignore next */\n          default:\n            throw new Error(`Unexpected operation: ${comparator.operator}`)\n        }\n      });\n      if (setMin && (!minver || gt$2(minver, setMin))) {\n        minver = setMin;\n      }\n    }\n\n    if (minver && range.test(minver)) {\n      return minver\n    }\n\n    return null\n  };\n  var minVersion_1 = minVersion$1;\n\n  const Range$4 = requireRange();\n  const validRange$1 = (range, options) => {\n    try {\n      // Return '*' instead of '' so that truthiness works.\n      // This will throw if it's invalid anyway\n      return new Range$4(range, options).range || '*'\n    } catch (er) {\n      return null\n    }\n  };\n  var valid$1 = validRange$1;\n\n  const SemVer$1 = semver$4;\n  const Comparator$2 = requireComparator();\n  const { ANY: ANY$1 } = Comparator$2;\n  const Range$3 = requireRange();\n  const satisfies$3 = satisfies_1;\n  const gt$1 = gt_1;\n  const lt$1 = lt_1;\n  const lte$1 = lte_1;\n  const gte$1 = gte_1;\n\n  const outside$3 = (version, range, hilo, options) => {\n    version = new SemVer$1(version, options);\n    range = new Range$3(range, options);\n\n    let gtfn, ltefn, ltfn, comp, ecomp;\n    switch (hilo) {\n      case '>':\n        gtfn = gt$1;\n        ltefn = lte$1;\n        ltfn = lt$1;\n        comp = '>';\n        ecomp = '>=';\n        break\n      case '<':\n        gtfn = lt$1;\n        ltefn = gte$1;\n        ltfn = gt$1;\n        comp = '<';\n        ecomp = '<=';\n        break\n      default:\n        throw new TypeError('Must provide a hilo val of \"<\" or \">\"')\n    }\n\n    // If it satisfies the range it is not outside\n    if (satisfies$3(version, range, options)) {\n      return false\n    }\n\n    // From now on, variable terms are as if we're in \"gtr\" mode.\n    // but note that everything is flipped for the \"ltr\" function.\n\n    for (let i = 0; i < range.set.length; ++i) {\n      const comparators = range.set[i];\n\n      let high = null;\n      let low = null;\n\n      comparators.forEach((comparator) => {\n        if (comparator.semver === ANY$1) {\n          comparator = new Comparator$2('>=0.0.0');\n        }\n        high = high || comparator;\n        low = low || comparator;\n        if (gtfn(comparator.semver, high.semver, options)) {\n          high = comparator;\n        } else if (ltfn(comparator.semver, low.semver, options)) {\n          low = comparator;\n        }\n      });\n\n      // If the edge version comparator has a operator then our version\n      // isn't outside it\n      if (high.operator === comp || high.operator === ecomp) {\n        return false\n      }\n\n      // If the lowest version comparator has an operator and our version\n      // is less than it then it isn't higher than the range\n      if ((!low.operator || low.operator === comp) &&\n          ltefn(version, low.semver)) {\n        return false\n      } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n        return false\n      }\n    }\n    return true\n  };\n\n  var outside_1 = outside$3;\n\n  // Determine if version is greater than all the versions possible in the range.\n  const outside$2 = outside_1;\n  const gtr$1 = (version, range, options) => outside$2(version, range, '>', options);\n  var gtr_1 = gtr$1;\n\n  const outside$1 = outside_1;\n  // Determine if version is less than all the versions possible in the range\n  const ltr$1 = (version, range, options) => outside$1(version, range, '<', options);\n  var ltr_1 = ltr$1;\n\n  const Range$2 = requireRange();\n  const intersects$1 = (r1, r2, options) => {\n    r1 = new Range$2(r1, options);\n    r2 = new Range$2(r2, options);\n    return r1.intersects(r2, options)\n  };\n  var intersects_1 = intersects$1;\n\n  // given a set of versions and a range, create a \"simplified\" range\n  // that includes the same versions that the original range does\n  // If the original range is shorter than the simplified one, return that.\n  const satisfies$2 = satisfies_1;\n  const compare$2 = compare_1;\n  var simplify = (versions, range, options) => {\n    const set = [];\n    let first = null;\n    let prev = null;\n    const v = versions.sort((a, b) => compare$2(a, b, options));\n    for (const version of v) {\n      const included = satisfies$2(version, range, options);\n      if (included) {\n        prev = version;\n        if (!first) {\n          first = version;\n        }\n      } else {\n        if (prev) {\n          set.push([first, prev]);\n        }\n        prev = null;\n        first = null;\n      }\n    }\n    if (first) {\n      set.push([first, null]);\n    }\n\n    const ranges = [];\n    for (const [min, max] of set) {\n      if (min === max) {\n        ranges.push(min);\n      } else if (!max && min === v[0]) {\n        ranges.push('*');\n      } else if (!max) {\n        ranges.push(`>=${min}`);\n      } else if (min === v[0]) {\n        ranges.push(`<=${max}`);\n      } else {\n        ranges.push(`${min} - ${max}`);\n      }\n    }\n    const simplified = ranges.join(' || ');\n    const original = typeof range.raw === 'string' ? range.raw : String(range);\n    return simplified.length < original.length ? simplified : range\n  };\n\n  const Range$1 = requireRange();\n  const Comparator$1 = requireComparator();\n  const { ANY } = Comparator$1;\n  const satisfies$1 = satisfies_1;\n  const compare$1 = compare_1;\n\n  // Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:\n  // - Every simple range `r1, r2, ...` is a null set, OR\n  // - Every simple range `r1, r2, ...` which is not a null set is a subset of\n  //   some `R1, R2, ...`\n  //\n  // Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:\n  // - If c is only the ANY comparator\n  //   - If C is only the ANY comparator, return true\n  //   - Else if in prerelease mode, return false\n  //   - else replace c with `[>=0.0.0]`\n  // - If C is only the ANY comparator\n  //   - if in prerelease mode, return true\n  //   - else replace C with `[>=0.0.0]`\n  // - Let EQ be the set of = comparators in c\n  // - If EQ is more than one, return true (null set)\n  // - Let GT be the highest > or >= comparator in c\n  // - Let LT be the lowest < or <= comparator in c\n  // - If GT and LT, and GT.semver > LT.semver, return true (null set)\n  // - If any C is a = range, and GT or LT are set, return false\n  // - If EQ\n  //   - If GT, and EQ does not satisfy GT, return true (null set)\n  //   - If LT, and EQ does not satisfy LT, return true (null set)\n  //   - If EQ satisfies every C, return true\n  //   - Else return false\n  // - If GT\n  //   - If GT.semver is lower than any > or >= comp in C, return false\n  //   - If GT is >=, and GT.semver does not satisfy every C, return false\n  //   - If GT.semver has a prerelease, and not in prerelease mode\n  //     - If no C has a prerelease and the GT.semver tuple, return false\n  // - If LT\n  //   - If LT.semver is greater than any < or <= comp in C, return false\n  //   - If LT is <=, and LT.semver does not satisfy every C, return false\n  //   - If GT.semver has a prerelease, and not in prerelease mode\n  //     - If no C has a prerelease and the LT.semver tuple, return false\n  // - Else return true\n\n  const subset$1 = (sub, dom, options = {}) => {\n    if (sub === dom) {\n      return true\n    }\n\n    sub = new Range$1(sub, options);\n    dom = new Range$1(dom, options);\n    let sawNonNull = false;\n\n    OUTER: for (const simpleSub of sub.set) {\n      for (const simpleDom of dom.set) {\n        const isSub = simpleSubset(simpleSub, simpleDom, options);\n        sawNonNull = sawNonNull || isSub !== null;\n        if (isSub) {\n          continue OUTER\n        }\n      }\n      // the null set is a subset of everything, but null simple ranges in\n      // a complex range should be ignored.  so if we saw a non-null range,\n      // then we know this isn't a subset, but if EVERY simple range was null,\n      // then it is a subset.\n      if (sawNonNull) {\n        return false\n      }\n    }\n    return true\n  };\n\n  const minimumVersionWithPreRelease = [new Comparator$1('>=0.0.0-0')];\n  const minimumVersion = [new Comparator$1('>=0.0.0')];\n\n  const simpleSubset = (sub, dom, options) => {\n    if (sub === dom) {\n      return true\n    }\n\n    if (sub.length === 1 && sub[0].semver === ANY) {\n      if (dom.length === 1 && dom[0].semver === ANY) {\n        return true\n      } else if (options.includePrerelease) {\n        sub = minimumVersionWithPreRelease;\n      } else {\n        sub = minimumVersion;\n      }\n    }\n\n    if (dom.length === 1 && dom[0].semver === ANY) {\n      if (options.includePrerelease) {\n        return true\n      } else {\n        dom = minimumVersion;\n      }\n    }\n\n    const eqSet = new Set();\n    let gt, lt;\n    for (const c of sub) {\n      if (c.operator === '>' || c.operator === '>=') {\n        gt = higherGT(gt, c, options);\n      } else if (c.operator === '<' || c.operator === '<=') {\n        lt = lowerLT(lt, c, options);\n      } else {\n        eqSet.add(c.semver);\n      }\n    }\n\n    if (eqSet.size > 1) {\n      return null\n    }\n\n    let gtltComp;\n    if (gt && lt) {\n      gtltComp = compare$1(gt.semver, lt.semver, options);\n      if (gtltComp > 0) {\n        return null\n      } else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<=')) {\n        return null\n      }\n    }\n\n    // will iterate one or zero times\n    for (const eq of eqSet) {\n      if (gt && !satisfies$1(eq, String(gt), options)) {\n        return null\n      }\n\n      if (lt && !satisfies$1(eq, String(lt), options)) {\n        return null\n      }\n\n      for (const c of dom) {\n        if (!satisfies$1(eq, String(c), options)) {\n          return false\n        }\n      }\n\n      return true\n    }\n\n    let higher, lower;\n    let hasDomLT, hasDomGT;\n    // if the subset has a prerelease, we need a comparator in the superset\n    // with the same tuple and a prerelease, or it's not a subset\n    let needDomLTPre = lt &&\n      !options.includePrerelease &&\n      lt.semver.prerelease.length ? lt.semver : false;\n    let needDomGTPre = gt &&\n      !options.includePrerelease &&\n      gt.semver.prerelease.length ? gt.semver : false;\n    // exception: <1.2.3-0 is the same as <1.2.3\n    if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&\n        lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {\n      needDomLTPre = false;\n    }\n\n    for (const c of dom) {\n      hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>=';\n      hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<=';\n      if (gt) {\n        if (needDomGTPre) {\n          if (c.semver.prerelease && c.semver.prerelease.length &&\n              c.semver.major === needDomGTPre.major &&\n              c.semver.minor === needDomGTPre.minor &&\n              c.semver.patch === needDomGTPre.patch) {\n            needDomGTPre = false;\n          }\n        }\n        if (c.operator === '>' || c.operator === '>=') {\n          higher = higherGT(gt, c, options);\n          if (higher === c && higher !== gt) {\n            return false\n          }\n        } else if (gt.operator === '>=' && !satisfies$1(gt.semver, String(c), options)) {\n          return false\n        }\n      }\n      if (lt) {\n        if (needDomLTPre) {\n          if (c.semver.prerelease && c.semver.prerelease.length &&\n              c.semver.major === needDomLTPre.major &&\n              c.semver.minor === needDomLTPre.minor &&\n              c.semver.patch === needDomLTPre.patch) {\n            needDomLTPre = false;\n          }\n        }\n        if (c.operator === '<' || c.operator === '<=') {\n          lower = lowerLT(lt, c, options);\n          if (lower === c && lower !== lt) {\n            return false\n          }\n        } else if (lt.operator === '<=' && !satisfies$1(lt.semver, String(c), options)) {\n          return false\n        }\n      }\n      if (!c.operator && (lt || gt) && gtltComp !== 0) {\n        return false\n      }\n    }\n\n    // if there was a < or >, and nothing in the dom, then must be false\n    // UNLESS it was limited by another range in the other direction.\n    // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0\n    if (gt && hasDomLT && !lt && gtltComp !== 0) {\n      return false\n    }\n\n    if (lt && hasDomGT && !gt && gtltComp !== 0) {\n      return false\n    }\n\n    // we needed a prerelease range in a specific tuple, but didn't get one\n    // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,\n    // because it includes prereleases in the 1.2.3 tuple\n    if (needDomGTPre || needDomLTPre) {\n      return false\n    }\n\n    return true\n  };\n\n  // >=1.2.3 is lower than >1.2.3\n  const higherGT = (a, b, options) => {\n    if (!a) {\n      return b\n    }\n    const comp = compare$1(a.semver, b.semver, options);\n    return comp > 0 ? a\n      : comp < 0 ? b\n      : b.operator === '>' && a.operator === '>=' ? b\n      : a\n  };\n\n  // <=1.2.3 is higher than <1.2.3\n  const lowerLT = (a, b, options) => {\n    if (!a) {\n      return b\n    }\n    const comp = compare$1(a.semver, b.semver, options);\n    return comp < 0 ? a\n      : comp > 0 ? b\n      : b.operator === '<' && a.operator === '<=' ? b\n      : a\n  };\n\n  var subset_1 = subset$1;\n\n  // just pre-load all the stuff that index.js lazily exports\n  const internalRe = reExports;\n  const constants = constants$1;\n  const SemVer = semver$4;\n  const identifiers = identifiers$1;\n  const parse = parse_1;\n  const valid = valid_1;\n  const clean = clean_1;\n  const inc = inc_1;\n  const diff = diff_1;\n  const major = major_1;\n  const minor = minor_1;\n  const patch = patch_1;\n  const prerelease = prerelease_1;\n  const compare = compare_1;\n  const rcompare = rcompare_1;\n  const compareLoose = compareLoose_1;\n  const compareBuild = compareBuild_1;\n  const sort = sort_1;\n  const rsort = rsort_1;\n  const gt = gt_1;\n  const lt = lt_1;\n  const eq = eq_1;\n  const neq = neq_1;\n  const gte = gte_1;\n  const lte = lte_1;\n  const cmp = cmp_1;\n  const coerce = coerce_1;\n  const Comparator = requireComparator();\n  const Range = requireRange();\n  const satisfies = satisfies_1;\n  const toComparators = toComparators_1;\n  const maxSatisfying = maxSatisfying_1;\n  const minSatisfying = minSatisfying_1;\n  const minVersion = minVersion_1;\n  const validRange = valid$1;\n  const outside = outside_1;\n  const gtr = gtr_1;\n  const ltr = ltr_1;\n  const intersects = intersects_1;\n  const simplifyRange = simplify;\n  const subset = subset_1;\n  var semver$3 = {\n    parse,\n    valid,\n    clean,\n    inc,\n    diff,\n    major,\n    minor,\n    patch,\n    prerelease,\n    compare,\n    rcompare,\n    compareLoose,\n    compareBuild,\n    sort,\n    rsort,\n    gt,\n    lt,\n    eq,\n    neq,\n    gte,\n    lte,\n    cmp,\n    coerce,\n    Comparator,\n    Range,\n    satisfies,\n    toComparators,\n    maxSatisfying,\n    minSatisfying,\n    minVersion,\n    validRange,\n    outside,\n    gtr,\n    ltr,\n    intersects,\n    simplifyRange,\n    subset,\n    SemVer,\n    re: internalRe.re,\n    src: internalRe.src,\n    tokens: internalRe.t,\n    SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION,\n    RELEASE_TYPES: constants.RELEASE_TYPES,\n    compareIdentifiers: identifiers.compareIdentifiers,\n    rcompareIdentifiers: identifiers.rcompareIdentifiers,\n  };\n\n  const semver$2 = semver$3;\n\n  var asymmetricKeyDetailsSupported = semver$2.satisfies(_polyfillNode_buffer.browser$1.version, '>=15.7.0');\n\n  const semver$1 = semver$3;\n\n  var rsaPssKeyDetailsSupported = semver$1.satisfies(_polyfillNode_buffer.browser$1.version, '>=16.9.0');\n\n  const ASYMMETRIC_KEY_DETAILS_SUPPORTED = asymmetricKeyDetailsSupported;\n  const RSA_PSS_KEY_DETAILS_SUPPORTED = rsaPssKeyDetailsSupported;\n\n  const allowedAlgorithmsForKeys = {\n    'ec': ['ES256', 'ES384', 'ES512'],\n    'rsa': ['RS256', 'PS256', 'RS384', 'PS384', 'RS512', 'PS512'],\n    'rsa-pss': ['PS256', 'PS384', 'PS512']\n  };\n\n  const allowedCurves = {\n    ES256: 'prime256v1',\n    ES384: 'secp384r1',\n    ES512: 'secp521r1',\n  };\n\n  var validateAsymmetricKey$2 = function(algorithm, key) {\n    if (!algorithm || !key) return;\n\n    const keyType = key.asymmetricKeyType;\n    if (!keyType) return;\n\n    const allowedAlgorithms = allowedAlgorithmsForKeys[keyType];\n\n    if (!allowedAlgorithms) {\n      throw new Error(`Unknown key type \"${keyType}\".`);\n    }\n\n    if (!allowedAlgorithms.includes(algorithm)) {\n      throw new Error(`\"alg\" parameter for \"${keyType}\" key type must be one of: ${allowedAlgorithms.join(', ')}.`)\n    }\n\n    /*\n     * Ignore the next block from test coverage because it gets executed\n     * conditionally depending on the Node version. Not ignoring it would\n     * prevent us from reaching the target % of coverage for versions of\n     * Node under 15.7.0.\n     */\n    /* istanbul ignore next */\n    if (ASYMMETRIC_KEY_DETAILS_SUPPORTED) {\n      switch (keyType) {\n      case 'ec':\n        const keyCurve = key.asymmetricKeyDetails.namedCurve;\n        const allowedCurve = allowedCurves[algorithm];\n\n        if (keyCurve !== allowedCurve) {\n          throw new Error(`\"alg\" parameter \"${algorithm}\" requires curve \"${allowedCurve}\".`);\n        }\n        break;\n\n      case 'rsa-pss':\n        if (RSA_PSS_KEY_DETAILS_SUPPORTED) {\n          const length = parseInt(algorithm.slice(-3), 10);\n          const { hashAlgorithm, mgf1HashAlgorithm, saltLength } = key.asymmetricKeyDetails;\n\n          if (hashAlgorithm !== `sha${length}` || mgf1HashAlgorithm !== hashAlgorithm) {\n            throw new Error(`Invalid key for this operation, its RSA-PSS parameters do not meet the requirements of \"alg\" ${algorithm}.`);\n          }\n\n          if (saltLength !== undefined && saltLength > length >> 3) {\n            throw new Error(`Invalid key for this operation, its RSA-PSS parameter saltLength does not meet the requirements of \"alg\" ${algorithm}.`)\n          }\n        }\n        break;\n      }\n    }\n  };\n\n  var semver = semver$3;\n\n  var psSupported = semver.satisfies(_polyfillNode_buffer.browser$1.version, '^6.12.0 || >=8.0.0');\n\n  const JsonWebTokenError = JsonWebTokenError_1;\n  const NotBeforeError = NotBeforeError_1;\n  const TokenExpiredError = TokenExpiredError_1;\n  const decode = decode$1;\n  const timespan$1 = timespan$2;\n  const validateAsymmetricKey$1 = validateAsymmetricKey$2;\n  const PS_SUPPORTED$1 = psSupported;\n  const jws$1 = jws$3;\n  const {KeyObject: KeyObject$1, createSecretKey: createSecretKey$1, createPublicKey} = require$$11;\n\n  const PUB_KEY_ALGS = ['RS256', 'RS384', 'RS512'];\n  const EC_KEY_ALGS = ['ES256', 'ES384', 'ES512'];\n  const RSA_KEY_ALGS = ['RS256', 'RS384', 'RS512'];\n  const HS_ALGS = ['HS256', 'HS384', 'HS512'];\n\n  if (PS_SUPPORTED$1) {\n    PUB_KEY_ALGS.splice(PUB_KEY_ALGS.length, 0, 'PS256', 'PS384', 'PS512');\n    RSA_KEY_ALGS.splice(RSA_KEY_ALGS.length, 0, 'PS256', 'PS384', 'PS512');\n  }\n\n  var verify = function (jwtString, secretOrPublicKey, options, callback) {\n    if ((typeof options === 'function') && !callback) {\n      callback = options;\n      options = {};\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    //clone this object since we are going to mutate it.\n    options = Object.assign({}, options);\n\n    let done;\n\n    if (callback) {\n      done = callback;\n    } else {\n      done = function(err, data) {\n        if (err) throw err;\n        return data;\n      };\n    }\n\n    if (options.clockTimestamp && typeof options.clockTimestamp !== 'number') {\n      return done(new JsonWebTokenError('clockTimestamp must be a number'));\n    }\n\n    if (options.nonce !== undefined && (typeof options.nonce !== 'string' || options.nonce.trim() === '')) {\n      return done(new JsonWebTokenError('nonce must be a non-empty string'));\n    }\n\n    if (options.allowInvalidAsymmetricKeyTypes !== undefined && typeof options.allowInvalidAsymmetricKeyTypes !== 'boolean') {\n      return done(new JsonWebTokenError('allowInvalidAsymmetricKeyTypes must be a boolean'));\n    }\n\n    const clockTimestamp = options.clockTimestamp || Math.floor(Date.now() / 1000);\n\n    if (!jwtString){\n      return done(new JsonWebTokenError('jwt must be provided'));\n    }\n\n    if (typeof jwtString !== 'string') {\n      return done(new JsonWebTokenError('jwt must be a string'));\n    }\n\n    const parts = jwtString.split('.');\n\n    if (parts.length !== 3){\n      return done(new JsonWebTokenError('jwt malformed'));\n    }\n\n    let decodedToken;\n\n    try {\n      decodedToken = decode(jwtString, { complete: true });\n    } catch(err) {\n      return done(err);\n    }\n\n    if (!decodedToken) {\n      return done(new JsonWebTokenError('invalid token'));\n    }\n\n    const header = decodedToken.header;\n    let getSecret;\n\n    if(typeof secretOrPublicKey === 'function') {\n      if(!callback) {\n        return done(new JsonWebTokenError('verify must be called asynchronous if secret or public key is provided as a callback'));\n      }\n\n      getSecret = secretOrPublicKey;\n    }\n    else {\n      getSecret = function(header, secretCallback) {\n        return secretCallback(null, secretOrPublicKey);\n      };\n    }\n\n    return getSecret(header, function(err, secretOrPublicKey) {\n      if(err) {\n        return done(new JsonWebTokenError('error in secret or public key callback: ' + err.message));\n      }\n\n      const hasSignature = parts[2].trim() !== '';\n\n      if (!hasSignature && secretOrPublicKey){\n        return done(new JsonWebTokenError('jwt signature is required'));\n      }\n\n      if (hasSignature && !secretOrPublicKey) {\n        return done(new JsonWebTokenError('secret or public key must be provided'));\n      }\n\n      if (!hasSignature && !options.algorithms) {\n        return done(new JsonWebTokenError('please specify \"none\" in \"algorithms\" to verify unsigned tokens'));\n      }\n\n      if (secretOrPublicKey != null && !(secretOrPublicKey instanceof KeyObject$1)) {\n        try {\n          secretOrPublicKey = createPublicKey(secretOrPublicKey);\n        } catch (_) {\n          try {\n            secretOrPublicKey = createSecretKey$1(typeof secretOrPublicKey === 'string' ? _polyfillNode_buffer.Buffer.from(secretOrPublicKey) : secretOrPublicKey);\n          } catch (_) {\n            return done(new JsonWebTokenError('secretOrPublicKey is not valid key material'))\n          }\n        }\n      }\n\n      if (!options.algorithms) {\n        if (secretOrPublicKey.type === 'secret') {\n          options.algorithms = HS_ALGS;\n        } else if (['rsa', 'rsa-pss'].includes(secretOrPublicKey.asymmetricKeyType)) {\n          options.algorithms = RSA_KEY_ALGS;\n        } else if (secretOrPublicKey.asymmetricKeyType === 'ec') {\n          options.algorithms = EC_KEY_ALGS;\n        } else {\n          options.algorithms = PUB_KEY_ALGS;\n        }\n      }\n\n      if (options.algorithms.indexOf(decodedToken.header.alg) === -1) {\n        return done(new JsonWebTokenError('invalid algorithm'));\n      }\n\n      if (header.alg.startsWith('HS') && secretOrPublicKey.type !== 'secret') {\n        return done(new JsonWebTokenError((`secretOrPublicKey must be a symmetric key when using ${header.alg}`)))\n      } else if (/^(?:RS|PS|ES)/.test(header.alg) && secretOrPublicKey.type !== 'public') {\n        return done(new JsonWebTokenError((`secretOrPublicKey must be an asymmetric key when using ${header.alg}`)))\n      }\n\n      if (!options.allowInvalidAsymmetricKeyTypes) {\n        try {\n          validateAsymmetricKey$1(header.alg, secretOrPublicKey);\n        } catch (e) {\n          return done(e);\n        }\n      }\n\n      let valid;\n\n      try {\n        valid = jws$1.verify(jwtString, decodedToken.header.alg, secretOrPublicKey);\n      } catch (e) {\n        return done(e);\n      }\n\n      if (!valid) {\n        return done(new JsonWebTokenError('invalid signature'));\n      }\n\n      const payload = decodedToken.payload;\n\n      if (typeof payload.nbf !== 'undefined' && !options.ignoreNotBefore) {\n        if (typeof payload.nbf !== 'number') {\n          return done(new JsonWebTokenError('invalid nbf value'));\n        }\n        if (payload.nbf > clockTimestamp + (options.clockTolerance || 0)) {\n          return done(new NotBeforeError('jwt not active', new Date(payload.nbf * 1000)));\n        }\n      }\n\n      if (typeof payload.exp !== 'undefined' && !options.ignoreExpiration) {\n        if (typeof payload.exp !== 'number') {\n          return done(new JsonWebTokenError('invalid exp value'));\n        }\n        if (clockTimestamp >= payload.exp + (options.clockTolerance || 0)) {\n          return done(new TokenExpiredError('jwt expired', new Date(payload.exp * 1000)));\n        }\n      }\n\n      if (options.audience) {\n        const audiences = Array.isArray(options.audience) ? options.audience : [options.audience];\n        const target = Array.isArray(payload.aud) ? payload.aud : [payload.aud];\n\n        const match = target.some(function (targetAudience) {\n          return audiences.some(function (audience) {\n            return audience instanceof RegExp ? audience.test(targetAudience) : audience === targetAudience;\n          });\n        });\n\n        if (!match) {\n          return done(new JsonWebTokenError('jwt audience invalid. expected: ' + audiences.join(' or ')));\n        }\n      }\n\n      if (options.issuer) {\n        const invalid_issuer =\n                (typeof options.issuer === 'string' && payload.iss !== options.issuer) ||\n                (Array.isArray(options.issuer) && options.issuer.indexOf(payload.iss) === -1);\n\n        if (invalid_issuer) {\n          return done(new JsonWebTokenError('jwt issuer invalid. expected: ' + options.issuer));\n        }\n      }\n\n      if (options.subject) {\n        if (payload.sub !== options.subject) {\n          return done(new JsonWebTokenError('jwt subject invalid. expected: ' + options.subject));\n        }\n      }\n\n      if (options.jwtid) {\n        if (payload.jti !== options.jwtid) {\n          return done(new JsonWebTokenError('jwt jwtid invalid. expected: ' + options.jwtid));\n        }\n      }\n\n      if (options.nonce) {\n        if (payload.nonce !== options.nonce) {\n          return done(new JsonWebTokenError('jwt nonce invalid. expected: ' + options.nonce));\n        }\n      }\n\n      if (options.maxAge) {\n        if (typeof payload.iat !== 'number') {\n          return done(new JsonWebTokenError('iat required when maxAge is specified'));\n        }\n\n        const maxAgeTimestamp = timespan$1(options.maxAge, payload.iat);\n        if (typeof maxAgeTimestamp === 'undefined') {\n          return done(new JsonWebTokenError('\"maxAge\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n        }\n        if (clockTimestamp >= maxAgeTimestamp + (options.clockTolerance || 0)) {\n          return done(new TokenExpiredError('maxAge exceeded', new Date(maxAgeTimestamp * 1000)));\n        }\n      }\n\n      if (options.complete === true) {\n        const signature = decodedToken.signature;\n\n        return done(null, {\n          header: header,\n          payload: payload,\n          signature: signature\n        });\n      }\n\n      return done(null, payload);\n    });\n  };\n\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY$2 = 1 / 0,\n      MAX_SAFE_INTEGER = 9007199254740991,\n      MAX_INTEGER$2 = 1.7976931348623157e+308,\n      NAN$2 = 0 / 0;\n\n  /** `Object#toString` result references. */\n  var argsTag = '[object Arguments]',\n      funcTag = '[object Function]',\n      genTag = '[object GeneratorFunction]',\n      stringTag$1 = '[object String]',\n      symbolTag$2 = '[object Symbol]';\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim$2 = /^\\s+|\\s+$/g;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex$2 = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary$2 = /^0b[01]+$/i;\n\n  /** Used to detect octal string values. */\n  var reIsOctal$2 = /^0o[0-7]+$/i;\n\n  /** Used to detect unsigned integer values. */\n  var reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseInt$2 = parseInt;\n\n  /**\n   * A specialized version of `_.map` for arrays without support for iteratee\n   * shorthands.\n   *\n   * @private\n   * @param {Array} [array] The array to iterate over.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the new mapped array.\n   */\n  function arrayMap(array, iteratee) {\n    var index = -1,\n        length = array ? array.length : 0,\n        result = Array(length);\n\n    while (++index < length) {\n      result[index] = iteratee(array[index], index, array);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.findIndex` and `_.findLastIndex` without\n   * support for iteratee shorthands.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {Function} predicate The function invoked per iteration.\n   * @param {number} fromIndex The index to search from.\n   * @param {boolean} [fromRight] Specify iterating from right to left.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseFindIndex(array, predicate, fromIndex, fromRight) {\n    var length = array.length,\n        index = fromIndex + (-1);\n\n    while ((++index < length)) {\n      if (predicate(array[index], index, array)) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n   *\n   * @private\n   * @param {Array} array The array to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} fromIndex The index to search from.\n   * @returns {number} Returns the index of the matched value, else `-1`.\n   */\n  function baseIndexOf(array, value, fromIndex) {\n    if (value !== value) {\n      return baseFindIndex(array, baseIsNaN, fromIndex);\n    }\n    var index = fromIndex - 1,\n        length = array.length;\n\n    while (++index < length) {\n      if (array[index] === value) {\n        return index;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * The base implementation of `_.isNaN` without support for number objects.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n   */\n  function baseIsNaN(value) {\n    return value !== value;\n  }\n\n  /**\n   * The base implementation of `_.times` without support for iteratee shorthands\n   * or max array length checks.\n   *\n   * @private\n   * @param {number} n The number of times to invoke `iteratee`.\n   * @param {Function} iteratee The function invoked per iteration.\n   * @returns {Array} Returns the array of results.\n   */\n  function baseTimes(n, iteratee) {\n    var index = -1,\n        result = Array(n);\n\n    while (++index < n) {\n      result[index] = iteratee(index);\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.values` and `_.valuesIn` which creates an\n   * array of `object` property values corresponding to the property names\n   * of `props`.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @param {Array} props The property names to get values for.\n   * @returns {Object} Returns the array of property values.\n   */\n  function baseValues(object, props) {\n    return arrayMap(props, function(key) {\n      return object[key];\n    });\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg$1(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /** Used for built-in method references. */\n  var objectProto$6 = Object.prototype;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty$1 = objectProto$6.hasOwnProperty;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$6 = objectProto$6.toString;\n\n  /** Built-in value references. */\n  var propertyIsEnumerable = objectProto$6.propertyIsEnumerable;\n\n  /* Built-in method references for those with the same name as other `lodash` methods. */\n  var nativeKeys = overArg$1(Object.keys, Object),\n      nativeMax = Math.max;\n\n  /**\n   * Creates an array of the enumerable property names of the array-like `value`.\n   *\n   * @private\n   * @param {*} value The value to query.\n   * @param {boolean} inherited Specify returning inherited property names.\n   * @returns {Array} Returns the array of property names.\n   */\n  function arrayLikeKeys(value, inherited) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    // Safari 9 makes `arguments.length` enumerable in strict mode.\n    var result = (isArray$1(value) || isArguments(value))\n      ? baseTimes(value.length, String)\n      : [];\n\n    var length = result.length,\n        skipIndexes = !!length;\n\n    for (var key in value) {\n      if ((hasOwnProperty$1.call(value, key)) &&\n          !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n   *\n   * @private\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   */\n  function baseKeys(object) {\n    if (!isPrototype(object)) {\n      return nativeKeys(object);\n    }\n    var result = [];\n    for (var key in Object(object)) {\n      if (hasOwnProperty$1.call(object, key) && key != 'constructor') {\n        result.push(key);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Checks if `value` is a valid array-like index.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n   */\n  function isIndex(value, length) {\n    length = length == null ? MAX_SAFE_INTEGER : length;\n    return !!length &&\n      (typeof value == 'number' || reIsUint.test(value)) &&\n      (value > -1 && value % 1 == 0 && value < length);\n  }\n\n  /**\n   * Checks if `value` is likely a prototype object.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n   */\n  function isPrototype(value) {\n    var Ctor = value && value.constructor,\n        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$6;\n\n    return value === proto;\n  }\n\n  /**\n   * Checks if `value` is in `collection`. If `collection` is a string, it's\n   * checked for a substring of `value`, otherwise\n   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n   * is used for equality comparisons. If `fromIndex` is negative, it's used as\n   * the offset from the end of `collection`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Collection\n   * @param {Array|Object|string} collection The collection to inspect.\n   * @param {*} value The value to search for.\n   * @param {number} [fromIndex=0] The index to search from.\n   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n   * @returns {boolean} Returns `true` if `value` is found, else `false`.\n   * @example\n   *\n   * _.includes([1, 2, 3], 1);\n   * // => true\n   *\n   * _.includes([1, 2, 3], 1, 2);\n   * // => false\n   *\n   * _.includes({ 'a': 1, 'b': 2 }, 1);\n   * // => true\n   *\n   * _.includes('abcd', 'bc');\n   * // => true\n   */\n  function includes$1(collection, value, fromIndex, guard) {\n    collection = isArrayLike(collection) ? collection : values(collection);\n    fromIndex = (fromIndex && !guard) ? toInteger$2(fromIndex) : 0;\n\n    var length = collection.length;\n    if (fromIndex < 0) {\n      fromIndex = nativeMax(length + fromIndex, 0);\n    }\n    return isString$2(collection)\n      ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n      : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n  }\n\n  /**\n   * Checks if `value` is likely an `arguments` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArguments(function() { return arguments; }());\n   * // => true\n   *\n   * _.isArguments([1, 2, 3]);\n   * // => false\n   */\n  function isArguments(value) {\n    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n    return isArrayLikeObject(value) && hasOwnProperty$1.call(value, 'callee') &&\n      (!propertyIsEnumerable.call(value, 'callee') || objectToString$6.call(value) == argsTag);\n  }\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n  var isArray$1 = Array.isArray;\n\n  /**\n   * Checks if `value` is array-like. A value is considered array-like if it's\n   * not a function and has a `value.length` that's an integer greater than or\n   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n   * @example\n   *\n   * _.isArrayLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLike(document.body.children);\n   * // => true\n   *\n   * _.isArrayLike('abc');\n   * // => true\n   *\n   * _.isArrayLike(_.noop);\n   * // => false\n   */\n  function isArrayLike(value) {\n    return value != null && isLength(value.length) && !isFunction(value);\n  }\n\n  /**\n   * This method is like `_.isArrayLike` except that it also checks if `value`\n   * is an object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an array-like object,\n   *  else `false`.\n   * @example\n   *\n   * _.isArrayLikeObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isArrayLikeObject(document.body.children);\n   * // => true\n   *\n   * _.isArrayLikeObject('abc');\n   * // => false\n   *\n   * _.isArrayLikeObject(_.noop);\n   * // => false\n   */\n  function isArrayLikeObject(value) {\n    return isObjectLike$6(value) && isArrayLike(value);\n  }\n\n  /**\n   * Checks if `value` is classified as a `Function` object.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n   * @example\n   *\n   * _.isFunction(_);\n   * // => true\n   *\n   * _.isFunction(/abc/);\n   * // => false\n   */\n  function isFunction(value) {\n    // The use of `Object#toString` avoids issues with the `typeof` operator\n    // in Safari 8-9 which returns 'object' for typed array and other constructors.\n    var tag = isObject$2(value) ? objectToString$6.call(value) : '';\n    return tag == funcTag || tag == genTag;\n  }\n\n  /**\n   * Checks if `value` is a valid array-like length.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n   * @example\n   *\n   * _.isLength(3);\n   * // => true\n   *\n   * _.isLength(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isLength(Infinity);\n   * // => false\n   *\n   * _.isLength('3');\n   * // => false\n   */\n  function isLength(value) {\n    return typeof value == 'number' &&\n      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject$2(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike$6(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `String` primitive or object.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n   * @example\n   *\n   * _.isString('abc');\n   * // => true\n   *\n   * _.isString(1);\n   * // => false\n   */\n  function isString$2(value) {\n    return typeof value == 'string' ||\n      (!isArray$1(value) && isObjectLike$6(value) && objectToString$6.call(value) == stringTag$1);\n  }\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol$2(value) {\n    return typeof value == 'symbol' ||\n      (isObjectLike$6(value) && objectToString$6.call(value) == symbolTag$2);\n  }\n\n  /**\n   * Converts `value` to a finite number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.12.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted number.\n   * @example\n   *\n   * _.toFinite(3.2);\n   * // => 3.2\n   *\n   * _.toFinite(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toFinite(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toFinite('3.2');\n   * // => 3.2\n   */\n  function toFinite$2(value) {\n    if (!value) {\n      return value === 0 ? value : 0;\n    }\n    value = toNumber$2(value);\n    if (value === INFINITY$2 || value === -INFINITY$2) {\n      var sign = (value < 0 ? -1 : 1);\n      return sign * MAX_INTEGER$2;\n    }\n    return value === value ? value : 0;\n  }\n\n  /**\n   * Converts `value` to an integer.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted integer.\n   * @example\n   *\n   * _.toInteger(3.2);\n   * // => 3\n   *\n   * _.toInteger(Number.MIN_VALUE);\n   * // => 0\n   *\n   * _.toInteger(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toInteger('3.2');\n   * // => 3\n   */\n  function toInteger$2(value) {\n    var result = toFinite$2(value),\n        remainder = result % 1;\n\n    return result === result ? (remainder ? result - remainder : result) : 0;\n  }\n\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n  function toNumber$2(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n    if (isSymbol$2(value)) {\n      return NAN$2;\n    }\n    if (isObject$2(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = isObject$2(other) ? (other + '') : other;\n    }\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n    value = value.replace(reTrim$2, '');\n    var isBinary = reIsBinary$2.test(value);\n    return (isBinary || reIsOctal$2.test(value))\n      ? freeParseInt$2(value.slice(2), isBinary ? 2 : 8)\n      : (reIsBadHex$2.test(value) ? NAN$2 : +value);\n  }\n\n  /**\n   * Creates an array of the own enumerable property names of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects. See the\n   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n   * for more details.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property names.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.keys(new Foo);\n   * // => ['a', 'b'] (iteration order is not guaranteed)\n   *\n   * _.keys('hi');\n   * // => ['0', '1']\n   */\n  function keys(object) {\n    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n  }\n\n  /**\n   * Creates an array of the own enumerable string keyed property values of `object`.\n   *\n   * **Note:** Non-object values are coerced to objects.\n   *\n   * @static\n   * @since 0.1.0\n   * @memberOf _\n   * @category Object\n   * @param {Object} object The object to query.\n   * @returns {Array} Returns the array of property values.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   *   this.b = 2;\n   * }\n   *\n   * Foo.prototype.c = 3;\n   *\n   * _.values(new Foo);\n   * // => [1, 2] (iteration order is not guaranteed)\n   *\n   * _.values('hi');\n   * // => ['h', 'i']\n   */\n  function values(object) {\n    return object ? baseValues(object, keys(object)) : [];\n  }\n\n  var lodash_includes = includes$1;\n\n  /**\n   * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   * Available under MIT license <https://lodash.com/license>\n   */\n\n  /** `Object#toString` result references. */\n  var boolTag = '[object Boolean]';\n\n  /** Used for built-in method references. */\n  var objectProto$5 = Object.prototype;\n\n  /**\n   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$5 = objectProto$5.toString;\n\n  /**\n   * Checks if `value` is classified as a boolean primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   * @example\n   *\n   * _.isBoolean(false);\n   * // => true\n   *\n   * _.isBoolean(null);\n   * // => false\n   */\n  function isBoolean$1(value) {\n    return value === true || value === false ||\n      (isObjectLike$5(value) && objectToString$5.call(value) == boolTag);\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike$5(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  var lodash_isboolean = isBoolean$1;\n\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY$1 = 1 / 0,\n      MAX_INTEGER$1 = 1.7976931348623157e+308,\n      NAN$1 = 0 / 0;\n\n  /** `Object#toString` result references. */\n  var symbolTag$1 = '[object Symbol]';\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim$1 = /^\\s+|\\s+$/g;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary$1 = /^0b[01]+$/i;\n\n  /** Used to detect octal string values. */\n  var reIsOctal$1 = /^0o[0-7]+$/i;\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseInt$1 = parseInt;\n\n  /** Used for built-in method references. */\n  var objectProto$4 = Object.prototype;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$4 = objectProto$4.toString;\n\n  /**\n   * Checks if `value` is an integer.\n   *\n   * **Note:** This method is based on\n   * [`Number.isInteger`](https://mdn.io/Number/isInteger).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an integer, else `false`.\n   * @example\n   *\n   * _.isInteger(3);\n   * // => true\n   *\n   * _.isInteger(Number.MIN_VALUE);\n   * // => false\n   *\n   * _.isInteger(Infinity);\n   * // => false\n   *\n   * _.isInteger('3');\n   * // => false\n   */\n  function isInteger$1(value) {\n    return typeof value == 'number' && value == toInteger$1(value);\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject$1(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike$4(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol$1(value) {\n    return typeof value == 'symbol' ||\n      (isObjectLike$4(value) && objectToString$4.call(value) == symbolTag$1);\n  }\n\n  /**\n   * Converts `value` to a finite number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.12.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted number.\n   * @example\n   *\n   * _.toFinite(3.2);\n   * // => 3.2\n   *\n   * _.toFinite(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toFinite(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toFinite('3.2');\n   * // => 3.2\n   */\n  function toFinite$1(value) {\n    if (!value) {\n      return value === 0 ? value : 0;\n    }\n    value = toNumber$1(value);\n    if (value === INFINITY$1 || value === -INFINITY$1) {\n      var sign = (value < 0 ? -1 : 1);\n      return sign * MAX_INTEGER$1;\n    }\n    return value === value ? value : 0;\n  }\n\n  /**\n   * Converts `value` to an integer.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted integer.\n   * @example\n   *\n   * _.toInteger(3.2);\n   * // => 3\n   *\n   * _.toInteger(Number.MIN_VALUE);\n   * // => 0\n   *\n   * _.toInteger(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toInteger('3.2');\n   * // => 3\n   */\n  function toInteger$1(value) {\n    var result = toFinite$1(value),\n        remainder = result % 1;\n\n    return result === result ? (remainder ? result - remainder : result) : 0;\n  }\n\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n  function toNumber$1(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n    if (isSymbol$1(value)) {\n      return NAN$1;\n    }\n    if (isObject$1(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = isObject$1(other) ? (other + '') : other;\n    }\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n    value = value.replace(reTrim$1, '');\n    var isBinary = reIsBinary$1.test(value);\n    return (isBinary || reIsOctal$1.test(value))\n      ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)\n      : (reIsBadHex$1.test(value) ? NAN$1 : +value);\n  }\n\n  var lodash_isinteger = isInteger$1;\n\n  /**\n   * lodash 3.0.3 (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   * Available under MIT license <https://lodash.com/license>\n   */\n\n  /** `Object#toString` result references. */\n  var numberTag = '[object Number]';\n\n  /** Used for built-in method references. */\n  var objectProto$3 = Object.prototype;\n\n  /**\n   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$3 = objectProto$3.toString;\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike$3(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `Number` primitive or object.\n   *\n   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified\n   * as numbers, use the `_.isFinite` method.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   * @example\n   *\n   * _.isNumber(3);\n   * // => true\n   *\n   * _.isNumber(Number.MIN_VALUE);\n   * // => true\n   *\n   * _.isNumber(Infinity);\n   * // => true\n   *\n   * _.isNumber('3');\n   * // => false\n   */\n  function isNumber$1(value) {\n    return typeof value == 'number' ||\n      (isObjectLike$3(value) && objectToString$3.call(value) == numberTag);\n  }\n\n  var lodash_isnumber = isNumber$1;\n\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** `Object#toString` result references. */\n  var objectTag = '[object Object]';\n\n  /**\n   * Checks if `value` is a host object in IE < 9.\n   *\n   * @private\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n   */\n  function isHostObject(value) {\n    // Many host objects are `Object` objects that can coerce to strings\n    // despite having improperly defined `toString` methods.\n    var result = false;\n    if (value != null && typeof value.toString != 'function') {\n      try {\n        result = !!(value + '');\n      } catch (e) {}\n    }\n    return result;\n  }\n\n  /**\n   * Creates a unary function that invokes `func` with its argument transformed.\n   *\n   * @private\n   * @param {Function} func The function to wrap.\n   * @param {Function} transform The argument transform.\n   * @returns {Function} Returns the new function.\n   */\n  function overArg(func, transform) {\n    return function(arg) {\n      return func(transform(arg));\n    };\n  }\n\n  /** Used for built-in method references. */\n  var funcProto = Function.prototype,\n      objectProto$2 = Object.prototype;\n\n  /** Used to resolve the decompiled source of functions. */\n  var funcToString = funcProto.toString;\n\n  /** Used to check objects for own properties. */\n  var hasOwnProperty = objectProto$2.hasOwnProperty;\n\n  /** Used to infer the `Object` constructor. */\n  var objectCtorString = funcToString.call(Object);\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$2 = objectProto$2.toString;\n\n  /** Built-in value references. */\n  var getPrototype = overArg(Object.getPrototypeOf, Object);\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike$2(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is a plain object, that is, an object created by the\n   * `Object` constructor or one with a `[[Prototype]]` of `null`.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.8.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n   * @example\n   *\n   * function Foo() {\n   *   this.a = 1;\n   * }\n   *\n   * _.isPlainObject(new Foo);\n   * // => false\n   *\n   * _.isPlainObject([1, 2, 3]);\n   * // => false\n   *\n   * _.isPlainObject({ 'x': 0, 'y': 0 });\n   * // => true\n   *\n   * _.isPlainObject(Object.create(null));\n   * // => true\n   */\n  function isPlainObject$1(value) {\n    if (!isObjectLike$2(value) ||\n        objectToString$2.call(value) != objectTag || isHostObject(value)) {\n      return false;\n    }\n    var proto = getPrototype(value);\n    if (proto === null) {\n      return true;\n    }\n    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return (typeof Ctor == 'function' &&\n      Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n  }\n\n  var lodash_isplainobject = isPlainObject$1;\n\n  /**\n   * lodash 4.0.1 (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   * Available under MIT license <https://lodash.com/license>\n   */\n\n  /** `Object#toString` result references. */\n  var stringTag = '[object String]';\n\n  /** Used for built-in method references. */\n  var objectProto$1 = Object.prototype;\n\n  /**\n   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString$1 = objectProto$1.toString;\n\n  /**\n   * Checks if `value` is classified as an `Array` object.\n   *\n   * @static\n   * @memberOf _\n   * @type Function\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   * @example\n   *\n   * _.isArray([1, 2, 3]);\n   * // => true\n   *\n   * _.isArray(document.body.children);\n   * // => false\n   *\n   * _.isArray('abc');\n   * // => false\n   *\n   * _.isArray(_.noop);\n   * // => false\n   */\n  var isArray = Array.isArray;\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike$1(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `String` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n   * @example\n   *\n   * _.isString('abc');\n   * // => true\n   *\n   * _.isString(1);\n   * // => false\n   */\n  function isString$1(value) {\n    return typeof value == 'string' ||\n      (!isArray(value) && isObjectLike$1(value) && objectToString$1.call(value) == stringTag);\n  }\n\n  var lodash_isstring = isString$1;\n\n  /**\n   * lodash (Custom Build) <https://lodash.com/>\n   * Build: `lodash modularize exports=\"npm\" -o ./`\n   * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n   * Released under MIT license <https://lodash.com/license>\n   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n   */\n\n  /** Used as the `TypeError` message for \"Functions\" methods. */\n  var FUNC_ERROR_TEXT = 'Expected a function';\n\n  /** Used as references for various `Number` constants. */\n  var INFINITY = 1 / 0,\n      MAX_INTEGER = 1.7976931348623157e+308,\n      NAN = 0 / 0;\n\n  /** `Object#toString` result references. */\n  var symbolTag = '[object Symbol]';\n\n  /** Used to match leading and trailing whitespace. */\n  var reTrim = /^\\s+|\\s+$/g;\n\n  /** Used to detect bad signed hexadecimal string values. */\n  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n  /** Used to detect binary string values. */\n  var reIsBinary = /^0b[01]+$/i;\n\n  /** Used to detect octal string values. */\n  var reIsOctal = /^0o[0-7]+$/i;\n\n  /** Built-in method references without a dependency on `root`. */\n  var freeParseInt = parseInt;\n\n  /** Used for built-in method references. */\n  var objectProto = Object.prototype;\n\n  /**\n   * Used to resolve the\n   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n   * of values.\n   */\n  var objectToString = objectProto.toString;\n\n  /**\n   * Creates a function that invokes `func`, with the `this` binding and arguments\n   * of the created function, while it's called less than `n` times. Subsequent\n   * calls to the created function return the result of the last `func` invocation.\n   *\n   * @static\n   * @memberOf _\n   * @since 3.0.0\n   * @category Function\n   * @param {number} n The number of calls at which `func` is no longer invoked.\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new restricted function.\n   * @example\n   *\n   * jQuery(element).on('click', _.before(5, addContactToList));\n   * // => Allows adding up to 4 contacts to the list.\n   */\n  function before(n, func) {\n    var result;\n    if (typeof func != 'function') {\n      throw new TypeError(FUNC_ERROR_TEXT);\n    }\n    n = toInteger(n);\n    return function() {\n      if (--n > 0) {\n        result = func.apply(this, arguments);\n      }\n      if (n <= 1) {\n        func = undefined;\n      }\n      return result;\n    };\n  }\n\n  /**\n   * Creates a function that is restricted to invoking `func` once. Repeat calls\n   * to the function return the value of the first invocation. The `func` is\n   * invoked with the `this` binding and arguments of the created function.\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Function\n   * @param {Function} func The function to restrict.\n   * @returns {Function} Returns the new restricted function.\n   * @example\n   *\n   * var initialize = _.once(createApplication);\n   * initialize();\n   * initialize();\n   * // => `createApplication` is invoked once\n   */\n  function once$1(func) {\n    return before(2, func);\n  }\n\n  /**\n   * Checks if `value` is the\n   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n   *\n   * @static\n   * @memberOf _\n   * @since 0.1.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n   * @example\n   *\n   * _.isObject({});\n   * // => true\n   *\n   * _.isObject([1, 2, 3]);\n   * // => true\n   *\n   * _.isObject(_.noop);\n   * // => true\n   *\n   * _.isObject(null);\n   * // => false\n   */\n  function isObject(value) {\n    var type = typeof value;\n    return !!value && (type == 'object' || type == 'function');\n  }\n\n  /**\n   * Checks if `value` is object-like. A value is object-like if it's not `null`\n   * and has a `typeof` result of \"object\".\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n   * @example\n   *\n   * _.isObjectLike({});\n   * // => true\n   *\n   * _.isObjectLike([1, 2, 3]);\n   * // => true\n   *\n   * _.isObjectLike(_.noop);\n   * // => false\n   *\n   * _.isObjectLike(null);\n   * // => false\n   */\n  function isObjectLike(value) {\n    return !!value && typeof value == 'object';\n  }\n\n  /**\n   * Checks if `value` is classified as a `Symbol` primitive or object.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to check.\n   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n   * @example\n   *\n   * _.isSymbol(Symbol.iterator);\n   * // => true\n   *\n   * _.isSymbol('abc');\n   * // => false\n   */\n  function isSymbol(value) {\n    return typeof value == 'symbol' ||\n      (isObjectLike(value) && objectToString.call(value) == symbolTag);\n  }\n\n  /**\n   * Converts `value` to a finite number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.12.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted number.\n   * @example\n   *\n   * _.toFinite(3.2);\n   * // => 3.2\n   *\n   * _.toFinite(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toFinite(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toFinite('3.2');\n   * // => 3.2\n   */\n  function toFinite(value) {\n    if (!value) {\n      return value === 0 ? value : 0;\n    }\n    value = toNumber(value);\n    if (value === INFINITY || value === -INFINITY) {\n      var sign = (value < 0 ? -1 : 1);\n      return sign * MAX_INTEGER;\n    }\n    return value === value ? value : 0;\n  }\n\n  /**\n   * Converts `value` to an integer.\n   *\n   * **Note:** This method is loosely based on\n   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to convert.\n   * @returns {number} Returns the converted integer.\n   * @example\n   *\n   * _.toInteger(3.2);\n   * // => 3\n   *\n   * _.toInteger(Number.MIN_VALUE);\n   * // => 0\n   *\n   * _.toInteger(Infinity);\n   * // => 1.7976931348623157e+308\n   *\n   * _.toInteger('3.2');\n   * // => 3\n   */\n  function toInteger(value) {\n    var result = toFinite(value),\n        remainder = result % 1;\n\n    return result === result ? (remainder ? result - remainder : result) : 0;\n  }\n\n  /**\n   * Converts `value` to a number.\n   *\n   * @static\n   * @memberOf _\n   * @since 4.0.0\n   * @category Lang\n   * @param {*} value The value to process.\n   * @returns {number} Returns the number.\n   * @example\n   *\n   * _.toNumber(3.2);\n   * // => 3.2\n   *\n   * _.toNumber(Number.MIN_VALUE);\n   * // => 5e-324\n   *\n   * _.toNumber(Infinity);\n   * // => Infinity\n   *\n   * _.toNumber('3.2');\n   * // => 3.2\n   */\n  function toNumber(value) {\n    if (typeof value == 'number') {\n      return value;\n    }\n    if (isSymbol(value)) {\n      return NAN;\n    }\n    if (isObject(value)) {\n      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n      value = isObject(other) ? (other + '') : other;\n    }\n    if (typeof value != 'string') {\n      return value === 0 ? value : +value;\n    }\n    value = value.replace(reTrim, '');\n    var isBinary = reIsBinary.test(value);\n    return (isBinary || reIsOctal.test(value))\n      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n      : (reIsBadHex.test(value) ? NAN : +value);\n  }\n\n  var lodash_once = once$1;\n\n  const timespan = timespan$2;\n  const PS_SUPPORTED = psSupported;\n  const validateAsymmetricKey = validateAsymmetricKey$2;\n  const jws = jws$3;\n  const includes = lodash_includes;\n  const isBoolean = lodash_isboolean;\n  const isInteger = lodash_isinteger;\n  const isNumber = lodash_isnumber;\n  const isPlainObject = lodash_isplainobject;\n  const isString = lodash_isstring;\n  const once = lodash_once;\n  const { KeyObject, createSecretKey, createPrivateKey } = require$$11;\n\n  const SUPPORTED_ALGS = ['RS256', 'RS384', 'RS512', 'ES256', 'ES384', 'ES512', 'HS256', 'HS384', 'HS512', 'none'];\n  if (PS_SUPPORTED) {\n    SUPPORTED_ALGS.splice(3, 0, 'PS256', 'PS384', 'PS512');\n  }\n\n  const sign_options_schema = {\n    expiresIn: { isValid: function(value) { return isInteger(value) || (isString(value) && value); }, message: '\"expiresIn\" should be a number of seconds or string representing a timespan' },\n    notBefore: { isValid: function(value) { return isInteger(value) || (isString(value) && value); }, message: '\"notBefore\" should be a number of seconds or string representing a timespan' },\n    audience: { isValid: function(value) { return isString(value) || Array.isArray(value); }, message: '\"audience\" must be a string or array' },\n    algorithm: { isValid: includes.bind(null, SUPPORTED_ALGS), message: '\"algorithm\" must be a valid string enum value' },\n    header: { isValid: isPlainObject, message: '\"header\" must be an object' },\n    encoding: { isValid: isString, message: '\"encoding\" must be a string' },\n    issuer: { isValid: isString, message: '\"issuer\" must be a string' },\n    subject: { isValid: isString, message: '\"subject\" must be a string' },\n    jwtid: { isValid: isString, message: '\"jwtid\" must be a string' },\n    noTimestamp: { isValid: isBoolean, message: '\"noTimestamp\" must be a boolean' },\n    keyid: { isValid: isString, message: '\"keyid\" must be a string' },\n    mutatePayload: { isValid: isBoolean, message: '\"mutatePayload\" must be a boolean' },\n    allowInsecureKeySizes: { isValid: isBoolean, message: '\"allowInsecureKeySizes\" must be a boolean'},\n    allowInvalidAsymmetricKeyTypes: { isValid: isBoolean, message: '\"allowInvalidAsymmetricKeyTypes\" must be a boolean'}\n  };\n\n  const registered_claims_schema = {\n    iat: { isValid: isNumber, message: '\"iat\" should be a number of seconds' },\n    exp: { isValid: isNumber, message: '\"exp\" should be a number of seconds' },\n    nbf: { isValid: isNumber, message: '\"nbf\" should be a number of seconds' }\n  };\n\n  function validate(schema, allowUnknown, object, parameterName) {\n    if (!isPlainObject(object)) {\n      throw new Error('Expected \"' + parameterName + '\" to be a plain object.');\n    }\n    Object.keys(object)\n      .forEach(function(key) {\n        const validator = schema[key];\n        if (!validator) {\n          if (!allowUnknown) {\n            throw new Error('\"' + key + '\" is not allowed in \"' + parameterName + '\"');\n          }\n          return;\n        }\n        if (!validator.isValid(object[key])) {\n          throw new Error(validator.message);\n        }\n      });\n  }\n\n  function validateOptions(options) {\n    return validate(sign_options_schema, false, options, 'options');\n  }\n\n  function validatePayload(payload) {\n    return validate(registered_claims_schema, true, payload, 'payload');\n  }\n\n  const options_to_payload = {\n    'audience': 'aud',\n    'issuer': 'iss',\n    'subject': 'sub',\n    'jwtid': 'jti'\n  };\n\n  const options_for_objects = [\n    'expiresIn',\n    'notBefore',\n    'noTimestamp',\n    'audience',\n    'issuer',\n    'subject',\n    'jwtid',\n  ];\n\n  var sign = function (payload, secretOrPrivateKey, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else {\n      options = options || {};\n    }\n\n    const isObjectPayload = typeof payload === 'object' &&\n                          !_polyfillNode_buffer.Buffer.isBuffer(payload);\n\n    const header = Object.assign({\n      alg: options.algorithm || 'HS256',\n      typ: isObjectPayload ? 'JWT' : undefined,\n      kid: options.keyid\n    }, options.header);\n\n    function failure(err) {\n      if (callback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    if (!secretOrPrivateKey && options.algorithm !== 'none') {\n      return failure(new Error('secretOrPrivateKey must have a value'));\n    }\n\n    if (secretOrPrivateKey != null && !(secretOrPrivateKey instanceof KeyObject)) {\n      try {\n        secretOrPrivateKey = createPrivateKey(secretOrPrivateKey);\n      } catch (_) {\n        try {\n          secretOrPrivateKey = createSecretKey(typeof secretOrPrivateKey === 'string' ? _polyfillNode_buffer.Buffer.from(secretOrPrivateKey) : secretOrPrivateKey);\n        } catch (_) {\n          return failure(new Error('secretOrPrivateKey is not valid key material'));\n        }\n      }\n    }\n\n    if (header.alg.startsWith('HS') && secretOrPrivateKey.type !== 'secret') {\n      return failure(new Error((`secretOrPrivateKey must be a symmetric key when using ${header.alg}`)))\n    } else if (/^(?:RS|PS|ES)/.test(header.alg)) {\n      if (secretOrPrivateKey.type !== 'private') {\n        return failure(new Error((`secretOrPrivateKey must be an asymmetric key when using ${header.alg}`)))\n      }\n      if (!options.allowInsecureKeySizes &&\n        !header.alg.startsWith('ES') &&\n        secretOrPrivateKey.asymmetricKeyDetails !== undefined && //KeyObject.asymmetricKeyDetails is supported in Node 15+\n        secretOrPrivateKey.asymmetricKeyDetails.modulusLength < 2048) {\n        return failure(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`));\n      }\n    }\n\n    if (typeof payload === 'undefined') {\n      return failure(new Error('payload is required'));\n    } else if (isObjectPayload) {\n      try {\n        validatePayload(payload);\n      }\n      catch (error) {\n        return failure(error);\n      }\n      if (!options.mutatePayload) {\n        payload = Object.assign({},payload);\n      }\n    } else {\n      const invalid_options = options_for_objects.filter(function (opt) {\n        return typeof options[opt] !== 'undefined';\n      });\n\n      if (invalid_options.length > 0) {\n        return failure(new Error('invalid ' + invalid_options.join(',') + ' option for ' + (typeof payload ) + ' payload'));\n      }\n    }\n\n    if (typeof payload.exp !== 'undefined' && typeof options.expiresIn !== 'undefined') {\n      return failure(new Error('Bad \"options.expiresIn\" option the payload already has an \"exp\" property.'));\n    }\n\n    if (typeof payload.nbf !== 'undefined' && typeof options.notBefore !== 'undefined') {\n      return failure(new Error('Bad \"options.notBefore\" option the payload already has an \"nbf\" property.'));\n    }\n\n    try {\n      validateOptions(options);\n    }\n    catch (error) {\n      return failure(error);\n    }\n\n    if (!options.allowInvalidAsymmetricKeyTypes) {\n      try {\n        validateAsymmetricKey(header.alg, secretOrPrivateKey);\n      } catch (error) {\n        return failure(error);\n      }\n    }\n\n    const timestamp = payload.iat || Math.floor(Date.now() / 1000);\n\n    if (options.noTimestamp) {\n      delete payload.iat;\n    } else if (isObjectPayload) {\n      payload.iat = timestamp;\n    }\n\n    if (typeof options.notBefore !== 'undefined') {\n      try {\n        payload.nbf = timespan(options.notBefore, timestamp);\n      }\n      catch (err) {\n        return failure(err);\n      }\n      if (typeof payload.nbf === 'undefined') {\n        return failure(new Error('\"notBefore\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n      }\n    }\n\n    if (typeof options.expiresIn !== 'undefined' && typeof payload === 'object') {\n      try {\n        payload.exp = timespan(options.expiresIn, timestamp);\n      }\n      catch (err) {\n        return failure(err);\n      }\n      if (typeof payload.exp === 'undefined') {\n        return failure(new Error('\"expiresIn\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n      }\n    }\n\n    Object.keys(options_to_payload).forEach(function (key) {\n      const claim = options_to_payload[key];\n      if (typeof options[key] !== 'undefined') {\n        if (typeof payload[claim] !== 'undefined') {\n          return failure(new Error('Bad \"options.' + key + '\" option. The payload already has an \"' + claim + '\" property.'));\n        }\n        payload[claim] = options[key];\n      }\n    });\n\n    const encoding = options.encoding || 'utf8';\n\n    if (typeof callback === 'function') {\n      callback = callback && once(callback);\n\n      jws.createSign({\n        header: header,\n        privateKey: secretOrPrivateKey,\n        payload: payload,\n        encoding: encoding\n      }).once('error', callback)\n        .once('done', function (signature) {\n          // TODO: Remove in favor of the modulus length check before signing once node 15+ is the minimum supported version\n          if(!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {\n            return callback(new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`))\n          }\n          callback(null, signature);\n        });\n    } else {\n      let signature = jws.sign({header: header, payload: payload, secret: secretOrPrivateKey, encoding: encoding});\n      // TODO: Remove in favor of the modulus length check before signing once node 15+ is the minimum supported version\n      if(!options.allowInsecureKeySizes && /^(?:RS|PS)/.test(header.alg) && signature.length < 256) {\n        throw new Error(`secretOrPrivateKey has a minimum key size of 2048 bits for ${header.alg}`)\n      }\n      return signature\n    }\n  };\n\n  var jsonwebtoken = {\n    decode: decode$1,\n    verify: verify,\n    sign: sign,\n    JsonWebTokenError: JsonWebTokenError_1,\n    NotBeforeError: NotBeforeError_1,\n    TokenExpiredError: TokenExpiredError_1,\n  };\n\n  let exp = jsonwebtoken?.default || jsonwebtoken || { __emptyModule: true };try { Object.defineProperty(exp, \"__\" + \"esModule\", { value: true }); exp.default = exp; } catch (ex) {}\n\n  return exp;\n\n}));\n"
    },
    {
      "name": "_commonjsHelpers",
      "originalName": "_commonjsHelpers",
      "code": "sap.ui.define(['exports'], (function (exports) { 'use strict';\n\n\tvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\n\tfunction getAugmentedNamespace(n) {\n\t  if (n.__esModule) return n;\n\t  var f = n.default;\n\t\tif (typeof f == \"function\") {\n\t\t\tvar a = function a () {\n\t\t\t\tif (this instanceof a) {\n\t        return Reflect.construct(f, arguments, this.constructor);\n\t\t\t\t}\n\t\t\t\treturn f.apply(this, arguments);\n\t\t\t};\n\t\t\ta.prototype = f.prototype;\n\t  } else a = {};\n\t  Object.defineProperty(a, '__esModule', {value: true});\n\t\tObject.keys(n).forEach(function (k) {\n\t\t\tvar d = Object.getOwnPropertyDescriptor(n, k);\n\t\t\tObject.defineProperty(a, k, d.get ? d : {\n\t\t\t\tenumerable: true,\n\t\t\t\tget: function () {\n\t\t\t\t\treturn n[k];\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn a;\n\t}\n\n\texports.commonjsGlobal = commonjsGlobal;\n\texports.getAugmentedNamespace = getAugmentedNamespace;\n\n}));\n",
      "type": "chunk"
    },
    {
      "name": "node.fs",
      "originalName": "node.fs",
      "code": "sap.ui.define(['exports'], (function (exports) { 'use strict';\n\n\tvar _polyfillNode_fs = {};\n\n\texports.default = _polyfillNode_fs;\n\n}));\n",
      "type": "chunk"
    },
    {
      "name": "node.http",
      "originalName": "node.http",
      "code": "sap.ui.define(['exports', 'com/kmsa/dashboard/resources/node.buffer', 'com/kmsa/dashboard/resources/request', 'com/kmsa/dashboard/resources/node.url', 'com/kmsa/dashboard/resources/node.util', 'com/kmsa/dashboard/resources/node.stream'], (function (exports, _polyfillNode_buffer, request$1, _polyfillNode_url, _polyfillNode_util, _polyfillNode_stream) { 'use strict';\n\n  function request(opts, cb) {\n    if (typeof opts === 'string')\n      opts = _polyfillNode_url.parse(opts);\n\n\n    // Normally, the page is loaded from http or https, so not specifying a protocol\n    // will result in a (valid) protocol-relative url. However, this won't work if\n    // the protocol is something else, like 'file:'\n    var defaultProtocol = _polyfillNode_buffer.global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';\n\n    var protocol = opts.protocol || defaultProtocol;\n    var host = opts.hostname || opts.host;\n    var port = opts.port;\n    var path = opts.path || '/';\n\n    // Necessary for IPv6 addresses\n    if (host && host.indexOf(':') !== -1)\n      host = '[' + host + ']';\n\n    // This may be a relative url. The browser should always be able to interpret it correctly.\n    opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;\n    opts.method = (opts.method || 'GET').toUpperCase();\n    opts.headers = opts.headers || {};\n\n    // Also valid opts.auth, opts.mode\n\n    var req = new request$1.ClientRequest(opts);\n    if (cb)\n      req.on('response', cb);\n    return req\n  }\n\n  function get(opts, cb) {\n    var req = request(opts, cb);\n    req.end();\n    return req\n  }\n\n  function Agent() {}\n  Agent.defaultMaxSockets = 4;\n\n  var METHODS = [\n    'CHECKOUT',\n    'CONNECT',\n    'COPY',\n    'DELETE',\n    'GET',\n    'HEAD',\n    'LOCK',\n    'M-SEARCH',\n    'MERGE',\n    'MKACTIVITY',\n    'MKCOL',\n    'MOVE',\n    'NOTIFY',\n    'OPTIONS',\n    'PATCH',\n    'POST',\n    'PROPFIND',\n    'PROPPATCH',\n    'PURGE',\n    'PUT',\n    'REPORT',\n    'SEARCH',\n    'SUBSCRIBE',\n    'TRACE',\n    'UNLOCK',\n    'UNSUBSCRIBE'\n  ];\n  var STATUS_CODES = {\n    100: 'Continue',\n    101: 'Switching Protocols',\n    102: 'Processing', // RFC 2518, obsoleted by RFC 4918\n    200: 'OK',\n    201: 'Created',\n    202: 'Accepted',\n    203: 'Non-Authoritative Information',\n    204: 'No Content',\n    205: 'Reset Content',\n    206: 'Partial Content',\n    207: 'Multi-Status', // RFC 4918\n    300: 'Multiple Choices',\n    301: 'Moved Permanently',\n    302: 'Moved Temporarily',\n    303: 'See Other',\n    304: 'Not Modified',\n    305: 'Use Proxy',\n    307: 'Temporary Redirect',\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found',\n    405: 'Method Not Allowed',\n    406: 'Not Acceptable',\n    407: 'Proxy Authentication Required',\n    408: 'Request Time-out',\n    409: 'Conflict',\n    410: 'Gone',\n    411: 'Length Required',\n    412: 'Precondition Failed',\n    413: 'Request Entity Too Large',\n    414: 'Request-URI Too Large',\n    415: 'Unsupported Media Type',\n    416: 'Requested Range Not Satisfiable',\n    417: 'Expectation Failed',\n    418: 'I\\'m a teapot', // RFC 2324\n    422: 'Unprocessable Entity', // RFC 4918\n    423: 'Locked', // RFC 4918\n    424: 'Failed Dependency', // RFC 4918\n    425: 'Unordered Collection', // RFC 4918\n    426: 'Upgrade Required', // RFC 2817\n    428: 'Precondition Required', // RFC 6585\n    429: 'Too Many Requests', // RFC 6585\n    431: 'Request Header Fields Too Large', // RFC 6585\n    500: 'Internal Server Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Gateway Time-out',\n    505: 'HTTP Version Not Supported',\n    506: 'Variant Also Negotiates', // RFC 2295\n    507: 'Insufficient Storage', // RFC 4918\n    509: 'Bandwidth Limit Exceeded',\n    510: 'Not Extended', // RFC 2774\n    511: 'Network Authentication Required' // RFC 6585\n  };\n\n  var _polyfillNode_http = {\n    request,\n    get,\n    Agent,\n    METHODS,\n    STATUS_CODES\n  };\n\n  exports.Agent = Agent;\n  exports.METHODS = METHODS;\n  exports.STATUS_CODES = STATUS_CODES;\n  exports.default = _polyfillNode_http;\n  exports.get = get;\n  exports.request = request;\n\n}));\n",
      "type": "chunk"
    },
    {
      "name": "node.https",
      "originalName": "node.https",
      "code": "sap.ui.define(['exports', 'com/kmsa/dashboard/resources/node.buffer', 'com/kmsa/dashboard/resources/request', 'com/kmsa/dashboard/resources/node.url', 'com/kmsa/dashboard/resources/node.util', 'com/kmsa/dashboard/resources/node.stream'], (function (exports, _polyfillNode_buffer, request$1, _polyfillNode_url, _polyfillNode_util, _polyfillNode_stream) { 'use strict';\n\n  function request(opts, cb) {\n    if (typeof opts === 'string')\n      opts = _polyfillNode_url.parse(opts);\n\n\n    // Normally, the page is loaded from http or https, so not specifying a protocol\n    // will result in a (valid) protocol-relative url. However, this won't work if\n    // the protocol is something else, like 'file:'\n    var defaultProtocol = _polyfillNode_buffer.global.location.protocol.search(/^https?:$/) === -1 ? 'http:' : '';\n\n    var protocol = opts.protocol || defaultProtocol;\n    var host = opts.hostname || opts.host;\n    var port = opts.port;\n    var path = opts.path || '/';\n\n    // Necessary for IPv6 addresses\n    if (host && host.indexOf(':') !== -1)\n      host = '[' + host + ']';\n\n    // This may be a relative url. The browser should always be able to interpret it correctly.\n    opts.url = (host ? (protocol + '//' + host) : '') + (port ? ':' + port : '') + path;\n    opts.method = (opts.method || 'GET').toUpperCase();\n    opts.headers = opts.headers || {};\n\n    // Also valid opts.auth, opts.mode\n\n    var req = new request$1.ClientRequest(opts);\n    if (cb)\n      req.on('response', cb);\n    return req\n  }\n\n  function get(opts, cb) {\n    var req = request(opts, cb);\n    req.end();\n    return req\n  }\n\n  function Agent() {}\n  Agent.defaultMaxSockets = 4;\n\n  var METHODS = [\n    'CHECKOUT',\n    'CONNECT',\n    'COPY',\n    'DELETE',\n    'GET',\n    'HEAD',\n    'LOCK',\n    'M-SEARCH',\n    'MERGE',\n    'MKACTIVITY',\n    'MKCOL',\n    'MOVE',\n    'NOTIFY',\n    'OPTIONS',\n    'PATCH',\n    'POST',\n    'PROPFIND',\n    'PROPPATCH',\n    'PURGE',\n    'PUT',\n    'REPORT',\n    'SEARCH',\n    'SUBSCRIBE',\n    'TRACE',\n    'UNLOCK',\n    'UNSUBSCRIBE'\n  ];\n  var STATUS_CODES = {\n    100: 'Continue',\n    101: 'Switching Protocols',\n    102: 'Processing', // RFC 2518, obsoleted by RFC 4918\n    200: 'OK',\n    201: 'Created',\n    202: 'Accepted',\n    203: 'Non-Authoritative Information',\n    204: 'No Content',\n    205: 'Reset Content',\n    206: 'Partial Content',\n    207: 'Multi-Status', // RFC 4918\n    300: 'Multiple Choices',\n    301: 'Moved Permanently',\n    302: 'Moved Temporarily',\n    303: 'See Other',\n    304: 'Not Modified',\n    305: 'Use Proxy',\n    307: 'Temporary Redirect',\n    400: 'Bad Request',\n    401: 'Unauthorized',\n    402: 'Payment Required',\n    403: 'Forbidden',\n    404: 'Not Found',\n    405: 'Method Not Allowed',\n    406: 'Not Acceptable',\n    407: 'Proxy Authentication Required',\n    408: 'Request Time-out',\n    409: 'Conflict',\n    410: 'Gone',\n    411: 'Length Required',\n    412: 'Precondition Failed',\n    413: 'Request Entity Too Large',\n    414: 'Request-URI Too Large',\n    415: 'Unsupported Media Type',\n    416: 'Requested Range Not Satisfiable',\n    417: 'Expectation Failed',\n    418: 'I\\'m a teapot', // RFC 2324\n    422: 'Unprocessable Entity', // RFC 4918\n    423: 'Locked', // RFC 4918\n    424: 'Failed Dependency', // RFC 4918\n    425: 'Unordered Collection', // RFC 4918\n    426: 'Upgrade Required', // RFC 2817\n    428: 'Precondition Required', // RFC 6585\n    429: 'Too Many Requests', // RFC 6585\n    431: 'Request Header Fields Too Large', // RFC 6585\n    500: 'Internal Server Error',\n    501: 'Not Implemented',\n    502: 'Bad Gateway',\n    503: 'Service Unavailable',\n    504: 'Gateway Time-out',\n    505: 'HTTP Version Not Supported',\n    506: 'Variant Also Negotiates', // RFC 2295\n    507: 'Insufficient Storage', // RFC 4918\n    509: 'Bandwidth Limit Exceeded',\n    510: 'Not Extended', // RFC 2774\n    511: 'Network Authentication Required' // RFC 6585\n  };\n\n  var _polyfillNode_https = {\n    request,\n    get,\n    Agent,\n    METHODS,\n    STATUS_CODES\n  };\n\n  exports.Agent = Agent;\n  exports.METHODS = METHODS;\n  exports.STATUS_CODES = STATUS_CODES;\n  exports.default = _polyfillNode_https;\n  exports.get = get;\n  exports.request = request;\n\n}));\n",
      "type": "chunk"
    },
    {
      "name": "node.url",
      "originalName": "node.url",
      "code": "sap.ui.define(['exports', 'com/kmsa/dashboard/resources/node.buffer', 'com/kmsa/dashboard/resources/node.util'], (function (exports, _polyfillNode_buffer, _polyfillNode_util) { 'use strict';\n\n  /*! https://mths.be/punycode v1.4.1 by @mathias */\n\n\n  /** Highest positive signed 32-bit float value */\n  var maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n  /** Bootstring parameters */\n  var base = 36;\n  var tMin = 1;\n  var tMax = 26;\n  var skew = 38;\n  var damp = 700;\n  var initialBias = 72;\n  var initialN = 128; // 0x80\n  var delimiter = '-'; // '\\x2D'\n  var regexNonASCII = /[^\\x20-\\x7E]/; // unprintable ASCII chars + non-ASCII chars\n  var regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n  /** Error messages */\n  var errors = {\n    'overflow': 'Overflow: input needs wider integers to process',\n    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n    'invalid-input': 'Invalid input'\n  };\n\n  /** Convenience shortcuts */\n  var baseMinusTMin = base - tMin;\n  var floor = Math.floor;\n  var stringFromCharCode = String.fromCharCode;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * A generic error utility function.\n   * @private\n   * @param {String} type The error type.\n   * @returns {Error} Throws a `RangeError` with the applicable error message.\n   */\n  function error(type) {\n    throw new RangeError(errors[type]);\n  }\n\n  /**\n   * A generic `Array#map` utility function.\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function that gets called for every array\n   * item.\n   * @returns {Array} A new array of values returned by the callback function.\n   */\n  function map$1(array, fn) {\n    var length = array.length;\n    var result = [];\n    while (length--) {\n      result[length] = fn(array[length]);\n    }\n    return result;\n  }\n\n  /**\n   * A simple `Array#map`-like wrapper to work with domain name strings or email\n   * addresses.\n   * @private\n   * @param {String} domain The domain name or email address.\n   * @param {Function} callback The function that gets called for every\n   * character.\n   * @returns {Array} A new string of characters returned by the callback\n   * function.\n   */\n  function mapDomain(string, fn) {\n    var parts = string.split('@');\n    var result = '';\n    if (parts.length > 1) {\n      // In email addresses, only the domain name should be punycoded. Leave\n      // the local part (i.e. everything up to `@`) intact.\n      result = parts[0] + '@';\n      string = parts[1];\n    }\n    // Avoid `split(regex)` for IE8 compatibility. See #17.\n    string = string.replace(regexSeparators, '\\x2E');\n    var labels = string.split('.');\n    var encoded = map$1(labels, fn).join('.');\n    return result + encoded;\n  }\n\n  /**\n   * Creates an array containing the numeric code points of each Unicode\n   * character in the string. While JavaScript uses UCS-2 internally,\n   * this function will convert a pair of surrogate halves (each of which\n   * UCS-2 exposes as separate characters) into a single code point,\n   * matching UTF-16.\n   * @see `punycode.ucs2.encode`\n   * @see <https://mathiasbynens.be/notes/javascript-encoding>\n   * @memberOf punycode.ucs2\n   * @name decode\n   * @param {String} string The Unicode input string (UCS-2).\n   * @returns {Array} The new array of code points.\n   */\n  function ucs2decode(string) {\n    var output = [],\n      counter = 0,\n      length = string.length,\n      value,\n      extra;\n    while (counter < length) {\n      value = string.charCodeAt(counter++);\n      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n        // high surrogate, and there is a next character\n        extra = string.charCodeAt(counter++);\n        if ((extra & 0xFC00) == 0xDC00) { // low surrogate\n          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n        } else {\n          // unmatched surrogate; only append this code unit, in case the next\n          // code unit is the high surrogate of a surrogate pair\n          output.push(value);\n          counter--;\n        }\n      } else {\n        output.push(value);\n      }\n    }\n    return output;\n  }\n\n  /**\n   * Converts a digit/integer into a basic code point.\n   * @see `basicToDigit()`\n   * @private\n   * @param {Number} digit The numeric value of a basic code point.\n   * @returns {Number} The basic code point whose value (when used for\n   * representing integers) is `digit`, which needs to be in the range\n   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n   * used; else, the lowercase form is used. The behavior is undefined\n   * if `flag` is non-zero and `digit` has no uppercase form.\n   */\n  function digitToBasic(digit, flag) {\n    //  0..25 map to ASCII a..z or A..Z\n    // 26..35 map to ASCII 0..9\n    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n  }\n\n  /**\n   * Bias adaptation function as per section 3.4 of RFC 3492.\n   * https://tools.ietf.org/html/rfc3492#section-3.4\n   * @private\n   */\n  function adapt(delta, numPoints, firstTime) {\n    var k = 0;\n    delta = firstTime ? floor(delta / damp) : delta >> 1;\n    delta += floor(delta / numPoints);\n    for ( /* no initialization */ ; delta > baseMinusTMin * tMax >> 1; k += base) {\n      delta = floor(delta / baseMinusTMin);\n    }\n    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n  }\n\n  /**\n   * Converts a string of Unicode symbols (e.g. a domain name label) to a\n   * Punycode string of ASCII-only symbols.\n   * @memberOf punycode\n   * @param {String} input The string of Unicode symbols.\n   * @returns {String} The resulting Punycode string of ASCII-only symbols.\n   */\n  function encode(input) {\n    var n,\n      delta,\n      handledCPCount,\n      basicLength,\n      bias,\n      j,\n      m,\n      q,\n      k,\n      t,\n      currentValue,\n      output = [],\n      /** `inputLength` will hold the number of code points in `input`. */\n      inputLength,\n      /** Cached calculation results */\n      handledCPCountPlusOne,\n      baseMinusT,\n      qMinusT;\n\n    // Convert the input in UCS-2 to Unicode\n    input = ucs2decode(input);\n\n    // Cache the length\n    inputLength = input.length;\n\n    // Initialize the state\n    n = initialN;\n    delta = 0;\n    bias = initialBias;\n\n    // Handle the basic code points\n    for (j = 0; j < inputLength; ++j) {\n      currentValue = input[j];\n      if (currentValue < 0x80) {\n        output.push(stringFromCharCode(currentValue));\n      }\n    }\n\n    handledCPCount = basicLength = output.length;\n\n    // `handledCPCount` is the number of code points that have been handled;\n    // `basicLength` is the number of basic code points.\n\n    // Finish the basic string - if it is not empty - with a delimiter\n    if (basicLength) {\n      output.push(delimiter);\n    }\n\n    // Main encoding loop:\n    while (handledCPCount < inputLength) {\n\n      // All non-basic code points < n have been handled already. Find the next\n      // larger one:\n      for (m = maxInt, j = 0; j < inputLength; ++j) {\n        currentValue = input[j];\n        if (currentValue >= n && currentValue < m) {\n          m = currentValue;\n        }\n      }\n\n      // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n      // but guard against overflow\n      handledCPCountPlusOne = handledCPCount + 1;\n      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n        error('overflow');\n      }\n\n      delta += (m - n) * handledCPCountPlusOne;\n      n = m;\n\n      for (j = 0; j < inputLength; ++j) {\n        currentValue = input[j];\n\n        if (currentValue < n && ++delta > maxInt) {\n          error('overflow');\n        }\n\n        if (currentValue == n) {\n          // Represent delta as a generalized variable-length integer\n          for (q = delta, k = base; /* no condition */ ; k += base) {\n            t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n            if (q < t) {\n              break;\n            }\n            qMinusT = q - t;\n            baseMinusT = base - t;\n            output.push(\n              stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n            );\n            q = floor(qMinusT / baseMinusT);\n          }\n\n          output.push(stringFromCharCode(digitToBasic(q, 0)));\n          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n          delta = 0;\n          ++handledCPCount;\n        }\n      }\n\n      ++delta;\n      ++n;\n\n    }\n    return output.join('');\n  }\n\n  /**\n   * Converts a Unicode string representing a domain name or an email address to\n   * Punycode. Only the non-ASCII parts of the domain name will be converted,\n   * i.e. it doesn't matter if you call it with a domain that's already in\n   * ASCII.\n   * @memberOf punycode\n   * @param {String} input The domain name or email address to convert, as a\n   * Unicode string.\n   * @returns {String} The Punycode representation of the given domain name or\n   * email address.\n   */\n  function toASCII(input) {\n    return mapDomain(input, function(string) {\n      return regexNonASCII.test(string) ?\n        'xn--' + encode(string) :\n        string;\n    });\n  }\n\n  // Copyright Joyent, Inc. and other Node contributors.\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a\n  // copy of this software and associated documentation files (the\n  // \"Software\"), to deal in the Software without restriction, including\n  // without limitation the rights to use, copy, modify, merge, publish,\n  // distribute, sublicense, and/or sell copies of the Software, and to permit\n  // persons to whom the Software is furnished to do so, subject to the\n  // following conditions:\n  //\n  // The above copyright notice and this permission notice shall be included\n  // in all copies or substantial portions of the Software.\n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n  // If obj.hasOwnProperty has been overridden, then calling\n  // obj.hasOwnProperty(prop) will break.\n  // See: https://github.com/joyent/node/issues/1707\n  function hasOwnProperty(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n  }\n  var isArray = Array.isArray || function (xs) {\n    return Object.prototype.toString.call(xs) === '[object Array]';\n  };\n  function stringifyPrimitive(v) {\n    switch (typeof v) {\n      case 'string':\n        return v;\n\n      case 'boolean':\n        return v ? 'true' : 'false';\n\n      case 'number':\n        return isFinite(v) ? v : '';\n\n      default:\n        return '';\n    }\n  }\n\n  function stringify (obj, sep, eq, name) {\n    sep = sep || '&';\n    eq = eq || '=';\n    if (obj === null) {\n      obj = undefined;\n    }\n\n    if (typeof obj === 'object') {\n      return map(objectKeys(obj), function(k) {\n        var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n        if (isArray(obj[k])) {\n          return map(obj[k], function(v) {\n            return ks + encodeURIComponent(stringifyPrimitive(v));\n          }).join(sep);\n        } else {\n          return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n        }\n      }).join(sep);\n\n    }\n\n    if (!name) return '';\n    return encodeURIComponent(stringifyPrimitive(name)) + eq +\n           encodeURIComponent(stringifyPrimitive(obj));\n  }\n  function map (xs, f) {\n    if (xs.map) return xs.map(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n      res.push(f(xs[i], i));\n    }\n    return res;\n  }\n\n  var objectKeys = Object.keys || function (obj) {\n    var res = [];\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n    }\n    return res;\n  };\n\n  function parse$1(qs, sep, eq, options) {\n    sep = sep || '&';\n    eq = eq || '=';\n    var obj = {};\n\n    if (typeof qs !== 'string' || qs.length === 0) {\n      return obj;\n    }\n\n    var regexp = /\\+/g;\n    qs = qs.split(sep);\n\n    var maxKeys = 1000;\n    if (options && typeof options.maxKeys === 'number') {\n      maxKeys = options.maxKeys;\n    }\n\n    var len = qs.length;\n    // maxKeys <= 0 means that we should not limit keys count\n    if (maxKeys > 0 && len > maxKeys) {\n      len = maxKeys;\n    }\n\n    for (var i = 0; i < len; ++i) {\n      var x = qs[i].replace(regexp, '%20'),\n          idx = x.indexOf(eq),\n          kstr, vstr, k, v;\n\n      if (idx >= 0) {\n        kstr = x.substr(0, idx);\n        vstr = x.substr(idx + 1);\n      } else {\n        kstr = x;\n        vstr = '';\n      }\n\n      k = decodeURIComponent(kstr);\n      v = decodeURIComponent(vstr);\n\n      if (!hasOwnProperty(obj, k)) {\n        obj[k] = v;\n      } else if (isArray(obj[k])) {\n        obj[k].push(v);\n      } else {\n        obj[k] = [obj[k], v];\n      }\n    }\n\n    return obj;\n  }\n\n  // WHATWG API\n  const URL = _polyfillNode_buffer.global.URL;\n  const URLSearchParams = _polyfillNode_buffer.global.URLSearchParams;\n  var _polyfillNode_url = {\n    parse: urlParse,\n    resolve: urlResolve,\n    resolveObject: urlResolveObject,\n    fileURLToPath: urlFileURLToPath,\n    format: urlFormat,\n    Url: Url,\n\n    // WHATWG API\n    URL,\n    URLSearchParams,  \n  };\n  function Url() {\n    this.protocol = null;\n    this.slashes = null;\n    this.auth = null;\n    this.host = null;\n    this.port = null;\n    this.hostname = null;\n    this.hash = null;\n    this.search = null;\n    this.query = null;\n    this.pathname = null;\n    this.path = null;\n    this.href = null;\n  }\n\n  // Reference: RFC 3986, RFC 1808, RFC 2396\n\n  // define these here so at least they only have to be\n  // compiled once on the first module load.\n  var protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    };\n\n  function urlParse(url, parseQueryString, slashesDenoteHost) {\n    if (url && _polyfillNode_util.isObject(url) && url instanceof Url) return url;\n\n    var u = new Url;\n    u.parse(url, parseQueryString, slashesDenoteHost);\n    return u;\n  }\n  Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n    return parse(this, url, parseQueryString, slashesDenoteHost);\n  };\n\n  function parse(self, url, parseQueryString, slashesDenoteHost) {\n    if (!_polyfillNode_util.isString(url)) {\n      throw new TypeError('Parameter \\'url\\' must be a string, not ' + typeof url);\n    }\n\n    // Copy chrome, IE, opera backslash-handling behavior.\n    // Back slashes before the query string get converted to forward slashes\n    // See: https://code.google.com/p/chromium/issues/detail?id=25916\n    var queryIndex = url.indexOf('?'),\n      splitter =\n      (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n    uSplit[0] = uSplit[0].replace(slashRegex, '/');\n    url = uSplit.join(splitter);\n\n    var rest = url;\n\n    // trim before proceeding.\n    // This is to support parse stuff like \"  http://foo.com  \\n\"\n    rest = rest.trim();\n\n    if (!slashesDenoteHost && url.split('#').length === 1) {\n      // Try fast path regexp\n      var simplePath = simplePathPattern.exec(rest);\n      if (simplePath) {\n        self.path = rest;\n        self.href = rest;\n        self.pathname = simplePath[1];\n        if (simplePath[2]) {\n          self.search = simplePath[2];\n          if (parseQueryString) {\n            self.query = parse$1(self.search.substr(1));\n          } else {\n            self.query = self.search.substr(1);\n          }\n        } else if (parseQueryString) {\n          self.search = '';\n          self.query = {};\n        }\n        return self;\n      }\n    }\n\n    var proto = protocolPattern.exec(rest);\n    if (proto) {\n      proto = proto[0];\n      var lowerProto = proto.toLowerCase();\n      self.protocol = lowerProto;\n      rest = rest.substr(proto.length);\n    }\n\n    // figure out if it's got a host\n    // user@server is *always* interpreted as a hostname, and url\n    // resolution will treat //foo/bar as host=foo,path=bar because that's\n    // how the browser resolves relative URLs.\n    if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n      var slashes = rest.substr(0, 2) === '//';\n      if (slashes && !(proto && hostlessProtocol[proto])) {\n        rest = rest.substr(2);\n        self.slashes = true;\n      }\n    }\n    var i, hec, l, p;\n    if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n      // there's a hostname.\n      // the first instance of /, ?, ;, or # ends the host.\n      //\n      // If there is an @ in the hostname, then non-host chars *are* allowed\n      // to the left of the last @ sign, unless some host-ending character\n      // comes *before* the @-sign.\n      // URLs are obnoxious.\n      //\n      // ex:\n      // http://a@b@c/ => user:a@b host:c\n      // http://a@b?@c => user:a host:c path:/?@c\n\n      // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n      // Review our test case against browsers more comprehensively.\n\n      // find the first instance of any hostEndingChars\n      var hostEnd = -1;\n      for (i = 0; i < hostEndingChars.length; i++) {\n        hec = rest.indexOf(hostEndingChars[i]);\n        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n          hostEnd = hec;\n      }\n\n      // at this point, either we have an explicit point where the\n      // auth portion cannot go past, or the last @ char is the decider.\n      var auth, atSign;\n      if (hostEnd === -1) {\n        // atSign can be anywhere.\n        atSign = rest.lastIndexOf('@');\n      } else {\n        // atSign must be in auth portion.\n        // http://a@b/c@d => host:b auth:a path:/c@d\n        atSign = rest.lastIndexOf('@', hostEnd);\n      }\n\n      // Now we have a portion which is definitely the auth.\n      // Pull that off.\n      if (atSign !== -1) {\n        auth = rest.slice(0, atSign);\n        rest = rest.slice(atSign + 1);\n        self.auth = decodeURIComponent(auth);\n      }\n\n      // the host is the remaining to the left of the first non-host char\n      hostEnd = -1;\n      for (i = 0; i < nonHostChars.length; i++) {\n        hec = rest.indexOf(nonHostChars[i]);\n        if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n          hostEnd = hec;\n      }\n      // if we still have not hit it, then the entire thing is a host.\n      if (hostEnd === -1)\n        hostEnd = rest.length;\n\n      self.host = rest.slice(0, hostEnd);\n      rest = rest.slice(hostEnd);\n\n      // pull out port.\n      parseHost(self);\n\n      // we've indicated that there is a hostname,\n      // so even if it's empty, it has to be present.\n      self.hostname = self.hostname || '';\n\n      // if hostname begins with [ and ends with ]\n      // assume that it's an IPv6 address.\n      var ipv6Hostname = self.hostname[0] === '[' &&\n        self.hostname[self.hostname.length - 1] === ']';\n\n      // validate a little.\n      if (!ipv6Hostname) {\n        var hostparts = self.hostname.split(/\\./);\n        for (i = 0, l = hostparts.length; i < l; i++) {\n          var part = hostparts[i];\n          if (!part) continue;\n          if (!part.match(hostnamePartPattern)) {\n            var newpart = '';\n            for (var j = 0, k = part.length; j < k; j++) {\n              if (part.charCodeAt(j) > 127) {\n                // we replace non-ASCII char with a temporary placeholder\n                // we need this to make sure size of hostname is not\n                // broken by replacing non-ASCII by nothing\n                newpart += 'x';\n              } else {\n                newpart += part[j];\n              }\n            }\n            // we test again with ASCII char only\n            if (!newpart.match(hostnamePartPattern)) {\n              var validParts = hostparts.slice(0, i);\n              var notHost = hostparts.slice(i + 1);\n              var bit = part.match(hostnamePartStart);\n              if (bit) {\n                validParts.push(bit[1]);\n                notHost.unshift(bit[2]);\n              }\n              if (notHost.length) {\n                rest = '/' + notHost.join('.') + rest;\n              }\n              self.hostname = validParts.join('.');\n              break;\n            }\n          }\n        }\n      }\n\n      if (self.hostname.length > hostnameMaxLen) {\n        self.hostname = '';\n      } else {\n        // hostnames are always lower case.\n        self.hostname = self.hostname.toLowerCase();\n      }\n\n      if (!ipv6Hostname) {\n        // IDNA Support: Returns a punycoded representation of \"domain\".\n        // It only converts parts of the domain name that\n        // have non-ASCII characters, i.e. it doesn't matter if\n        // you call it with a domain that already is ASCII-only.\n        self.hostname = toASCII(self.hostname);\n      }\n\n      p = self.port ? ':' + self.port : '';\n      var h = self.hostname || '';\n      self.host = h + p;\n      self.href += self.host;\n\n      // strip [ and ] from the hostname\n      // the host field still retains them, though\n      if (ipv6Hostname) {\n        self.hostname = self.hostname.substr(1, self.hostname.length - 2);\n        if (rest[0] !== '/') {\n          rest = '/' + rest;\n        }\n      }\n    }\n\n    // now rest is set to the post-host stuff.\n    // chop off any delim chars.\n    if (!unsafeProtocol[lowerProto]) {\n\n      // First, make 100% sure that any \"autoEscape\" chars get\n      // escaped, even if encodeURIComponent doesn't think they\n      // need to be.\n      for (i = 0, l = autoEscape.length; i < l; i++) {\n        var ae = autoEscape[i];\n        if (rest.indexOf(ae) === -1)\n          continue;\n        var esc = encodeURIComponent(ae);\n        if (esc === ae) {\n          esc = escape(ae);\n        }\n        rest = rest.split(ae).join(esc);\n      }\n    }\n\n\n    // chop off from the tail first.\n    var hash = rest.indexOf('#');\n    if (hash !== -1) {\n      // got a fragment string.\n      self.hash = rest.substr(hash);\n      rest = rest.slice(0, hash);\n    }\n    var qm = rest.indexOf('?');\n    if (qm !== -1) {\n      self.search = rest.substr(qm);\n      self.query = rest.substr(qm + 1);\n      if (parseQueryString) {\n        self.query = parse$1(self.query);\n      }\n      rest = rest.slice(0, qm);\n    } else if (parseQueryString) {\n      // no query string, but parseQueryString still requested\n      self.search = '';\n      self.query = {};\n    }\n    if (rest) self.pathname = rest;\n    if (slashedProtocol[lowerProto] &&\n      self.hostname && !self.pathname) {\n      self.pathname = '/';\n    }\n\n    //to support http.request\n    if (self.pathname || self.search) {\n      p = self.pathname || '';\n      var s = self.search || '';\n      self.path = p + s;\n    }\n\n    // finally, reconstruct the href based on what has been validated.\n    self.href = format(self);\n    return self;\n  }\n\n  function urlFileURLToPath(path) {\n    if (typeof path === 'string')\n      path = new Url().parse(path);\n    else if (!(path instanceof Url))\n      throw new TypeError('The \"path\" argument must be of type string or an instance of URL. Received type ' + (typeof path) + String(path));\n    if (path.protocol !== 'file:')\n      throw new TypeError('The URL must be of scheme file');\n    return getPathFromURLPosix(path);\n  }\n\n  function getPathFromURLPosix(url) {\n    const pathname = url.pathname;\n    for (let n = 0; n < pathname.length; n++) {\n      if (pathname[n] === '%') {\n        const third = pathname.codePointAt(n + 2) | 0x20;\n        if (pathname[n + 1] === '2' && third === 102) {\n          throw new TypeError(\n            'must not include encoded / characters'\n          );\n        }\n      }\n    }\n    return decodeURIComponent(pathname);\n  }\n\n  // format a parsed object into a url string\n  function urlFormat(obj) {\n    // ensure it's an object, and not a string url.\n    // If it's an obj, this is a no-op.\n    // this way, you can call url_format() on strings\n    // to clean up potentially wonky urls.\n    if (_polyfillNode_util.isString(obj)) obj = parse({}, obj);\n    return format(obj);\n  }\n\n  function format(self) {\n    var auth = self.auth || '';\n    if (auth) {\n      auth = encodeURIComponent(auth);\n      auth = auth.replace(/%3A/i, ':');\n      auth += '@';\n    }\n\n    var protocol = self.protocol || '',\n      pathname = self.pathname || '',\n      hash = self.hash || '',\n      host = false,\n      query = '';\n\n    if (self.host) {\n      host = auth + self.host;\n    } else if (self.hostname) {\n      host = auth + (self.hostname.indexOf(':') === -1 ?\n        self.hostname :\n        '[' + this.hostname + ']');\n      if (self.port) {\n        host += ':' + self.port;\n      }\n    }\n\n    if (self.query &&\n      _polyfillNode_util.isObject(self.query) &&\n      Object.keys(self.query).length) {\n      query = stringify(self.query);\n    }\n\n    var search = self.search || (query && ('?' + query)) || '';\n\n    if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n    // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n    // unless they had them to begin with.\n    if (self.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n      host = '//' + (host || '');\n      if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n    } else if (!host) {\n      host = '';\n    }\n\n    if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n    if (search && search.charAt(0) !== '?') search = '?' + search;\n\n    pathname = pathname.replace(/[?#]/g, function(match) {\n      return encodeURIComponent(match);\n    });\n    search = search.replace('#', '%23');\n\n    return protocol + host + pathname + search + hash;\n  }\n\n  Url.prototype.format = function() {\n    return format(this);\n  };\n\n  function urlResolve(source, relative) {\n    return urlParse(source, false, true).resolve(relative);\n  }\n\n  Url.prototype.resolve = function(relative) {\n    return this.resolveObject(urlParse(relative, false, true)).format();\n  };\n\n  function urlResolveObject(source, relative) {\n    if (!source) return relative;\n    return urlParse(source, false, true).resolveObject(relative);\n  }\n\n  Url.prototype.resolveObject = function(relative) {\n    if (_polyfillNode_util.isString(relative)) {\n      var rel = new Url();\n      rel.parse(relative, false, true);\n      relative = rel;\n    }\n\n    var result = new Url();\n    var tkeys = Object.keys(this);\n    for (var tk = 0; tk < tkeys.length; tk++) {\n      var tkey = tkeys[tk];\n      result[tkey] = this[tkey];\n    }\n\n    // hash is always overridden, no matter what.\n    // even href=\"\" will remove it.\n    result.hash = relative.hash;\n\n    // if the relative url is empty, then there's nothing left to do here.\n    if (relative.href === '') {\n      result.href = result.format();\n      return result;\n    }\n\n    // hrefs like //foo/bar always cut to the protocol.\n    if (relative.slashes && !relative.protocol) {\n      // take everything except the protocol from relative\n      var rkeys = Object.keys(relative);\n      for (var rk = 0; rk < rkeys.length; rk++) {\n        var rkey = rkeys[rk];\n        if (rkey !== 'protocol')\n          result[rkey] = relative[rkey];\n      }\n\n      //urlParse appends trailing / to urls like http://www.example.com\n      if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n        result.path = result.pathname = '/';\n      }\n\n      result.href = result.format();\n      return result;\n    }\n    var relPath;\n    if (relative.protocol && relative.protocol !== result.protocol) {\n      // if it's a known url protocol, then changing\n      // the protocol does weird things\n      // first, if it's not file:, then we MUST have a host,\n      // and if there was a path\n      // to begin with, then we MUST have a path.\n      // if it is file:, then the host is dropped,\n      // because that's known to be hostless.\n      // anything else is assumed to be absolute.\n      if (!slashedProtocol[relative.protocol]) {\n        var keys = Object.keys(relative);\n        for (var v = 0; v < keys.length; v++) {\n          var k = keys[v];\n          result[k] = relative[k];\n        }\n        result.href = result.format();\n        return result;\n      }\n\n      result.protocol = relative.protocol;\n      if (!relative.host && !hostlessProtocol[relative.protocol]) {\n        relPath = (relative.pathname || '').split('/');\n        while (relPath.length && !(relative.host = relPath.shift()));\n        if (!relative.host) relative.host = '';\n        if (!relative.hostname) relative.hostname = '';\n        if (relPath[0] !== '') relPath.unshift('');\n        if (relPath.length < 2) relPath.unshift('');\n        result.pathname = relPath.join('/');\n      } else {\n        result.pathname = relative.pathname;\n      }\n      result.search = relative.search;\n      result.query = relative.query;\n      result.host = relative.host || '';\n      result.auth = relative.auth;\n      result.hostname = relative.hostname || relative.host;\n      result.port = relative.port;\n      // to support http.request\n      if (result.pathname || result.search) {\n        var p = result.pathname || '';\n        var s = result.search || '';\n        result.path = p + s;\n      }\n      result.slashes = result.slashes || relative.slashes;\n      result.href = result.format();\n      return result;\n    }\n\n    var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n        relative.host ||\n        relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n        (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n    relPath = relative.pathname && relative.pathname.split('/') || [];\n    // if the url is a non-slashed url, then relative\n    // links like ../.. should be able\n    // to crawl up to the hostname, as well.  This is strange.\n    // result.protocol has already been set by now.\n    // Later on, put the first path part into the host field.\n    if (psychotic) {\n      result.hostname = '';\n      result.port = null;\n      if (result.host) {\n        if (srcPath[0] === '') srcPath[0] = result.host;\n        else srcPath.unshift(result.host);\n      }\n      result.host = '';\n      if (relative.protocol) {\n        relative.hostname = null;\n        relative.port = null;\n        if (relative.host) {\n          if (relPath[0] === '') relPath[0] = relative.host;\n          else relPath.unshift(relative.host);\n        }\n        relative.host = null;\n      }\n      mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n    }\n    var authInHost;\n    if (isRelAbs) {\n      // it's absolute.\n      result.host = (relative.host || relative.host === '') ?\n        relative.host : result.host;\n      result.hostname = (relative.hostname || relative.hostname === '') ?\n        relative.hostname : result.hostname;\n      result.search = relative.search;\n      result.query = relative.query;\n      srcPath = relPath;\n      // fall through to the dot-handling below.\n    } else if (relPath.length) {\n      // it's relative\n      // throw away the existing file, and take the new path instead.\n      if (!srcPath) srcPath = [];\n      srcPath.pop();\n      srcPath = srcPath.concat(relPath);\n      result.search = relative.search;\n      result.query = relative.query;\n    } else if (!_polyfillNode_util.isNullOrUndefined(relative.search)) {\n      // just pull out the search.\n      // like href='?foo'.\n      // Put this after the other two cases because it simplifies the booleans\n      if (psychotic) {\n        result.hostname = result.host = srcPath.shift();\n        //occationaly the auth can get stuck only in host\n        //this especially happens in cases like\n        //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n        authInHost = result.host && result.host.indexOf('@') > 0 ?\n          result.host.split('@') : false;\n        if (authInHost) {\n          result.auth = authInHost.shift();\n          result.host = result.hostname = authInHost.shift();\n        }\n      }\n      result.search = relative.search;\n      result.query = relative.query;\n      //to support http.request\n      if (!_polyfillNode_util.isNull(result.pathname) || !_polyfillNode_util.isNull(result.search)) {\n        result.path = (result.pathname ? result.pathname : '') +\n          (result.search ? result.search : '');\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    if (!srcPath.length) {\n      // no path at all.  easy.\n      // we've already handled the other stuff above.\n      result.pathname = null;\n      //to support http.request\n      if (result.search) {\n        result.path = '/' + result.search;\n      } else {\n        result.path = null;\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    // if a url ENDs in . or .., then it must get a trailing slash.\n    // however, if it ends in anything else non-slashy,\n    // then it must NOT get a trailing slash.\n    var last = srcPath.slice(-1)[0];\n    var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n    // strip single dots, resolve double dots to parent dir\n    // if the path tries to go above the root, `up` ends up > 0\n    var up = 0;\n    for (var i = srcPath.length; i >= 0; i--) {\n      last = srcPath[i];\n      if (last === '.') {\n        srcPath.splice(i, 1);\n      } else if (last === '..') {\n        srcPath.splice(i, 1);\n        up++;\n      } else if (up) {\n        srcPath.splice(i, 1);\n        up--;\n      }\n    }\n\n    // if the path is allowed to go above the root, restore leading ..s\n    if (!mustEndAbs && !removeAllDots) {\n      for (; up--; up) {\n        srcPath.unshift('..');\n      }\n    }\n\n    if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n      srcPath.unshift('');\n    }\n\n    if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n      srcPath.push('');\n    }\n\n    var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n    // put the host back\n    if (psychotic) {\n      result.hostname = result.host = isAbsolute ? '' :\n        srcPath.length ? srcPath.shift() : '';\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      authInHost = result.host && result.host.indexOf('@') > 0 ?\n        result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n\n    mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n    if (mustEndAbs && !isAbsolute) {\n      srcPath.unshift('');\n    }\n\n    if (!srcPath.length) {\n      result.pathname = null;\n      result.path = null;\n    } else {\n      result.pathname = srcPath.join('/');\n    }\n\n    //to support request.http\n    if (!_polyfillNode_util.isNull(result.pathname) || !_polyfillNode_util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n        (result.search ? result.search : '');\n    }\n    result.auth = relative.auth || result.auth;\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  };\n\n  Url.prototype.parseHost = function() {\n    return parseHost(this);\n  };\n\n  function parseHost(self) {\n    var host = self.host;\n    var port = portPattern.exec(host);\n    if (port) {\n      port = port[0];\n      if (port !== ':') {\n        self.port = port.substr(1);\n      }\n      host = host.substr(0, host.length - port.length);\n    }\n    if (host) self.hostname = host;\n  }\n\n  exports.URL = URL;\n  exports.URLSearchParams = URLSearchParams;\n  exports.Url = Url;\n  exports.default = _polyfillNode_url;\n  exports.fileURLToPath = urlFileURLToPath;\n  exports.format = urlFormat;\n  exports.parse = urlParse;\n  exports.resolve = urlResolve;\n  exports.resolveObject = urlResolveObject;\n\n}));\n",
      "type": "chunk"
    },
    {
      "name": "node.buffer",
      "originalName": "node.buffer",
      "code": "sap.ui.define(['exports'], (function (exports) { 'use strict';\n\n  var global$1 = (typeof global !== \"undefined\" ? global :\n    typeof self !== \"undefined\" ? self :\n    typeof window !== \"undefined\" ? window : {});\n\n  // shim for using process in browser\n  // based off https://github.com/defunctzombie/node-process/blob/master/browser.js\n\n  function defaultSetTimout() {\n      throw new Error('setTimeout has not been defined');\n  }\n  function defaultClearTimeout () {\n      throw new Error('clearTimeout has not been defined');\n  }\n  var cachedSetTimeout = defaultSetTimout;\n  var cachedClearTimeout = defaultClearTimeout;\n  if (typeof global$1.setTimeout === 'function') {\n      cachedSetTimeout = setTimeout;\n  }\n  if (typeof global$1.clearTimeout === 'function') {\n      cachedClearTimeout = clearTimeout;\n  }\n\n  function runTimeout(fun) {\n      if (cachedSetTimeout === setTimeout) {\n          //normal enviroments in sane situations\n          return setTimeout(fun, 0);\n      }\n      // if setTimeout wasn't available but was latter defined\n      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n          cachedSetTimeout = setTimeout;\n          return setTimeout(fun, 0);\n      }\n      try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedSetTimeout(fun, 0);\n      } catch(e){\n          try {\n              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n              return cachedSetTimeout.call(null, fun, 0);\n          } catch(e){\n              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n              return cachedSetTimeout.call(this, fun, 0);\n          }\n      }\n\n\n  }\n  function runClearTimeout(marker) {\n      if (cachedClearTimeout === clearTimeout) {\n          //normal enviroments in sane situations\n          return clearTimeout(marker);\n      }\n      // if clearTimeout wasn't available but was latter defined\n      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n          cachedClearTimeout = clearTimeout;\n          return clearTimeout(marker);\n      }\n      try {\n          // when when somebody has screwed with setTimeout but no I.E. maddness\n          return cachedClearTimeout(marker);\n      } catch (e){\n          try {\n              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n              return cachedClearTimeout.call(null, marker);\n          } catch (e){\n              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n              // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n              return cachedClearTimeout.call(this, marker);\n          }\n      }\n\n\n\n  }\n  var queue = [];\n  var draining = false;\n  var currentQueue;\n  var queueIndex = -1;\n\n  function cleanUpNextTick() {\n      if (!draining || !currentQueue) {\n          return;\n      }\n      draining = false;\n      if (currentQueue.length) {\n          queue = currentQueue.concat(queue);\n      } else {\n          queueIndex = -1;\n      }\n      if (queue.length) {\n          drainQueue();\n      }\n  }\n\n  function drainQueue() {\n      if (draining) {\n          return;\n      }\n      var timeout = runTimeout(cleanUpNextTick);\n      draining = true;\n\n      var len = queue.length;\n      while(len) {\n          currentQueue = queue;\n          queue = [];\n          while (++queueIndex < len) {\n              if (currentQueue) {\n                  currentQueue[queueIndex].run();\n              }\n          }\n          queueIndex = -1;\n          len = queue.length;\n      }\n      currentQueue = null;\n      draining = false;\n      runClearTimeout(timeout);\n  }\n  function nextTick(fun) {\n      var args = new Array(arguments.length - 1);\n      if (arguments.length > 1) {\n          for (var i = 1; i < arguments.length; i++) {\n              args[i - 1] = arguments[i];\n          }\n      }\n      queue.push(new Item(fun, args));\n      if (queue.length === 1 && !draining) {\n          runTimeout(drainQueue);\n      }\n  }\n  // v8 likes predictible objects\n  function Item(fun, array) {\n      this.fun = fun;\n      this.array = array;\n  }\n  Item.prototype.run = function () {\n      this.fun.apply(null, this.array);\n  };\n  var title = 'browser';\n  var platform = 'browser';\n  var browser = true;\n  var env = {};\n  var argv = [];\n  var version = ''; // empty string to avoid regexp issues\n  var versions = {};\n  var release = {};\n  var config = {};\n\n  function noop() {}\n\n  var on = noop;\n  var addListener = noop;\n  var once = noop;\n  var off = noop;\n  var removeListener = noop;\n  var removeAllListeners = noop;\n  var emit = noop;\n\n  function binding(name) {\n      throw new Error('process.binding is not supported');\n  }\n\n  function cwd () { return '/' }\n  function chdir (dir) {\n      throw new Error('process.chdir is not supported');\n  }function umask() { return 0; }\n\n  // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js\n  var performance = global$1.performance || {};\n  var performanceNow =\n    performance.now        ||\n    performance.mozNow     ||\n    performance.msNow      ||\n    performance.oNow       ||\n    performance.webkitNow  ||\n    function(){ return (new Date()).getTime() };\n\n  // generate timestamp or delta\n  // see http://nodejs.org/api/process.html#process_process_hrtime\n  function hrtime(previousTimestamp){\n    var clocktime = performanceNow.call(performance)*1e-3;\n    var seconds = Math.floor(clocktime);\n    var nanoseconds = Math.floor((clocktime%1)*1e9);\n    if (previousTimestamp) {\n      seconds = seconds - previousTimestamp[0];\n      nanoseconds = nanoseconds - previousTimestamp[1];\n      if (nanoseconds<0) {\n        seconds--;\n        nanoseconds += 1e9;\n      }\n    }\n    return [seconds,nanoseconds]\n  }\n\n  var startTime = new Date();\n  function uptime() {\n    var currentTime = new Date();\n    var dif = currentTime - startTime;\n    return dif / 1000;\n  }\n\n  var browser$1 = {\n    nextTick: nextTick,\n    title: title,\n    browser: browser,\n    env: env,\n    argv: argv,\n    version: version,\n    versions: versions,\n    on: on,\n    addListener: addListener,\n    once: once,\n    off: off,\n    removeListener: removeListener,\n    removeAllListeners: removeAllListeners,\n    emit: emit,\n    binding: binding,\n    cwd: cwd,\n    chdir: chdir,\n    umask: umask,\n    hrtime: hrtime,\n    platform: platform,\n    release: release,\n    config: config,\n    uptime: uptime\n  };\n\n  var lookup = [];\n  var revLookup = [];\n  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n  var inited = false;\n  function init () {\n    inited = true;\n    var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    for (var i = 0, len = code.length; i < len; ++i) {\n      lookup[i] = code[i];\n      revLookup[code.charCodeAt(i)] = i;\n    }\n\n    revLookup['-'.charCodeAt(0)] = 62;\n    revLookup['_'.charCodeAt(0)] = 63;\n  }\n\n  function toByteArray (b64) {\n    if (!inited) {\n      init();\n    }\n    var i, j, l, tmp, placeHolders, arr;\n    var len = b64.length;\n\n    if (len % 4 > 0) {\n      throw new Error('Invalid string. Length must be a multiple of 4')\n    }\n\n    // the number of equal signs (place holders)\n    // if there are two placeholders, than the two characters before it\n    // represent one byte\n    // if there is only one, then the three characters before it represent 2 bytes\n    // this is just a cheap hack to not do indexOf twice\n    placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;\n\n    // base64 is 4/3 + up to two characters of the original data\n    arr = new Arr(len * 3 / 4 - placeHolders);\n\n    // if there are placeholders, only get up to the last complete 4 chars\n    l = placeHolders > 0 ? len - 4 : len;\n\n    var L = 0;\n\n    for (i = 0, j = 0; i < l; i += 4, j += 3) {\n      tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];\n      arr[L++] = (tmp >> 16) & 0xFF;\n      arr[L++] = (tmp >> 8) & 0xFF;\n      arr[L++] = tmp & 0xFF;\n    }\n\n    if (placeHolders === 2) {\n      tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);\n      arr[L++] = tmp & 0xFF;\n    } else if (placeHolders === 1) {\n      tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);\n      arr[L++] = (tmp >> 8) & 0xFF;\n      arr[L++] = tmp & 0xFF;\n    }\n\n    return arr\n  }\n\n  function tripletToBase64 (num) {\n    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n  }\n\n  function encodeChunk (uint8, start, end) {\n    var tmp;\n    var output = [];\n    for (var i = start; i < end; i += 3) {\n      tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);\n      output.push(tripletToBase64(tmp));\n    }\n    return output.join('')\n  }\n\n  function fromByteArray (uint8) {\n    if (!inited) {\n      init();\n    }\n    var tmp;\n    var len = uint8.length;\n    var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n    var output = '';\n    var parts = [];\n    var maxChunkLength = 16383; // must be multiple of 3\n\n    // go through the array every three bytes, we'll deal with trailing stuff later\n    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));\n    }\n\n    // pad the end with zeros, but make sure to not forget the extra bytes\n    if (extraBytes === 1) {\n      tmp = uint8[len - 1];\n      output += lookup[tmp >> 2];\n      output += lookup[(tmp << 4) & 0x3F];\n      output += '==';\n    } else if (extraBytes === 2) {\n      tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);\n      output += lookup[tmp >> 10];\n      output += lookup[(tmp >> 4) & 0x3F];\n      output += lookup[(tmp << 2) & 0x3F];\n      output += '=';\n    }\n\n    parts.push(output);\n\n    return parts.join('')\n  }\n\n  function read (buffer, offset, isLE, mLen, nBytes) {\n    var e, m;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var nBits = -7;\n    var i = isLE ? (nBytes - 1) : 0;\n    var d = isLE ? -1 : 1;\n    var s = buffer[offset + i];\n\n    i += d;\n\n    e = s & ((1 << (-nBits)) - 1);\n    s >>= (-nBits);\n    nBits += eLen;\n    for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n    m = e & ((1 << (-nBits)) - 1);\n    e >>= (-nBits);\n    nBits += mLen;\n    for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n    if (e === 0) {\n      e = 1 - eBias;\n    } else if (e === eMax) {\n      return m ? NaN : ((s ? -1 : 1) * Infinity)\n    } else {\n      m = m + Math.pow(2, mLen);\n      e = e - eBias;\n    }\n    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n  }\n\n  function write (buffer, value, offset, isLE, mLen, nBytes) {\n    var e, m, c;\n    var eLen = nBytes * 8 - mLen - 1;\n    var eMax = (1 << eLen) - 1;\n    var eBias = eMax >> 1;\n    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);\n    var i = isLE ? 0 : (nBytes - 1);\n    var d = isLE ? 1 : -1;\n    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;\n\n    value = Math.abs(value);\n\n    if (isNaN(value) || value === Infinity) {\n      m = isNaN(value) ? 1 : 0;\n      e = eMax;\n    } else {\n      e = Math.floor(Math.log(value) / Math.LN2);\n      if (value * (c = Math.pow(2, -e)) < 1) {\n        e--;\n        c *= 2;\n      }\n      if (e + eBias >= 1) {\n        value += rt / c;\n      } else {\n        value += rt * Math.pow(2, 1 - eBias);\n      }\n      if (value * c >= 2) {\n        e++;\n        c /= 2;\n      }\n\n      if (e + eBias >= eMax) {\n        m = 0;\n        e = eMax;\n      } else if (e + eBias >= 1) {\n        m = (value * c - 1) * Math.pow(2, mLen);\n        e = e + eBias;\n      } else {\n        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n        e = 0;\n      }\n    }\n\n    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n    e = (e << mLen) | m;\n    eLen += mLen;\n    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n    buffer[offset + i - d] |= s * 128;\n  }\n\n  var toString = {}.toString;\n\n  var isArray = Array.isArray || function (arr) {\n    return toString.call(arr) == '[object Array]';\n  };\n\n  /*!\n   * The buffer module from node.js, for the browser.\n   *\n   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n   * @license  MIT\n   */\n  /* eslint-disable no-proto */\n\n\n  var INSPECT_MAX_BYTES = 50;\n\n  /**\n   * If `Buffer.TYPED_ARRAY_SUPPORT`:\n   *   === true    Use Uint8Array implementation (fastest)\n   *   === false   Use Object implementation (most compatible, even IE6)\n   *\n   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n   * Opera 11.6+, iOS 4.2+.\n   *\n   * Due to various browser bugs, sometimes the Object implementation will be used even\n   * when the browser supports typed arrays.\n   *\n   * Note:\n   *\n   *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n   *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n   *\n   *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n   *\n   *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n   *     incorrect length in some situations.\n\n   * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n   * get the Object implementation, which is slower but behaves correctly.\n   */\n  Buffer.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined\n    ? global$1.TYPED_ARRAY_SUPPORT\n    : true;\n\n  /*\n   * Export kMaxLength after typed array support is determined.\n   */\n  var _kMaxLength = kMaxLength();\n\n  function kMaxLength () {\n    return Buffer.TYPED_ARRAY_SUPPORT\n      ? 0x7fffffff\n      : 0x3fffffff\n  }\n\n  function createBuffer (that, length) {\n    if (kMaxLength() < length) {\n      throw new RangeError('Invalid typed array length')\n    }\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      // Return an augmented `Uint8Array` instance, for best performance\n      that = new Uint8Array(length);\n      that.__proto__ = Buffer.prototype;\n    } else {\n      // Fallback: Return an object instance of the Buffer class\n      if (that === null) {\n        that = new Buffer(length);\n      }\n      that.length = length;\n    }\n\n    return that\n  }\n\n  /**\n   * The Buffer constructor returns instances of `Uint8Array` that have their\n   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n   * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n   * returns a single octet.\n   *\n   * The `Uint8Array` prototype remains unmodified.\n   */\n\n  function Buffer (arg, encodingOrOffset, length) {\n    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n      return new Buffer(arg, encodingOrOffset, length)\n    }\n\n    // Common case.\n    if (typeof arg === 'number') {\n      if (typeof encodingOrOffset === 'string') {\n        throw new Error(\n          'If encoding is specified then the first argument must be a string'\n        )\n      }\n      return allocUnsafe(this, arg)\n    }\n    return from(this, arg, encodingOrOffset, length)\n  }\n\n  Buffer.poolSize = 8192; // not used by this implementation\n\n  // TODO: Legacy, not needed anymore. Remove in next major version.\n  Buffer._augment = function (arr) {\n    arr.__proto__ = Buffer.prototype;\n    return arr\n  };\n\n  function from (that, value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('\"value\" argument must not be a number')\n    }\n\n    if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, value, encodingOrOffset, length)\n    }\n\n    if (typeof value === 'string') {\n      return fromString(that, value, encodingOrOffset)\n    }\n\n    return fromObject(that, value)\n  }\n\n  /**\n   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n   * if value is a number.\n   * Buffer.from(str[, encoding])\n   * Buffer.from(array)\n   * Buffer.from(buffer)\n   * Buffer.from(arrayBuffer[, byteOffset[, length]])\n   **/\n  Buffer.from = function (value, encodingOrOffset, length) {\n    return from(null, value, encodingOrOffset, length)\n  };\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    Buffer.prototype.__proto__ = Uint8Array.prototype;\n    Buffer.__proto__ = Uint8Array;\n    if (typeof Symbol !== 'undefined' && Symbol.species &&\n        Buffer[Symbol.species] === Buffer) ;\n  }\n\n  function assertSize (size) {\n    if (typeof size !== 'number') {\n      throw new TypeError('\"size\" argument must be a number')\n    } else if (size < 0) {\n      throw new RangeError('\"size\" argument must not be negative')\n    }\n  }\n\n  function alloc (that, size, fill, encoding) {\n    assertSize(size);\n    if (size <= 0) {\n      return createBuffer(that, size)\n    }\n    if (fill !== undefined) {\n      // Only pay attention to encoding if it's a string. This\n      // prevents accidentally sending in a number that would\n      // be interpretted as a start offset.\n      return typeof encoding === 'string'\n        ? createBuffer(that, size).fill(fill, encoding)\n        : createBuffer(that, size).fill(fill)\n    }\n    return createBuffer(that, size)\n  }\n\n  /**\n   * Creates a new filled Buffer instance.\n   * alloc(size[, fill[, encoding]])\n   **/\n  Buffer.alloc = function (size, fill, encoding) {\n    return alloc(null, size, fill, encoding)\n  };\n\n  function allocUnsafe (that, size) {\n    assertSize(size);\n    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n    if (!Buffer.TYPED_ARRAY_SUPPORT) {\n      for (var i = 0; i < size; ++i) {\n        that[i] = 0;\n      }\n    }\n    return that\n  }\n\n  /**\n   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n   * */\n  Buffer.allocUnsafe = function (size) {\n    return allocUnsafe(null, size)\n  };\n  /**\n   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n   */\n  Buffer.allocUnsafeSlow = function (size) {\n    return allocUnsafe(null, size)\n  };\n\n  function fromString (that, string, encoding) {\n    if (typeof encoding !== 'string' || encoding === '') {\n      encoding = 'utf8';\n    }\n\n    if (!Buffer.isEncoding(encoding)) {\n      throw new TypeError('\"encoding\" must be a valid string encoding')\n    }\n\n    var length = byteLength(string, encoding) | 0;\n    that = createBuffer(that, length);\n\n    var actual = that.write(string, encoding);\n\n    if (actual !== length) {\n      // Writing a hex string, for example, that contains invalid characters will\n      // cause everything after the first invalid character to be ignored. (e.g.\n      // 'abxxcd' will be treated as 'ab')\n      that = that.slice(0, actual);\n    }\n\n    return that\n  }\n\n  function fromArrayLike (that, array) {\n    var length = array.length < 0 ? 0 : checked(array.length) | 0;\n    that = createBuffer(that, length);\n    for (var i = 0; i < length; i += 1) {\n      that[i] = array[i] & 255;\n    }\n    return that\n  }\n\n  function fromArrayBuffer (that, array, byteOffset, length) {\n    array.byteLength; // this throws if `array` is not a valid ArrayBuffer\n\n    if (byteOffset < 0 || array.byteLength < byteOffset) {\n      throw new RangeError('\\'offset\\' is out of bounds')\n    }\n\n    if (array.byteLength < byteOffset + (length || 0)) {\n      throw new RangeError('\\'length\\' is out of bounds')\n    }\n\n    if (byteOffset === undefined && length === undefined) {\n      array = new Uint8Array(array);\n    } else if (length === undefined) {\n      array = new Uint8Array(array, byteOffset);\n    } else {\n      array = new Uint8Array(array, byteOffset, length);\n    }\n\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      // Return an augmented `Uint8Array` instance, for best performance\n      that = array;\n      that.__proto__ = Buffer.prototype;\n    } else {\n      // Fallback: Return an object instance of the Buffer class\n      that = fromArrayLike(that, array);\n    }\n    return that\n  }\n\n  function fromObject (that, obj) {\n    if (internalIsBuffer(obj)) {\n      var len = checked(obj.length) | 0;\n      that = createBuffer(that, len);\n\n      if (that.length === 0) {\n        return that\n      }\n\n      obj.copy(that, 0, 0, len);\n      return that\n    }\n\n    if (obj) {\n      if ((typeof ArrayBuffer !== 'undefined' &&\n          obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n        if (typeof obj.length !== 'number' || isnan(obj.length)) {\n          return createBuffer(that, 0)\n        }\n        return fromArrayLike(that, obj)\n      }\n\n      if (obj.type === 'Buffer' && isArray(obj.data)) {\n        return fromArrayLike(that, obj.data)\n      }\n    }\n\n    throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n  }\n\n  function checked (length) {\n    // Note: cannot use `length < kMaxLength()` here because that fails when\n    // length is NaN (which is otherwise coerced to zero.)\n    if (length >= kMaxLength()) {\n      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                           'size: 0x' + kMaxLength().toString(16) + ' bytes')\n    }\n    return length | 0\n  }\n\n  function SlowBuffer (length) {\n    if (+length != length) { // eslint-disable-line eqeqeq\n      length = 0;\n    }\n    return Buffer.alloc(+length)\n  }\n  Buffer.isBuffer = isBuffer;\n  function internalIsBuffer (b) {\n    return !!(b != null && b._isBuffer)\n  }\n\n  Buffer.compare = function compare (a, b) {\n    if (!internalIsBuffer(a) || !internalIsBuffer(b)) {\n      throw new TypeError('Arguments must be Buffers')\n    }\n\n    if (a === b) return 0\n\n    var x = a.length;\n    var y = b.length;\n\n    for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n      if (a[i] !== b[i]) {\n        x = a[i];\n        y = b[i];\n        break\n      }\n    }\n\n    if (x < y) return -1\n    if (y < x) return 1\n    return 0\n  };\n\n  Buffer.isEncoding = function isEncoding (encoding) {\n    switch (String(encoding).toLowerCase()) {\n      case 'hex':\n      case 'utf8':\n      case 'utf-8':\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n      case 'base64':\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return true\n      default:\n        return false\n    }\n  };\n\n  Buffer.concat = function concat (list, length) {\n    if (!isArray(list)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n\n    if (list.length === 0) {\n      return Buffer.alloc(0)\n    }\n\n    var i;\n    if (length === undefined) {\n      length = 0;\n      for (i = 0; i < list.length; ++i) {\n        length += list[i].length;\n      }\n    }\n\n    var buffer = Buffer.allocUnsafe(length);\n    var pos = 0;\n    for (i = 0; i < list.length; ++i) {\n      var buf = list[i];\n      if (!internalIsBuffer(buf)) {\n        throw new TypeError('\"list\" argument must be an Array of Buffers')\n      }\n      buf.copy(buffer, pos);\n      pos += buf.length;\n    }\n    return buffer\n  };\n\n  function byteLength (string, encoding) {\n    if (internalIsBuffer(string)) {\n      return string.length\n    }\n    if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n        (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n      return string.byteLength\n    }\n    if (typeof string !== 'string') {\n      string = '' + string;\n    }\n\n    var len = string.length;\n    if (len === 0) return 0\n\n    // Use a for loop to avoid recursion\n    var loweredCase = false;\n    for (;;) {\n      switch (encoding) {\n        case 'ascii':\n        case 'latin1':\n        case 'binary':\n          return len\n        case 'utf8':\n        case 'utf-8':\n        case undefined:\n          return utf8ToBytes(string).length\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return len * 2\n        case 'hex':\n          return len >>> 1\n        case 'base64':\n          return base64ToBytes(string).length\n        default:\n          if (loweredCase) return utf8ToBytes(string).length // assume utf8\n          encoding = ('' + encoding).toLowerCase();\n          loweredCase = true;\n      }\n    }\n  }\n  Buffer.byteLength = byteLength;\n\n  function slowToString (encoding, start, end) {\n    var loweredCase = false;\n\n    // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n    // property of a typed array.\n\n    // This behaves neither like String nor Uint8Array in that we set start/end\n    // to their upper/lower bounds if the value passed is out of range.\n    // undefined is handled specially as per ECMA-262 6th Edition,\n    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n    if (start === undefined || start < 0) {\n      start = 0;\n    }\n    // Return early if start > this.length. Done here to prevent potential uint32\n    // coercion fail below.\n    if (start > this.length) {\n      return ''\n    }\n\n    if (end === undefined || end > this.length) {\n      end = this.length;\n    }\n\n    if (end <= 0) {\n      return ''\n    }\n\n    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n    end >>>= 0;\n    start >>>= 0;\n\n    if (end <= start) {\n      return ''\n    }\n\n    if (!encoding) encoding = 'utf8';\n\n    while (true) {\n      switch (encoding) {\n        case 'hex':\n          return hexSlice(this, start, end)\n\n        case 'utf8':\n        case 'utf-8':\n          return utf8Slice(this, start, end)\n\n        case 'ascii':\n          return asciiSlice(this, start, end)\n\n        case 'latin1':\n        case 'binary':\n          return latin1Slice(this, start, end)\n\n        case 'base64':\n          return base64Slice(this, start, end)\n\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return utf16leSlice(this, start, end)\n\n        default:\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n          encoding = (encoding + '').toLowerCase();\n          loweredCase = true;\n      }\n    }\n  }\n\n  // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n  // Buffer instances.\n  Buffer.prototype._isBuffer = true;\n\n  function swap (b, n, m) {\n    var i = b[n];\n    b[n] = b[m];\n    b[m] = i;\n  }\n\n  Buffer.prototype.swap16 = function swap16 () {\n    var len = this.length;\n    if (len % 2 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 16-bits')\n    }\n    for (var i = 0; i < len; i += 2) {\n      swap(this, i, i + 1);\n    }\n    return this\n  };\n\n  Buffer.prototype.swap32 = function swap32 () {\n    var len = this.length;\n    if (len % 4 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 32-bits')\n    }\n    for (var i = 0; i < len; i += 4) {\n      swap(this, i, i + 3);\n      swap(this, i + 1, i + 2);\n    }\n    return this\n  };\n\n  Buffer.prototype.swap64 = function swap64 () {\n    var len = this.length;\n    if (len % 8 !== 0) {\n      throw new RangeError('Buffer size must be a multiple of 64-bits')\n    }\n    for (var i = 0; i < len; i += 8) {\n      swap(this, i, i + 7);\n      swap(this, i + 1, i + 6);\n      swap(this, i + 2, i + 5);\n      swap(this, i + 3, i + 4);\n    }\n    return this\n  };\n\n  Buffer.prototype.toString = function toString () {\n    var length = this.length | 0;\n    if (length === 0) return ''\n    if (arguments.length === 0) return utf8Slice(this, 0, length)\n    return slowToString.apply(this, arguments)\n  };\n\n  Buffer.prototype.equals = function equals (b) {\n    if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')\n    if (this === b) return true\n    return Buffer.compare(this, b) === 0\n  };\n\n  Buffer.prototype.inspect = function inspect () {\n    var str = '';\n    var max = INSPECT_MAX_BYTES;\n    if (this.length > 0) {\n      str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');\n      if (this.length > max) str += ' ... ';\n    }\n    return '<Buffer ' + str + '>'\n  };\n\n  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n    if (!internalIsBuffer(target)) {\n      throw new TypeError('Argument must be a Buffer')\n    }\n\n    if (start === undefined) {\n      start = 0;\n    }\n    if (end === undefined) {\n      end = target ? target.length : 0;\n    }\n    if (thisStart === undefined) {\n      thisStart = 0;\n    }\n    if (thisEnd === undefined) {\n      thisEnd = this.length;\n    }\n\n    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n      throw new RangeError('out of range index')\n    }\n\n    if (thisStart >= thisEnd && start >= end) {\n      return 0\n    }\n    if (thisStart >= thisEnd) {\n      return -1\n    }\n    if (start >= end) {\n      return 1\n    }\n\n    start >>>= 0;\n    end >>>= 0;\n    thisStart >>>= 0;\n    thisEnd >>>= 0;\n\n    if (this === target) return 0\n\n    var x = thisEnd - thisStart;\n    var y = end - start;\n    var len = Math.min(x, y);\n\n    var thisCopy = this.slice(thisStart, thisEnd);\n    var targetCopy = target.slice(start, end);\n\n    for (var i = 0; i < len; ++i) {\n      if (thisCopy[i] !== targetCopy[i]) {\n        x = thisCopy[i];\n        y = targetCopy[i];\n        break\n      }\n    }\n\n    if (x < y) return -1\n    if (y < x) return 1\n    return 0\n  };\n\n  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n  //\n  // Arguments:\n  // - buffer - a Buffer to search\n  // - val - a string, Buffer, or number\n  // - byteOffset - an index into `buffer`; will be clamped to an int32\n  // - encoding - an optional encoding, relevant is val is a string\n  // - dir - true for indexOf, false for lastIndexOf\n  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n    // Empty buffer means no match\n    if (buffer.length === 0) return -1\n\n    // Normalize byteOffset\n    if (typeof byteOffset === 'string') {\n      encoding = byteOffset;\n      byteOffset = 0;\n    } else if (byteOffset > 0x7fffffff) {\n      byteOffset = 0x7fffffff;\n    } else if (byteOffset < -0x80000000) {\n      byteOffset = -0x80000000;\n    }\n    byteOffset = +byteOffset;  // Coerce to Number.\n    if (isNaN(byteOffset)) {\n      // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n      byteOffset = dir ? 0 : (buffer.length - 1);\n    }\n\n    // Normalize byteOffset: negative offsets start from the end of the buffer\n    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n    if (byteOffset >= buffer.length) {\n      if (dir) return -1\n      else byteOffset = buffer.length - 1;\n    } else if (byteOffset < 0) {\n      if (dir) byteOffset = 0;\n      else return -1\n    }\n\n    // Normalize val\n    if (typeof val === 'string') {\n      val = Buffer.from(val, encoding);\n    }\n\n    // Finally, search either indexOf (if dir is true) or lastIndexOf\n    if (internalIsBuffer(val)) {\n      // Special case: looking for empty string/buffer always fails\n      if (val.length === 0) {\n        return -1\n      }\n      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n    } else if (typeof val === 'number') {\n      val = val & 0xFF; // Search for a byte value [0-255]\n      if (Buffer.TYPED_ARRAY_SUPPORT &&\n          typeof Uint8Array.prototype.indexOf === 'function') {\n        if (dir) {\n          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n        } else {\n          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n        }\n      }\n      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n    }\n\n    throw new TypeError('val must be string, number or Buffer')\n  }\n\n  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n    var indexSize = 1;\n    var arrLength = arr.length;\n    var valLength = val.length;\n\n    if (encoding !== undefined) {\n      encoding = String(encoding).toLowerCase();\n      if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n          encoding === 'utf16le' || encoding === 'utf-16le') {\n        if (arr.length < 2 || val.length < 2) {\n          return -1\n        }\n        indexSize = 2;\n        arrLength /= 2;\n        valLength /= 2;\n        byteOffset /= 2;\n      }\n    }\n\n    function read (buf, i) {\n      if (indexSize === 1) {\n        return buf[i]\n      } else {\n        return buf.readUInt16BE(i * indexSize)\n      }\n    }\n\n    var i;\n    if (dir) {\n      var foundIndex = -1;\n      for (i = byteOffset; i < arrLength; i++) {\n        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n          if (foundIndex === -1) foundIndex = i;\n          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n        } else {\n          if (foundIndex !== -1) i -= i - foundIndex;\n          foundIndex = -1;\n        }\n      }\n    } else {\n      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n      for (i = byteOffset; i >= 0; i--) {\n        var found = true;\n        for (var j = 0; j < valLength; j++) {\n          if (read(arr, i + j) !== read(val, j)) {\n            found = false;\n            break\n          }\n        }\n        if (found) return i\n      }\n    }\n\n    return -1\n  }\n\n  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {\n    return this.indexOf(val, byteOffset, encoding) !== -1\n  };\n\n  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n  };\n\n  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n  };\n\n  function hexWrite (buf, string, offset, length) {\n    offset = Number(offset) || 0;\n    var remaining = buf.length - offset;\n    if (!length) {\n      length = remaining;\n    } else {\n      length = Number(length);\n      if (length > remaining) {\n        length = remaining;\n      }\n    }\n\n    // must be an even number of digits\n    var strLen = string.length;\n    if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n    if (length > strLen / 2) {\n      length = strLen / 2;\n    }\n    for (var i = 0; i < length; ++i) {\n      var parsed = parseInt(string.substr(i * 2, 2), 16);\n      if (isNaN(parsed)) return i\n      buf[offset + i] = parsed;\n    }\n    return i\n  }\n\n  function utf8Write (buf, string, offset, length) {\n    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n  }\n\n  function asciiWrite (buf, string, offset, length) {\n    return blitBuffer(asciiToBytes(string), buf, offset, length)\n  }\n\n  function latin1Write (buf, string, offset, length) {\n    return asciiWrite(buf, string, offset, length)\n  }\n\n  function base64Write (buf, string, offset, length) {\n    return blitBuffer(base64ToBytes(string), buf, offset, length)\n  }\n\n  function ucs2Write (buf, string, offset, length) {\n    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n  }\n\n  Buffer.prototype.write = function write (string, offset, length, encoding) {\n    // Buffer#write(string)\n    if (offset === undefined) {\n      encoding = 'utf8';\n      length = this.length;\n      offset = 0;\n    // Buffer#write(string, encoding)\n    } else if (length === undefined && typeof offset === 'string') {\n      encoding = offset;\n      length = this.length;\n      offset = 0;\n    // Buffer#write(string, offset[, length][, encoding])\n    } else if (isFinite(offset)) {\n      offset = offset | 0;\n      if (isFinite(length)) {\n        length = length | 0;\n        if (encoding === undefined) encoding = 'utf8';\n      } else {\n        encoding = length;\n        length = undefined;\n      }\n    // legacy write(string, encoding, offset, length) - remove in v0.13\n    } else {\n      throw new Error(\n        'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n      )\n    }\n\n    var remaining = this.length - offset;\n    if (length === undefined || length > remaining) length = remaining;\n\n    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n      throw new RangeError('Attempt to write outside buffer bounds')\n    }\n\n    if (!encoding) encoding = 'utf8';\n\n    var loweredCase = false;\n    for (;;) {\n      switch (encoding) {\n        case 'hex':\n          return hexWrite(this, string, offset, length)\n\n        case 'utf8':\n        case 'utf-8':\n          return utf8Write(this, string, offset, length)\n\n        case 'ascii':\n          return asciiWrite(this, string, offset, length)\n\n        case 'latin1':\n        case 'binary':\n          return latin1Write(this, string, offset, length)\n\n        case 'base64':\n          // Warning: maxLength not taken into account in base64Write\n          return base64Write(this, string, offset, length)\n\n        case 'ucs2':\n        case 'ucs-2':\n        case 'utf16le':\n        case 'utf-16le':\n          return ucs2Write(this, string, offset, length)\n\n        default:\n          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n          encoding = ('' + encoding).toLowerCase();\n          loweredCase = true;\n      }\n    }\n  };\n\n  Buffer.prototype.toJSON = function toJSON () {\n    return {\n      type: 'Buffer',\n      data: Array.prototype.slice.call(this._arr || this, 0)\n    }\n  };\n\n  function base64Slice (buf, start, end) {\n    if (start === 0 && end === buf.length) {\n      return fromByteArray(buf)\n    } else {\n      return fromByteArray(buf.slice(start, end))\n    }\n  }\n\n  function utf8Slice (buf, start, end) {\n    end = Math.min(buf.length, end);\n    var res = [];\n\n    var i = start;\n    while (i < end) {\n      var firstByte = buf[i];\n      var codePoint = null;\n      var bytesPerSequence = (firstByte > 0xEF) ? 4\n        : (firstByte > 0xDF) ? 3\n        : (firstByte > 0xBF) ? 2\n        : 1;\n\n      if (i + bytesPerSequence <= end) {\n        var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n        switch (bytesPerSequence) {\n          case 1:\n            if (firstByte < 0x80) {\n              codePoint = firstByte;\n            }\n            break\n          case 2:\n            secondByte = buf[i + 1];\n            if ((secondByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);\n              if (tempCodePoint > 0x7F) {\n                codePoint = tempCodePoint;\n              }\n            }\n            break\n          case 3:\n            secondByte = buf[i + 1];\n            thirdByte = buf[i + 2];\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);\n              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n                codePoint = tempCodePoint;\n              }\n            }\n            break\n          case 4:\n            secondByte = buf[i + 1];\n            thirdByte = buf[i + 2];\n            fourthByte = buf[i + 3];\n            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);\n              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n                codePoint = tempCodePoint;\n              }\n            }\n        }\n      }\n\n      if (codePoint === null) {\n        // we did not generate a valid codePoint so insert a\n        // replacement char (U+FFFD) and advance only 1 byte\n        codePoint = 0xFFFD;\n        bytesPerSequence = 1;\n      } else if (codePoint > 0xFFFF) {\n        // encode to utf16 (surrogate pair dance)\n        codePoint -= 0x10000;\n        res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n        codePoint = 0xDC00 | codePoint & 0x3FF;\n      }\n\n      res.push(codePoint);\n      i += bytesPerSequence;\n    }\n\n    return decodeCodePointsArray(res)\n  }\n\n  // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n  // the lowest limit is Chrome, with 0x10000 args.\n  // We go 1 magnitude less, for safety\n  var MAX_ARGUMENTS_LENGTH = 0x1000;\n\n  function decodeCodePointsArray (codePoints) {\n    var len = codePoints.length;\n    if (len <= MAX_ARGUMENTS_LENGTH) {\n      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n    }\n\n    // Decode in chunks to avoid \"call stack size exceeded\".\n    var res = '';\n    var i = 0;\n    while (i < len) {\n      res += String.fromCharCode.apply(\n        String,\n        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n      );\n    }\n    return res\n  }\n\n  function asciiSlice (buf, start, end) {\n    var ret = '';\n    end = Math.min(buf.length, end);\n\n    for (var i = start; i < end; ++i) {\n      ret += String.fromCharCode(buf[i] & 0x7F);\n    }\n    return ret\n  }\n\n  function latin1Slice (buf, start, end) {\n    var ret = '';\n    end = Math.min(buf.length, end);\n\n    for (var i = start; i < end; ++i) {\n      ret += String.fromCharCode(buf[i]);\n    }\n    return ret\n  }\n\n  function hexSlice (buf, start, end) {\n    var len = buf.length;\n\n    if (!start || start < 0) start = 0;\n    if (!end || end < 0 || end > len) end = len;\n\n    var out = '';\n    for (var i = start; i < end; ++i) {\n      out += toHex(buf[i]);\n    }\n    return out\n  }\n\n  function utf16leSlice (buf, start, end) {\n    var bytes = buf.slice(start, end);\n    var res = '';\n    for (var i = 0; i < bytes.length; i += 2) {\n      res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n    }\n    return res\n  }\n\n  Buffer.prototype.slice = function slice (start, end) {\n    var len = this.length;\n    start = ~~start;\n    end = end === undefined ? len : ~~end;\n\n    if (start < 0) {\n      start += len;\n      if (start < 0) start = 0;\n    } else if (start > len) {\n      start = len;\n    }\n\n    if (end < 0) {\n      end += len;\n      if (end < 0) end = 0;\n    } else if (end > len) {\n      end = len;\n    }\n\n    if (end < start) end = start;\n\n    var newBuf;\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      newBuf = this.subarray(start, end);\n      newBuf.__proto__ = Buffer.prototype;\n    } else {\n      var sliceLen = end - start;\n      newBuf = new Buffer(sliceLen, undefined);\n      for (var i = 0; i < sliceLen; ++i) {\n        newBuf[i] = this[i + start];\n      }\n    }\n\n    return newBuf\n  };\n\n  /*\n   * Need to make sure that buffer isn't trying to write out of bounds.\n   */\n  function checkOffset (offset, ext, length) {\n    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n  }\n\n  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n    var val = this[offset];\n    var mul = 1;\n    var i = 0;\n    while (++i < byteLength && (mul *= 0x100)) {\n      val += this[offset + i] * mul;\n    }\n\n    return val\n  };\n\n  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) {\n      checkOffset(offset, byteLength, this.length);\n    }\n\n    var val = this[offset + --byteLength];\n    var mul = 1;\n    while (byteLength > 0 && (mul *= 0x100)) {\n      val += this[offset + --byteLength] * mul;\n    }\n\n    return val\n  };\n\n  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    return this[offset]\n  };\n\n  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return this[offset] | (this[offset + 1] << 8)\n  };\n\n  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    return (this[offset] << 8) | this[offset + 1]\n  };\n\n  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n\n    return ((this[offset]) |\n        (this[offset + 1] << 8) |\n        (this[offset + 2] << 16)) +\n        (this[offset + 3] * 0x1000000)\n  };\n\n  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n\n    return (this[offset] * 0x1000000) +\n      ((this[offset + 1] << 16) |\n      (this[offset + 2] << 8) |\n      this[offset + 3])\n  };\n\n  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n    var val = this[offset];\n    var mul = 1;\n    var i = 0;\n    while (++i < byteLength && (mul *= 0x100)) {\n      val += this[offset + i] * mul;\n    }\n    mul *= 0x80;\n\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n    return val\n  };\n\n  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) checkOffset(offset, byteLength, this.length);\n\n    var i = byteLength;\n    var mul = 1;\n    var val = this[offset + --i];\n    while (i > 0 && (mul *= 0x100)) {\n      val += this[offset + --i] * mul;\n    }\n    mul *= 0x80;\n\n    if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n\n    return val\n  };\n\n  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 1, this.length);\n    if (!(this[offset] & 0x80)) return (this[offset])\n    return ((0xff - this[offset] + 1) * -1)\n  };\n\n  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    var val = this[offset] | (this[offset + 1] << 8);\n    return (val & 0x8000) ? val | 0xFFFF0000 : val\n  };\n\n  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 2, this.length);\n    var val = this[offset + 1] | (this[offset] << 8);\n    return (val & 0x8000) ? val | 0xFFFF0000 : val\n  };\n\n  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n\n    return (this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16) |\n      (this[offset + 3] << 24)\n  };\n\n  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n\n    return (this[offset] << 24) |\n      (this[offset + 1] << 16) |\n      (this[offset + 2] << 8) |\n      (this[offset + 3])\n  };\n\n  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return read(this, offset, true, 23, 4)\n  };\n\n  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 4, this.length);\n    return read(this, offset, false, 23, 4)\n  };\n\n  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return read(this, offset, true, 52, 8)\n  };\n\n  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n    if (!noAssert) checkOffset(offset, 8, this.length);\n    return read(this, offset, false, 52, 8)\n  };\n\n  function checkInt (buf, value, offset, ext, max, min) {\n    if (!internalIsBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n    if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  }\n\n  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) {\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n      checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n\n    var mul = 1;\n    var i = 0;\n    this[offset] = value & 0xFF;\n    while (++i < byteLength && (mul *= 0x100)) {\n      this[offset + i] = (value / mul) & 0xFF;\n    }\n\n    return offset + byteLength\n  };\n\n  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    byteLength = byteLength | 0;\n    if (!noAssert) {\n      var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n      checkInt(this, value, offset, byteLength, maxBytes, 0);\n    }\n\n    var i = byteLength - 1;\n    var mul = 1;\n    this[offset + i] = value & 0xFF;\n    while (--i >= 0 && (mul *= 0x100)) {\n      this[offset + i] = (value / mul) & 0xFF;\n    }\n\n    return offset + byteLength\n  };\n\n  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n    this[offset] = (value & 0xff);\n    return offset + 1\n  };\n\n  function objectWriteUInt16 (buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffff + value + 1;\n    for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n      buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n        (littleEndian ? i : 1 - i) * 8;\n    }\n  }\n\n  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = (value & 0xff);\n      this[offset + 1] = (value >>> 8);\n    } else {\n      objectWriteUInt16(this, value, offset, true);\n    }\n    return offset + 2\n  };\n\n  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = (value >>> 8);\n      this[offset + 1] = (value & 0xff);\n    } else {\n      objectWriteUInt16(this, value, offset, false);\n    }\n    return offset + 2\n  };\n\n  function objectWriteUInt32 (buf, value, offset, littleEndian) {\n    if (value < 0) value = 0xffffffff + value + 1;\n    for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n      buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;\n    }\n  }\n\n  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset + 3] = (value >>> 24);\n      this[offset + 2] = (value >>> 16);\n      this[offset + 1] = (value >>> 8);\n      this[offset] = (value & 0xff);\n    } else {\n      objectWriteUInt32(this, value, offset, true);\n    }\n    return offset + 4\n  };\n\n  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = (value >>> 24);\n      this[offset + 1] = (value >>> 16);\n      this[offset + 2] = (value >>> 8);\n      this[offset + 3] = (value & 0xff);\n    } else {\n      objectWriteUInt32(this, value, offset, false);\n    }\n    return offset + 4\n  };\n\n  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) {\n      var limit = Math.pow(2, 8 * byteLength - 1);\n\n      checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n\n    var i = 0;\n    var mul = 1;\n    var sub = 0;\n    this[offset] = value & 0xFF;\n    while (++i < byteLength && (mul *= 0x100)) {\n      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n        sub = 1;\n      }\n      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n    }\n\n    return offset + byteLength\n  };\n\n  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) {\n      var limit = Math.pow(2, 8 * byteLength - 1);\n\n      checkInt(this, value, offset, byteLength, limit - 1, -limit);\n    }\n\n    var i = byteLength - 1;\n    var mul = 1;\n    var sub = 0;\n    this[offset + i] = value & 0xFF;\n    while (--i >= 0 && (mul *= 0x100)) {\n      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n        sub = 1;\n      }\n      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;\n    }\n\n    return offset + byteLength\n  };\n\n  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);\n    if (value < 0) value = 0xff + value + 1;\n    this[offset] = (value & 0xff);\n    return offset + 1\n  };\n\n  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = (value & 0xff);\n      this[offset + 1] = (value >>> 8);\n    } else {\n      objectWriteUInt16(this, value, offset, true);\n    }\n    return offset + 2\n  };\n\n  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = (value >>> 8);\n      this[offset + 1] = (value & 0xff);\n    } else {\n      objectWriteUInt16(this, value, offset, false);\n    }\n    return offset + 2\n  };\n\n  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = (value & 0xff);\n      this[offset + 1] = (value >>> 8);\n      this[offset + 2] = (value >>> 16);\n      this[offset + 3] = (value >>> 24);\n    } else {\n      objectWriteUInt32(this, value, offset, true);\n    }\n    return offset + 4\n  };\n\n  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n    value = +value;\n    offset = offset | 0;\n    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n    if (value < 0) value = 0xffffffff + value + 1;\n    if (Buffer.TYPED_ARRAY_SUPPORT) {\n      this[offset] = (value >>> 24);\n      this[offset + 1] = (value >>> 16);\n      this[offset + 2] = (value >>> 8);\n      this[offset + 3] = (value & 0xff);\n    } else {\n      objectWriteUInt32(this, value, offset, false);\n    }\n    return offset + 4\n  };\n\n  function checkIEEE754 (buf, value, offset, ext, max, min) {\n    if (offset + ext > buf.length) throw new RangeError('Index out of range')\n    if (offset < 0) throw new RangeError('Index out of range')\n  }\n\n  function writeFloat (buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n      checkIEEE754(buf, value, offset, 4);\n    }\n    write(buf, value, offset, littleEndian, 23, 4);\n    return offset + 4\n  }\n\n  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n    return writeFloat(this, value, offset, true, noAssert)\n  };\n\n  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n    return writeFloat(this, value, offset, false, noAssert)\n  };\n\n  function writeDouble (buf, value, offset, littleEndian, noAssert) {\n    if (!noAssert) {\n      checkIEEE754(buf, value, offset, 8);\n    }\n    write(buf, value, offset, littleEndian, 52, 8);\n    return offset + 8\n  }\n\n  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n    return writeDouble(this, value, offset, true, noAssert)\n  };\n\n  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n    return writeDouble(this, value, offset, false, noAssert)\n  };\n\n  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n  Buffer.prototype.copy = function copy (target, targetStart, start, end) {\n    if (!start) start = 0;\n    if (!end && end !== 0) end = this.length;\n    if (targetStart >= target.length) targetStart = target.length;\n    if (!targetStart) targetStart = 0;\n    if (end > 0 && end < start) end = start;\n\n    // Copy 0 bytes; we're done\n    if (end === start) return 0\n    if (target.length === 0 || this.length === 0) return 0\n\n    // Fatal error conditions\n    if (targetStart < 0) {\n      throw new RangeError('targetStart out of bounds')\n    }\n    if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n    if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n    // Are we oob?\n    if (end > this.length) end = this.length;\n    if (target.length - targetStart < end - start) {\n      end = target.length - targetStart + start;\n    }\n\n    var len = end - start;\n    var i;\n\n    if (this === target && start < targetStart && targetStart < end) {\n      // descending copy from end\n      for (i = len - 1; i >= 0; --i) {\n        target[i + targetStart] = this[i + start];\n      }\n    } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n      // ascending copy from start\n      for (i = 0; i < len; ++i) {\n        target[i + targetStart] = this[i + start];\n      }\n    } else {\n      Uint8Array.prototype.set.call(\n        target,\n        this.subarray(start, start + len),\n        targetStart\n      );\n    }\n\n    return len\n  };\n\n  // Usage:\n  //    buffer.fill(number[, offset[, end]])\n  //    buffer.fill(buffer[, offset[, end]])\n  //    buffer.fill(string[, offset[, end]][, encoding])\n  Buffer.prototype.fill = function fill (val, start, end, encoding) {\n    // Handle string cases:\n    if (typeof val === 'string') {\n      if (typeof start === 'string') {\n        encoding = start;\n        start = 0;\n        end = this.length;\n      } else if (typeof end === 'string') {\n        encoding = end;\n        end = this.length;\n      }\n      if (val.length === 1) {\n        var code = val.charCodeAt(0);\n        if (code < 256) {\n          val = code;\n        }\n      }\n      if (encoding !== undefined && typeof encoding !== 'string') {\n        throw new TypeError('encoding must be a string')\n      }\n      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n        throw new TypeError('Unknown encoding: ' + encoding)\n      }\n    } else if (typeof val === 'number') {\n      val = val & 255;\n    }\n\n    // Invalid ranges are not set to a default, so can range check early.\n    if (start < 0 || this.length < start || this.length < end) {\n      throw new RangeError('Out of range index')\n    }\n\n    if (end <= start) {\n      return this\n    }\n\n    start = start >>> 0;\n    end = end === undefined ? this.length : end >>> 0;\n\n    if (!val) val = 0;\n\n    var i;\n    if (typeof val === 'number') {\n      for (i = start; i < end; ++i) {\n        this[i] = val;\n      }\n    } else {\n      var bytes = internalIsBuffer(val)\n        ? val\n        : utf8ToBytes(new Buffer(val, encoding).toString());\n      var len = bytes.length;\n      for (i = 0; i < end - start; ++i) {\n        this[i + start] = bytes[i % len];\n      }\n    }\n\n    return this\n  };\n\n  // HELPER FUNCTIONS\n  // ================\n\n  var INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g;\n\n  function base64clean (str) {\n    // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n    str = stringtrim(str).replace(INVALID_BASE64_RE, '');\n    // Node converts strings with length < 2 to ''\n    if (str.length < 2) return ''\n    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n    while (str.length % 4 !== 0) {\n      str = str + '=';\n    }\n    return str\n  }\n\n  function stringtrim (str) {\n    if (str.trim) return str.trim()\n    return str.replace(/^\\s+|\\s+$/g, '')\n  }\n\n  function toHex (n) {\n    if (n < 16) return '0' + n.toString(16)\n    return n.toString(16)\n  }\n\n  function utf8ToBytes (string, units) {\n    units = units || Infinity;\n    var codePoint;\n    var length = string.length;\n    var leadSurrogate = null;\n    var bytes = [];\n\n    for (var i = 0; i < length; ++i) {\n      codePoint = string.charCodeAt(i);\n\n      // is surrogate component\n      if (codePoint > 0xD7FF && codePoint < 0xE000) {\n        // last char was a lead\n        if (!leadSurrogate) {\n          // no lead yet\n          if (codePoint > 0xDBFF) {\n            // unexpected trail\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n            continue\n          } else if (i + 1 === length) {\n            // unpaired lead\n            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n            continue\n          }\n\n          // valid lead\n          leadSurrogate = codePoint;\n\n          continue\n        }\n\n        // 2 leads in a row\n        if (codePoint < 0xDC00) {\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n          leadSurrogate = codePoint;\n          continue\n        }\n\n        // valid surrogate pair\n        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n      } else if (leadSurrogate) {\n        // valid bmp char, but last char was a lead\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n      }\n\n      leadSurrogate = null;\n\n      // encode utf8\n      if (codePoint < 0x80) {\n        if ((units -= 1) < 0) break\n        bytes.push(codePoint);\n      } else if (codePoint < 0x800) {\n        if ((units -= 2) < 0) break\n        bytes.push(\n          codePoint >> 0x6 | 0xC0,\n          codePoint & 0x3F | 0x80\n        );\n      } else if (codePoint < 0x10000) {\n        if ((units -= 3) < 0) break\n        bytes.push(\n          codePoint >> 0xC | 0xE0,\n          codePoint >> 0x6 & 0x3F | 0x80,\n          codePoint & 0x3F | 0x80\n        );\n      } else if (codePoint < 0x110000) {\n        if ((units -= 4) < 0) break\n        bytes.push(\n          codePoint >> 0x12 | 0xF0,\n          codePoint >> 0xC & 0x3F | 0x80,\n          codePoint >> 0x6 & 0x3F | 0x80,\n          codePoint & 0x3F | 0x80\n        );\n      } else {\n        throw new Error('Invalid code point')\n      }\n    }\n\n    return bytes\n  }\n\n  function asciiToBytes (str) {\n    var byteArray = [];\n    for (var i = 0; i < str.length; ++i) {\n      // Node's code seems to be doing this and not & 0x7F..\n      byteArray.push(str.charCodeAt(i) & 0xFF);\n    }\n    return byteArray\n  }\n\n  function utf16leToBytes (str, units) {\n    var c, hi, lo;\n    var byteArray = [];\n    for (var i = 0; i < str.length; ++i) {\n      if ((units -= 2) < 0) break\n\n      c = str.charCodeAt(i);\n      hi = c >> 8;\n      lo = c % 256;\n      byteArray.push(lo);\n      byteArray.push(hi);\n    }\n\n    return byteArray\n  }\n\n\n  function base64ToBytes (str) {\n    return toByteArray(base64clean(str))\n  }\n\n  function blitBuffer (src, dst, offset, length) {\n    for (var i = 0; i < length; ++i) {\n      if ((i + offset >= dst.length) || (i >= src.length)) break\n      dst[i + offset] = src[i];\n    }\n    return i\n  }\n\n  function isnan (val) {\n    return val !== val // eslint-disable-line no-self-compare\n  }\n\n\n  // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence\n  // The _isBuffer check is for Safari 5-7 support, because it's missing\n  // Object.prototype.constructor. Remove this eventually\n  function isBuffer(obj) {\n    return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))\n  }\n\n  function isFastBuffer (obj) {\n    return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n  }\n\n  // For Node v0.10 support. Remove this eventually.\n  function isSlowBuffer (obj) {\n    return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))\n  }\n\n  var _polyfillNode_buffer = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Buffer: Buffer,\n    INSPECT_MAX_BYTES: INSPECT_MAX_BYTES,\n    SlowBuffer: SlowBuffer,\n    isBuffer: isBuffer,\n    kMaxLength: _kMaxLength\n  });\n\n  exports.Buffer = Buffer;\n  exports._polyfillNode_buffer = _polyfillNode_buffer;\n  exports.browser$1 = browser$1;\n  exports.global = global$1;\n  exports.isBuffer = isBuffer;\n  exports.nextTick = nextTick;\n\n}));\n",
      "type": "chunk"
    },
    {
      "name": "node.stream",
      "originalName": "node.stream",
      "code": "sap.ui.define(['exports', 'com/kmsa/dashboard/resources/node.util', 'com/kmsa/dashboard/resources/node.buffer'], (function (exports, _polyfillNode_util, _polyfillNode_buffer) { 'use strict';\n\n  var domain;\n\n  // This constructor is used to store event handlers. Instantiating this is\n  // faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n  // object (tested with v8 v4.9).\n  function EventHandlers() {}\n  EventHandlers.prototype = Object.create(null);\n\n  function EventEmitter() {\n    EventEmitter.init.call(this);\n  }\n\n  // nodejs oddity\n  // require('events') === require('events').EventEmitter\n  EventEmitter.EventEmitter = EventEmitter;\n\n  EventEmitter.usingDomains = false;\n\n  EventEmitter.prototype.domain = undefined;\n  EventEmitter.prototype._events = undefined;\n  EventEmitter.prototype._maxListeners = undefined;\n\n  // By default EventEmitters will print a warning if more than 10 listeners are\n  // added to it. This is a useful default which helps finding memory leaks.\n  EventEmitter.defaultMaxListeners = 10;\n\n  EventEmitter.init = function() {\n    this.domain = null;\n    if (EventEmitter.usingDomains) {\n      // if there is an active domain, then attach to it.\n      if (domain.active) ;\n    }\n\n    if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n      this._events = new EventHandlers();\n      this._eventsCount = 0;\n    }\n\n    this._maxListeners = this._maxListeners || undefined;\n  };\n\n  // Obviously not all Emitters should be limited to 10. This function allows\n  // that to be increased. Set to zero for unlimited.\n  EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n    if (typeof n !== 'number' || n < 0 || isNaN(n))\n      throw new TypeError('\"n\" argument must be a positive number');\n    this._maxListeners = n;\n    return this;\n  };\n\n  function $getMaxListeners(that) {\n    if (that._maxListeners === undefined)\n      return EventEmitter.defaultMaxListeners;\n    return that._maxListeners;\n  }\n\n  EventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n    return $getMaxListeners(this);\n  };\n\n  // These standalone emit* functions are used to optimize calling of event\n  // handlers for fast cases because emit() itself often has a variable number of\n  // arguments and can be deoptimized because of that. These functions always have\n  // the same number of arguments and thus do not get deoptimized, so the code\n  // inside them can execute faster.\n  function emitNone(handler, isFn, self) {\n    if (isFn)\n      handler.call(self);\n    else {\n      var len = handler.length;\n      var listeners = arrayClone(handler, len);\n      for (var i = 0; i < len; ++i)\n        listeners[i].call(self);\n    }\n  }\n  function emitOne(handler, isFn, self, arg1) {\n    if (isFn)\n      handler.call(self, arg1);\n    else {\n      var len = handler.length;\n      var listeners = arrayClone(handler, len);\n      for (var i = 0; i < len; ++i)\n        listeners[i].call(self, arg1);\n    }\n  }\n  function emitTwo(handler, isFn, self, arg1, arg2) {\n    if (isFn)\n      handler.call(self, arg1, arg2);\n    else {\n      var len = handler.length;\n      var listeners = arrayClone(handler, len);\n      for (var i = 0; i < len; ++i)\n        listeners[i].call(self, arg1, arg2);\n    }\n  }\n  function emitThree(handler, isFn, self, arg1, arg2, arg3) {\n    if (isFn)\n      handler.call(self, arg1, arg2, arg3);\n    else {\n      var len = handler.length;\n      var listeners = arrayClone(handler, len);\n      for (var i = 0; i < len; ++i)\n        listeners[i].call(self, arg1, arg2, arg3);\n    }\n  }\n\n  function emitMany(handler, isFn, self, args) {\n    if (isFn)\n      handler.apply(self, args);\n    else {\n      var len = handler.length;\n      var listeners = arrayClone(handler, len);\n      for (var i = 0; i < len; ++i)\n        listeners[i].apply(self, args);\n    }\n  }\n\n  EventEmitter.prototype.emit = function emit(type) {\n    var er, handler, len, args, i, events, domain;\n    var doError = (type === 'error');\n\n    events = this._events;\n    if (events)\n      doError = (doError && events.error == null);\n    else if (!doError)\n      return false;\n\n    domain = this.domain;\n\n    // If there is no 'error' event listener then throw.\n    if (doError) {\n      er = arguments[1];\n      if (domain) {\n        if (!er)\n          er = new Error('Uncaught, unspecified \"error\" event');\n        er.domainEmitter = this;\n        er.domain = domain;\n        er.domainThrown = false;\n        domain.emit('error', er);\n      } else if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n      return false;\n    }\n\n    handler = events[type];\n\n    if (!handler)\n      return false;\n\n    var isFn = typeof handler === 'function';\n    len = arguments.length;\n    switch (len) {\n      // fast cases\n      case 1:\n        emitNone(handler, isFn, this);\n        break;\n      case 2:\n        emitOne(handler, isFn, this, arguments[1]);\n        break;\n      case 3:\n        emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n        break;\n      case 4:\n        emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n        break;\n      // slower\n      default:\n        args = new Array(len - 1);\n        for (i = 1; i < len; i++)\n          args[i - 1] = arguments[i];\n        emitMany(handler, isFn, this, args);\n    }\n\n    return true;\n  };\n\n  function _addListener(target, type, listener, prepend) {\n    var m;\n    var events;\n    var existing;\n\n    if (typeof listener !== 'function')\n      throw new TypeError('\"listener\" argument must be a function');\n\n    events = target._events;\n    if (!events) {\n      events = target._events = new EventHandlers();\n      target._eventsCount = 0;\n    } else {\n      // To avoid recursion in the case that type === \"newListener\"! Before\n      // adding it to the listeners, first emit \"newListener\".\n      if (events.newListener) {\n        target.emit('newListener', type,\n                    listener.listener ? listener.listener : listener);\n\n        // Re-assign `events` because a newListener handler could have caused the\n        // this._events to be assigned to a new object\n        events = target._events;\n      }\n      existing = events[type];\n    }\n\n    if (!existing) {\n      // Optimize the case of one listener. Don't need the extra array object.\n      existing = events[type] = listener;\n      ++target._eventsCount;\n    } else {\n      if (typeof existing === 'function') {\n        // Adding the second element, need to change to array.\n        existing = events[type] = prepend ? [listener, existing] :\n                                            [existing, listener];\n      } else {\n        // If we've already got an array, just append.\n        if (prepend) {\n          existing.unshift(listener);\n        } else {\n          existing.push(listener);\n        }\n      }\n\n      // Check for listener leak\n      if (!existing.warned) {\n        m = $getMaxListeners(target);\n        if (m && m > 0 && existing.length > m) {\n          existing.warned = true;\n          var w = new Error('Possible EventEmitter memory leak detected. ' +\n                              existing.length + ' ' + type + ' listeners added. ' +\n                              'Use emitter.setMaxListeners() to increase limit');\n          w.name = 'MaxListenersExceededWarning';\n          w.emitter = target;\n          w.type = type;\n          w.count = existing.length;\n          emitWarning(w);\n        }\n      }\n    }\n\n    return target;\n  }\n  function emitWarning(e) {\n    typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n  }\n  EventEmitter.prototype.addListener = function addListener(type, listener) {\n    return _addListener(this, type, listener, false);\n  };\n\n  EventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\n  EventEmitter.prototype.prependListener =\n      function prependListener(type, listener) {\n        return _addListener(this, type, listener, true);\n      };\n\n  function _onceWrap(target, type, listener) {\n    var fired = false;\n    function g() {\n      target.removeListener(type, g);\n      if (!fired) {\n        fired = true;\n        listener.apply(target, arguments);\n      }\n    }\n    g.listener = listener;\n    return g;\n  }\n\n  EventEmitter.prototype.once = function once(type, listener) {\n    if (typeof listener !== 'function')\n      throw new TypeError('\"listener\" argument must be a function');\n    this.on(type, _onceWrap(this, type, listener));\n    return this;\n  };\n\n  EventEmitter.prototype.prependOnceListener =\n      function prependOnceListener(type, listener) {\n        if (typeof listener !== 'function')\n          throw new TypeError('\"listener\" argument must be a function');\n        this.prependListener(type, _onceWrap(this, type, listener));\n        return this;\n      };\n\n  // emits a 'removeListener' event iff the listener was removed\n  EventEmitter.prototype.removeListener =\n      function removeListener(type, listener) {\n        var list, events, position, i, originalListener;\n\n        if (typeof listener !== 'function')\n          throw new TypeError('\"listener\" argument must be a function');\n\n        events = this._events;\n        if (!events)\n          return this;\n\n        list = events[type];\n        if (!list)\n          return this;\n\n        if (list === listener || (list.listener && list.listener === listener)) {\n          if (--this._eventsCount === 0)\n            this._events = new EventHandlers();\n          else {\n            delete events[type];\n            if (events.removeListener)\n              this.emit('removeListener', type, list.listener || listener);\n          }\n        } else if (typeof list !== 'function') {\n          position = -1;\n\n          for (i = list.length; i-- > 0;) {\n            if (list[i] === listener ||\n                (list[i].listener && list[i].listener === listener)) {\n              originalListener = list[i].listener;\n              position = i;\n              break;\n            }\n          }\n\n          if (position < 0)\n            return this;\n\n          if (list.length === 1) {\n            list[0] = undefined;\n            if (--this._eventsCount === 0) {\n              this._events = new EventHandlers();\n              return this;\n            } else {\n              delete events[type];\n            }\n          } else {\n            spliceOne(list, position);\n          }\n\n          if (events.removeListener)\n            this.emit('removeListener', type, originalListener || listener);\n        }\n\n        return this;\n      };\n      \n  // Alias for removeListener added in NodeJS 10.0\n  // https://nodejs.org/api/events.html#events_emitter_off_eventname_listener\n  EventEmitter.prototype.off = function(type, listener){\n      return this.removeListener(type, listener);\n  };\n\n  EventEmitter.prototype.removeAllListeners =\n      function removeAllListeners(type) {\n        var listeners, events;\n\n        events = this._events;\n        if (!events)\n          return this;\n\n        // not listening for removeListener, no need to emit\n        if (!events.removeListener) {\n          if (arguments.length === 0) {\n            this._events = new EventHandlers();\n            this._eventsCount = 0;\n          } else if (events[type]) {\n            if (--this._eventsCount === 0)\n              this._events = new EventHandlers();\n            else\n              delete events[type];\n          }\n          return this;\n        }\n\n        // emit removeListener for all listeners on all events\n        if (arguments.length === 0) {\n          var keys = Object.keys(events);\n          for (var i = 0, key; i < keys.length; ++i) {\n            key = keys[i];\n            if (key === 'removeListener') continue;\n            this.removeAllListeners(key);\n          }\n          this.removeAllListeners('removeListener');\n          this._events = new EventHandlers();\n          this._eventsCount = 0;\n          return this;\n        }\n\n        listeners = events[type];\n\n        if (typeof listeners === 'function') {\n          this.removeListener(type, listeners);\n        } else if (listeners) {\n          // LIFO order\n          do {\n            this.removeListener(type, listeners[listeners.length - 1]);\n          } while (listeners[0]);\n        }\n\n        return this;\n      };\n\n  EventEmitter.prototype.listeners = function listeners(type) {\n    var evlistener;\n    var ret;\n    var events = this._events;\n\n    if (!events)\n      ret = [];\n    else {\n      evlistener = events[type];\n      if (!evlistener)\n        ret = [];\n      else if (typeof evlistener === 'function')\n        ret = [evlistener.listener || evlistener];\n      else\n        ret = unwrapListeners(evlistener);\n    }\n\n    return ret;\n  };\n\n  EventEmitter.listenerCount = function(emitter, type) {\n    if (typeof emitter.listenerCount === 'function') {\n      return emitter.listenerCount(type);\n    } else {\n      return listenerCount$1.call(emitter, type);\n    }\n  };\n\n  EventEmitter.prototype.listenerCount = listenerCount$1;\n  function listenerCount$1(type) {\n    var events = this._events;\n\n    if (events) {\n      var evlistener = events[type];\n\n      if (typeof evlistener === 'function') {\n        return 1;\n      } else if (evlistener) {\n        return evlistener.length;\n      }\n    }\n\n    return 0;\n  }\n\n  EventEmitter.prototype.eventNames = function eventNames() {\n    return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n  };\n\n  // About 1.5x faster than the two-arg version of Array#splice().\n  function spliceOne(list, index) {\n    for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n      list[i] = list[k];\n    list.pop();\n  }\n\n  function arrayClone(arr, i) {\n    var copy = new Array(i);\n    while (i--)\n      copy[i] = arr[i];\n    return copy;\n  }\n\n  function unwrapListeners(arr) {\n    var ret = new Array(arr.length);\n    for (var i = 0; i < ret.length; ++i) {\n      ret[i] = arr[i].listener || arr[i];\n    }\n    return ret;\n  }\n\n  function BufferList() {\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function (v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function (v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function () {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function () {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function (s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function (n) {\n    if (this.length === 0) return _polyfillNode_buffer.Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = _polyfillNode_buffer.Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      p.data.copy(ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  // Copyright Joyent, Inc. and other Node contributors.\n  //\n  // Permission is hereby granted, free of charge, to any person obtaining a\n  // copy of this software and associated documentation files (the\n  // \"Software\"), to deal in the Software without restriction, including\n  // without limitation the rights to use, copy, modify, merge, publish,\n  // distribute, sublicense, and/or sell copies of the Software, and to permit\n  // persons to whom the Software is furnished to do so, subject to the\n  // following conditions:\n  //\n  // The above copyright notice and this permission notice shall be included\n  // in all copies or substantial portions of the Software.\n  //\n  // THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n  // USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n  var isBufferEncoding = _polyfillNode_buffer.Buffer.isEncoding\n    || function(encoding) {\n         switch (encoding && encoding.toLowerCase()) {\n           case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;\n           default: return false;\n         }\n       };\n\n\n  function assertEncoding(encoding) {\n    if (encoding && !isBufferEncoding(encoding)) {\n      throw new Error('Unknown encoding: ' + encoding);\n    }\n  }\n\n  // StringDecoder provides an interface for efficiently splitting a series of\n  // buffers into a series of JS strings without breaking apart multi-byte\n  // characters. CESU-8 is handled as part of the UTF-8 encoding.\n  //\n  // @TODO Handling all encodings inside a single object makes it very difficult\n  // to reason about this code, so it should be split up in the future.\n  // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code\n  // points as used by CESU-8.\n  function StringDecoder(encoding) {\n    this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');\n    assertEncoding(encoding);\n    switch (this.encoding) {\n      case 'utf8':\n        // CESU-8 represents each of Surrogate Pair by 3-bytes\n        this.surrogateSize = 3;\n        break;\n      case 'ucs2':\n      case 'utf16le':\n        // UTF-16 represents each of Surrogate Pair by 2-bytes\n        this.surrogateSize = 2;\n        this.detectIncompleteChar = utf16DetectIncompleteChar;\n        break;\n      case 'base64':\n        // Base-64 stores 3 bytes in 4 chars, and pads the remainder.\n        this.surrogateSize = 3;\n        this.detectIncompleteChar = base64DetectIncompleteChar;\n        break;\n      default:\n        this.write = passThroughWrite;\n        return;\n    }\n\n    // Enough space to store all bytes of a single character. UTF-8 needs 4\n    // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).\n    this.charBuffer = new _polyfillNode_buffer.Buffer(6);\n    // Number of bytes received for the current incomplete multi-byte character.\n    this.charReceived = 0;\n    // Number of bytes expected for the current incomplete multi-byte character.\n    this.charLength = 0;\n  }\n\n  // write decodes the given buffer and returns it as JS string that is\n  // guaranteed to not contain any partial multi-byte characters. Any partial\n  // character found at the end of the buffer is buffered up, and will be\n  // returned when calling write again with the remaining bytes.\n  //\n  // Note: Converting a Buffer containing an orphan surrogate to a String\n  // currently works, but converting a String to a Buffer (via `new Buffer`, or\n  // Buffer#write) will replace incomplete surrogates with the unicode\n  // replacement character. See https://codereview.chromium.org/121173009/ .\n  StringDecoder.prototype.write = function(buffer) {\n    var charStr = '';\n    // if our last write ended with an incomplete multibyte character\n    while (this.charLength) {\n      // determine how many remaining bytes this buffer has to offer for this char\n      var available = (buffer.length >= this.charLength - this.charReceived) ?\n          this.charLength - this.charReceived :\n          buffer.length;\n\n      // add the new bytes to the char buffer\n      buffer.copy(this.charBuffer, this.charReceived, 0, available);\n      this.charReceived += available;\n\n      if (this.charReceived < this.charLength) {\n        // still not enough chars in this buffer? wait for more ...\n        return '';\n      }\n\n      // remove bytes belonging to the current character from the buffer\n      buffer = buffer.slice(available, buffer.length);\n\n      // get the character that was split\n      charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);\n\n      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n      var charCode = charStr.charCodeAt(charStr.length - 1);\n      if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n        this.charLength += this.surrogateSize;\n        charStr = '';\n        continue;\n      }\n      this.charReceived = this.charLength = 0;\n\n      // if there are no more bytes in this buffer, just emit our char\n      if (buffer.length === 0) {\n        return charStr;\n      }\n      break;\n    }\n\n    // determine and set charLength / charReceived\n    this.detectIncompleteChar(buffer);\n\n    var end = buffer.length;\n    if (this.charLength) {\n      // buffer the incomplete character bytes we got\n      buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);\n      end -= this.charReceived;\n    }\n\n    charStr += buffer.toString(this.encoding, 0, end);\n\n    var end = charStr.length - 1;\n    var charCode = charStr.charCodeAt(end);\n    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      var size = this.surrogateSize;\n      this.charLength += size;\n      this.charReceived += size;\n      this.charBuffer.copy(this.charBuffer, size, 0, size);\n      buffer.copy(this.charBuffer, 0, 0, size);\n      return charStr.substring(0, end);\n    }\n\n    // or just emit the charStr\n    return charStr;\n  };\n\n  // detectIncompleteChar determines if there is an incomplete UTF-8 character at\n  // the end of the given buffer. If so, it sets this.charLength to the byte\n  // length that character, and sets this.charReceived to the number of bytes\n  // that are available for this character.\n  StringDecoder.prototype.detectIncompleteChar = function(buffer) {\n    // determine how many bytes we have to check at the end of this buffer\n    var i = (buffer.length >= 3) ? 3 : buffer.length;\n\n    // Figure out if one of the last i bytes of our buffer announces an\n    // incomplete char.\n    for (; i > 0; i--) {\n      var c = buffer[buffer.length - i];\n\n      // See http://en.wikipedia.org/wiki/UTF-8#Description\n\n      // 110XXXXX\n      if (i == 1 && c >> 5 == 0x06) {\n        this.charLength = 2;\n        break;\n      }\n\n      // 1110XXXX\n      if (i <= 2 && c >> 4 == 0x0E) {\n        this.charLength = 3;\n        break;\n      }\n\n      // 11110XXX\n      if (i <= 3 && c >> 3 == 0x1E) {\n        this.charLength = 4;\n        break;\n      }\n    }\n    this.charReceived = i;\n  };\n\n  StringDecoder.prototype.end = function(buffer) {\n    var res = '';\n    if (buffer && buffer.length)\n      res = this.write(buffer);\n\n    if (this.charReceived) {\n      var cr = this.charReceived;\n      var buf = this.charBuffer;\n      var enc = this.encoding;\n      res += buf.slice(0, cr).toString(enc);\n    }\n\n    return res;\n  };\n\n  function passThroughWrite(buffer) {\n    return buffer.toString(this.encoding);\n  }\n\n  function utf16DetectIncompleteChar(buffer) {\n    this.charReceived = buffer.length % 2;\n    this.charLength = this.charReceived ? 2 : 0;\n  }\n\n  function base64DetectIncompleteChar(buffer) {\n    this.charReceived = buffer.length % 3;\n    this.charLength = this.charReceived ? 3 : 0;\n  }\n\n  Readable.ReadableState = ReadableState;\n\n  var debug = _polyfillNode_util.debuglog('stream');\n  _polyfillNode_util.inherits(Readable, EventEmitter);\n\n  function prependListener(emitter, event, fn) {\n    // Sadly this is not cacheable as some libraries bundle their own\n    // event emitter implementation with them.\n    if (typeof emitter.prependListener === 'function') {\n      return emitter.prependListener(event, fn);\n    } else {\n      // This is a hack to make sure that our error handler is attached before any\n      // userland ones.  NEVER DO THIS. This is here only because this code needs\n      // to continue to work with older versions of Node.js that do not include\n      // the prependListener() method. The goal is to eventually remove this hack.\n      if (!emitter._events || !emitter._events[event])\n        emitter.on(event, fn);\n      else if (Array.isArray(emitter._events[event]))\n        emitter._events[event].unshift(fn);\n      else\n        emitter._events[event] = [fn, emitter._events[event]];\n    }\n  }\n  function listenerCount (emitter, type) {\n    return emitter.listeners(type).length;\n  }\n  function ReadableState(options, stream) {\n\n    options = options || {};\n\n    // object stream flag. Used to make read(n) ignore n and to\n    // make all the buffer merging and length checks go away\n    this.objectMode = !!options.objectMode;\n\n    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n    // the point at which it stops calling _read() to fill the buffer\n    // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n    var hwm = options.highWaterMark;\n    var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n    // cast to ints.\n    this.highWaterMark = ~ ~this.highWaterMark;\n\n    // A linked list is used to store data chunks instead of an array because the\n    // linked list can remove elements from the beginning faster than\n    // array.shift()\n    this.buffer = new BufferList();\n    this.length = 0;\n    this.pipes = null;\n    this.pipesCount = 0;\n    this.flowing = null;\n    this.ended = false;\n    this.endEmitted = false;\n    this.reading = false;\n\n    // a flag to be able to tell if the onwrite cb is called immediately,\n    // or on a later tick.  We set this to true at first, because any\n    // actions that shouldn't happen until \"later\" should generally also\n    // not happen before the first write call.\n    this.sync = true;\n\n    // whenever we return null, then we set a flag to say\n    // that we're awaiting a 'readable' event emission.\n    this.needReadable = false;\n    this.emittedReadable = false;\n    this.readableListening = false;\n    this.resumeScheduled = false;\n\n    // Crypto is kind of old and crusty.  Historically, its default string\n    // encoding is 'binary' so we have to make this configurable.\n    // Everything else in the universe uses 'utf8', though.\n    this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n    // when piping, we only care about 'readable' events that happen\n    // after read()ing all the bytes and not getting any pushback.\n    this.ranOut = false;\n\n    // the number of writers that are awaiting a drain event in .pipe()s\n    this.awaitDrain = 0;\n\n    // if true, a maybeReadMore has been scheduled\n    this.readingMore = false;\n\n    this.decoder = null;\n    this.encoding = null;\n    if (options.encoding) {\n      this.decoder = new StringDecoder(options.encoding);\n      this.encoding = options.encoding;\n    }\n  }\n  function Readable(options) {\n\n    if (!(this instanceof Readable)) return new Readable(options);\n\n    this._readableState = new ReadableState(options, this);\n\n    // legacy\n    this.readable = true;\n\n    if (options && typeof options.read === 'function') this._read = options.read;\n\n    EventEmitter.call(this);\n  }\n\n  // Manually shove something into the read() buffer.\n  // This returns true if the highWaterMark has not been hit yet,\n  // similar to how Writable.write() returns true if you should\n  // write() some more.\n  Readable.prototype.push = function (chunk, encoding) {\n    var state = this._readableState;\n\n    if (!state.objectMode && typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = _polyfillNode_buffer.Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n    }\n\n    return readableAddChunk(this, state, chunk, encoding, false);\n  };\n\n  // Unshift should *always* be something directly out of read()\n  Readable.prototype.unshift = function (chunk) {\n    var state = this._readableState;\n    return readableAddChunk(this, state, chunk, '', true);\n  };\n\n  Readable.prototype.isPaused = function () {\n    return this._readableState.flowing === false;\n  };\n\n  function readableAddChunk(stream, state, chunk, encoding, addToFront) {\n    var er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (chunk === null) {\n      state.reading = false;\n      onEofChunk(stream, state);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (state.ended && !addToFront) {\n        var e = new Error('stream.push() after EOF');\n        stream.emit('error', e);\n      } else if (state.endEmitted && addToFront) {\n        var _e = new Error('stream.unshift() after end event');\n        stream.emit('error', _e);\n      } else {\n        var skipAdd;\n        if (state.decoder && !addToFront && !encoding) {\n          chunk = state.decoder.write(chunk);\n          skipAdd = !state.objectMode && chunk.length === 0;\n        }\n\n        if (!addToFront) state.reading = false;\n\n        // Don't add to the buffer if we've decoded to an empty string chunk and\n        // we're not in object mode\n        if (!skipAdd) {\n          // if we want the data now, just emit it.\n          if (state.flowing && state.length === 0 && !state.sync) {\n            stream.emit('data', chunk);\n            stream.read(0);\n          } else {\n            // update the buffer info.\n            state.length += state.objectMode ? 1 : chunk.length;\n            if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n            if (state.needReadable) emitReadable(stream);\n          }\n        }\n\n        maybeReadMore(stream, state);\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n\n    return needMoreData(state);\n  }\n\n  // if it's past the high water mark, we can push in some more.\n  // Also, if we have no data yet, we can stand some\n  // more bytes.  This is to work around cases where hwm=0,\n  // such as the repl.  Also, if the push() triggered a\n  // readable event, and the user called read(largeNumber) such that\n  // needReadable was set, then we ought to push more, so that another\n  // 'readable' event will be triggered.\n  function needMoreData(state) {\n    return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n  }\n\n  // backwards compatibility.\n  Readable.prototype.setEncoding = function (enc) {\n    this._readableState.decoder = new StringDecoder(enc);\n    this._readableState.encoding = enc;\n    return this;\n  };\n\n  // Don't raise the hwm > 8MB\n  var MAX_HWM = 0x800000;\n  function computeNewHighWaterMark(n) {\n    if (n >= MAX_HWM) {\n      n = MAX_HWM;\n    } else {\n      // Get the next highest power of 2 to prevent increasing hwm excessively in\n      // tiny amounts\n      n--;\n      n |= n >>> 1;\n      n |= n >>> 2;\n      n |= n >>> 4;\n      n |= n >>> 8;\n      n |= n >>> 16;\n      n++;\n    }\n    return n;\n  }\n\n  // This function is designed to be inlinable, so please take care when making\n  // changes to the function body.\n  function howMuchToRead(n, state) {\n    if (n <= 0 || state.length === 0 && state.ended) return 0;\n    if (state.objectMode) return 1;\n    if (n !== n) {\n      // Only flow one buffer at a time\n      if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n    }\n    // If we're asking for more than the current hwm, then raise the hwm.\n    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n    if (n <= state.length) return n;\n    // Don't have enough\n    if (!state.ended) {\n      state.needReadable = true;\n      return 0;\n    }\n    return state.length;\n  }\n\n  // you can override either this method, or the async _read(n) below.\n  Readable.prototype.read = function (n) {\n    debug('read', n);\n    n = parseInt(n, 10);\n    var state = this._readableState;\n    var nOrig = n;\n\n    if (n !== 0) state.emittedReadable = false;\n\n    // if we're doing read(0) to trigger a readable event, but we\n    // already have a bunch of data in the buffer, then just trigger\n    // the 'readable' event and move on.\n    if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n      debug('read: emitReadable', state.length, state.ended);\n      if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n      return null;\n    }\n\n    n = howMuchToRead(n, state);\n\n    // if we've ended, and we're now clear, then finish it up.\n    if (n === 0 && state.ended) {\n      if (state.length === 0) endReadable(this);\n      return null;\n    }\n\n    // All the actual chunk generation logic needs to be\n    // *below* the call to _read.  The reason is that in certain\n    // synthetic stream cases, such as passthrough streams, _read\n    // may be a completely synchronous operation which may change\n    // the state of the read buffer, providing enough data when\n    // before there was *not* enough.\n    //\n    // So, the steps are:\n    // 1. Figure out what the state of things will be after we do\n    // a read from the buffer.\n    //\n    // 2. If that resulting state will trigger a _read, then call _read.\n    // Note that this may be asynchronous, or synchronous.  Yes, it is\n    // deeply ugly to write APIs this way, but that still doesn't mean\n    // that the Readable class should behave improperly, as streams are\n    // designed to be sync/async agnostic.\n    // Take note if the _read call is sync or async (ie, if the read call\n    // has returned yet), so that we know whether or not it's safe to emit\n    // 'readable' etc.\n    //\n    // 3. Actually pull the requested chunks out of the buffer and return.\n\n    // if we need a readable event, then we need to do some reading.\n    var doRead = state.needReadable;\n    debug('need readable', doRead);\n\n    // if we currently have less than the highWaterMark, then also read some\n    if (state.length === 0 || state.length - n < state.highWaterMark) {\n      doRead = true;\n      debug('length less than watermark', doRead);\n    }\n\n    // however, if we've ended, then there's no point, and if we're already\n    // reading, then it's unnecessary.\n    if (state.ended || state.reading) {\n      doRead = false;\n      debug('reading or ended', doRead);\n    } else if (doRead) {\n      debug('do read');\n      state.reading = true;\n      state.sync = true;\n      // if the length is currently zero, then we *need* a readable event.\n      if (state.length === 0) state.needReadable = true;\n      // call internal read method\n      this._read(state.highWaterMark);\n      state.sync = false;\n      // If _read pushed data synchronously, then `reading` will be false,\n      // and we need to re-evaluate how much data we can return to the user.\n      if (!state.reading) n = howMuchToRead(nOrig, state);\n    }\n\n    var ret;\n    if (n > 0) ret = fromList(n, state);else ret = null;\n\n    if (ret === null) {\n      state.needReadable = true;\n      n = 0;\n    } else {\n      state.length -= n;\n    }\n\n    if (state.length === 0) {\n      // If we have nothing in the buffer, then we want to know\n      // as soon as we *do* get something into the buffer.\n      if (!state.ended) state.needReadable = true;\n\n      // If we tried to read() past the EOF, then emit end on the next tick.\n      if (nOrig !== n && state.ended) endReadable(this);\n    }\n\n    if (ret !== null) this.emit('data', ret);\n\n    return ret;\n  };\n\n  function chunkInvalid(state, chunk) {\n    var er = null;\n    if (!_polyfillNode_buffer.Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {\n      er = new TypeError('Invalid non-string/buffer chunk');\n    }\n    return er;\n  }\n\n  function onEofChunk(stream, state) {\n    if (state.ended) return;\n    if (state.decoder) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) {\n        state.buffer.push(chunk);\n        state.length += state.objectMode ? 1 : chunk.length;\n      }\n    }\n    state.ended = true;\n\n    // emit 'readable' now to make sure it gets picked up.\n    emitReadable(stream);\n  }\n\n  // Don't emit readable right away in sync mode, because this can trigger\n  // another read() call => stack overflow.  This way, it might trigger\n  // a nextTick recursion warning, but that's not so bad.\n  function emitReadable(stream) {\n    var state = stream._readableState;\n    state.needReadable = false;\n    if (!state.emittedReadable) {\n      debug('emitReadable', state.flowing);\n      state.emittedReadable = true;\n      if (state.sync) _polyfillNode_buffer.nextTick(emitReadable_, stream);else emitReadable_(stream);\n    }\n  }\n\n  function emitReadable_(stream) {\n    debug('emit readable');\n    stream.emit('readable');\n    flow(stream);\n  }\n\n  // at this point, the user has presumably seen the 'readable' event,\n  // and called read() to consume some data.  that may have triggered\n  // in turn another _read(n) call, in which case reading = true if\n  // it's in progress.\n  // However, if we're not ended, or reading, and the length < hwm,\n  // then go ahead and try to read some more preemptively.\n  function maybeReadMore(stream, state) {\n    if (!state.readingMore) {\n      state.readingMore = true;\n      _polyfillNode_buffer.nextTick(maybeReadMore_, stream, state);\n    }\n  }\n\n  function maybeReadMore_(stream, state) {\n    var len = state.length;\n    while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n      debug('maybeReadMore read 0');\n      stream.read(0);\n      if (len === state.length)\n        // didn't get any data, stop spinning.\n        break;else len = state.length;\n    }\n    state.readingMore = false;\n  }\n\n  // abstract method.  to be overridden in specific implementation classes.\n  // call cb(er, data) where data is <= n in length.\n  // for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n  // arbitrary, and perhaps not very meaningful.\n  Readable.prototype._read = function (n) {\n    this.emit('error', new Error('not implemented'));\n  };\n\n  Readable.prototype.pipe = function (dest, pipeOpts) {\n    var src = this;\n    var state = this._readableState;\n\n    switch (state.pipesCount) {\n      case 0:\n        state.pipes = dest;\n        break;\n      case 1:\n        state.pipes = [state.pipes, dest];\n        break;\n      default:\n        state.pipes.push(dest);\n        break;\n    }\n    state.pipesCount += 1;\n    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n    var doEnd = (!pipeOpts || pipeOpts.end !== false);\n\n    var endFn = doEnd ? onend : cleanup;\n    if (state.endEmitted) _polyfillNode_buffer.nextTick(endFn);else src.once('end', endFn);\n\n    dest.on('unpipe', onunpipe);\n    function onunpipe(readable) {\n      debug('onunpipe');\n      if (readable === src) {\n        cleanup();\n      }\n    }\n\n    function onend() {\n      debug('onend');\n      dest.end();\n    }\n\n    // when the dest drains, it reduces the awaitDrain counter\n    // on the source.  This would be more elegant with a .once()\n    // handler in flow(), but adding and removing repeatedly is\n    // too slow.\n    var ondrain = pipeOnDrain(src);\n    dest.on('drain', ondrain);\n\n    var cleanedUp = false;\n    function cleanup() {\n      debug('cleanup');\n      // cleanup event handlers once the pipe is broken\n      dest.removeListener('close', onclose);\n      dest.removeListener('finish', onfinish);\n      dest.removeListener('drain', ondrain);\n      dest.removeListener('error', onerror);\n      dest.removeListener('unpipe', onunpipe);\n      src.removeListener('end', onend);\n      src.removeListener('end', cleanup);\n      src.removeListener('data', ondata);\n\n      cleanedUp = true;\n\n      // if the reader is waiting for a drain event from this\n      // specific writer, then it would cause it to never start\n      // flowing again.\n      // So, if this is awaiting a drain, then we just call it now.\n      // If we don't know, then assume that we are waiting for one.\n      if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n    }\n\n    // If the user pushes more data while we're writing to dest then we'll end up\n    // in ondata again. However, we only want to increase awaitDrain once because\n    // dest will only emit one 'drain' event for the multiple writes.\n    // => Introduce a guard on increasing awaitDrain.\n    var increasedAwaitDrain = false;\n    src.on('data', ondata);\n    function ondata(chunk) {\n      debug('ondata');\n      increasedAwaitDrain = false;\n      var ret = dest.write(chunk);\n      if (false === ret && !increasedAwaitDrain) {\n        // If the user unpiped during `dest.write()`, it is possible\n        // to get stuck in a permanently paused state if that write\n        // also returned false.\n        // => Check whether `dest` is still a piping destination.\n        if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n          debug('false write response, pause', src._readableState.awaitDrain);\n          src._readableState.awaitDrain++;\n          increasedAwaitDrain = true;\n        }\n        src.pause();\n      }\n    }\n\n    // if the dest has an error, then stop piping into it.\n    // however, don't suppress the throwing behavior for this.\n    function onerror(er) {\n      debug('onerror', er);\n      unpipe();\n      dest.removeListener('error', onerror);\n      if (listenerCount(dest, 'error') === 0) dest.emit('error', er);\n    }\n\n    // Make sure our error handler is attached before userland ones.\n    prependListener(dest, 'error', onerror);\n\n    // Both close and finish should trigger unpipe, but only once.\n    function onclose() {\n      dest.removeListener('finish', onfinish);\n      unpipe();\n    }\n    dest.once('close', onclose);\n    function onfinish() {\n      debug('onfinish');\n      dest.removeListener('close', onclose);\n      unpipe();\n    }\n    dest.once('finish', onfinish);\n\n    function unpipe() {\n      debug('unpipe');\n      src.unpipe(dest);\n    }\n\n    // tell the dest that it's being piped to\n    dest.emit('pipe', src);\n\n    // start the flow if it hasn't been started already.\n    if (!state.flowing) {\n      debug('pipe resume');\n      src.resume();\n    }\n\n    return dest;\n  };\n\n  function pipeOnDrain(src) {\n    return function () {\n      var state = src._readableState;\n      debug('pipeOnDrain', state.awaitDrain);\n      if (state.awaitDrain) state.awaitDrain--;\n      if (state.awaitDrain === 0 && src.listeners('data').length) {\n        state.flowing = true;\n        flow(src);\n      }\n    };\n  }\n\n  Readable.prototype.unpipe = function (dest) {\n    var state = this._readableState;\n\n    // if we're not piping anywhere, then do nothing.\n    if (state.pipesCount === 0) return this;\n\n    // just one destination.  most common case.\n    if (state.pipesCount === 1) {\n      // passed in one, but it's not the right one.\n      if (dest && dest !== state.pipes) return this;\n\n      if (!dest) dest = state.pipes;\n\n      // got a match.\n      state.pipes = null;\n      state.pipesCount = 0;\n      state.flowing = false;\n      if (dest) dest.emit('unpipe', this);\n      return this;\n    }\n\n    // slow case. multiple pipe destinations.\n\n    if (!dest) {\n      // remove all.\n      var dests = state.pipes;\n      var len = state.pipesCount;\n      state.pipes = null;\n      state.pipesCount = 0;\n      state.flowing = false;\n\n      for (var _i = 0; _i < len; _i++) {\n        dests[_i].emit('unpipe', this);\n      }return this;\n    }\n\n    // try to find the right one.\n    var i = indexOf(state.pipes, dest);\n    if (i === -1) return this;\n\n    state.pipes.splice(i, 1);\n    state.pipesCount -= 1;\n    if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n    dest.emit('unpipe', this);\n\n    return this;\n  };\n\n  // set up data events if they are asked for\n  // Ensure readable listeners eventually get something\n  Readable.prototype.on = function (ev, fn) {\n    var res = EventEmitter.prototype.on.call(this, ev, fn);\n\n    if (ev === 'data') {\n      // Start flowing on next tick if stream isn't explicitly paused\n      if (this._readableState.flowing !== false) this.resume();\n    } else if (ev === 'readable') {\n      var state = this._readableState;\n      if (!state.endEmitted && !state.readableListening) {\n        state.readableListening = state.needReadable = true;\n        state.emittedReadable = false;\n        if (!state.reading) {\n          _polyfillNode_buffer.nextTick(nReadingNextTick, this);\n        } else if (state.length) {\n          emitReadable(this);\n        }\n      }\n    }\n\n    return res;\n  };\n  Readable.prototype.addListener = Readable.prototype.on;\n\n  function nReadingNextTick(self) {\n    debug('readable nexttick read 0');\n    self.read(0);\n  }\n\n  // pause() and resume() are remnants of the legacy readable stream API\n  // If the user uses them, then switch into old mode.\n  Readable.prototype.resume = function () {\n    var state = this._readableState;\n    if (!state.flowing) {\n      debug('resume');\n      state.flowing = true;\n      resume(this, state);\n    }\n    return this;\n  };\n\n  function resume(stream, state) {\n    if (!state.resumeScheduled) {\n      state.resumeScheduled = true;\n      _polyfillNode_buffer.nextTick(resume_, stream, state);\n    }\n  }\n\n  function resume_(stream, state) {\n    if (!state.reading) {\n      debug('resume read 0');\n      stream.read(0);\n    }\n\n    state.resumeScheduled = false;\n    state.awaitDrain = 0;\n    stream.emit('resume');\n    flow(stream);\n    if (state.flowing && !state.reading) stream.read(0);\n  }\n\n  Readable.prototype.pause = function () {\n    debug('call pause flowing=%j', this._readableState.flowing);\n    if (false !== this._readableState.flowing) {\n      debug('pause');\n      this._readableState.flowing = false;\n      this.emit('pause');\n    }\n    return this;\n  };\n\n  function flow(stream) {\n    var state = stream._readableState;\n    debug('flow', state.flowing);\n    while (state.flowing && stream.read() !== null) {}\n  }\n\n  // wrap an old-style stream as the async data source.\n  // This is *not* part of the readable stream interface.\n  // It is an ugly unfortunate mess of history.\n  Readable.prototype.wrap = function (stream) {\n    var state = this._readableState;\n    var paused = false;\n\n    var self = this;\n    stream.on('end', function () {\n      debug('wrapped end');\n      if (state.decoder && !state.ended) {\n        var chunk = state.decoder.end();\n        if (chunk && chunk.length) self.push(chunk);\n      }\n\n      self.push(null);\n    });\n\n    stream.on('data', function (chunk) {\n      debug('wrapped data');\n      if (state.decoder) chunk = state.decoder.write(chunk);\n\n      // don't skip over falsy values in objectMode\n      if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n      var ret = self.push(chunk);\n      if (!ret) {\n        paused = true;\n        stream.pause();\n      }\n    });\n\n    // proxy all the other methods.\n    // important when wrapping filters and duplexes.\n    for (var i in stream) {\n      if (this[i] === undefined && typeof stream[i] === 'function') {\n        this[i] = function (method) {\n          return function () {\n            return stream[method].apply(stream, arguments);\n          };\n        }(i);\n      }\n    }\n\n    // proxy certain important events.\n    var events = ['error', 'close', 'destroy', 'pause', 'resume'];\n    forEach(events, function (ev) {\n      stream.on(ev, self.emit.bind(self, ev));\n    });\n\n    // when we try to consume some more bytes, simply unpause the\n    // underlying stream.\n    self._read = function (n) {\n      debug('wrapped _read', n);\n      if (paused) {\n        paused = false;\n        stream.resume();\n      }\n    };\n\n    return self;\n  };\n\n  // exposed for testing purposes only.\n  Readable._fromList = fromList;\n\n  // Pluck off n bytes from an array of buffers.\n  // Length is the combined lengths of all the buffers in the list.\n  // This function is designed to be inlinable, so please take care when making\n  // changes to the function body.\n  function fromList(n, state) {\n    // nothing buffered\n    if (state.length === 0) return null;\n\n    var ret;\n    if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n      // read it all, truncate the list\n      if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n      state.buffer.clear();\n    } else {\n      // read part of list\n      ret = fromListPartial(n, state.buffer, state.decoder);\n    }\n\n    return ret;\n  }\n\n  // Extracts only enough buffered data to satisfy the amount requested.\n  // This function is designed to be inlinable, so please take care when making\n  // changes to the function body.\n  function fromListPartial(n, list, hasStrings) {\n    var ret;\n    if (n < list.head.data.length) {\n      // slice is the same for buffers and strings\n      ret = list.head.data.slice(0, n);\n      list.head.data = list.head.data.slice(n);\n    } else if (n === list.head.data.length) {\n      // first chunk is a perfect match\n      ret = list.shift();\n    } else {\n      // result spans more than one buffer\n      ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n    }\n    return ret;\n  }\n\n  // Copies a specified amount of characters from the list of buffered data\n  // chunks.\n  // This function is designed to be inlinable, so please take care when making\n  // changes to the function body.\n  function copyFromBufferString(n, list) {\n    var p = list.head;\n    var c = 1;\n    var ret = p.data;\n    n -= ret.length;\n    while (p = p.next) {\n      var str = p.data;\n      var nb = n > str.length ? str.length : n;\n      if (nb === str.length) ret += str;else ret += str.slice(0, n);\n      n -= nb;\n      if (n === 0) {\n        if (nb === str.length) {\n          ++c;\n          if (p.next) list.head = p.next;else list.head = list.tail = null;\n        } else {\n          list.head = p;\n          p.data = str.slice(nb);\n        }\n        break;\n      }\n      ++c;\n    }\n    list.length -= c;\n    return ret;\n  }\n\n  // Copies a specified amount of bytes from the list of buffered data chunks.\n  // This function is designed to be inlinable, so please take care when making\n  // changes to the function body.\n  function copyFromBuffer(n, list) {\n    var ret = _polyfillNode_buffer.Buffer.allocUnsafe(n);\n    var p = list.head;\n    var c = 1;\n    p.data.copy(ret);\n    n -= p.data.length;\n    while (p = p.next) {\n      var buf = p.data;\n      var nb = n > buf.length ? buf.length : n;\n      buf.copy(ret, ret.length - n, 0, nb);\n      n -= nb;\n      if (n === 0) {\n        if (nb === buf.length) {\n          ++c;\n          if (p.next) list.head = p.next;else list.head = list.tail = null;\n        } else {\n          list.head = p;\n          p.data = buf.slice(nb);\n        }\n        break;\n      }\n      ++c;\n    }\n    list.length -= c;\n    return ret;\n  }\n\n  function endReadable(stream) {\n    var state = stream._readableState;\n\n    // If we get here before consuming all the bytes, then that is a\n    // bug in node.  Should never happen.\n    if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n    if (!state.endEmitted) {\n      state.ended = true;\n      _polyfillNode_buffer.nextTick(endReadableNT, state, stream);\n    }\n  }\n\n  function endReadableNT(state, stream) {\n    // Check that we didn't get one last unshift.\n    if (!state.endEmitted && state.length === 0) {\n      state.endEmitted = true;\n      stream.readable = false;\n      stream.emit('end');\n    }\n  }\n\n  function forEach(xs, f) {\n    for (var i = 0, l = xs.length; i < l; i++) {\n      f(xs[i], i);\n    }\n  }\n\n  function indexOf(xs, x) {\n    for (var i = 0, l = xs.length; i < l; i++) {\n      if (xs[i] === x) return i;\n    }\n    return -1;\n  }\n\n  // A bit simpler than readable streams.\n  // Implement an async ._write(chunk, encoding, cb), and it'll handle all\n  // the drain event emission and buffering.\n\n  Writable.WritableState = WritableState;\n  _polyfillNode_util.inherits(Writable, EventEmitter);\n\n  function nop() {}\n\n  function WriteReq(chunk, encoding, cb) {\n    this.chunk = chunk;\n    this.encoding = encoding;\n    this.callback = cb;\n    this.next = null;\n  }\n\n  function WritableState(options, stream) {\n    Object.defineProperty(this, 'buffer', {\n      get: _polyfillNode_util.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')\n    });\n    options = options || {};\n\n    // object stream flag to indicate whether or not this stream\n    // contains buffers or objects.\n    this.objectMode = !!options.objectMode;\n\n    if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n    // the point at which write() starts returning false\n    // Note: 0 is a valid value, means that we always return false if\n    // the entire buffer is not flushed immediately on write()\n    var hwm = options.highWaterMark;\n    var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n    this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;\n\n    // cast to ints.\n    this.highWaterMark = ~ ~this.highWaterMark;\n\n    this.needDrain = false;\n    // at the start of calling end()\n    this.ending = false;\n    // when end() has been called, and returned\n    this.ended = false;\n    // when 'finish' is emitted\n    this.finished = false;\n\n    // should we decode strings into buffers before passing to _write?\n    // this is here so that some node-core streams can optimize string\n    // handling at a lower level.\n    var noDecode = options.decodeStrings === false;\n    this.decodeStrings = !noDecode;\n\n    // Crypto is kind of old and crusty.  Historically, its default string\n    // encoding is 'binary' so we have to make this configurable.\n    // Everything else in the universe uses 'utf8', though.\n    this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n    // not an actual buffer we keep track of, but a measurement\n    // of how much we're waiting to get pushed to some underlying\n    // socket or file.\n    this.length = 0;\n\n    // a flag to see when we're in the middle of a write.\n    this.writing = false;\n\n    // when true all writes will be buffered until .uncork() call\n    this.corked = 0;\n\n    // a flag to be able to tell if the onwrite cb is called immediately,\n    // or on a later tick.  We set this to true at first, because any\n    // actions that shouldn't happen until \"later\" should generally also\n    // not happen before the first write call.\n    this.sync = true;\n\n    // a flag to know if we're processing previously buffered items, which\n    // may call the _write() callback in the same tick, so that we don't\n    // end up in an overlapped onwrite situation.\n    this.bufferProcessing = false;\n\n    // the callback that's passed to _write(chunk,cb)\n    this.onwrite = function (er) {\n      onwrite(stream, er);\n    };\n\n    // the callback that the user supplies to write(chunk,encoding,cb)\n    this.writecb = null;\n\n    // the amount that is being written when _write is called.\n    this.writelen = 0;\n\n    this.bufferedRequest = null;\n    this.lastBufferedRequest = null;\n\n    // number of pending user-supplied write callbacks\n    // this must be 0 before 'finish' can be emitted\n    this.pendingcb = 0;\n\n    // emit prefinish if the only thing we're waiting for is _write cbs\n    // This is relevant for synchronous Transform streams\n    this.prefinished = false;\n\n    // True if the error was already emitted and should not be thrown again\n    this.errorEmitted = false;\n\n    // count buffered requests\n    this.bufferedRequestCount = 0;\n\n    // allocate the first CorkedRequest, there is always\n    // one allocated and free to use, and we maintain at most two\n    this.corkedRequestsFree = new CorkedRequest(this);\n  }\n\n  WritableState.prototype.getBuffer = function writableStateGetBuffer() {\n    var current = this.bufferedRequest;\n    var out = [];\n    while (current) {\n      out.push(current);\n      current = current.next;\n    }\n    return out;\n  };\n  function Writable(options) {\n\n    // Writable ctor is applied to Duplexes, though they're not\n    // instanceof Writable, they're instanceof Readable.\n    if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);\n\n    this._writableState = new WritableState(options, this);\n\n    // legacy.\n    this.writable = true;\n\n    if (options) {\n      if (typeof options.write === 'function') this._write = options.write;\n\n      if (typeof options.writev === 'function') this._writev = options.writev;\n    }\n\n    EventEmitter.call(this);\n  }\n\n  // Otherwise people can pipe Writable streams, which is just wrong.\n  Writable.prototype.pipe = function () {\n    this.emit('error', new Error('Cannot pipe, not readable'));\n  };\n\n  function writeAfterEnd(stream, cb) {\n    var er = new Error('write after end');\n    // TODO: defer error events consistently everywhere, not just the cb\n    stream.emit('error', er);\n    _polyfillNode_buffer.nextTick(cb, er);\n  }\n\n  // If we get something that is not a buffer, string, null, or undefined,\n  // and we're not in objectMode, then that's an error.\n  // Otherwise stream chunks are all considered to be of length=1, and the\n  // watermarks determine how many objects to keep in the buffer, rather than\n  // how many bytes or characters.\n  function validChunk(stream, state, chunk, cb) {\n    var valid = true;\n    var er = false;\n    // Always throw error if a null is written\n    // if we are not in object mode then throw\n    // if it is not a buffer, string, or undefined.\n    if (chunk === null) {\n      er = new TypeError('May not write null values to stream');\n    } else if (!_polyfillNode_buffer.Buffer.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n      er = new TypeError('Invalid non-string/buffer chunk');\n    }\n    if (er) {\n      stream.emit('error', er);\n      _polyfillNode_buffer.nextTick(cb, er);\n      valid = false;\n    }\n    return valid;\n  }\n\n  Writable.prototype.write = function (chunk, encoding, cb) {\n    var state = this._writableState;\n    var ret = false;\n\n    if (typeof encoding === 'function') {\n      cb = encoding;\n      encoding = null;\n    }\n\n    if (_polyfillNode_buffer.Buffer.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n    if (typeof cb !== 'function') cb = nop;\n\n    if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {\n      state.pendingcb++;\n      ret = writeOrBuffer(this, state, chunk, encoding, cb);\n    }\n\n    return ret;\n  };\n\n  Writable.prototype.cork = function () {\n    var state = this._writableState;\n\n    state.corked++;\n  };\n\n  Writable.prototype.uncork = function () {\n    var state = this._writableState;\n\n    if (state.corked) {\n      state.corked--;\n\n      if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n    }\n  };\n\n  Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n    // node::ParseEncoding() requires lower case.\n    if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n    if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n    this._writableState.defaultEncoding = encoding;\n    return this;\n  };\n\n  function decodeChunk(state, chunk, encoding) {\n    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n      chunk = _polyfillNode_buffer.Buffer.from(chunk, encoding);\n    }\n    return chunk;\n  }\n\n  // if we're already writing something, then just put this\n  // in the queue, and wait our turn.  Otherwise, call _write\n  // If we return false, then we need a drain event, so set that flag.\n  function writeOrBuffer(stream, state, chunk, encoding, cb) {\n    chunk = decodeChunk(state, chunk, encoding);\n\n    if (_polyfillNode_buffer.Buffer.isBuffer(chunk)) encoding = 'buffer';\n    var len = state.objectMode ? 1 : chunk.length;\n\n    state.length += len;\n\n    var ret = state.length < state.highWaterMark;\n    // we must ensure that previous needDrain will not be reset to false.\n    if (!ret) state.needDrain = true;\n\n    if (state.writing || state.corked) {\n      var last = state.lastBufferedRequest;\n      state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);\n      if (last) {\n        last.next = state.lastBufferedRequest;\n      } else {\n        state.bufferedRequest = state.lastBufferedRequest;\n      }\n      state.bufferedRequestCount += 1;\n    } else {\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n    }\n\n    return ret;\n  }\n\n  function doWrite(stream, state, writev, len, chunk, encoding, cb) {\n    state.writelen = len;\n    state.writecb = cb;\n    state.writing = true;\n    state.sync = true;\n    if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n    state.sync = false;\n  }\n\n  function onwriteError(stream, state, sync, er, cb) {\n    --state.pendingcb;\n    if (sync) _polyfillNode_buffer.nextTick(cb, er);else cb(er);\n\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  }\n\n  function onwriteStateUpdate(state) {\n    state.writing = false;\n    state.writecb = null;\n    state.length -= state.writelen;\n    state.writelen = 0;\n  }\n\n  function onwrite(stream, er) {\n    var state = stream._writableState;\n    var sync = state.sync;\n    var cb = state.writecb;\n\n    onwriteStateUpdate(state);\n\n    if (er) onwriteError(stream, state, sync, er, cb);else {\n      // Check if we're actually ready to finish, but don't emit yet\n      var finished = needFinish(state);\n\n      if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n        clearBuffer(stream, state);\n      }\n\n      if (sync) {\n        /*<replacement>*/\n          _polyfillNode_buffer.nextTick(afterWrite, stream, state, finished, cb);\n        /*</replacement>*/\n      } else {\n          afterWrite(stream, state, finished, cb);\n        }\n    }\n  }\n\n  function afterWrite(stream, state, finished, cb) {\n    if (!finished) onwriteDrain(stream, state);\n    state.pendingcb--;\n    cb();\n    finishMaybe(stream, state);\n  }\n\n  // Must force callback to be called on nextTick, so that we don't\n  // emit 'drain' before the write() consumer gets the 'false' return\n  // value, and has a chance to attach a 'drain' listener.\n  function onwriteDrain(stream, state) {\n    if (state.length === 0 && state.needDrain) {\n      state.needDrain = false;\n      stream.emit('drain');\n    }\n  }\n\n  // if there's something in the buffer waiting, then process it\n  function clearBuffer(stream, state) {\n    state.bufferProcessing = true;\n    var entry = state.bufferedRequest;\n\n    if (stream._writev && entry && entry.next) {\n      // Fast case, write everything using _writev()\n      var l = state.bufferedRequestCount;\n      var buffer = new Array(l);\n      var holder = state.corkedRequestsFree;\n      holder.entry = entry;\n\n      var count = 0;\n      while (entry) {\n        buffer[count] = entry;\n        entry = entry.next;\n        count += 1;\n      }\n\n      doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n      // doWrite is almost always async, defer these to save a bit of time\n      // as the hot path ends with doWrite\n      state.pendingcb++;\n      state.lastBufferedRequest = null;\n      if (holder.next) {\n        state.corkedRequestsFree = holder.next;\n        holder.next = null;\n      } else {\n        state.corkedRequestsFree = new CorkedRequest(state);\n      }\n    } else {\n      // Slow case, write chunks one-by-one\n      while (entry) {\n        var chunk = entry.chunk;\n        var encoding = entry.encoding;\n        var cb = entry.callback;\n        var len = state.objectMode ? 1 : chunk.length;\n\n        doWrite(stream, state, false, len, chunk, encoding, cb);\n        entry = entry.next;\n        // if we didn't call the onwrite immediately, then\n        // it means that we need to wait until it does.\n        // also, that means that the chunk and cb are currently\n        // being processed, so move the buffer counter past them.\n        if (state.writing) {\n          break;\n        }\n      }\n\n      if (entry === null) state.lastBufferedRequest = null;\n    }\n\n    state.bufferedRequestCount = 0;\n    state.bufferedRequest = entry;\n    state.bufferProcessing = false;\n  }\n\n  Writable.prototype._write = function (chunk, encoding, cb) {\n    cb(new Error('not implemented'));\n  };\n\n  Writable.prototype._writev = null;\n\n  Writable.prototype.end = function (chunk, encoding, cb) {\n    var state = this._writableState;\n\n    if (typeof chunk === 'function') {\n      cb = chunk;\n      chunk = null;\n      encoding = null;\n    } else if (typeof encoding === 'function') {\n      cb = encoding;\n      encoding = null;\n    }\n\n    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n    // .end() fully uncorks\n    if (state.corked) {\n      state.corked = 1;\n      this.uncork();\n    }\n\n    // ignore unnecessary end() calls.\n    if (!state.ending && !state.finished) endWritable(this, state, cb);\n  };\n\n  function needFinish(state) {\n    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n  }\n\n  function prefinish(stream, state) {\n    if (!state.prefinished) {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n\n  function finishMaybe(stream, state) {\n    var need = needFinish(state);\n    if (need) {\n      if (state.pendingcb === 0) {\n        prefinish(stream, state);\n        state.finished = true;\n        stream.emit('finish');\n      } else {\n        prefinish(stream, state);\n      }\n    }\n    return need;\n  }\n\n  function endWritable(stream, state, cb) {\n    state.ending = true;\n    finishMaybe(stream, state);\n    if (cb) {\n      if (state.finished) _polyfillNode_buffer.nextTick(cb);else stream.once('finish', cb);\n    }\n    state.ended = true;\n    stream.writable = false;\n  }\n\n  // It seems a linked list but it is not\n  // there will be only 2 of these for each stream\n  function CorkedRequest(state) {\n    var _this = this;\n\n    this.next = null;\n    this.entry = null;\n\n    this.finish = function (err) {\n      var entry = _this.entry;\n      _this.entry = null;\n      while (entry) {\n        var cb = entry.callback;\n        state.pendingcb--;\n        cb(err);\n        entry = entry.next;\n      }\n      if (state.corkedRequestsFree) {\n        state.corkedRequestsFree.next = _this;\n      } else {\n        state.corkedRequestsFree = _this;\n      }\n    };\n  }\n\n  _polyfillNode_util.inherits(Duplex, Readable);\n\n  var keys = Object.keys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n  function Duplex(options) {\n    if (!(this instanceof Duplex)) return new Duplex(options);\n\n    Readable.call(this, options);\n    Writable.call(this, options);\n\n    if (options && options.readable === false) this.readable = false;\n\n    if (options && options.writable === false) this.writable = false;\n\n    this.allowHalfOpen = true;\n    if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n    this.once('end', onend);\n  }\n\n  // the no-half-open enforcer\n  function onend() {\n    // if we allow half-open state, or if the writable side ended,\n    // then we're ok.\n    if (this.allowHalfOpen || this._writableState.ended) return;\n\n    // no more data can be written.\n    // But allow more writes to happen in this tick.\n    _polyfillNode_buffer.nextTick(onEndNT, this);\n  }\n\n  function onEndNT(self) {\n    self.end();\n  }\n\n  // a transform stream is a readable/writable stream where you do\n  // something with the data.  Sometimes it's called a \"filter\",\n  // but that's not a great name for it, since that implies a thing where\n  // some bits pass through, and others are simply ignored.  (That would\n  // be a valid example of a transform, of course.)\n  //\n  // While the output is causally related to the input, it's not a\n  // necessarily symmetric or synchronous transformation.  For example,\n  // a zlib stream might take multiple plain-text writes(), and then\n  // emit a single compressed chunk some time in the future.\n  //\n  // Here's how this works:\n  //\n  // The Transform stream has all the aspects of the readable and writable\n  // stream classes.  When you write(chunk), that calls _write(chunk,cb)\n  // internally, and returns false if there's a lot of pending writes\n  // buffered up.  When you call read(), that calls _read(n) until\n  // there's enough pending readable data buffered up.\n  //\n  // In a transform stream, the written data is placed in a buffer.  When\n  // _read(n) is called, it transforms the queued up data, calling the\n  // buffered _write cb's as it consumes chunks.  If consuming a single\n  // written chunk would result in multiple output chunks, then the first\n  // outputted bit calls the readcb, and subsequent chunks just go into\n  // the read buffer, and will cause it to emit 'readable' if necessary.\n  //\n  // This way, back-pressure is actually determined by the reading side,\n  // since _read has to be called to start processing a new chunk.  However,\n  // a pathological inflate type of transform can cause excessive buffering\n  // here.  For example, imagine a stream where every byte of input is\n  // interpreted as an integer from 0-255, and then results in that many\n  // bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n  // 1kb of data being output.  In this case, you could write a very small\n  // amount of input, and end up with a very large amount of output.  In\n  // such a pathological inflating mechanism, there'd be no way to tell\n  // the system to stop doing the transform.  A single 4MB write could\n  // cause the system to run out of memory.\n  //\n  // However, even in such a pathological case, only a single written chunk\n  // would be consumed, and then the rest would wait (un-transformed) until\n  // the results of the previous transformed chunk were consumed.\n\n  _polyfillNode_util.inherits(Transform, Duplex);\n\n  function TransformState(stream) {\n    this.afterTransform = function (er, data) {\n      return afterTransform(stream, er, data);\n    };\n\n    this.needTransform = false;\n    this.transforming = false;\n    this.writecb = null;\n    this.writechunk = null;\n    this.writeencoding = null;\n  }\n\n  function afterTransform(stream, er, data) {\n    var ts = stream._transformState;\n    ts.transforming = false;\n\n    var cb = ts.writecb;\n\n    if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));\n\n    ts.writechunk = null;\n    ts.writecb = null;\n\n    if (data !== null && data !== undefined) stream.push(data);\n\n    cb(er);\n\n    var rs = stream._readableState;\n    rs.reading = false;\n    if (rs.needReadable || rs.length < rs.highWaterMark) {\n      stream._read(rs.highWaterMark);\n    }\n  }\n  function Transform(options) {\n    if (!(this instanceof Transform)) return new Transform(options);\n\n    Duplex.call(this, options);\n\n    this._transformState = new TransformState(this);\n\n    // when the writable side finishes, then flush out anything remaining.\n    var stream = this;\n\n    // start out asking for a readable event once data is transformed.\n    this._readableState.needReadable = true;\n\n    // we have implemented the _read method, and done the other things\n    // that Readable wants before the first _read call, so unset the\n    // sync guard flag.\n    this._readableState.sync = false;\n\n    if (options) {\n      if (typeof options.transform === 'function') this._transform = options.transform;\n\n      if (typeof options.flush === 'function') this._flush = options.flush;\n    }\n\n    this.once('prefinish', function () {\n      if (typeof this._flush === 'function') this._flush(function (er) {\n        done(stream, er);\n      });else done(stream);\n    });\n  }\n\n  Transform.prototype.push = function (chunk, encoding) {\n    this._transformState.needTransform = false;\n    return Duplex.prototype.push.call(this, chunk, encoding);\n  };\n\n  // This is the part where you do stuff!\n  // override this function in implementation classes.\n  // 'chunk' is an input chunk.\n  //\n  // Call `push(newChunk)` to pass along transformed output\n  // to the readable side.  You may call 'push' zero or more times.\n  //\n  // Call `cb(err)` when you are done with this chunk.  If you pass\n  // an error, then that'll put the hurt on the whole operation.  If you\n  // never call cb(), then you'll never get another chunk.\n  Transform.prototype._transform = function (chunk, encoding, cb) {\n    throw new Error('Not implemented');\n  };\n\n  Transform.prototype._write = function (chunk, encoding, cb) {\n    var ts = this._transformState;\n    ts.writecb = cb;\n    ts.writechunk = chunk;\n    ts.writeencoding = encoding;\n    if (!ts.transforming) {\n      var rs = this._readableState;\n      if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n    }\n  };\n\n  // Doesn't matter what the args are here.\n  // _transform does all the work.\n  // That we got here means that the readable side wants more data.\n  Transform.prototype._read = function (n) {\n    var ts = this._transformState;\n\n    if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n      ts.transforming = true;\n      this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n    } else {\n      // mark that we need a transform, so that any data that comes in\n      // will get processed, now that we've asked for it.\n      ts.needTransform = true;\n    }\n  };\n\n  function done(stream, er) {\n    if (er) return stream.emit('error', er);\n\n    // if there's nothing in the write buffer, then that means\n    // that nothing more will ever be provided\n    var ws = stream._writableState;\n    var ts = stream._transformState;\n\n    if (ws.length) throw new Error('Calling transform done when ws.length != 0');\n\n    if (ts.transforming) throw new Error('Calling transform done when still transforming');\n\n    return stream.push(null);\n  }\n\n  _polyfillNode_util.inherits(PassThrough, Transform);\n  function PassThrough(options) {\n    if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n    Transform.call(this, options);\n  }\n\n  PassThrough.prototype._transform = function (chunk, encoding, cb) {\n    cb(null, chunk);\n  };\n\n  _polyfillNode_util.inherits(Stream, EventEmitter);\n  Stream.Readable = Readable;\n  Stream.Writable = Writable;\n  Stream.Duplex = Duplex;\n  Stream.Transform = Transform;\n  Stream.PassThrough = PassThrough;\n\n  // Backwards-compat with node 0.4.x\n  Stream.Stream = Stream;\n\n  // old-style streams.  Note that the pipe method (the only relevant\n  // part of this class) is overridden in the Readable class.\n\n  function Stream() {\n    EventEmitter.call(this);\n  }\n\n  Stream.prototype.pipe = function(dest, options) {\n    var source = this;\n\n    function ondata(chunk) {\n      if (dest.writable) {\n        if (false === dest.write(chunk) && source.pause) {\n          source.pause();\n        }\n      }\n    }\n\n    source.on('data', ondata);\n\n    function ondrain() {\n      if (source.readable && source.resume) {\n        source.resume();\n      }\n    }\n\n    dest.on('drain', ondrain);\n\n    // If the 'end' option is not supplied, dest.end() will be called when\n    // source gets the 'end' or 'close' events.  Only dest.end() once.\n    if (!dest._isStdio && (!options || options.end !== false)) {\n      source.on('end', onend);\n      source.on('close', onclose);\n    }\n\n    var didOnEnd = false;\n    function onend() {\n      if (didOnEnd) return;\n      didOnEnd = true;\n\n      dest.end();\n    }\n\n\n    function onclose() {\n      if (didOnEnd) return;\n      didOnEnd = true;\n\n      if (typeof dest.destroy === 'function') dest.destroy();\n    }\n\n    // don't leave dangling pipes when there are errors.\n    function onerror(er) {\n      cleanup();\n      if (EventEmitter.listenerCount(this, 'error') === 0) {\n        throw er; // Unhandled stream error in pipe.\n      }\n    }\n\n    source.on('error', onerror);\n    dest.on('error', onerror);\n\n    // remove all the event listeners that were added.\n    function cleanup() {\n      source.removeListener('data', ondata);\n      dest.removeListener('drain', ondrain);\n\n      source.removeListener('end', onend);\n      source.removeListener('close', onclose);\n\n      source.removeListener('error', onerror);\n      dest.removeListener('error', onerror);\n\n      source.removeListener('end', cleanup);\n      source.removeListener('close', cleanup);\n\n      dest.removeListener('close', cleanup);\n    }\n\n    source.on('end', cleanup);\n    source.on('close', cleanup);\n\n    dest.on('close', cleanup);\n\n    dest.emit('pipe', source);\n\n    // Allow for unix-like usage: A.pipe(B).pipe(C)\n    return dest;\n  };\n\n  var _polyfillNode_stream = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    Duplex: Duplex,\n    PassThrough: PassThrough,\n    Readable: Readable,\n    Stream: Stream,\n    Transform: Transform,\n    Writable: Writable,\n    default: Stream\n  });\n\n  exports.Readable = Readable;\n  exports.Writable = Writable;\n  exports._polyfillNode_stream = _polyfillNode_stream;\n\n}));\n",
      "type": "chunk"
    },
    {
      "name": "node.util",
      "originalName": "node.util",
      "code": "sap.ui.define(['exports', 'com/kmsa/dashboard/resources/node.buffer'], (function (exports, _polyfillNode_buffer) { 'use strict';\n\n  exports.inherits = void 0;\n  if (typeof Object.create === 'function'){\n    exports.inherits = function inherits(ctor, superCtor) {\n      // implementation from standard node.js 'util' module\n      ctor.super_ = superCtor;\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n    };\n  } else {\n    exports.inherits = function inherits(ctor, superCtor) {\n      ctor.super_ = superCtor;\n      var TempCtor = function () {};\n      TempCtor.prototype = superCtor.prototype;\n      ctor.prototype = new TempCtor();\n      ctor.prototype.constructor = ctor;\n    };\n  }\n\n  var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n    function getOwnPropertyDescriptors(obj) {\n      var keys = Object.keys(obj);\n      var descriptors = {};\n      for (var i = 0; i < keys.length; i++) {\n        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n      }\n      return descriptors;\n    };\n\n  var formatRegExp = /%[sdj%]/g;\n  function format(f) {\n    if (!isString(f)) {\n      var objects = [];\n      for (var i = 0; i < arguments.length; i++) {\n        objects.push(inspect(arguments[i]));\n      }\n      return objects.join(' ');\n    }\n\n    var i = 1;\n    var args = arguments;\n    var len = args.length;\n    var str = String(f).replace(formatRegExp, function(x) {\n      if (x === '%%') return '%';\n      if (i >= len) return x;\n      switch (x) {\n        case '%s': return String(args[i++]);\n        case '%d': return Number(args[i++]);\n        case '%j':\n          try {\n            return JSON.stringify(args[i++]);\n          } catch (_) {\n            return '[Circular]';\n          }\n        default:\n          return x;\n      }\n    });\n    for (var x = args[i]; i < len; x = args[++i]) {\n      if (isNull(x) || !isObject(x)) {\n        str += ' ' + x;\n      } else {\n        str += ' ' + inspect(x);\n      }\n    }\n    return str;\n  }\n\n  // Mark that a method should not be used.\n  // Returns a modified function which warns once by default.\n  // If --no-deprecation is set, then it is a no-op.\n  function deprecate(fn, msg) {\n    // Allow for deprecating things in the process of starting up.\n    if (isUndefined(_polyfillNode_buffer.global.process)) {\n      return function() {\n        return deprecate(fn, msg).apply(this, arguments);\n      };\n    }\n\n    if (_polyfillNode_buffer.browser$1.noDeprecation === true) {\n      return fn;\n    }\n\n    var warned = false;\n    function deprecated() {\n      if (!warned) {\n        if (_polyfillNode_buffer.browser$1.throwDeprecation) {\n          throw new Error(msg);\n        } else if (_polyfillNode_buffer.browser$1.traceDeprecation) {\n          console.trace(msg);\n        } else {\n          console.error(msg);\n        }\n        warned = true;\n      }\n      return fn.apply(this, arguments);\n    }\n\n    return deprecated;\n  }\n\n  var debugs = {};\n  var debugEnviron;\n  function debuglog(set) {\n    if (isUndefined(debugEnviron))\n      debugEnviron = _polyfillNode_buffer.browser$1.env.NODE_DEBUG || '';\n    set = set.toUpperCase();\n    if (!debugs[set]) {\n      if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n        var pid = 0;\n        debugs[set] = function() {\n          var msg = format.apply(null, arguments);\n          console.error('%s %d: %s', set, pid, msg);\n        };\n      } else {\n        debugs[set] = function() {};\n      }\n    }\n    return debugs[set];\n  }\n\n  /**\n   * Echos the value of a value. Trys to print the value out\n   * in the best way possible given the different types.\n   *\n   * @param {Object} obj The object to print out.\n   * @param {Object} opts Optional options object that alters the output.\n   */\n  /* legacy: obj, showHidden, depth, colors*/\n  function inspect(obj, opts) {\n    // default options\n    var ctx = {\n      seen: [],\n      stylize: stylizeNoColor\n    };\n    // legacy...\n    if (arguments.length >= 3) ctx.depth = arguments[2];\n    if (arguments.length >= 4) ctx.colors = arguments[3];\n    if (isBoolean(opts)) {\n      // legacy...\n      ctx.showHidden = opts;\n    } else if (opts) {\n      // got an \"options\" object\n      _extend(ctx, opts);\n    }\n    // set default options\n    if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n    if (isUndefined(ctx.depth)) ctx.depth = 2;\n    if (isUndefined(ctx.colors)) ctx.colors = false;\n    if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n    if (ctx.colors) ctx.stylize = stylizeWithColor;\n    return formatValue(ctx, obj, ctx.depth);\n  }\n\n  // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\n  inspect.colors = {\n    'bold' : [1, 22],\n    'italic' : [3, 23],\n    'underline' : [4, 24],\n    'inverse' : [7, 27],\n    'white' : [37, 39],\n    'grey' : [90, 39],\n    'black' : [30, 39],\n    'blue' : [34, 39],\n    'cyan' : [36, 39],\n    'green' : [32, 39],\n    'magenta' : [35, 39],\n    'red' : [31, 39],\n    'yellow' : [33, 39]\n  };\n\n  // Don't use 'blue' not visible on cmd.exe\n  inspect.styles = {\n    'special': 'cyan',\n    'number': 'yellow',\n    'boolean': 'yellow',\n    'undefined': 'grey',\n    'null': 'bold',\n    'string': 'green',\n    'date': 'magenta',\n    // \"name\": intentionally not styling\n    'regexp': 'red'\n  };\n\n\n  function stylizeWithColor(str, styleType) {\n    var style = inspect.styles[styleType];\n\n    if (style) {\n      return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n             '\\u001b[' + inspect.colors[style][1] + 'm';\n    } else {\n      return str;\n    }\n  }\n\n\n  function stylizeNoColor(str, styleType) {\n    return str;\n  }\n\n\n  function arrayToHash(array) {\n    var hash = {};\n\n    array.forEach(function(val, idx) {\n      hash[val] = true;\n    });\n\n    return hash;\n  }\n\n\n  function formatValue(ctx, value, recurseTimes) {\n    // Provide a hook for user-specified inspect functions.\n    // Check that value is an object with an inspect function on it\n    if (ctx.customInspect &&\n        value &&\n        isFunction(value.inspect) &&\n        // Filter out the util module, it's inspect function is special\n        value.inspect !== inspect &&\n        // Also filter out any prototype objects using the circular check.\n        !(value.constructor && value.constructor.prototype === value)) {\n      var ret = value.inspect(recurseTimes, ctx);\n      if (!isString(ret)) {\n        ret = formatValue(ctx, ret, recurseTimes);\n      }\n      return ret;\n    }\n\n    // Primitive types cannot have properties\n    var primitive = formatPrimitive(ctx, value);\n    if (primitive) {\n      return primitive;\n    }\n\n    // Look up the keys of the object.\n    var keys = Object.keys(value);\n    var visibleKeys = arrayToHash(keys);\n\n    if (ctx.showHidden) {\n      keys = Object.getOwnPropertyNames(value);\n    }\n\n    // IE doesn't make error fields non-enumerable\n    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n    if (isError(value)\n        && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n      return formatError(value);\n    }\n\n    // Some type of object without properties can be shortcutted.\n    if (keys.length === 0) {\n      if (isFunction(value)) {\n        var name = value.name ? ': ' + value.name : '';\n        return ctx.stylize('[Function' + name + ']', 'special');\n      }\n      if (isRegExp(value)) {\n        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n      }\n      if (isDate(value)) {\n        return ctx.stylize(Date.prototype.toString.call(value), 'date');\n      }\n      if (isError(value)) {\n        return formatError(value);\n      }\n    }\n\n    var base = '', array = false, braces = ['{', '}'];\n\n    // Make Array say that they are Array\n    if (isArray(value)) {\n      array = true;\n      braces = ['[', ']'];\n    }\n\n    // Make functions say that they are functions\n    if (isFunction(value)) {\n      var n = value.name ? ': ' + value.name : '';\n      base = ' [Function' + n + ']';\n    }\n\n    // Make RegExps say that they are RegExps\n    if (isRegExp(value)) {\n      base = ' ' + RegExp.prototype.toString.call(value);\n    }\n\n    // Make dates with properties first say the date\n    if (isDate(value)) {\n      base = ' ' + Date.prototype.toUTCString.call(value);\n    }\n\n    // Make error with message first say the error\n    if (isError(value)) {\n      base = ' ' + formatError(value);\n    }\n\n    if (keys.length === 0 && (!array || value.length == 0)) {\n      return braces[0] + base + braces[1];\n    }\n\n    if (recurseTimes < 0) {\n      if (isRegExp(value)) {\n        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n      } else {\n        return ctx.stylize('[Object]', 'special');\n      }\n    }\n\n    ctx.seen.push(value);\n\n    var output;\n    if (array) {\n      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n    } else {\n      output = keys.map(function(key) {\n        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n      });\n    }\n\n    ctx.seen.pop();\n\n    return reduceToSingleString(output, base, braces);\n  }\n\n\n  function formatPrimitive(ctx, value) {\n    if (isUndefined(value))\n      return ctx.stylize('undefined', 'undefined');\n    if (isString(value)) {\n      var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                               .replace(/'/g, \"\\\\'\")\n                                               .replace(/\\\\\"/g, '\"') + '\\'';\n      return ctx.stylize(simple, 'string');\n    }\n    if (isNumber(value))\n      return ctx.stylize('' + value, 'number');\n    if (isBoolean(value))\n      return ctx.stylize('' + value, 'boolean');\n    // For some reason typeof null is \"object\", so special case here.\n    if (isNull(value))\n      return ctx.stylize('null', 'null');\n  }\n\n\n  function formatError(value) {\n    return '[' + Error.prototype.toString.call(value) + ']';\n  }\n\n\n  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n    var output = [];\n    for (var i = 0, l = value.length; i < l; ++i) {\n      if (hasOwnProperty(value, String(i))) {\n        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n            String(i), true));\n      } else {\n        output.push('');\n      }\n    }\n    keys.forEach(function(key) {\n      if (!key.match(/^\\d+$/)) {\n        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n            key, true));\n      }\n    });\n    return output;\n  }\n\n\n  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n    var name, str, desc;\n    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n    if (desc.get) {\n      if (desc.set) {\n        str = ctx.stylize('[Getter/Setter]', 'special');\n      } else {\n        str = ctx.stylize('[Getter]', 'special');\n      }\n    } else {\n      if (desc.set) {\n        str = ctx.stylize('[Setter]', 'special');\n      }\n    }\n    if (!hasOwnProperty(visibleKeys, key)) {\n      name = '[' + key + ']';\n    }\n    if (!str) {\n      if (ctx.seen.indexOf(desc.value) < 0) {\n        if (isNull(recurseTimes)) {\n          str = formatValue(ctx, desc.value, null);\n        } else {\n          str = formatValue(ctx, desc.value, recurseTimes - 1);\n        }\n        if (str.indexOf('\\n') > -1) {\n          if (array) {\n            str = str.split('\\n').map(function(line) {\n              return '  ' + line;\n            }).join('\\n').substr(2);\n          } else {\n            str = '\\n' + str.split('\\n').map(function(line) {\n              return '   ' + line;\n            }).join('\\n');\n          }\n        }\n      } else {\n        str = ctx.stylize('[Circular]', 'special');\n      }\n    }\n    if (isUndefined(name)) {\n      if (array && key.match(/^\\d+$/)) {\n        return str;\n      }\n      name = JSON.stringify('' + key);\n      if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n        name = name.substr(1, name.length - 2);\n        name = ctx.stylize(name, 'name');\n      } else {\n        name = name.replace(/'/g, \"\\\\'\")\n                   .replace(/\\\\\"/g, '\"')\n                   .replace(/(^\"|\"$)/g, \"'\");\n        name = ctx.stylize(name, 'string');\n      }\n    }\n\n    return name + ': ' + str;\n  }\n\n\n  function reduceToSingleString(output, base, braces) {\n    var length = output.reduce(function(prev, cur) {\n      if (cur.indexOf('\\n') >= 0) ;\n      return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n    }, 0);\n\n    if (length > 60) {\n      return braces[0] +\n             (base === '' ? '' : base + '\\n ') +\n             ' ' +\n             output.join(',\\n  ') +\n             ' ' +\n             braces[1];\n    }\n\n    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n  }\n\n\n  // NOTE: These type checking functions intentionally don't use `instanceof`\n  // because it is fragile and can be easily faked with `Object.create()`.\n  function isArray(ar) {\n    return Array.isArray(ar);\n  }\n\n  function isBoolean(arg) {\n    return typeof arg === 'boolean';\n  }\n\n  function isNull(arg) {\n    return arg === null;\n  }\n\n  function isNullOrUndefined(arg) {\n    return arg == null;\n  }\n\n  function isNumber(arg) {\n    return typeof arg === 'number';\n  }\n\n  function isString(arg) {\n    return typeof arg === 'string';\n  }\n\n  function isSymbol(arg) {\n    return typeof arg === 'symbol';\n  }\n\n  function isUndefined(arg) {\n    return arg === void 0;\n  }\n\n  function isRegExp(re) {\n    return isObject(re) && objectToString(re) === '[object RegExp]';\n  }\n\n  function isObject(arg) {\n    return typeof arg === 'object' && arg !== null;\n  }\n\n  function isDate(d) {\n    return isObject(d) && objectToString(d) === '[object Date]';\n  }\n\n  function isError(e) {\n    return isObject(e) &&\n        (objectToString(e) === '[object Error]' || e instanceof Error);\n  }\n\n  function isFunction(arg) {\n    return typeof arg === 'function';\n  }\n\n  function isPrimitive(arg) {\n    return arg === null ||\n           typeof arg === 'boolean' ||\n           typeof arg === 'number' ||\n           typeof arg === 'string' ||\n           typeof arg === 'symbol' ||  // ES6 symbol\n           typeof arg === 'undefined';\n  }\n\n  function isBuffer(maybeBuf) {\n    return _polyfillNode_buffer.Buffer.isBuffer(maybeBuf);\n  }\n\n  function objectToString(o) {\n    return Object.prototype.toString.call(o);\n  }\n\n\n  function pad(n) {\n    return n < 10 ? '0' + n.toString(10) : n.toString(10);\n  }\n\n\n  var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n                'Oct', 'Nov', 'Dec'];\n\n  // 26 Feb 16:19:34\n  function timestamp() {\n    var d = new Date();\n    var time = [pad(d.getHours()),\n                pad(d.getMinutes()),\n                pad(d.getSeconds())].join(':');\n    return [d.getDate(), months[d.getMonth()], time].join(' ');\n  }\n\n\n  // log is just a thin wrapper to console.log that prepends a timestamp\n  function log() {\n    console.log('%s - %s', timestamp(), format.apply(null, arguments));\n  }\n\n  function _extend(origin, add) {\n    // Don't do anything if add isn't an object\n    if (!add || !isObject(add)) return origin;\n\n    var keys = Object.keys(add);\n    var i = keys.length;\n    while (i--) {\n      origin[keys[i]] = add[keys[i]];\n    }\n    return origin;\n  }\n  function hasOwnProperty(obj, prop) {\n    return Object.prototype.hasOwnProperty.call(obj, prop);\n  }\n\n  var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\n  function promisify(original) {\n    if (typeof original !== 'function')\n      throw new TypeError('The \"original\" argument must be of type Function');\n\n    if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n      var fn = original[kCustomPromisifiedSymbol];\n      if (typeof fn !== 'function') {\n        throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n      }\n      Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n        value: fn, enumerable: false, writable: false, configurable: true\n      });\n      return fn;\n    }\n\n    function fn() {\n      var promiseResolve, promiseReject;\n      var promise = new Promise(function (resolve, reject) {\n        promiseResolve = resolve;\n        promiseReject = reject;\n      });\n\n      var args = [];\n      for (var i = 0; i < arguments.length; i++) {\n        args.push(arguments[i]);\n      }\n      args.push(function (err, value) {\n        if (err) {\n          promiseReject(err);\n        } else {\n          promiseResolve(value);\n        }\n      });\n\n      try {\n        original.apply(this, args);\n      } catch (err) {\n        promiseReject(err);\n      }\n\n      return promise;\n    }\n\n    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n    if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return Object.defineProperties(\n      fn,\n      getOwnPropertyDescriptors(original)\n    );\n  }\n\n  promisify.custom = kCustomPromisifiedSymbol;\n\n  function callbackifyOnRejected(reason, cb) {\n    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n    // Because `null` is a special error value in callbacks which means \"no error\n    // occurred\", we error-wrap so the callback consumer can distinguish between\n    // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n    if (!reason) {\n      var newReason = new Error('Promise was rejected with a falsy value');\n      newReason.reason = reason;\n      reason = newReason;\n    }\n    return cb(reason);\n  }\n\n  function callbackify(original) {\n    if (typeof original !== 'function') {\n      throw new TypeError('The \"original\" argument must be of type Function');\n    }\n\n    // We DO NOT return the promise as it gives the user a false sense that\n    // the promise is actually somehow related to the callback's execution\n    // and that the callback throwing will reject the promise.\n    function callbackified() {\n      var args = [];\n      for (var i = 0; i < arguments.length; i++) {\n        args.push(arguments[i]);\n      }\n\n      var maybeCb = args.pop();\n      if (typeof maybeCb !== 'function') {\n        throw new TypeError('The last argument must be of type Function');\n      }\n      var self = this;\n      var cb = function() {\n        return maybeCb.apply(self, arguments);\n      };\n      // In true node style we process the callback on `nextTick` with all the\n      // implications (stack, `uncaughtException`, `async_hooks`)\n      original.apply(this, args)\n        .then(function(ret) { _polyfillNode_buffer.browser$1.nextTick(cb.bind(null, null, ret)); },\n          function(rej) { _polyfillNode_buffer.browser$1.nextTick(callbackifyOnRejected.bind(null, rej, cb)); });\n    }\n\n    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n    Object.defineProperties(callbackified, getOwnPropertyDescriptors(original));\n    return callbackified;\n  }\n\n  var _polyfillNode_util = {\n    inherits: exports.inherits,\n    _extend: _extend,\n    log: log,\n    isBuffer: isBuffer,\n    isPrimitive: isPrimitive,\n    isFunction: isFunction,\n    isError: isError,\n    isDate: isDate,\n    isObject: isObject,\n    isRegExp: isRegExp,\n    isUndefined: isUndefined,\n    isSymbol: isSymbol,\n    isString: isString,\n    isNumber: isNumber,\n    isNullOrUndefined: isNullOrUndefined,\n    isNull: isNull,\n    isBoolean: isBoolean,\n    isArray: isArray,\n    inspect: inspect,\n    deprecate: deprecate,\n    format: format,\n    debuglog: debuglog,\n    promisify: promisify,\n    callbackify: callbackify,\n  };\n\n  var _polyfillNode_util$1 = /*#__PURE__*/Object.freeze({\n    __proto__: null,\n    _extend: _extend,\n    callbackify: callbackify,\n    debuglog: debuglog,\n    default: _polyfillNode_util,\n    deprecate: deprecate,\n    format: format,\n    inherits: exports.inherits,\n    inspect: inspect,\n    isArray: isArray,\n    isBoolean: isBoolean,\n    isBuffer: isBuffer,\n    isDate: isDate,\n    isError: isError,\n    isFunction: isFunction,\n    isNull: isNull,\n    isNullOrUndefined: isNullOrUndefined,\n    isNumber: isNumber,\n    isObject: isObject,\n    isPrimitive: isPrimitive,\n    isRegExp: isRegExp,\n    isString: isString,\n    isSymbol: isSymbol,\n    isUndefined: isUndefined,\n    log: log,\n    promisify: promisify\n  });\n\n  exports._polyfillNode_util = _polyfillNode_util$1;\n  exports.debuglog = debuglog;\n  exports.deprecate = deprecate;\n  exports.isNull = isNull;\n  exports.isNullOrUndefined = isNullOrUndefined;\n  exports.isObject = isObject;\n  exports.isString = isString;\n\n}));\n",
      "type": "chunk"
    },
    {
      "name": "request",
      "originalName": "request",
      "code": "sap.ui.define(['exports', 'com/kmsa/dashboard/resources/node.buffer', 'com/kmsa/dashboard/resources/node.util', 'com/kmsa/dashboard/resources/node.stream'], (function (exports, _polyfillNode_buffer, _polyfillNode_util, _polyfillNode_stream) { 'use strict';\n\n  var hasFetch = isFunction(_polyfillNode_buffer.global.fetch) && isFunction(_polyfillNode_buffer.global.ReadableStream);\n\n  var _blobConstructor;\n  function blobConstructor() {\n    if (typeof _blobConstructor !== 'undefined') {\n      return _blobConstructor;\n    }\n    try {\n      new _polyfillNode_buffer.global.Blob([new ArrayBuffer(1)]);\n      _blobConstructor = true;\n    } catch (e) {\n      _blobConstructor = false;\n    }\n    return _blobConstructor\n  }\n  var xhr;\n\n  function checkTypeSupport(type) {\n    if (!xhr) {\n      xhr = new _polyfillNode_buffer.global.XMLHttpRequest();\n      // If location.host is empty, e.g. if this page/worker was loaded\n      // from a Blob, then use example.com to avoid an error\n      xhr.open('GET', _polyfillNode_buffer.global.location.host ? '/' : 'https://example.com');\n    }\n    try {\n      xhr.responseType = type;\n      return xhr.responseType === type\n    } catch (e) {\n      return false\n    }\n\n  }\n\n  // For some strange reason, Safari 7.0 reports typeof global.ArrayBuffer === 'object'.\n  // Safari 7.1 appears to have fixed this bug.\n  var haveArrayBuffer = typeof _polyfillNode_buffer.global.ArrayBuffer !== 'undefined';\n  var haveSlice = haveArrayBuffer && isFunction(_polyfillNode_buffer.global.ArrayBuffer.prototype.slice);\n\n  var arraybuffer = haveArrayBuffer && checkTypeSupport('arraybuffer');\n    // These next two tests unavoidably show warnings in Chrome. Since fetch will always\n    // be used if it's available, just return false for these to avoid the warnings.\n  var msstream = !hasFetch && haveSlice && checkTypeSupport('ms-stream');\n  var mozchunkedarraybuffer = !hasFetch && haveArrayBuffer &&\n    checkTypeSupport('moz-chunked-arraybuffer');\n  var overrideMimeType = isFunction(xhr.overrideMimeType);\n  var vbArray = isFunction(_polyfillNode_buffer.global.VBArray);\n\n  function isFunction(value) {\n    return typeof value === 'function'\n  }\n\n  xhr = null; // Help gc\n\n  var rStates = {\n    UNSENT: 0,\n    OPENED: 1,\n    HEADERS_RECEIVED: 2,\n    LOADING: 3,\n    DONE: 4\n  };\n  function IncomingMessage(xhr, response, mode) {\n    var self = this;\n    _polyfillNode_stream.Readable.call(self);\n\n    self._mode = mode;\n    self.headers = {};\n    self.rawHeaders = [];\n    self.trailers = {};\n    self.rawTrailers = [];\n\n    // Fake the 'close' event, but only once 'end' fires\n    self.on('end', function() {\n      // The nextTick is necessary to prevent the 'request' module from causing an infinite loop\n      _polyfillNode_buffer.browser$1.nextTick(function() {\n        self.emit('close');\n      });\n    });\n    var read;\n    if (mode === 'fetch') {\n      self._fetchResponse = response;\n\n      self.url = response.url;\n      self.statusCode = response.status;\n      self.statusMessage = response.statusText;\n        // backwards compatible version of for (<item> of <iterable>):\n        // for (var <item>,_i,_it = <iterable>[Symbol.iterator](); <item> = (_i = _it.next()).value,!_i.done;)\n      for (var header, _i, _it = response.headers[Symbol.iterator](); header = (_i = _it.next()).value, !_i.done;) {\n        self.headers[header[0].toLowerCase()] = header[1];\n        self.rawHeaders.push(header[0], header[1]);\n      }\n\n      // TODO: this doesn't respect backpressure. Once WritableStream is available, this can be fixed\n      var reader = response.body.getReader();\n\n      read = function () {\n        reader.read().then(function(result) {\n          if (self._destroyed)\n            return\n          if (result.done) {\n            self.push(null);\n            return\n          }\n          self.push(new _polyfillNode_buffer.Buffer(result.value));\n          read();\n        });\n      };\n      read();\n\n    } else {\n      self._xhr = xhr;\n      self._pos = 0;\n\n      self.url = xhr.responseURL;\n      self.statusCode = xhr.status;\n      self.statusMessage = xhr.statusText;\n      var headers = xhr.getAllResponseHeaders().split(/\\r?\\n/);\n      headers.forEach(function(header) {\n        var matches = header.match(/^([^:]+):\\s*(.*)/);\n        if (matches) {\n          var key = matches[1].toLowerCase();\n          if (key === 'set-cookie') {\n            if (self.headers[key] === undefined) {\n              self.headers[key] = [];\n            }\n            self.headers[key].push(matches[2]);\n          } else if (self.headers[key] !== undefined) {\n            self.headers[key] += ', ' + matches[2];\n          } else {\n            self.headers[key] = matches[2];\n          }\n          self.rawHeaders.push(matches[1], matches[2]);\n        }\n      });\n\n      self._charset = 'x-user-defined';\n      if (!overrideMimeType) {\n        var mimeType = self.rawHeaders['mime-type'];\n        if (mimeType) {\n          var charsetMatch = mimeType.match(/;\\s*charset=([^;])(;|$)/);\n          if (charsetMatch) {\n            self._charset = charsetMatch[1].toLowerCase();\n          }\n        }\n        if (!self._charset)\n          self._charset = 'utf-8'; // best guess\n      }\n    }\n  }\n\n  _polyfillNode_util.inherits(IncomingMessage, _polyfillNode_stream.Readable);\n\n  IncomingMessage.prototype._read = function() {};\n\n  IncomingMessage.prototype._onXHRProgress = function() {\n    var self = this;\n\n    var xhr = self._xhr;\n\n    var response = null;\n    switch (self._mode) {\n    case 'text:vbarray': // For IE9\n      if (xhr.readyState !== rStates.DONE)\n        break\n      try {\n        // This fails in IE8\n        response = new _polyfillNode_buffer.global.VBArray(xhr.responseBody).toArray();\n      } catch (e) {\n        // pass\n      }\n      if (response !== null) {\n        self.push(new _polyfillNode_buffer.Buffer(response));\n        break\n      }\n      // Falls through in IE8\n    case 'text':\n      try { // This will fail when readyState = 3 in IE9. Switch mode and wait for readyState = 4\n        response = xhr.responseText;\n      } catch (e) {\n        self._mode = 'text:vbarray';\n        break\n      }\n      if (response.length > self._pos) {\n        var newData = response.substr(self._pos);\n        if (self._charset === 'x-user-defined') {\n          var buffer = new _polyfillNode_buffer.Buffer(newData.length);\n          for (var i = 0; i < newData.length; i++)\n            buffer[i] = newData.charCodeAt(i) & 0xff;\n\n          self.push(buffer);\n        } else {\n          self.push(newData, self._charset);\n        }\n        self._pos = response.length;\n      }\n      break\n    case 'arraybuffer':\n      if (xhr.readyState !== rStates.DONE || !xhr.response)\n        break\n      response = xhr.response;\n      self.push(new _polyfillNode_buffer.Buffer(new Uint8Array(response)));\n      break\n    case 'moz-chunked-arraybuffer': // take whole\n      response = xhr.response;\n      if (xhr.readyState !== rStates.LOADING || !response)\n        break\n      self.push(new _polyfillNode_buffer.Buffer(new Uint8Array(response)));\n      break\n    case 'ms-stream':\n      response = xhr.response;\n      if (xhr.readyState !== rStates.LOADING)\n        break\n      var reader = new _polyfillNode_buffer.global.MSStreamReader();\n      reader.onprogress = function() {\n        if (reader.result.byteLength > self._pos) {\n          self.push(new _polyfillNode_buffer.Buffer(new Uint8Array(reader.result.slice(self._pos))));\n          self._pos = reader.result.byteLength;\n        }\n      };\n      reader.onload = function() {\n        self.push(null);\n      };\n        // reader.onerror = ??? // TODO: this\n      reader.readAsArrayBuffer(response);\n      break\n    }\n\n    // The ms-stream case handles end separately in reader.onload()\n    if (self._xhr.readyState === rStates.DONE && self._mode !== 'ms-stream') {\n      self.push(null);\n    }\n  };\n\n  // from https://github.com/jhiesey/to-arraybuffer/blob/6502d9850e70ba7935a7df4ad86b358fc216f9f0/index.js\n\n  function toArrayBuffer (buf) {\n    // If the buffer is backed by a Uint8Array, a faster version will work\n    if (buf instanceof Uint8Array) {\n      // If the buffer isn't a subarray, return the underlying ArrayBuffer\n      if (buf.byteOffset === 0 && buf.byteLength === buf.buffer.byteLength) {\n        return buf.buffer\n      } else if (typeof buf.buffer.slice === 'function') {\n        // Otherwise we need to get a proper copy\n        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength)\n      }\n    }\n\n    if (_polyfillNode_buffer.isBuffer(buf)) {\n      // This is the slow version that will work with any Buffer\n      // implementation (even in old browsers)\n      var arrayCopy = new Uint8Array(buf.length);\n      var len = buf.length;\n      for (var i = 0; i < len; i++) {\n        arrayCopy[i] = buf[i];\n      }\n      return arrayCopy.buffer\n    } else {\n      throw new Error('Argument must be a Buffer')\n    }\n  }\n\n  function decideMode(preferBinary, useFetch) {\n    if (hasFetch && useFetch) {\n      return 'fetch'\n    } else if (mozchunkedarraybuffer) {\n      return 'moz-chunked-arraybuffer'\n    } else if (msstream) {\n      return 'ms-stream'\n    } else if (arraybuffer && preferBinary) {\n      return 'arraybuffer'\n    } else if (vbArray && preferBinary) {\n      return 'text:vbarray'\n    } else {\n      return 'text'\n    }\n  }\n\n  function ClientRequest(opts) {\n    var self = this;\n    _polyfillNode_stream.Writable.call(self);\n\n    self._opts = opts;\n    self._body = [];\n    self._headers = {};\n    if (opts.auth)\n      self.setHeader('Authorization', 'Basic ' + new _polyfillNode_buffer.Buffer(opts.auth).toString('base64'));\n    Object.keys(opts.headers).forEach(function(name) {\n      self.setHeader(name, opts.headers[name]);\n    });\n\n    var preferBinary;\n    var useFetch = true;\n    if (opts.mode === 'disable-fetch') {\n      // If the use of XHR should be preferred and includes preserving the 'content-type' header\n      useFetch = false;\n      preferBinary = true;\n    } else if (opts.mode === 'prefer-streaming') {\n      // If streaming is a high priority but binary compatibility and\n      // the accuracy of the 'content-type' header aren't\n      preferBinary = false;\n    } else if (opts.mode === 'allow-wrong-content-type') {\n      // If streaming is more important than preserving the 'content-type' header\n      preferBinary = !overrideMimeType;\n    } else if (!opts.mode || opts.mode === 'default' || opts.mode === 'prefer-fast') {\n      // Use binary if text streaming may corrupt data or the content-type header, or for speed\n      preferBinary = true;\n    } else {\n      throw new Error('Invalid value for opts.mode')\n    }\n    self._mode = decideMode(preferBinary, useFetch);\n\n    self.on('finish', function() {\n      self._onFinish();\n    });\n  }\n\n  _polyfillNode_util.inherits(ClientRequest, _polyfillNode_stream.Writable);\n  // Taken from http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader%28%29-method\n  var unsafeHeaders = [\n    'accept-charset',\n    'accept-encoding',\n    'access-control-request-headers',\n    'access-control-request-method',\n    'connection',\n    'content-length',\n    'cookie',\n    'cookie2',\n    'date',\n    'dnt',\n    'expect',\n    'host',\n    'keep-alive',\n    'origin',\n    'referer',\n    'te',\n    'trailer',\n    'transfer-encoding',\n    'upgrade',\n    'user-agent',\n    'via'\n  ];\n  ClientRequest.prototype.setHeader = function(name, value) {\n    var self = this;\n    var lowerName = name.toLowerCase();\n      // This check is not necessary, but it prevents warnings from browsers about setting unsafe\n      // headers. To be honest I'm not entirely sure hiding these warnings is a good thing, but\n      // http-browserify did it, so I will too.\n    if (unsafeHeaders.indexOf(lowerName) !== -1)\n      return\n\n    self._headers[lowerName] = {\n      name: name,\n      value: value\n    };\n  };\n\n  ClientRequest.prototype.getHeader = function(name) {\n    var self = this;\n    return self._headers[name.toLowerCase()].value\n  };\n\n  ClientRequest.prototype.removeHeader = function(name) {\n    var self = this;\n    delete self._headers[name.toLowerCase()];\n  };\n\n  ClientRequest.prototype._onFinish = function() {\n    var self = this;\n\n    if (self._destroyed)\n      return\n    var opts = self._opts;\n\n    var headersObj = self._headers;\n    var body;\n    if (opts.method === 'POST' || opts.method === 'PUT' || opts.method === 'PATCH') {\n      if (blobConstructor()) {\n        body = new _polyfillNode_buffer.global.Blob(self._body.map(function(buffer) {\n          return toArrayBuffer(buffer)\n        }), {\n          type: (headersObj['content-type'] || {}).value || ''\n        });\n      } else {\n        // get utf8 string\n        body = _polyfillNode_buffer.Buffer.concat(self._body).toString();\n      }\n    }\n\n    if (self._mode === 'fetch') {\n      var headers = Object.keys(headersObj).map(function(name) {\n        return [headersObj[name].name, headersObj[name].value]\n      });\n\n      _polyfillNode_buffer.global.fetch(self._opts.url, {\n        method: self._opts.method,\n        headers: headers,\n        body: body,\n        mode: 'cors',\n        credentials: opts.withCredentials ? 'include' : 'same-origin'\n      }).then(function(response) {\n        self._fetchResponse = response;\n        self._connect();\n      }, function(reason) {\n        self.emit('error', reason);\n      });\n    } else {\n      var xhr = self._xhr = new _polyfillNode_buffer.global.XMLHttpRequest();\n      try {\n        xhr.open(self._opts.method, self._opts.url, true);\n      } catch (err) {\n        _polyfillNode_buffer.browser$1.nextTick(function() {\n          self.emit('error', err);\n        });\n        return\n      }\n\n      // Can't set responseType on really old browsers\n      if ('responseType' in xhr)\n        xhr.responseType = self._mode.split(':')[0];\n\n      if ('withCredentials' in xhr)\n        xhr.withCredentials = !!opts.withCredentials;\n\n      if (self._mode === 'text' && 'overrideMimeType' in xhr)\n        xhr.overrideMimeType('text/plain; charset=x-user-defined');\n\n      Object.keys(headersObj).forEach(function(name) {\n        xhr.setRequestHeader(headersObj[name].name, headersObj[name].value);\n      });\n\n      self._response = null;\n      xhr.onreadystatechange = function() {\n        switch (xhr.readyState) {\n        case rStates.LOADING:\n        case rStates.DONE:\n          self._onXHRProgress();\n          break\n        }\n      };\n        // Necessary for streaming in Firefox, since xhr.response is ONLY defined\n        // in onprogress, not in onreadystatechange with xhr.readyState = 3\n      if (self._mode === 'moz-chunked-arraybuffer') {\n        xhr.onprogress = function() {\n          self._onXHRProgress();\n        };\n      }\n\n      xhr.onerror = function() {\n        if (self._destroyed)\n          return\n        self.emit('error', new Error('XHR error'));\n      };\n\n      try {\n        xhr.send(body);\n      } catch (err) {\n        _polyfillNode_buffer.browser$1.nextTick(function() {\n          self.emit('error', err);\n        });\n        return\n      }\n    }\n  };\n\n  /**\n   * Checks if xhr.status is readable and non-zero, indicating no error.\n   * Even though the spec says it should be available in readyState 3,\n   * accessing it throws an exception in IE8\n   */\n  function statusValid(xhr) {\n    try {\n      var status = xhr.status;\n      return (status !== null && status !== 0)\n    } catch (e) {\n      return false\n    }\n  }\n\n  ClientRequest.prototype._onXHRProgress = function() {\n    var self = this;\n\n    if (!statusValid(self._xhr) || self._destroyed)\n      return\n\n    if (!self._response)\n      self._connect();\n\n    self._response._onXHRProgress();\n  };\n\n  ClientRequest.prototype._connect = function() {\n    var self = this;\n\n    if (self._destroyed)\n      return\n\n    self._response = new IncomingMessage(self._xhr, self._fetchResponse, self._mode);\n    self.emit('response', self._response);\n  };\n\n  ClientRequest.prototype._write = function(chunk, encoding, cb) {\n    var self = this;\n\n    self._body.push(chunk);\n    cb();\n  };\n\n  ClientRequest.prototype.abort = ClientRequest.prototype.destroy = function() {\n    var self = this;\n    self._destroyed = true;\n    if (self._response)\n      self._response._destroyed = true;\n    if (self._xhr)\n      self._xhr.abort();\n      // Currently, there isn't a way to truly abort a fetch.\n      // If you like bikeshedding, see https://github.com/whatwg/fetch/issues/27\n  };\n\n  ClientRequest.prototype.end = function(data, encoding, cb) {\n    var self = this;\n    if (typeof data === 'function') {\n      cb = data;\n      data = undefined;\n    }\n\n    _polyfillNode_stream.Writable.prototype.end.call(self, data, encoding, cb);\n  };\n\n  ClientRequest.prototype.flushHeaders = function() {};\n  ClientRequest.prototype.setTimeout = function() {};\n  ClientRequest.prototype.setNoDelay = function() {};\n  ClientRequest.prototype.setSocketKeepAlive = function() {};\n\n  exports.ClientRequest = ClientRequest;\n\n}));\n",
      "type": "chunk"
    }
  ]
}